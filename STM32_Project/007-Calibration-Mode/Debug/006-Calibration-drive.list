
006-Calibration-drive.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007df0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000454  08007f80  08007f80  00017f80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080083d4  080083d4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  080083d4  080083d4  000183d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080083dc  080083dc  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080083dc  080083dc  000183dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080083e0  080083e0  000183e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080083e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f0  200001dc  080085c0  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002cc  080085c0  000202cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f428  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b3f  00000000  00000000  0002f634  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fd8  00000000  00000000  00032178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e80  00000000  00000000  00033150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025211  00000000  00000000  00033fd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010c1e  00000000  00000000  000591e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d8f8c  00000000  00000000  00069dff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00142d8b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000051e0  00000000  00000000  00142ddc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007f68 	.word	0x08007f68

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08007f68 	.word	0x08007f68

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b974 	b.w	8000ee8 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468e      	mov	lr, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14d      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4694      	mov	ip, r2
 8000c2a:	d969      	bls.n	8000d00 <__udivmoddi4+0xe8>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b152      	cbz	r2, 8000c48 <__udivmoddi4+0x30>
 8000c32:	fa01 f302 	lsl.w	r3, r1, r2
 8000c36:	f1c2 0120 	rsb	r1, r2, #32
 8000c3a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c3e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c42:	ea41 0e03 	orr.w	lr, r1, r3
 8000c46:	4094      	lsls	r4, r2
 8000c48:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c4c:	0c21      	lsrs	r1, r4, #16
 8000c4e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c52:	fa1f f78c 	uxth.w	r7, ip
 8000c56:	fb08 e316 	mls	r3, r8, r6, lr
 8000c5a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c5e:	fb06 f107 	mul.w	r1, r6, r7
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6e:	f080 811f 	bcs.w	8000eb0 <__udivmoddi4+0x298>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 811c 	bls.w	8000eb0 <__udivmoddi4+0x298>
 8000c78:	3e02      	subs	r6, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a5b      	subs	r3, r3, r1
 8000c7e:	b2a4      	uxth	r4, r4
 8000c80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c84:	fb08 3310 	mls	r3, r8, r0, r3
 8000c88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c8c:	fb00 f707 	mul.w	r7, r0, r7
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	d90a      	bls.n	8000caa <__udivmoddi4+0x92>
 8000c94:	eb1c 0404 	adds.w	r4, ip, r4
 8000c98:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c9c:	f080 810a 	bcs.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	f240 8107 	bls.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca6:	4464      	add	r4, ip
 8000ca8:	3802      	subs	r0, #2
 8000caa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cae:	1be4      	subs	r4, r4, r7
 8000cb0:	2600      	movs	r6, #0
 8000cb2:	b11d      	cbz	r5, 8000cbc <__udivmoddi4+0xa4>
 8000cb4:	40d4      	lsrs	r4, r2
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0xc2>
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	f000 80ef 	beq.w	8000eaa <__udivmoddi4+0x292>
 8000ccc:	2600      	movs	r6, #0
 8000cce:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	4631      	mov	r1, r6
 8000cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cda:	fab3 f683 	clz	r6, r3
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	d14a      	bne.n	8000d78 <__udivmoddi4+0x160>
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xd4>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 80f9 	bhi.w	8000ede <__udivmoddi4+0x2c6>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb61 0303 	sbc.w	r3, r1, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	469e      	mov	lr, r3
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e0      	beq.n	8000cbc <__udivmoddi4+0xa4>
 8000cfa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cfe:	e7dd      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000d00:	b902      	cbnz	r2, 8000d04 <__udivmoddi4+0xec>
 8000d02:	deff      	udf	#255	; 0xff
 8000d04:	fab2 f282 	clz	r2, r2
 8000d08:	2a00      	cmp	r2, #0
 8000d0a:	f040 8092 	bne.w	8000e32 <__udivmoddi4+0x21a>
 8000d0e:	eba1 010c 	sub.w	r1, r1, ip
 8000d12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d16:	fa1f fe8c 	uxth.w	lr, ip
 8000d1a:	2601      	movs	r6, #1
 8000d1c:	0c20      	lsrs	r0, r4, #16
 8000d1e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d22:	fb07 1113 	mls	r1, r7, r3, r1
 8000d26:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d2a:	fb0e f003 	mul.w	r0, lr, r3
 8000d2e:	4288      	cmp	r0, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x12c>
 8000d32:	eb1c 0101 	adds.w	r1, ip, r1
 8000d36:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x12a>
 8000d3c:	4288      	cmp	r0, r1
 8000d3e:	f200 80cb 	bhi.w	8000ed8 <__udivmoddi4+0x2c0>
 8000d42:	4643      	mov	r3, r8
 8000d44:	1a09      	subs	r1, r1, r0
 8000d46:	b2a4      	uxth	r4, r4
 8000d48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d4c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d50:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d54:	fb0e fe00 	mul.w	lr, lr, r0
 8000d58:	45a6      	cmp	lr, r4
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x156>
 8000d5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d64:	d202      	bcs.n	8000d6c <__udivmoddi4+0x154>
 8000d66:	45a6      	cmp	lr, r4
 8000d68:	f200 80bb 	bhi.w	8000ee2 <__udivmoddi4+0x2ca>
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	eba4 040e 	sub.w	r4, r4, lr
 8000d72:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d76:	e79c      	b.n	8000cb2 <__udivmoddi4+0x9a>
 8000d78:	f1c6 0720 	rsb	r7, r6, #32
 8000d7c:	40b3      	lsls	r3, r6
 8000d7e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d82:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d86:	fa20 f407 	lsr.w	r4, r0, r7
 8000d8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d8e:	431c      	orrs	r4, r3
 8000d90:	40f9      	lsrs	r1, r7
 8000d92:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d96:	fa00 f306 	lsl.w	r3, r0, r6
 8000d9a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d9e:	0c20      	lsrs	r0, r4, #16
 8000da0:	fa1f fe8c 	uxth.w	lr, ip
 8000da4:	fb09 1118 	mls	r1, r9, r8, r1
 8000da8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dac:	fb08 f00e 	mul.w	r0, r8, lr
 8000db0:	4288      	cmp	r0, r1
 8000db2:	fa02 f206 	lsl.w	r2, r2, r6
 8000db6:	d90b      	bls.n	8000dd0 <__udivmoddi4+0x1b8>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc0:	f080 8088 	bcs.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dc4:	4288      	cmp	r0, r1
 8000dc6:	f240 8085 	bls.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dca:	f1a8 0802 	sub.w	r8, r8, #2
 8000dce:	4461      	add	r1, ip
 8000dd0:	1a09      	subs	r1, r1, r0
 8000dd2:	b2a4      	uxth	r4, r4
 8000dd4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dd8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ddc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000de0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de4:	458e      	cmp	lr, r1
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x1e2>
 8000de8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dec:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df0:	d26c      	bcs.n	8000ecc <__udivmoddi4+0x2b4>
 8000df2:	458e      	cmp	lr, r1
 8000df4:	d96a      	bls.n	8000ecc <__udivmoddi4+0x2b4>
 8000df6:	3802      	subs	r0, #2
 8000df8:	4461      	add	r1, ip
 8000dfa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dfe:	fba0 9402 	umull	r9, r4, r0, r2
 8000e02:	eba1 010e 	sub.w	r1, r1, lr
 8000e06:	42a1      	cmp	r1, r4
 8000e08:	46c8      	mov	r8, r9
 8000e0a:	46a6      	mov	lr, r4
 8000e0c:	d356      	bcc.n	8000ebc <__udivmoddi4+0x2a4>
 8000e0e:	d053      	beq.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e10:	b15d      	cbz	r5, 8000e2a <__udivmoddi4+0x212>
 8000e12:	ebb3 0208 	subs.w	r2, r3, r8
 8000e16:	eb61 010e 	sbc.w	r1, r1, lr
 8000e1a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e1e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e22:	40f1      	lsrs	r1, r6
 8000e24:	431f      	orrs	r7, r3
 8000e26:	e9c5 7100 	strd	r7, r1, [r5]
 8000e2a:	2600      	movs	r6, #0
 8000e2c:	4631      	mov	r1, r6
 8000e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e32:	f1c2 0320 	rsb	r3, r2, #32
 8000e36:	40d8      	lsrs	r0, r3
 8000e38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e3c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e40:	4091      	lsls	r1, r2
 8000e42:	4301      	orrs	r1, r0
 8000e44:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e48:	fa1f fe8c 	uxth.w	lr, ip
 8000e4c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e50:	fb07 3610 	mls	r6, r7, r0, r3
 8000e54:	0c0b      	lsrs	r3, r1, #16
 8000e56:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e5a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e5e:	429e      	cmp	r6, r3
 8000e60:	fa04 f402 	lsl.w	r4, r4, r2
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x260>
 8000e66:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e6e:	d22f      	bcs.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e70:	429e      	cmp	r6, r3
 8000e72:	d92d      	bls.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e74:	3802      	subs	r0, #2
 8000e76:	4463      	add	r3, ip
 8000e78:	1b9b      	subs	r3, r3, r6
 8000e7a:	b289      	uxth	r1, r1
 8000e7c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e80:	fb07 3316 	mls	r3, r7, r6, r3
 8000e84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e88:	fb06 f30e 	mul.w	r3, r6, lr
 8000e8c:	428b      	cmp	r3, r1
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x28a>
 8000e90:	eb1c 0101 	adds.w	r1, ip, r1
 8000e94:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e98:	d216      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d914      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9e:	3e02      	subs	r6, #2
 8000ea0:	4461      	add	r1, ip
 8000ea2:	1ac9      	subs	r1, r1, r3
 8000ea4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ea8:	e738      	b.n	8000d1c <__udivmoddi4+0x104>
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e705      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e3      	b.n	8000c7c <__udivmoddi4+0x64>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6f8      	b.n	8000caa <__udivmoddi4+0x92>
 8000eb8:	454b      	cmp	r3, r9
 8000eba:	d2a9      	bcs.n	8000e10 <__udivmoddi4+0x1f8>
 8000ebc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7a3      	b.n	8000e10 <__udivmoddi4+0x1f8>
 8000ec8:	4646      	mov	r6, r8
 8000eca:	e7ea      	b.n	8000ea2 <__udivmoddi4+0x28a>
 8000ecc:	4620      	mov	r0, r4
 8000ece:	e794      	b.n	8000dfa <__udivmoddi4+0x1e2>
 8000ed0:	4640      	mov	r0, r8
 8000ed2:	e7d1      	b.n	8000e78 <__udivmoddi4+0x260>
 8000ed4:	46d0      	mov	r8, sl
 8000ed6:	e77b      	b.n	8000dd0 <__udivmoddi4+0x1b8>
 8000ed8:	3b02      	subs	r3, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	e732      	b.n	8000d44 <__udivmoddi4+0x12c>
 8000ede:	4630      	mov	r0, r6
 8000ee0:	e709      	b.n	8000cf6 <__udivmoddi4+0xde>
 8000ee2:	4464      	add	r4, ip
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	e742      	b.n	8000d6e <__udivmoddi4+0x156>

08000ee8 <__aeabi_idiv0>:
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop

08000eec <iBus_Check_CHKSUM>:
#include"FS-iA10B.h"

FSiA10B_iBus iBus;

unsigned char iBus_Check_CHKSUM(unsigned char* data, unsigned char len)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b085      	sub	sp, #20
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
 8000ef4:	460b      	mov	r3, r1
 8000ef6:	70fb      	strb	r3, [r7, #3]
	unsigned short chksum = 0xffff;
 8000ef8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000efc:	81fb      	strh	r3, [r7, #14]
	for (int i=0; i<len-2;i++)
 8000efe:	2300      	movs	r3, #0
 8000f00:	60bb      	str	r3, [r7, #8]
 8000f02:	e00a      	b.n	8000f1a <iBus_Check_CHKSUM+0x2e>
	{
		chksum = chksum - data[i];
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	687a      	ldr	r2, [r7, #4]
 8000f08:	4413      	add	r3, r2
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	b29b      	uxth	r3, r3
 8000f0e:	89fa      	ldrh	r2, [r7, #14]
 8000f10:	1ad3      	subs	r3, r2, r3
 8000f12:	81fb      	strh	r3, [r7, #14]
	for (int i=0; i<len-2;i++)
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	3301      	adds	r3, #1
 8000f18:	60bb      	str	r3, [r7, #8]
 8000f1a:	78fb      	ldrb	r3, [r7, #3]
 8000f1c:	3b02      	subs	r3, #2
 8000f1e:	68ba      	ldr	r2, [r7, #8]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	dbef      	blt.n	8000f04 <iBus_Check_CHKSUM+0x18>
	}

	return ((chksum&0x00ff)==data[30]) && ((chksum>>8) == data[31]);
 8000f24:	89fb      	ldrh	r3, [r7, #14]
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	687a      	ldr	r2, [r7, #4]
 8000f2a:	321e      	adds	r2, #30
 8000f2c:	7812      	ldrb	r2, [r2, #0]
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d10a      	bne.n	8000f48 <iBus_Check_CHKSUM+0x5c>
 8000f32:	89fb      	ldrh	r3, [r7, #14]
 8000f34:	0a1b      	lsrs	r3, r3, #8
 8000f36:	b29a      	uxth	r2, r3
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	331f      	adds	r3, #31
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	b29b      	uxth	r3, r3
 8000f40:	429a      	cmp	r2, r3
 8000f42:	d101      	bne.n	8000f48 <iBus_Check_CHKSUM+0x5c>
 8000f44:	2301      	movs	r3, #1
 8000f46:	e000      	b.n	8000f4a <iBus_Check_CHKSUM+0x5e>
 8000f48:	2300      	movs	r3, #0
 8000f4a:	b2db      	uxtb	r3, r3

};
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	3714      	adds	r7, #20
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr

08000f58 <iBus_Parsing>:

void iBus_Parsing(unsigned char* data, FSiA10B_iBus* iBus)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	6039      	str	r1, [r7, #0]
	iBus->RH =(data[2] | data[3] << 8) & 0x0fff;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	3302      	adds	r3, #2
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	b21a      	sxth	r2, r3
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	3303      	adds	r3, #3
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	021b      	lsls	r3, r3, #8
 8000f72:	b21b      	sxth	r3, r3
 8000f74:	4313      	orrs	r3, r2
 8000f76:	b21b      	sxth	r3, r3
 8000f78:	b29b      	uxth	r3, r3
 8000f7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f7e:	b29a      	uxth	r2, r3
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	801a      	strh	r2, [r3, #0]
	iBus->RV =(data[4] | data[5] << 8) & 0x0fff;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	3304      	adds	r3, #4
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	b21a      	sxth	r2, r3
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	3305      	adds	r3, #5
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	021b      	lsls	r3, r3, #8
 8000f94:	b21b      	sxth	r3, r3
 8000f96:	4313      	orrs	r3, r2
 8000f98:	b21b      	sxth	r3, r3
 8000f9a:	b29b      	uxth	r3, r3
 8000f9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000fa0:	b29a      	uxth	r2, r3
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	805a      	strh	r2, [r3, #2]
	iBus->LV =(data[6] | data[7] << 8) & 0x0fff;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	3306      	adds	r3, #6
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	b21a      	sxth	r2, r3
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	3307      	adds	r3, #7
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	021b      	lsls	r3, r3, #8
 8000fb6:	b21b      	sxth	r3, r3
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	b21b      	sxth	r3, r3
 8000fbc:	b29b      	uxth	r3, r3
 8000fbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000fc2:	b29a      	uxth	r2, r3
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	809a      	strh	r2, [r3, #4]
	iBus->LH =(data[8] | data[9] << 8) & 0x0fff;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	3308      	adds	r3, #8
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	b21a      	sxth	r2, r3
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	3309      	adds	r3, #9
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	021b      	lsls	r3, r3, #8
 8000fd8:	b21b      	sxth	r3, r3
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	b21b      	sxth	r3, r3
 8000fde:	b29b      	uxth	r3, r3
 8000fe0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000fe4:	b29a      	uxth	r2, r3
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	80da      	strh	r2, [r3, #6]
	iBus->SwA =(data[10] | data[11] << 8) & 0x0fff;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	330a      	adds	r3, #10
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	b21a      	sxth	r2, r3
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	330b      	adds	r3, #11
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	021b      	lsls	r3, r3, #8
 8000ffa:	b21b      	sxth	r3, r3
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	b21b      	sxth	r3, r3
 8001000:	b29b      	uxth	r3, r3
 8001002:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001006:	b29a      	uxth	r2, r3
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	811a      	strh	r2, [r3, #8]
	iBus->SwC =(data[12] | data[13] << 8) & 0x0fff;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	330c      	adds	r3, #12
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	b21a      	sxth	r2, r3
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	330d      	adds	r3, #13
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	021b      	lsls	r3, r3, #8
 800101c:	b21b      	sxth	r3, r3
 800101e:	4313      	orrs	r3, r2
 8001020:	b21b      	sxth	r3, r3
 8001022:	b29b      	uxth	r3, r3
 8001024:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001028:	b29a      	uxth	r2, r3
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	819a      	strh	r2, [r3, #12]

	iBus->SwD =(data[14] | data[15] << 8) & 0x0fff;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	330e      	adds	r3, #14
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	b21a      	sxth	r2, r3
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	330f      	adds	r3, #15
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	021b      	lsls	r3, r3, #8
 800103e:	b21b      	sxth	r3, r3
 8001040:	4313      	orrs	r3, r2
 8001042:	b21b      	sxth	r3, r3
 8001044:	b29b      	uxth	r3, r3
 8001046:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800104a:	b29a      	uxth	r2, r3
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	81da      	strh	r2, [r3, #14]
	iBus->SwB =(data[16] | data[17] << 8) & 0x0fff;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	3310      	adds	r3, #16
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	b21a      	sxth	r2, r3
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	3311      	adds	r3, #17
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	021b      	lsls	r3, r3, #8
 8001060:	b21b      	sxth	r3, r3
 8001062:	4313      	orrs	r3, r2
 8001064:	b21b      	sxth	r3, r3
 8001066:	b29b      	uxth	r3, r3
 8001068:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800106c:	b29a      	uxth	r2, r3
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	815a      	strh	r2, [r3, #10]
	iBus->VrA =(data[18] | data[19] << 8) & 0x0fff;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	3312      	adds	r3, #18
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	b21a      	sxth	r2, r3
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	3313      	adds	r3, #19
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	021b      	lsls	r3, r3, #8
 8001082:	b21b      	sxth	r3, r3
 8001084:	4313      	orrs	r3, r2
 8001086:	b21b      	sxth	r3, r3
 8001088:	b29b      	uxth	r3, r3
 800108a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800108e:	b29a      	uxth	r2, r3
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	821a      	strh	r2, [r3, #16]
	iBus->VrB =(data[20] | data[21] << 8) & 0x0fff;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	3314      	adds	r3, #20
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	b21a      	sxth	r2, r3
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	3315      	adds	r3, #21
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	021b      	lsls	r3, r3, #8
 80010a4:	b21b      	sxth	r3, r3
 80010a6:	4313      	orrs	r3, r2
 80010a8:	b21b      	sxth	r3, r3
 80010aa:	b29b      	uxth	r3, r3
 80010ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80010b0:	b29a      	uxth	r2, r3
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	825a      	strh	r2, [r3, #18]


	iBus->FailSafe =iBus->SwD == 1500;
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	89db      	ldrh	r3, [r3, #14]
 80010ba:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80010be:	4293      	cmp	r3, r2
 80010c0:	bf0c      	ite	eq
 80010c2:	2301      	moveq	r3, #1
 80010c4:	2300      	movne	r3, #0
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	461a      	mov	r2, r3
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	f883 2020 	strb.w	r2, [r3, #32]





}
 80010d0:	bf00      	nop
 80010d2:	370c      	adds	r7, #12
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr

080010dc <iBus_isActiveFailSafe>:

unsigned char iBus_isActiveFailSafe(FSiA10B_iBus* iBus)
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
	return iBus->FailSafe !=0;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	bf14      	ite	ne
 80010ee:	2301      	movne	r3, #1
 80010f0:	2300      	moveq	r3, #0
 80010f2:	b2db      	uxtb	r3, r3

}
 80010f4:	4618      	mov	r0, r3
 80010f6:	370c      	adds	r7, #12
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr

08001100 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001104:	4b04      	ldr	r3, [pc, #16]	; (8001118 <__NVIC_GetPriorityGrouping+0x18>)
 8001106:	68db      	ldr	r3, [r3, #12]
 8001108:	0a1b      	lsrs	r3, r3, #8
 800110a:	f003 0307 	and.w	r3, r3, #7
}
 800110e:	4618      	mov	r0, r3
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr
 8001118:	e000ed00 	.word	0xe000ed00

0800111c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	4603      	mov	r3, r0
 8001124:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112a:	2b00      	cmp	r3, #0
 800112c:	db0b      	blt.n	8001146 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800112e:	79fb      	ldrb	r3, [r7, #7]
 8001130:	f003 021f 	and.w	r2, r3, #31
 8001134:	4907      	ldr	r1, [pc, #28]	; (8001154 <__NVIC_EnableIRQ+0x38>)
 8001136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113a:	095b      	lsrs	r3, r3, #5
 800113c:	2001      	movs	r0, #1
 800113e:	fa00 f202 	lsl.w	r2, r0, r2
 8001142:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001146:	bf00      	nop
 8001148:	370c      	adds	r7, #12
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	e000e100 	.word	0xe000e100

08001158 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	6039      	str	r1, [r7, #0]
 8001162:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001164:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001168:	2b00      	cmp	r3, #0
 800116a:	db0a      	blt.n	8001182 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	b2da      	uxtb	r2, r3
 8001170:	490c      	ldr	r1, [pc, #48]	; (80011a4 <__NVIC_SetPriority+0x4c>)
 8001172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001176:	0112      	lsls	r2, r2, #4
 8001178:	b2d2      	uxtb	r2, r2
 800117a:	440b      	add	r3, r1
 800117c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001180:	e00a      	b.n	8001198 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	b2da      	uxtb	r2, r3
 8001186:	4908      	ldr	r1, [pc, #32]	; (80011a8 <__NVIC_SetPriority+0x50>)
 8001188:	79fb      	ldrb	r3, [r7, #7]
 800118a:	f003 030f 	and.w	r3, r3, #15
 800118e:	3b04      	subs	r3, #4
 8001190:	0112      	lsls	r2, r2, #4
 8001192:	b2d2      	uxtb	r2, r2
 8001194:	440b      	add	r3, r1
 8001196:	761a      	strb	r2, [r3, #24]
}
 8001198:	bf00      	nop
 800119a:	370c      	adds	r7, #12
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr
 80011a4:	e000e100 	.word	0xe000e100
 80011a8:	e000ed00 	.word	0xe000ed00

080011ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b089      	sub	sp, #36	; 0x24
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	60f8      	str	r0, [r7, #12]
 80011b4:	60b9      	str	r1, [r7, #8]
 80011b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	f003 0307 	and.w	r3, r3, #7
 80011be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	f1c3 0307 	rsb	r3, r3, #7
 80011c6:	2b04      	cmp	r3, #4
 80011c8:	bf28      	it	cs
 80011ca:	2304      	movcs	r3, #4
 80011cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	3304      	adds	r3, #4
 80011d2:	2b06      	cmp	r3, #6
 80011d4:	d902      	bls.n	80011dc <NVIC_EncodePriority+0x30>
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	3b03      	subs	r3, #3
 80011da:	e000      	b.n	80011de <NVIC_EncodePriority+0x32>
 80011dc:	2300      	movs	r3, #0
 80011de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e0:	f04f 32ff 	mov.w	r2, #4294967295
 80011e4:	69bb      	ldr	r3, [r7, #24]
 80011e6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ea:	43da      	mvns	r2, r3
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	401a      	ands	r2, r3
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011f4:	f04f 31ff 	mov.w	r1, #4294967295
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	fa01 f303 	lsl.w	r3, r1, r3
 80011fe:	43d9      	mvns	r1, r3
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001204:	4313      	orrs	r3, r2
         );
}
 8001206:	4618      	mov	r0, r3
 8001208:	3724      	adds	r7, #36	; 0x24
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr

08001212 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8001212:	b480      	push	{r7}
 8001214:	b083      	sub	sp, #12
 8001216:	af00      	add	r7, sp, #0
 8001218:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	68db      	ldr	r3, [r3, #12]
 800121e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	60da      	str	r2, [r3, #12]
}
 8001226:	bf00      	nop
 8001228:	370c      	adds	r7, #12
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr

08001232 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8001232:	b480      	push	{r7}
 8001234:	b083      	sub	sp, #12
 8001236:	af00      	add	r7, sp, #0
 8001238:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	691b      	ldr	r3, [r3, #16]
 800123e:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	695b      	ldr	r3, [r3, #20]
 800124a:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	615a      	str	r2, [r3, #20]
}
 8001252:	bf00      	nop
 8001254:	370c      	adds	r7, #12
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr

0800125e <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 800125e:	b480      	push	{r7}
 8001260:	b083      	sub	sp, #12
 8001262:	af00      	add	r7, sp, #0
 8001264:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800126e:	2b80      	cmp	r3, #128	; 0x80
 8001270:	bf0c      	ite	eq
 8001272:	2301      	moveq	r3, #1
 8001274:	2300      	movne	r3, #0
 8001276:	b2db      	uxtb	r3, r3
}
 8001278:	4618      	mov	r0, r3
 800127a:	370c      	adds	r7, #12
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr

08001284 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	460b      	mov	r3, r1
 800128e:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8001290:	78fa      	ldrb	r2, [r7, #3]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	605a      	str	r2, [r3, #4]
}
 8001296:	bf00      	nop
 8001298:	370c      	adds	r7, #12
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
	...

080012a4 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b085      	sub	sp, #20
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80012ac:	4b08      	ldr	r3, [pc, #32]	; (80012d0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80012ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012b0:	4907      	ldr	r1, [pc, #28]	; (80012d0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80012b8:	4b05      	ldr	r3, [pc, #20]	; (80012d0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80012ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	4013      	ands	r3, r2
 80012c0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80012c2:	68fb      	ldr	r3, [r7, #12]
}
 80012c4:	bf00      	nop
 80012c6:	3714      	adds	r7, #20
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr
 80012d0:	40023800 	.word	0x40023800

080012d4 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b085      	sub	sp, #20
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80012dc:	4b08      	ldr	r3, [pc, #32]	; (8001300 <LL_APB1_GRP1_EnableClock+0x2c>)
 80012de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012e0:	4907      	ldr	r1, [pc, #28]	; (8001300 <LL_APB1_GRP1_EnableClock+0x2c>)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80012e8:	4b05      	ldr	r3, [pc, #20]	; (8001300 <LL_APB1_GRP1_EnableClock+0x2c>)
 80012ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	4013      	ands	r3, r2
 80012f0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80012f2:	68fb      	ldr	r3, [r7, #12]
}
 80012f4:	bf00      	nop
 80012f6:	3714      	adds	r7, #20
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr
 8001300:	40023800 	.word	0x40023800

08001304 <M8N_TransimiData>:
0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x17,0x31,
0xBF
};

void M8N_TransimiData(unsigned char* data, unsigned char len)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	460b      	mov	r3, r1
 800130e:	70fb      	strb	r3, [r7, #3]
for(int i=0;i<len;i++)
 8001310:	2300      	movs	r3, #0
 8001312:	60fb      	str	r3, [r7, #12]
 8001314:	e011      	b.n	800133a <M8N_TransimiData+0x36>
{
while(!LL_USART_IsActiveFlag_TXE(UART4));
 8001316:	bf00      	nop
 8001318:	480c      	ldr	r0, [pc, #48]	; (800134c <M8N_TransimiData+0x48>)
 800131a:	f7ff ffa0 	bl	800125e <LL_USART_IsActiveFlag_TXE>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d0f9      	beq.n	8001318 <M8N_TransimiData+0x14>
LL_USART_TransmitData8(UART4, *(data+i));
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	687a      	ldr	r2, [r7, #4]
 8001328:	4413      	add	r3, r2
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	4619      	mov	r1, r3
 800132e:	4807      	ldr	r0, [pc, #28]	; (800134c <M8N_TransimiData+0x48>)
 8001330:	f7ff ffa8 	bl	8001284 <LL_USART_TransmitData8>
for(int i=0;i<len;i++)
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	3301      	adds	r3, #1
 8001338:	60fb      	str	r3, [r7, #12]
 800133a:	78fb      	ldrb	r3, [r7, #3]
 800133c:	68fa      	ldr	r2, [r7, #12]
 800133e:	429a      	cmp	r2, r3
 8001340:	dbe9      	blt.n	8001316 <M8N_TransimiData+0x12>
}
}
 8001342:	bf00      	nop
 8001344:	bf00      	nop
 8001346:	3710      	adds	r7, #16
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	40004c00 	.word	0x40004c00

08001350 <M8N_UART4_Initialization>:

void M8N_UART4_Initialization(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b08e      	sub	sp, #56	; 0x38
 8001354:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001356:	f107 031c 	add.w	r3, r7, #28
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	605a      	str	r2, [r3, #4]
 8001360:	609a      	str	r2, [r3, #8]
 8001362:	60da      	str	r2, [r3, #12]
 8001364:	611a      	str	r2, [r3, #16]
 8001366:	615a      	str	r2, [r3, #20]
 8001368:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800136a:	1d3b      	adds	r3, r7, #4
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	605a      	str	r2, [r3, #4]
 8001372:	609a      	str	r2, [r3, #8]
 8001374:	60da      	str	r2, [r3, #12]
 8001376:	611a      	str	r2, [r3, #16]
 8001378:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART4);
 800137a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800137e:	f7ff ffa9 	bl	80012d4 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001382:	2004      	movs	r0, #4
 8001384:	f7ff ff8e 	bl	80012a4 <LL_AHB1_GRP1_EnableClock>
  /**UART4 GPIO Configuration
  PC10   ------> UART4_TX
  PC11   ------> UART4_RX
  */
  GPIO_InitStruct.Pin = GPS_UART4_TX_Pin|GPS_UART4_RX_Pin;
 8001388:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800138c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800138e:	2302      	movs	r3, #2
 8001390:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001392:	2303      	movs	r3, #3
 8001394:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001396:	2300      	movs	r3, #0
 8001398:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800139a:	2301      	movs	r3, #1
 800139c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 800139e:	2308      	movs	r3, #8
 80013a0:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013a2:	1d3b      	adds	r3, r7, #4
 80013a4:	4619      	mov	r1, r3
 80013a6:	4819      	ldr	r0, [pc, #100]	; (800140c <M8N_UART4_Initialization+0xbc>)
 80013a8:	f003 f90f 	bl	80045ca <LL_GPIO_Init>

  /* UART4 interrupt Init */
  NVIC_SetPriority(UART4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80013ac:	f7ff fea8 	bl	8001100 <__NVIC_GetPriorityGrouping>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2200      	movs	r2, #0
 80013b4:	2100      	movs	r1, #0
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff fef8 	bl	80011ac <NVIC_EncodePriority>
 80013bc:	4603      	mov	r3, r0
 80013be:	4619      	mov	r1, r3
 80013c0:	2034      	movs	r0, #52	; 0x34
 80013c2:	f7ff fec9 	bl	8001158 <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART4_IRQn);
 80013c6:	2034      	movs	r0, #52	; 0x34
 80013c8:	f7ff fea8 	bl	800111c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  USART_InitStruct.BaudRate = 9600;
 80013cc:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80013d0:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80013d2:	2300      	movs	r3, #0
 80013d4:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80013d6:	2300      	movs	r3, #0
 80013d8:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80013da:	2300      	movs	r3, #0
 80013dc:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80013de:	230c      	movs	r3, #12
 80013e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80013e2:	2300      	movs	r3, #0
 80013e4:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80013e6:	2300      	movs	r3, #0
 80013e8:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(UART4, &USART_InitStruct);
 80013ea:	f107 031c 	add.w	r3, r7, #28
 80013ee:	4619      	mov	r1, r3
 80013f0:	4807      	ldr	r0, [pc, #28]	; (8001410 <M8N_UART4_Initialization+0xc0>)
 80013f2:	f003 ffef 	bl	80053d4 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART4);
 80013f6:	4806      	ldr	r0, [pc, #24]	; (8001410 <M8N_UART4_Initialization+0xc0>)
 80013f8:	f7ff ff1b 	bl	8001232 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART4);
 80013fc:	4804      	ldr	r0, [pc, #16]	; (8001410 <M8N_UART4_Initialization+0xc0>)
 80013fe:	f7ff ff08 	bl	8001212 <LL_USART_Enable>
}
 8001402:	bf00      	nop
 8001404:	3738      	adds	r7, #56	; 0x38
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	40020800 	.word	0x40020800
 8001410:	40004c00 	.word	0x40004c00

08001414 <M8N_Initialization>:

void M8N_Initialization(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
M8N_UART4_Initialization();
 8001418:	f7ff ff9a 	bl	8001350 <M8N_UART4_Initialization>

M8N_TransimiData(&UBX_CFG_PRT[0],sizeof(UBX_CFG_PRT));
 800141c:	211c      	movs	r1, #28
 800141e:	480d      	ldr	r0, [pc, #52]	; (8001454 <M8N_Initialization+0x40>)
 8001420:	f7ff ff70 	bl	8001304 <M8N_TransimiData>
HAL_Delay(100);
 8001424:	2064      	movs	r0, #100	; 0x64
 8001426:	f001 fb29 	bl	8002a7c <HAL_Delay>
M8N_TransimiData(&UBX_CFG_MSG[0],sizeof(UBX_CFG_MSG));
 800142a:	2110      	movs	r1, #16
 800142c:	480a      	ldr	r0, [pc, #40]	; (8001458 <M8N_Initialization+0x44>)
 800142e:	f7ff ff69 	bl	8001304 <M8N_TransimiData>
HAL_Delay(100);
 8001432:	2064      	movs	r0, #100	; 0x64
 8001434:	f001 fb22 	bl	8002a7c <HAL_Delay>
M8N_TransimiData(&UBX_CFG_RATE[0],sizeof(UBX_CFG_RATE));
 8001438:	210e      	movs	r1, #14
 800143a:	4808      	ldr	r0, [pc, #32]	; (800145c <M8N_Initialization+0x48>)
 800143c:	f7ff ff62 	bl	8001304 <M8N_TransimiData>
HAL_Delay(100);
 8001440:	2064      	movs	r0, #100	; 0x64
 8001442:	f001 fb1b 	bl	8002a7c <HAL_Delay>
M8N_TransimiData(&UBX_CFG_CFG[0],sizeof(UBX_CFG_CFG));
 8001446:	2115      	movs	r1, #21
 8001448:	4805      	ldr	r0, [pc, #20]	; (8001460 <M8N_Initialization+0x4c>)
 800144a:	f7ff ff5b 	bl	8001304 <M8N_TransimiData>
}
 800144e:	bf00      	nop
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	08007f80 	.word	0x08007f80
 8001458:	08007f9c 	.word	0x08007f9c
 800145c:	08007fac 	.word	0x08007fac
 8001460:	08007fbc 	.word	0x08007fbc

08001464 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	041a      	lsls	r2, r3, #16
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	619a      	str	r2, [r3, #24]
}
 8001476:	bf00      	nop
 8001478:	370c      	adds	r7, #12
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
	...

08001484 <LL_AHB1_GRP1_EnableClock>:
{
 8001484:	b480      	push	{r7}
 8001486:	b085      	sub	sp, #20
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800148c:	4b08      	ldr	r3, [pc, #32]	; (80014b0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800148e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001490:	4907      	ldr	r1, [pc, #28]	; (80014b0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4313      	orrs	r3, r2
 8001496:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001498:	4b05      	ldr	r3, [pc, #20]	; (80014b0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800149a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	4013      	ands	r3, r2
 80014a0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80014a2:	68fb      	ldr	r3, [r7, #12]
}
 80014a4:	bf00      	nop
 80014a6:	3714      	adds	r7, #20
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr
 80014b0:	40023800 	.word	0x40023800

080014b4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b086      	sub	sp, #24
 80014b8:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ba:	463b      	mov	r3, r7
 80014bc:	2200      	movs	r2, #0
 80014be:	601a      	str	r2, [r3, #0]
 80014c0:	605a      	str	r2, [r3, #4]
 80014c2:	609a      	str	r2, [r3, #8]
 80014c4:	60da      	str	r2, [r3, #12]
 80014c6:	611a      	str	r2, [r3, #16]
 80014c8:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 80014ca:	2080      	movs	r0, #128	; 0x80
 80014cc:	f7ff ffda 	bl	8001484 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80014d0:	2001      	movs	r0, #1
 80014d2:	f7ff ffd7 	bl	8001484 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80014d6:	2002      	movs	r0, #2
 80014d8:	f7ff ffd4 	bl	8001484 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 80014dc:	2008      	movs	r0, #8
 80014de:	f7ff ffd1 	bl	8001484 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80014e2:	2004      	movs	r0, #4
 80014e4:	f7ff ffce 	bl	8001484 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOD, LL_GPIO_PIN_14);
 80014e8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014ec:	480b      	ldr	r0, [pc, #44]	; (800151c <MX_GPIO_Init+0x68>)
 80014ee:	f7ff ffb9 	bl	8001464 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_14;
 80014f2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80014f6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80014f8:	2301      	movs	r3, #1
 80014fa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80014fc:	2300      	movs	r3, #0
 80014fe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001500:	2300      	movs	r3, #0
 8001502:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001504:	2300      	movs	r3, #0
 8001506:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001508:	463b      	mov	r3, r7
 800150a:	4619      	mov	r1, r3
 800150c:	4803      	ldr	r0, [pc, #12]	; (800151c <MX_GPIO_Init+0x68>)
 800150e:	f003 f85c 	bl	80045ca <LL_GPIO_Init>

}
 8001512:	bf00      	nop
 8001514:	3718      	adds	r7, #24
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	40020c00 	.word	0x40020c00

08001520 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f043 0201 	orr.w	r2, r3, #1
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	601a      	str	r2, [r3, #0]
}
 8001534:	bf00      	nop
 8001536:	370c      	adds	r7, #12
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr

08001540 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6a1a      	ldr	r2, [r3, #32]
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	431a      	orrs	r2, r3
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	621a      	str	r2, [r3, #32]
}
 8001556:	bf00      	nop
 8001558:	370c      	adds	r7, #12
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr

08001562 <LL_TIM_CC_DisableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_DisableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8001562:	b480      	push	{r7}
 8001564:	b083      	sub	sp, #12
 8001566:	af00      	add	r7, sp, #0
 8001568:	6078      	str	r0, [r7, #4]
 800156a:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6a1a      	ldr	r2, [r3, #32]
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	43db      	mvns	r3, r3
 8001574:	401a      	ands	r2, r3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	621a      	str	r2, [r3, #32]
}
 800157a:	bf00      	nop
 800157c:	370c      	adds	r7, #12
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr

08001586 <LL_USART_IsActiveFlag_TXE>:
{
 8001586:	b480      	push	{r7}
 8001588:	b083      	sub	sp, #12
 800158a:	af00      	add	r7, sp, #0
 800158c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001596:	2b80      	cmp	r3, #128	; 0x80
 8001598:	bf0c      	ite	eq
 800159a:	2301      	moveq	r3, #1
 800159c:	2300      	movne	r3, #0
 800159e:	b2db      	uxtb	r3, r3
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	370c      	adds	r7, #12
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr

080015ac <LL_USART_EnableIT_RXNE>:
{
 80015ac:	b480      	push	{r7}
 80015ae:	b089      	sub	sp, #36	; 0x24
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	330c      	adds	r3, #12
 80015b8:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	e853 3f00 	ldrex	r3, [r3]
 80015c0:	60bb      	str	r3, [r7, #8]
   return(result);
 80015c2:	68bb      	ldr	r3, [r7, #8]
 80015c4:	f043 0320 	orr.w	r3, r3, #32
 80015c8:	61fb      	str	r3, [r7, #28]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	330c      	adds	r3, #12
 80015ce:	69fa      	ldr	r2, [r7, #28]
 80015d0:	61ba      	str	r2, [r7, #24]
 80015d2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80015d4:	6979      	ldr	r1, [r7, #20]
 80015d6:	69ba      	ldr	r2, [r7, #24]
 80015d8:	e841 2300 	strex	r3, r2, [r1]
 80015dc:	613b      	str	r3, [r7, #16]
   return(result);
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d1e7      	bne.n	80015b4 <LL_USART_EnableIT_RXNE+0x8>
}
 80015e4:	bf00      	nop
 80015e6:	bf00      	nop
 80015e8:	3724      	adds	r7, #36	; 0x24
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr

080015f2 <LL_USART_TransmitData8>:
{
 80015f2:	b480      	push	{r7}
 80015f4:	b083      	sub	sp, #12
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	6078      	str	r0, [r7, #4]
 80015fa:	460b      	mov	r3, r1
 80015fc:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 80015fe:	78fa      	ldrb	r2, [r7, #3]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	605a      	str	r2, [r3, #4]
}
 8001604:	bf00      	nop
 8001606:	370c      	adds	r7, #12
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr

08001610 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001610:	b480      	push	{r7}
 8001612:	b085      	sub	sp, #20
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	695b      	ldr	r3, [r3, #20]
 800161e:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 8001620:	68fa      	ldr	r2, [r7, #12]
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	4013      	ands	r3, r2
 8001626:	041a      	lsls	r2, r3, #16
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	43d9      	mvns	r1, r3
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	400b      	ands	r3, r1
 8001630:	431a      	orrs	r2, r3
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	619a      	str	r2, [r3, #24]
}
 8001636:	bf00      	nop
 8001638:	3714      	adds	r7, #20
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
	...

08001644 <_write>:
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
int _write(int file, char* p,int len)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b086      	sub	sp, #24
 8001648:	af00      	add	r7, sp, #0
 800164a:	60f8      	str	r0, [r7, #12]
 800164c:	60b9      	str	r1, [r7, #8]
 800164e:	607a      	str	r2, [r7, #4]
	for(int i=0;i<len;i++)
 8001650:	2300      	movs	r3, #0
 8001652:	617b      	str	r3, [r7, #20]
 8001654:	e011      	b.n	800167a <_write+0x36>
	{
		while(!LL_USART_IsActiveFlag_TXE(USART6));
 8001656:	bf00      	nop
 8001658:	480c      	ldr	r0, [pc, #48]	; (800168c <_write+0x48>)
 800165a:	f7ff ff94 	bl	8001586 <LL_USART_IsActiveFlag_TXE>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d0f9      	beq.n	8001658 <_write+0x14>
		LL_USART_TransmitData8(USART6, *(p+i));
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	68ba      	ldr	r2, [r7, #8]
 8001668:	4413      	add	r3, r2
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	4619      	mov	r1, r3
 800166e:	4807      	ldr	r0, [pc, #28]	; (800168c <_write+0x48>)
 8001670:	f7ff ffbf 	bl	80015f2 <LL_USART_TransmitData8>
	for(int i=0;i<len;i++)
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	3301      	adds	r3, #1
 8001678:	617b      	str	r3, [r7, #20]
 800167a:	697a      	ldr	r2, [r7, #20]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	429a      	cmp	r2, r3
 8001680:	dbe9      	blt.n	8001656 <_write+0x12>
	}
}
 8001682:	bf00      	nop
 8001684:	4618      	mov	r0, r3
 8001686:	3718      	adds	r7, #24
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	40011400 	.word	0x40011400

08001690 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001690:	b598      	push	{r3, r4, r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001694:	f001 f980 	bl	8002998 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001698:	f000 f98e 	bl	80019b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800169c:	f7ff ff0a 	bl	80014b4 <MX_GPIO_Init>
  MX_TIM3_Init();
 80016a0:	f000 fdb4 	bl	800220c <MX_TIM3_Init>
  MX_USART6_UART_Init();
 80016a4:	f001 f8ee 	bl	8002884 <MX_USART6_UART_Init>
  MX_UART4_Init();
 80016a8:	f001 f812 	bl	80026d0 <MX_UART4_Init>
  MX_UART5_Init();
 80016ac:	f001 f872 	bl	8002794 <MX_UART5_Init>
  MX_TIM5_Init();
 80016b0:	f000 fe1e 	bl	80022f0 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  LL_TIM_EnableCounter(TIM3);
 80016b4:	48b6      	ldr	r0, [pc, #728]	; (8001990 <main+0x300>)
 80016b6:	f7ff ff33 	bl	8001520 <LL_TIM_EnableCounter>
//  TIM3->PSC = 1000;
//  HAL_Delay(100);
//
//  LL_TIM_CC_DisableChannel(TIM3,LL_TIM_CHANNEL_CH4);  // buzzer disable

  LL_USART_EnableIT_RXNE(USART6); //interrupt olarak cagiracagiz
 80016ba:	48b6      	ldr	r0, [pc, #728]	; (8001994 <main+0x304>)
 80016bc:	f7ff ff76 	bl	80015ac <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_RXNE(UART4); //interrupt olarak cagiracagiz
 80016c0:	48b5      	ldr	r0, [pc, #724]	; (8001998 <main+0x308>)
 80016c2:	f7ff ff73 	bl	80015ac <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_RXNE(UART5); //interrupt olarak cagiracagiz
 80016c6:	48b5      	ldr	r0, [pc, #724]	; (800199c <main+0x30c>)
 80016c8:	f7ff ff70 	bl	80015ac <LL_USART_EnableIT_RXNE>

  M8N_Initialization();
 80016cc:	f7ff fea2 	bl	8001414 <M8N_Initialization>

  LL_TIM_EnableCounter(TIM5);
 80016d0:	48b3      	ldr	r0, [pc, #716]	; (80019a0 <main+0x310>)
 80016d2:	f7ff ff25 	bl	8001520 <LL_TIM_EnableCounter>
  LL_TIM_CC_EnableChannel(TIM5,LL_TIM_CHANNEL_CH1);
 80016d6:	2101      	movs	r1, #1
 80016d8:	48b1      	ldr	r0, [pc, #708]	; (80019a0 <main+0x310>)
 80016da:	f7ff ff31 	bl	8001540 <LL_TIM_CC_EnableChannel>
  LL_TIM_CC_EnableChannel(TIM5,LL_TIM_CHANNEL_CH2);
 80016de:	2110      	movs	r1, #16
 80016e0:	48af      	ldr	r0, [pc, #700]	; (80019a0 <main+0x310>)
 80016e2:	f7ff ff2d 	bl	8001540 <LL_TIM_CC_EnableChannel>
  LL_TIM_CC_EnableChannel(TIM5,LL_TIM_CHANNEL_CH3);
 80016e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016ea:	48ad      	ldr	r0, [pc, #692]	; (80019a0 <main+0x310>)
 80016ec:	f7ff ff28 	bl	8001540 <LL_TIM_CC_EnableChannel>
  LL_TIM_CC_EnableChannel(TIM5,LL_TIM_CHANNEL_CH4);
 80016f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016f4:	48aa      	ldr	r0, [pc, #680]	; (80019a0 <main+0x310>)
 80016f6:	f7ff ff23 	bl	8001540 <LL_TIM_CC_EnableChannel>

  while(Is_iBus_Received() == 0){
 80016fa:	e013      	b.n	8001724 <main+0x94>
	  LL_TIM_CC_EnableChannel(TIM3,LL_TIM_CHANNEL_CH4); // buzzer enable
 80016fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001700:	48a3      	ldr	r0, [pc, #652]	; (8001990 <main+0x300>)
 8001702:	f7ff ff1d 	bl	8001540 <LL_TIM_CC_EnableChannel>
	     TIM3->PSC = 3000;
 8001706:	4ba2      	ldr	r3, [pc, #648]	; (8001990 <main+0x300>)
 8001708:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800170c:	629a      	str	r2, [r3, #40]	; 0x28
	     HAL_Delay(200);
 800170e:	20c8      	movs	r0, #200	; 0xc8
 8001710:	f001 f9b4 	bl	8002a7c <HAL_Delay>
	     LL_TIM_CC_DisableChannel(TIM3,LL_TIM_CHANNEL_CH4);  // b
 8001714:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001718:	489d      	ldr	r0, [pc, #628]	; (8001990 <main+0x300>)
 800171a:	f7ff ff22 	bl	8001562 <LL_TIM_CC_DisableChannel>
	     HAL_Delay(200);
 800171e:	20c8      	movs	r0, #200	; 0xc8
 8001720:	f001 f9ac 	bl	8002a7c <HAL_Delay>
  while(Is_iBus_Received() == 0){
 8001724:	f000 fa06 	bl	8001b34 <Is_iBus_Received>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d0e6      	beq.n	80016fc <main+0x6c>
  }

  if(iBus.SwC == 2000){
 800172e:	4b9d      	ldr	r3, [pc, #628]	; (80019a4 <main+0x314>)
 8001730:	899b      	ldrh	r3, [r3, #12]
 8001732:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001736:	d15f      	bne.n	80017f8 <main+0x168>
	 LL_TIM_CC_EnableChannel(TIM3,LL_TIM_CHANNEL_CH4); // buzzer enable
 8001738:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800173c:	4894      	ldr	r0, [pc, #592]	; (8001990 <main+0x300>)
 800173e:	f7ff feff 	bl	8001540 <LL_TIM_CC_EnableChannel>
	 TIM3->PSC = 1500;
 8001742:	4b93      	ldr	r3, [pc, #588]	; (8001990 <main+0x300>)
 8001744:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001748:	629a      	str	r2, [r3, #40]	; 0x28
	 HAL_Delay(200);
 800174a:	20c8      	movs	r0, #200	; 0xc8
 800174c:	f001 f996 	bl	8002a7c <HAL_Delay>
	 TIM3->PSC = 2000;
 8001750:	4b8f      	ldr	r3, [pc, #572]	; (8001990 <main+0x300>)
 8001752:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001756:	629a      	str	r2, [r3, #40]	; 0x28
	 HAL_Delay(200);
 8001758:	20c8      	movs	r0, #200	; 0xc8
 800175a:	f001 f98f 	bl	8002a7c <HAL_Delay>
	 TIM3->PSC = 1500;
 800175e:	4b8c      	ldr	r3, [pc, #560]	; (8001990 <main+0x300>)
 8001760:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001764:	629a      	str	r2, [r3, #40]	; 0x28
	 HAL_Delay(200);
 8001766:	20c8      	movs	r0, #200	; 0xc8
 8001768:	f001 f988 	bl	8002a7c <HAL_Delay>
	 TIM3->PSC = 2000;
 800176c:	4b88      	ldr	r3, [pc, #544]	; (8001990 <main+0x300>)
 800176e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001772:	629a      	str	r2, [r3, #40]	; 0x28
	 HAL_Delay(200);
 8001774:	20c8      	movs	r0, #200	; 0xc8
 8001776:	f001 f981 	bl	8002a7c <HAL_Delay>
	 LL_TIM_CC_DisableChannel(TIM3,LL_TIM_CHANNEL_CH4);  // b
 800177a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800177e:	4884      	ldr	r0, [pc, #528]	; (8001990 <main+0x300>)
 8001780:	f7ff feef 	bl	8001562 <LL_TIM_CC_DisableChannel>
	 HAL_Delay(200);
 8001784:	20c8      	movs	r0, #200	; 0xc8
 8001786:	f001 f979 	bl	8002a7c <HAL_Delay>

  ESC_Calibration();
 800178a:	f000 f9a5 	bl	8001ad8 <ESC_Calibration>
  while(iBus.SwC != 1000){
 800178e:	e019      	b.n	80017c4 <main+0x134>
	  Is_iBus_Received();
 8001790:	f000 f9d0 	bl	8001b34 <Is_iBus_Received>

	  LL_TIM_CC_EnableChannel(TIM3,LL_TIM_CHANNEL_CH4); // buzzer enable
 8001794:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001798:	487d      	ldr	r0, [pc, #500]	; (8001990 <main+0x300>)
 800179a:	f7ff fed1 	bl	8001540 <LL_TIM_CC_EnableChannel>

	 	 TIM3->PSC = 1500;
 800179e:	4b7c      	ldr	r3, [pc, #496]	; (8001990 <main+0x300>)
 80017a0:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80017a4:	629a      	str	r2, [r3, #40]	; 0x28
	 	 HAL_Delay(200);
 80017a6:	20c8      	movs	r0, #200	; 0xc8
 80017a8:	f001 f968 	bl	8002a7c <HAL_Delay>
	 	 TIM3->PSC = 2000;
 80017ac:	4b78      	ldr	r3, [pc, #480]	; (8001990 <main+0x300>)
 80017ae:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80017b2:	629a      	str	r2, [r3, #40]	; 0x28
	 	 HAL_Delay(200);
 80017b4:	20c8      	movs	r0, #200	; 0xc8
 80017b6:	f001 f961 	bl	8002a7c <HAL_Delay>

	 	 LL_TIM_CC_DisableChannel(TIM3,LL_TIM_CHANNEL_CH4);  // b
 80017ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017be:	4874      	ldr	r0, [pc, #464]	; (8001990 <main+0x300>)
 80017c0:	f7ff fecf 	bl	8001562 <LL_TIM_CC_DisableChannel>
  while(iBus.SwC != 1000){
 80017c4:	4b77      	ldr	r3, [pc, #476]	; (80019a4 <main+0x314>)
 80017c6:	899b      	ldrh	r3, [r3, #12]
 80017c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80017cc:	d1e0      	bne.n	8001790 <main+0x100>

  	  }
  }
   while(Is_iBus_Throttle_Min() == 0){
 80017ce:	e013      	b.n	80017f8 <main+0x168>
	   LL_TIM_CC_EnableChannel(TIM3,LL_TIM_CHANNEL_CH4); // buzzer enable
 80017d0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017d4:	486e      	ldr	r0, [pc, #440]	; (8001990 <main+0x300>)
 80017d6:	f7ff feb3 	bl	8001540 <LL_TIM_CC_EnableChannel>
	 	     TIM3->PSC = 1000;
 80017da:	4b6d      	ldr	r3, [pc, #436]	; (8001990 <main+0x300>)
 80017dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80017e0:	629a      	str	r2, [r3, #40]	; 0x28
	 	     HAL_Delay(70);
 80017e2:	2046      	movs	r0, #70	; 0x46
 80017e4:	f001 f94a 	bl	8002a7c <HAL_Delay>
	 	     LL_TIM_CC_DisableChannel(TIM3,LL_TIM_CHANNEL_CH4);  // b
 80017e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017ec:	4868      	ldr	r0, [pc, #416]	; (8001990 <main+0x300>)
 80017ee:	f7ff feb8 	bl	8001562 <LL_TIM_CC_DisableChannel>
	 	     HAL_Delay(70);
 80017f2:	2046      	movs	r0, #70	; 0x46
 80017f4:	f001 f942 	bl	8002a7c <HAL_Delay>
   while(Is_iBus_Throttle_Min() == 0){
 80017f8:	f000 f948 	bl	8001a8c <Is_iBus_Throttle_Min>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d0e6      	beq.n	80017d0 <main+0x140>





   LL_TIM_CC_EnableChannel(TIM3,LL_TIM_CHANNEL_CH4); // buzzer enable
 8001802:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001806:	4862      	ldr	r0, [pc, #392]	; (8001990 <main+0x300>)
 8001808:	f7ff fe9a 	bl	8001540 <LL_TIM_CC_EnableChannel>
   TIM3->PSC = 2000;
 800180c:	4b60      	ldr	r3, [pc, #384]	; (8001990 <main+0x300>)
 800180e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001812:	629a      	str	r2, [r3, #40]	; 0x28
   HAL_Delay(100);
 8001814:	2064      	movs	r0, #100	; 0x64
 8001816:	f001 f931 	bl	8002a7c <HAL_Delay>
   TIM3->PSC = 1500; 							//burayı kopyaladı nedenini anlamadım
 800181a:	4b5d      	ldr	r3, [pc, #372]	; (8001990 <main+0x300>)
 800181c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001820:	629a      	str	r2, [r3, #40]	; 0x28
   HAL_Delay(100);
 8001822:	2064      	movs	r0, #100	; 0x64
 8001824:	f001 f92a 	bl	8002a7c <HAL_Delay>
   TIM3->PSC = 1000;
 8001828:	4b59      	ldr	r3, [pc, #356]	; (8001990 <main+0x300>)
 800182a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800182e:	629a      	str	r2, [r3, #40]	; 0x28
   HAL_Delay(100);
 8001830:	2064      	movs	r0, #100	; 0x64
 8001832:	f001 f923 	bl	8002a7c <HAL_Delay>

   LL_TIM_CC_DisableChannel(TIM3,LL_TIM_CHANNEL_CH4);  // buzzer disable
 8001836:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800183a:	4855      	ldr	r0, [pc, #340]	; (8001990 <main+0x300>)
 800183c:	f7ff fe91 	bl	8001562 <LL_TIM_CC_DisableChannel>

	  }

	  */

	  if(ibus_rx_cplt_flag == 1)
 8001840:	4b59      	ldr	r3, [pc, #356]	; (80019a8 <main+0x318>)
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	2b01      	cmp	r3, #1
 8001846:	d123      	bne.n	8001890 <main+0x200>
	  	  {
	  		  ibus_rx_cplt_flag = 0;
 8001848:	4b57      	ldr	r3, [pc, #348]	; (80019a8 <main+0x318>)
 800184a:	2200      	movs	r2, #0
 800184c:	701a      	strb	r2, [r3, #0]
	  		  if(iBus_Check_CHKSUM(&ibus_rxbuff[0],32)==1)
 800184e:	2120      	movs	r1, #32
 8001850:	4856      	ldr	r0, [pc, #344]	; (80019ac <main+0x31c>)
 8001852:	f7ff fb4b 	bl	8000eec <iBus_Check_CHKSUM>
 8001856:	4603      	mov	r3, r0
 8001858:	2b01      	cmp	r3, #1
 800185a:	d119      	bne.n	8001890 <main+0x200>
	  		  {
	  			LL_GPIO_TogglePin(GPIOD, LL_GPIO_PIN_14);
 800185c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001860:	4853      	ldr	r0, [pc, #332]	; (80019b0 <main+0x320>)
 8001862:	f7ff fed5 	bl	8001610 <LL_GPIO_TogglePin>
	  			iBus_Parsing(&ibus_rxbuff[0], &iBus);
 8001866:	494f      	ldr	r1, [pc, #316]	; (80019a4 <main+0x314>)
 8001868:	4850      	ldr	r0, [pc, #320]	; (80019ac <main+0x31c>)
 800186a:	f7ff fb75 	bl	8000f58 <iBus_Parsing>
	  			if(iBus_isActiveFailSafe(&iBus) ==1)
 800186e:	484d      	ldr	r0, [pc, #308]	; (80019a4 <main+0x314>)
 8001870:	f7ff fc34 	bl	80010dc <iBus_isActiveFailSafe>
 8001874:	4603      	mov	r3, r0
 8001876:	2b01      	cmp	r3, #1
 8001878:	d105      	bne.n	8001886 <main+0x1f6>
	  			{
	  				LL_TIM_CC_EnableChannel(TIM3,LL_TIM_CHANNEL_CH4);
 800187a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800187e:	4844      	ldr	r0, [pc, #272]	; (8001990 <main+0x300>)
 8001880:	f7ff fe5e 	bl	8001540 <LL_TIM_CC_EnableChannel>
 8001884:	e004      	b.n	8001890 <main+0x200>
	  			}
	  			else
	  			{
	  				LL_TIM_CC_DisableChannel(TIM3,LL_TIM_CHANNEL_CH4);
 8001886:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800188a:	4841      	ldr	r0, [pc, #260]	; (8001990 <main+0x300>)
 800188c:	f7ff fe69 	bl	8001562 <LL_TIM_CC_DisableChannel>
//	  			HAL_Delay(100);
	  		  }

	  	  }

	  TIM5->CCR1 = 10500 +(iBus.LV -1000)*10.5;
 8001890:	4b44      	ldr	r3, [pc, #272]	; (80019a4 <main+0x314>)
 8001892:	889b      	ldrh	r3, [r3, #4]
 8001894:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8001898:	4618      	mov	r0, r3
 800189a:	f7fe fe43 	bl	8000524 <__aeabi_i2d>
 800189e:	f04f 0200 	mov.w	r2, #0
 80018a2:	4b44      	ldr	r3, [pc, #272]	; (80019b4 <main+0x324>)
 80018a4:	f7fe fea8 	bl	80005f8 <__aeabi_dmul>
 80018a8:	4602      	mov	r2, r0
 80018aa:	460b      	mov	r3, r1
 80018ac:	4610      	mov	r0, r2
 80018ae:	4619      	mov	r1, r3
 80018b0:	a335      	add	r3, pc, #212	; (adr r3, 8001988 <main+0x2f8>)
 80018b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018b6:	f7fe fce9 	bl	800028c <__adddf3>
 80018ba:	4602      	mov	r2, r0
 80018bc:	460b      	mov	r3, r1
 80018be:	4c38      	ldr	r4, [pc, #224]	; (80019a0 <main+0x310>)
 80018c0:	4610      	mov	r0, r2
 80018c2:	4619      	mov	r1, r3
 80018c4:	f7ff f970 	bl	8000ba8 <__aeabi_d2uiz>
 80018c8:	4603      	mov	r3, r0
 80018ca:	6363      	str	r3, [r4, #52]	; 0x34
	  TIM5->CCR2 = 10500 +(iBus.LV -1000)*10.5;
 80018cc:	4b35      	ldr	r3, [pc, #212]	; (80019a4 <main+0x314>)
 80018ce:	889b      	ldrh	r3, [r3, #4]
 80018d0:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7fe fe25 	bl	8000524 <__aeabi_i2d>
 80018da:	f04f 0200 	mov.w	r2, #0
 80018de:	4b35      	ldr	r3, [pc, #212]	; (80019b4 <main+0x324>)
 80018e0:	f7fe fe8a 	bl	80005f8 <__aeabi_dmul>
 80018e4:	4602      	mov	r2, r0
 80018e6:	460b      	mov	r3, r1
 80018e8:	4610      	mov	r0, r2
 80018ea:	4619      	mov	r1, r3
 80018ec:	a326      	add	r3, pc, #152	; (adr r3, 8001988 <main+0x2f8>)
 80018ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f2:	f7fe fccb 	bl	800028c <__adddf3>
 80018f6:	4602      	mov	r2, r0
 80018f8:	460b      	mov	r3, r1
 80018fa:	4c29      	ldr	r4, [pc, #164]	; (80019a0 <main+0x310>)
 80018fc:	4610      	mov	r0, r2
 80018fe:	4619      	mov	r1, r3
 8001900:	f7ff f952 	bl	8000ba8 <__aeabi_d2uiz>
 8001904:	4603      	mov	r3, r0
 8001906:	63a3      	str	r3, [r4, #56]	; 0x38
	  TIM5->CCR3 = 10500 +(iBus.LV -1000)*10.5;
 8001908:	4b26      	ldr	r3, [pc, #152]	; (80019a4 <main+0x314>)
 800190a:	889b      	ldrh	r3, [r3, #4]
 800190c:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8001910:	4618      	mov	r0, r3
 8001912:	f7fe fe07 	bl	8000524 <__aeabi_i2d>
 8001916:	f04f 0200 	mov.w	r2, #0
 800191a:	4b26      	ldr	r3, [pc, #152]	; (80019b4 <main+0x324>)
 800191c:	f7fe fe6c 	bl	80005f8 <__aeabi_dmul>
 8001920:	4602      	mov	r2, r0
 8001922:	460b      	mov	r3, r1
 8001924:	4610      	mov	r0, r2
 8001926:	4619      	mov	r1, r3
 8001928:	a317      	add	r3, pc, #92	; (adr r3, 8001988 <main+0x2f8>)
 800192a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800192e:	f7fe fcad 	bl	800028c <__adddf3>
 8001932:	4602      	mov	r2, r0
 8001934:	460b      	mov	r3, r1
 8001936:	4c1a      	ldr	r4, [pc, #104]	; (80019a0 <main+0x310>)
 8001938:	4610      	mov	r0, r2
 800193a:	4619      	mov	r1, r3
 800193c:	f7ff f934 	bl	8000ba8 <__aeabi_d2uiz>
 8001940:	4603      	mov	r3, r0
 8001942:	63e3      	str	r3, [r4, #60]	; 0x3c
	  TIM5->CCR4 = 10500 +(iBus.LV -1000)*10.5;
 8001944:	4b17      	ldr	r3, [pc, #92]	; (80019a4 <main+0x314>)
 8001946:	889b      	ldrh	r3, [r3, #4]
 8001948:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800194c:	4618      	mov	r0, r3
 800194e:	f7fe fde9 	bl	8000524 <__aeabi_i2d>
 8001952:	f04f 0200 	mov.w	r2, #0
 8001956:	4b17      	ldr	r3, [pc, #92]	; (80019b4 <main+0x324>)
 8001958:	f7fe fe4e 	bl	80005f8 <__aeabi_dmul>
 800195c:	4602      	mov	r2, r0
 800195e:	460b      	mov	r3, r1
 8001960:	4610      	mov	r0, r2
 8001962:	4619      	mov	r1, r3
 8001964:	a308      	add	r3, pc, #32	; (adr r3, 8001988 <main+0x2f8>)
 8001966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800196a:	f7fe fc8f 	bl	800028c <__adddf3>
 800196e:	4602      	mov	r2, r0
 8001970:	460b      	mov	r3, r1
 8001972:	4c0b      	ldr	r4, [pc, #44]	; (80019a0 <main+0x310>)
 8001974:	4610      	mov	r0, r2
 8001976:	4619      	mov	r1, r3
 8001978:	f7ff f916 	bl	8000ba8 <__aeabi_d2uiz>
 800197c:	4603      	mov	r3, r0
 800197e:	6423      	str	r3, [r4, #64]	; 0x40
	  if(ibus_rx_cplt_flag == 1)
 8001980:	e75e      	b.n	8001840 <main+0x1b0>
 8001982:	bf00      	nop
 8001984:	f3af 8000 	nop.w
 8001988:	00000000 	.word	0x00000000
 800198c:	40c48200 	.word	0x40c48200
 8001990:	40000400 	.word	0x40000400
 8001994:	40011400 	.word	0x40011400
 8001998:	40004c00 	.word	0x40004c00
 800199c:	40005000 	.word	0x40005000
 80019a0:	40000c00 	.word	0x40000c00
 80019a4:	200001f8 	.word	0x200001f8
 80019a8:	20000240 	.word	0x20000240
 80019ac:	20000220 	.word	0x20000220
 80019b0:	40020c00 	.word	0x40020c00
 80019b4:	40250000 	.word	0x40250000

080019b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b094      	sub	sp, #80	; 0x50
 80019bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019be:	f107 0320 	add.w	r3, r7, #32
 80019c2:	2230      	movs	r2, #48	; 0x30
 80019c4:	2100      	movs	r1, #0
 80019c6:	4618      	mov	r0, r3
 80019c8:	f003 fdae 	bl	8005528 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019cc:	f107 030c 	add.w	r3, r7, #12
 80019d0:	2200      	movs	r2, #0
 80019d2:	601a      	str	r2, [r3, #0]
 80019d4:	605a      	str	r2, [r3, #4]
 80019d6:	609a      	str	r2, [r3, #8]
 80019d8:	60da      	str	r2, [r3, #12]
 80019da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019dc:	2300      	movs	r3, #0
 80019de:	60bb      	str	r3, [r7, #8]
 80019e0:	4b28      	ldr	r3, [pc, #160]	; (8001a84 <SystemClock_Config+0xcc>)
 80019e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e4:	4a27      	ldr	r2, [pc, #156]	; (8001a84 <SystemClock_Config+0xcc>)
 80019e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019ea:	6413      	str	r3, [r2, #64]	; 0x40
 80019ec:	4b25      	ldr	r3, [pc, #148]	; (8001a84 <SystemClock_Config+0xcc>)
 80019ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019f4:	60bb      	str	r3, [r7, #8]
 80019f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019f8:	2300      	movs	r3, #0
 80019fa:	607b      	str	r3, [r7, #4]
 80019fc:	4b22      	ldr	r3, [pc, #136]	; (8001a88 <SystemClock_Config+0xd0>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a21      	ldr	r2, [pc, #132]	; (8001a88 <SystemClock_Config+0xd0>)
 8001a02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a06:	6013      	str	r3, [r2, #0]
 8001a08:	4b1f      	ldr	r3, [pc, #124]	; (8001a88 <SystemClock_Config+0xd0>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a10:	607b      	str	r3, [r7, #4]
 8001a12:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a14:	2301      	movs	r3, #1
 8001a16:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a18:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a1c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a1e:	2302      	movs	r3, #2
 8001a20:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a22:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a26:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001a28:	2304      	movs	r3, #4
 8001a2a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001a2c:	23a8      	movs	r3, #168	; 0xa8
 8001a2e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a30:	2302      	movs	r3, #2
 8001a32:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001a34:	2304      	movs	r3, #4
 8001a36:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a38:	f107 0320 	add.w	r3, r7, #32
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f001 fac3 	bl	8002fc8 <HAL_RCC_OscConfig>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d001      	beq.n	8001a4c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001a48:	f000 f894 	bl	8001b74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a4c:	230f      	movs	r3, #15
 8001a4e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a50:	2302      	movs	r3, #2
 8001a52:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a54:	2300      	movs	r3, #0
 8001a56:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001a58:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001a5c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001a5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a62:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001a64:	f107 030c 	add.w	r3, r7, #12
 8001a68:	2105      	movs	r1, #5
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f001 fd24 	bl	80034b8 <HAL_RCC_ClockConfig>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001a76:	f000 f87d 	bl	8001b74 <Error_Handler>
  }
}
 8001a7a:	bf00      	nop
 8001a7c:	3750      	adds	r7, #80	; 0x50
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	40023800 	.word	0x40023800
 8001a88:	40007000 	.word	0x40007000

08001a8c <Is_iBus_Throttle_Min>:

/* USER CODE BEGIN 4 */
int Is_iBus_Throttle_Min(void){
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0

	  if(ibus_rx_cplt_flag == 1)
 8001a90:	4b0e      	ldr	r3, [pc, #56]	; (8001acc <Is_iBus_Throttle_Min+0x40>)
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d115      	bne.n	8001ac4 <Is_iBus_Throttle_Min+0x38>
		  	  {
		  		  ibus_rx_cplt_flag = 0;
 8001a98:	4b0c      	ldr	r3, [pc, #48]	; (8001acc <Is_iBus_Throttle_Min+0x40>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	701a      	strb	r2, [r3, #0]
		  		  if(iBus_Check_CHKSUM(&ibus_rxbuff[0],32)==1)
 8001a9e:	2120      	movs	r1, #32
 8001aa0:	480b      	ldr	r0, [pc, #44]	; (8001ad0 <Is_iBus_Throttle_Min+0x44>)
 8001aa2:	f7ff fa23 	bl	8000eec <iBus_Check_CHKSUM>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d10b      	bne.n	8001ac4 <Is_iBus_Throttle_Min+0x38>
		  		  {
		  				iBus_Parsing(&ibus_rxbuff[0], &iBus);
 8001aac:	4909      	ldr	r1, [pc, #36]	; (8001ad4 <Is_iBus_Throttle_Min+0x48>)
 8001aae:	4808      	ldr	r0, [pc, #32]	; (8001ad0 <Is_iBus_Throttle_Min+0x44>)
 8001ab0:	f7ff fa52 	bl	8000f58 <iBus_Parsing>
		  				if(iBus.LV < 1010) return 1;
 8001ab4:	4b07      	ldr	r3, [pc, #28]	; (8001ad4 <Is_iBus_Throttle_Min+0x48>)
 8001ab6:	889b      	ldrh	r3, [r3, #4]
 8001ab8:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d801      	bhi.n	8001ac4 <Is_iBus_Throttle_Min+0x38>
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e000      	b.n	8001ac6 <Is_iBus_Throttle_Min+0x3a>

		  		  }

		  	  }
	  return 0;
 8001ac4:	2300      	movs	r3, #0
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	20000240 	.word	0x20000240
 8001ad0:	20000220 	.word	0x20000220
 8001ad4:	200001f8 	.word	0x200001f8

08001ad8 <ESC_Calibration>:

void ESC_Calibration(void){
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0

	  TIM5->CCR1 = 21000;
 8001adc:	4b14      	ldr	r3, [pc, #80]	; (8001b30 <ESC_Calibration+0x58>)
 8001ade:	f245 2208 	movw	r2, #21000	; 0x5208
 8001ae2:	635a      	str	r2, [r3, #52]	; 0x34
	  TIM5->CCR2 = 21000;
 8001ae4:	4b12      	ldr	r3, [pc, #72]	; (8001b30 <ESC_Calibration+0x58>)
 8001ae6:	f245 2208 	movw	r2, #21000	; 0x5208
 8001aea:	639a      	str	r2, [r3, #56]	; 0x38
	  TIM5->CCR3 = 21000;
 8001aec:	4b10      	ldr	r3, [pc, #64]	; (8001b30 <ESC_Calibration+0x58>)
 8001aee:	f245 2208 	movw	r2, #21000	; 0x5208
 8001af2:	63da      	str	r2, [r3, #60]	; 0x3c
	  TIM5->CCR4 = 21000;
 8001af4:	4b0e      	ldr	r3, [pc, #56]	; (8001b30 <ESC_Calibration+0x58>)
 8001af6:	f245 2208 	movw	r2, #21000	; 0x5208
 8001afa:	641a      	str	r2, [r3, #64]	; 0x40
	  HAL_Delay(7000);
 8001afc:	f641 3058 	movw	r0, #7000	; 0x1b58
 8001b00:	f000 ffbc 	bl	8002a7c <HAL_Delay>

	  TIM5->CCR1 = 10500;
 8001b04:	4b0a      	ldr	r3, [pc, #40]	; (8001b30 <ESC_Calibration+0x58>)
 8001b06:	f642 1204 	movw	r2, #10500	; 0x2904
 8001b0a:	635a      	str	r2, [r3, #52]	; 0x34
	  TIM5->CCR2 = 10500;
 8001b0c:	4b08      	ldr	r3, [pc, #32]	; (8001b30 <ESC_Calibration+0x58>)
 8001b0e:	f642 1204 	movw	r2, #10500	; 0x2904
 8001b12:	639a      	str	r2, [r3, #56]	; 0x38
	  TIM5->CCR3 = 10500;
 8001b14:	4b06      	ldr	r3, [pc, #24]	; (8001b30 <ESC_Calibration+0x58>)
 8001b16:	f642 1204 	movw	r2, #10500	; 0x2904
 8001b1a:	63da      	str	r2, [r3, #60]	; 0x3c
	  TIM5->CCR4 = 10500;
 8001b1c:	4b04      	ldr	r3, [pc, #16]	; (8001b30 <ESC_Calibration+0x58>)
 8001b1e:	f642 1204 	movw	r2, #10500	; 0x2904
 8001b22:	641a      	str	r2, [r3, #64]	; 0x40
	   HAL_Delay(8000);
 8001b24:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8001b28:	f000 ffa8 	bl	8002a7c <HAL_Delay>
}
 8001b2c:	bf00      	nop
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	40000c00 	.word	0x40000c00

08001b34 <Is_iBus_Received>:

int Is_iBus_Received(void){
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
	if(ibus_rx_cplt_flag == 1)
 8001b38:	4b0b      	ldr	r3, [pc, #44]	; (8001b68 <Is_iBus_Received+0x34>)
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d10f      	bne.n	8001b60 <Is_iBus_Received+0x2c>
			  	  {
			  		  ibus_rx_cplt_flag = 0;
 8001b40:	4b09      	ldr	r3, [pc, #36]	; (8001b68 <Is_iBus_Received+0x34>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	701a      	strb	r2, [r3, #0]
			  		  if(iBus_Check_CHKSUM(&ibus_rxbuff[0],32)==1)
 8001b46:	2120      	movs	r1, #32
 8001b48:	4808      	ldr	r0, [pc, #32]	; (8001b6c <Is_iBus_Received+0x38>)
 8001b4a:	f7ff f9cf 	bl	8000eec <iBus_Check_CHKSUM>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d105      	bne.n	8001b60 <Is_iBus_Received+0x2c>
			  		  {
			  				iBus_Parsing(&ibus_rxbuff[0], &iBus);
 8001b54:	4906      	ldr	r1, [pc, #24]	; (8001b70 <Is_iBus_Received+0x3c>)
 8001b56:	4805      	ldr	r0, [pc, #20]	; (8001b6c <Is_iBus_Received+0x38>)
 8001b58:	f7ff f9fe 	bl	8000f58 <iBus_Parsing>
			  				return 1;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e000      	b.n	8001b62 <Is_iBus_Received+0x2e>
			  		  }

			  	  }
		  return 0;
 8001b60:	2300      	movs	r3, #0
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	20000240 	.word	0x20000240
 8001b6c:	20000220 	.word	0x20000220
 8001b70:	200001f8 	.word	0x200001f8

08001b74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001b78:	b672      	cpsid	i
}
 8001b7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b7c:	e7fe      	b.n	8001b7c <Error_Handler+0x8>
	...

08001b80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b86:	2300      	movs	r3, #0
 8001b88:	607b      	str	r3, [r7, #4]
 8001b8a:	4b10      	ldr	r3, [pc, #64]	; (8001bcc <HAL_MspInit+0x4c>)
 8001b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b8e:	4a0f      	ldr	r2, [pc, #60]	; (8001bcc <HAL_MspInit+0x4c>)
 8001b90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b94:	6453      	str	r3, [r2, #68]	; 0x44
 8001b96:	4b0d      	ldr	r3, [pc, #52]	; (8001bcc <HAL_MspInit+0x4c>)
 8001b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b9e:	607b      	str	r3, [r7, #4]
 8001ba0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	603b      	str	r3, [r7, #0]
 8001ba6:	4b09      	ldr	r3, [pc, #36]	; (8001bcc <HAL_MspInit+0x4c>)
 8001ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001baa:	4a08      	ldr	r2, [pc, #32]	; (8001bcc <HAL_MspInit+0x4c>)
 8001bac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bb0:	6413      	str	r3, [r2, #64]	; 0x40
 8001bb2:	4b06      	ldr	r3, [pc, #24]	; (8001bcc <HAL_MspInit+0x4c>)
 8001bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bba:	603b      	str	r3, [r7, #0]
 8001bbc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bbe:	bf00      	nop
 8001bc0:	370c      	adds	r7, #12
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	40023800 	.word	0x40023800

08001bd0 <LL_USART_IsActiveFlag_RXNE>:
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 0320 	and.w	r3, r3, #32
 8001be0:	2b20      	cmp	r3, #32
 8001be2:	bf0c      	ite	eq
 8001be4:	2301      	moveq	r3, #1
 8001be6:	2300      	movne	r3, #0
 8001be8:	b2db      	uxtb	r3, r3
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	370c      	adds	r7, #12
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr

08001bf6 <LL_USART_ClearFlag_RXNE>:
{
 8001bf6:	b480      	push	{r7}
 8001bf8:	b083      	sub	sp, #12
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_RXNE));
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	f06f 0220 	mvn.w	r2, #32
 8001c04:	601a      	str	r2, [r3, #0]
}
 8001c06:	bf00      	nop
 8001c08:	370c      	adds	r7, #12
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr

08001c12 <LL_USART_ReceiveData8>:
{
 8001c12:	b480      	push	{r7}
 8001c14:	b083      	sub	sp, #12
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	b2db      	uxtb	r3, r3
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	370c      	adds	r7, #12
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr

08001c2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c30:	e7fe      	b.n	8001c30 <NMI_Handler+0x4>

08001c32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c32:	b480      	push	{r7}
 8001c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c36:	e7fe      	b.n	8001c36 <HardFault_Handler+0x4>

08001c38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c3c:	e7fe      	b.n	8001c3c <MemManage_Handler+0x4>

08001c3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c3e:	b480      	push	{r7}
 8001c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c42:	e7fe      	b.n	8001c42 <BusFault_Handler+0x4>

08001c44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c48:	e7fe      	b.n	8001c48 <UsageFault_Handler+0x4>

08001c4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c4a:	b480      	push	{r7}
 8001c4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c4e:	bf00      	nop
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c5c:	bf00      	nop
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr

08001c66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c66:	b480      	push	{r7}
 8001c68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c6a:	bf00      	nop
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr

08001c74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c78:	f000 fee0 	bl	8002a3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c7c:	bf00      	nop
 8001c7e:	bd80      	pop	{r7, pc}

08001c80 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */
	static unsigned char cnt = 0;
	if(LL_USART_IsActiveFlag_RXNE(UART4)) // bu bir receive işlemi mi?
 8001c84:	4833      	ldr	r0, [pc, #204]	; (8001d54 <UART4_IRQHandler+0xd4>)
 8001c86:	f7ff ffa3 	bl	8001bd0 <LL_USART_IsActiveFlag_RXNE>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d05b      	beq.n	8001d48 <UART4_IRQHandler+0xc8>
		{
			LL_USART_ClearFlag_RXNE(UART4); // bayragı temizle
 8001c90:	4830      	ldr	r0, [pc, #192]	; (8001d54 <UART4_IRQHandler+0xd4>)
 8001c92:	f7ff ffb0 	bl	8001bf6 <LL_USART_ClearFlag_RXNE>
			uart4_rx_data = LL_USART_ReceiveData8(UART4); // veriyi alalım
 8001c96:	482f      	ldr	r0, [pc, #188]	; (8001d54 <UART4_IRQHandler+0xd4>)
 8001c98:	f7ff ffbb 	bl	8001c12 <LL_USART_ReceiveData8>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	4b2d      	ldr	r3, [pc, #180]	; (8001d58 <UART4_IRQHandler+0xd8>)
 8001ca2:	701a      	strb	r2, [r3, #0]
			uart4_rx_flag = 1; // once main icerisindeki while kodu okunacak
 8001ca4:	4b2d      	ldr	r3, [pc, #180]	; (8001d5c <UART4_IRQHandler+0xdc>)
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	701a      	strb	r2, [r3, #0]

			//LL_USART_TransmitData8(USART6, uart4_rx_data);

			switch(cnt)
 8001caa:	4b2d      	ldr	r3, [pc, #180]	; (8001d60 <UART4_IRQHandler+0xe0>)
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	2b23      	cmp	r3, #35	; 0x23
 8001cb0:	d02e      	beq.n	8001d10 <UART4_IRQHandler+0x90>
 8001cb2:	2b23      	cmp	r3, #35	; 0x23
 8001cb4:	dc3a      	bgt.n	8001d2c <UART4_IRQHandler+0xac>
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d002      	beq.n	8001cc0 <UART4_IRQHandler+0x40>
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d012      	beq.n	8001ce4 <UART4_IRQHandler+0x64>
 8001cbe:	e035      	b.n	8001d2c <UART4_IRQHandler+0xac>
			{
			case 0:
				if(uart4_rx_data == 0xb5)
 8001cc0:	4b25      	ldr	r3, [pc, #148]	; (8001d58 <UART4_IRQHandler+0xd8>)
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	2bb5      	cmp	r3, #181	; 0xb5
 8001cc6:	d141      	bne.n	8001d4c <UART4_IRQHandler+0xcc>
				{
					m8n_rxbuff[cnt] = uart4_rx_data;
 8001cc8:	4b25      	ldr	r3, [pc, #148]	; (8001d60 <UART4_IRQHandler+0xe0>)
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	461a      	mov	r2, r3
 8001cce:	4b22      	ldr	r3, [pc, #136]	; (8001d58 <UART4_IRQHandler+0xd8>)
 8001cd0:	7819      	ldrb	r1, [r3, #0]
 8001cd2:	4b24      	ldr	r3, [pc, #144]	; (8001d64 <UART4_IRQHandler+0xe4>)
 8001cd4:	5499      	strb	r1, [r3, r2]
					cnt++;
 8001cd6:	4b22      	ldr	r3, [pc, #136]	; (8001d60 <UART4_IRQHandler+0xe0>)
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	3301      	adds	r3, #1
 8001cdc:	b2da      	uxtb	r2, r3
 8001cde:	4b20      	ldr	r3, [pc, #128]	; (8001d60 <UART4_IRQHandler+0xe0>)
 8001ce0:	701a      	strb	r2, [r3, #0]
				}
				break;
 8001ce2:	e033      	b.n	8001d4c <UART4_IRQHandler+0xcc>
			case 1:
				if(uart4_rx_data == 0x62)
 8001ce4:	4b1c      	ldr	r3, [pc, #112]	; (8001d58 <UART4_IRQHandler+0xd8>)
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	2b62      	cmp	r3, #98	; 0x62
 8001cea:	d10d      	bne.n	8001d08 <UART4_IRQHandler+0x88>
				{
					m8n_rxbuff[cnt] = uart4_rx_data;
 8001cec:	4b1c      	ldr	r3, [pc, #112]	; (8001d60 <UART4_IRQHandler+0xe0>)
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	4b19      	ldr	r3, [pc, #100]	; (8001d58 <UART4_IRQHandler+0xd8>)
 8001cf4:	7819      	ldrb	r1, [r3, #0]
 8001cf6:	4b1b      	ldr	r3, [pc, #108]	; (8001d64 <UART4_IRQHandler+0xe4>)
 8001cf8:	5499      	strb	r1, [r3, r2]
					cnt++;
 8001cfa:	4b19      	ldr	r3, [pc, #100]	; (8001d60 <UART4_IRQHandler+0xe0>)
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	3301      	adds	r3, #1
 8001d00:	b2da      	uxtb	r2, r3
 8001d02:	4b17      	ldr	r3, [pc, #92]	; (8001d60 <UART4_IRQHandler+0xe0>)
 8001d04:	701a      	strb	r2, [r3, #0]
				}
				else
					cnt = 0;
				break;
 8001d06:	e022      	b.n	8001d4e <UART4_IRQHandler+0xce>
					cnt = 0;
 8001d08:	4b15      	ldr	r3, [pc, #84]	; (8001d60 <UART4_IRQHandler+0xe0>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	701a      	strb	r2, [r3, #0]
				break;
 8001d0e:	e01e      	b.n	8001d4e <UART4_IRQHandler+0xce>
			case 35:
				m8n_rxbuff[cnt] = uart4_rx_data;
 8001d10:	4b13      	ldr	r3, [pc, #76]	; (8001d60 <UART4_IRQHandler+0xe0>)
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	461a      	mov	r2, r3
 8001d16:	4b10      	ldr	r3, [pc, #64]	; (8001d58 <UART4_IRQHandler+0xd8>)
 8001d18:	7819      	ldrb	r1, [r3, #0]
 8001d1a:	4b12      	ldr	r3, [pc, #72]	; (8001d64 <UART4_IRQHandler+0xe4>)
 8001d1c:	5499      	strb	r1, [r3, r2]
				cnt=0;
 8001d1e:	4b10      	ldr	r3, [pc, #64]	; (8001d60 <UART4_IRQHandler+0xe0>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	701a      	strb	r2, [r3, #0]
				m8n_rx_cplt_flag = 1;
 8001d24:	4b10      	ldr	r3, [pc, #64]	; (8001d68 <UART4_IRQHandler+0xe8>)
 8001d26:	2201      	movs	r2, #1
 8001d28:	701a      	strb	r2, [r3, #0]
				break;
 8001d2a:	e010      	b.n	8001d4e <UART4_IRQHandler+0xce>
			default:
				m8n_rxbuff[cnt] = uart4_rx_data;
 8001d2c:	4b0c      	ldr	r3, [pc, #48]	; (8001d60 <UART4_IRQHandler+0xe0>)
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	461a      	mov	r2, r3
 8001d32:	4b09      	ldr	r3, [pc, #36]	; (8001d58 <UART4_IRQHandler+0xd8>)
 8001d34:	7819      	ldrb	r1, [r3, #0]
 8001d36:	4b0b      	ldr	r3, [pc, #44]	; (8001d64 <UART4_IRQHandler+0xe4>)
 8001d38:	5499      	strb	r1, [r3, r2]
				cnt++;
 8001d3a:	4b09      	ldr	r3, [pc, #36]	; (8001d60 <UART4_IRQHandler+0xe0>)
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	3301      	adds	r3, #1
 8001d40:	b2da      	uxtb	r2, r3
 8001d42:	4b07      	ldr	r3, [pc, #28]	; (8001d60 <UART4_IRQHandler+0xe0>)
 8001d44:	701a      	strb	r2, [r3, #0]
				break;
 8001d46:	e002      	b.n	8001d4e <UART4_IRQHandler+0xce>
			}
		}
 8001d48:	bf00      	nop
 8001d4a:	e000      	b.n	8001d4e <UART4_IRQHandler+0xce>
				break;
 8001d4c:	bf00      	nop
  /* USER CODE END UART4_IRQn 0 */
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001d4e:	bf00      	nop
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	40004c00 	.word	0x40004c00
 8001d58:	2000021d 	.word	0x2000021d
 8001d5c:	2000021c 	.word	0x2000021c
 8001d60:	20000269 	.word	0x20000269
 8001d64:	20000244 	.word	0x20000244
 8001d68:	20000268 	.word	0x20000268

08001d6c <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */
	static unsigned char cnt2 = 0;
		if(LL_USART_IsActiveFlag_RXNE(UART5)) // bu bir receive işlemi mi?
 8001d70:	4833      	ldr	r0, [pc, #204]	; (8001e40 <UART5_IRQHandler+0xd4>)
 8001d72:	f7ff ff2d 	bl	8001bd0 <LL_USART_IsActiveFlag_RXNE>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d05b      	beq.n	8001e34 <UART5_IRQHandler+0xc8>
			{
				LL_USART_ClearFlag_RXNE(UART5); // bayragı temizle
 8001d7c:	4830      	ldr	r0, [pc, #192]	; (8001e40 <UART5_IRQHandler+0xd4>)
 8001d7e:	f7ff ff3a 	bl	8001bf6 <LL_USART_ClearFlag_RXNE>
				uart5_rx_data = LL_USART_ReceiveData8(UART5); // veriyi alalım
 8001d82:	482f      	ldr	r0, [pc, #188]	; (8001e40 <UART5_IRQHandler+0xd4>)
 8001d84:	f7ff ff45 	bl	8001c12 <LL_USART_ReceiveData8>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	4b2d      	ldr	r3, [pc, #180]	; (8001e44 <UART5_IRQHandler+0xd8>)
 8001d8e:	701a      	strb	r2, [r3, #0]
				uart5_rx_flag = 1; // once main icerisindeki while kodu okunacak
 8001d90:	4b2d      	ldr	r3, [pc, #180]	; (8001e48 <UART5_IRQHandler+0xdc>)
 8001d92:	2201      	movs	r2, #1
 8001d94:	701a      	strb	r2, [r3, #0]

				switch(cnt2)
 8001d96:	4b2d      	ldr	r3, [pc, #180]	; (8001e4c <UART5_IRQHandler+0xe0>)
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	2b1f      	cmp	r3, #31
 8001d9c:	d02e      	beq.n	8001dfc <UART5_IRQHandler+0x90>
 8001d9e:	2b1f      	cmp	r3, #31
 8001da0:	dc3a      	bgt.n	8001e18 <UART5_IRQHandler+0xac>
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d002      	beq.n	8001dac <UART5_IRQHandler+0x40>
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d012      	beq.n	8001dd0 <UART5_IRQHandler+0x64>
 8001daa:	e035      	b.n	8001e18 <UART5_IRQHandler+0xac>
				{
				case 0:
					if(uart5_rx_data == 0x20)
 8001dac:	4b25      	ldr	r3, [pc, #148]	; (8001e44 <UART5_IRQHandler+0xd8>)
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	2b20      	cmp	r3, #32
 8001db2:	d141      	bne.n	8001e38 <UART5_IRQHandler+0xcc>
					{
						ibus_rxbuff[cnt2] = uart5_rx_data;
 8001db4:	4b25      	ldr	r3, [pc, #148]	; (8001e4c <UART5_IRQHandler+0xe0>)
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	461a      	mov	r2, r3
 8001dba:	4b22      	ldr	r3, [pc, #136]	; (8001e44 <UART5_IRQHandler+0xd8>)
 8001dbc:	7819      	ldrb	r1, [r3, #0]
 8001dbe:	4b24      	ldr	r3, [pc, #144]	; (8001e50 <UART5_IRQHandler+0xe4>)
 8001dc0:	5499      	strb	r1, [r3, r2]
						cnt2++;
 8001dc2:	4b22      	ldr	r3, [pc, #136]	; (8001e4c <UART5_IRQHandler+0xe0>)
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	b2da      	uxtb	r2, r3
 8001dca:	4b20      	ldr	r3, [pc, #128]	; (8001e4c <UART5_IRQHandler+0xe0>)
 8001dcc:	701a      	strb	r2, [r3, #0]

					}
					break;
 8001dce:	e033      	b.n	8001e38 <UART5_IRQHandler+0xcc>
				case 1:
					if(uart5_rx_data == 0x40)
 8001dd0:	4b1c      	ldr	r3, [pc, #112]	; (8001e44 <UART5_IRQHandler+0xd8>)
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	2b40      	cmp	r3, #64	; 0x40
 8001dd6:	d10d      	bne.n	8001df4 <UART5_IRQHandler+0x88>
					{
						ibus_rxbuff[cnt2] = uart5_rx_data;
 8001dd8:	4b1c      	ldr	r3, [pc, #112]	; (8001e4c <UART5_IRQHandler+0xe0>)
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	461a      	mov	r2, r3
 8001dde:	4b19      	ldr	r3, [pc, #100]	; (8001e44 <UART5_IRQHandler+0xd8>)
 8001de0:	7819      	ldrb	r1, [r3, #0]
 8001de2:	4b1b      	ldr	r3, [pc, #108]	; (8001e50 <UART5_IRQHandler+0xe4>)
 8001de4:	5499      	strb	r1, [r3, r2]
						cnt2++;
 8001de6:	4b19      	ldr	r3, [pc, #100]	; (8001e4c <UART5_IRQHandler+0xe0>)
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	3301      	adds	r3, #1
 8001dec:	b2da      	uxtb	r2, r3
 8001dee:	4b17      	ldr	r3, [pc, #92]	; (8001e4c <UART5_IRQHandler+0xe0>)
 8001df0:	701a      	strb	r2, [r3, #0]
					}
					else
						cnt2 = 0;
					break;
 8001df2:	e022      	b.n	8001e3a <UART5_IRQHandler+0xce>
						cnt2 = 0;
 8001df4:	4b15      	ldr	r3, [pc, #84]	; (8001e4c <UART5_IRQHandler+0xe0>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	701a      	strb	r2, [r3, #0]
					break;
 8001dfa:	e01e      	b.n	8001e3a <UART5_IRQHandler+0xce>
					ibus_rxbuff[cnt2] = uart5_rx_data;
					cnt2++;
					break;
					*/
				case 31:
					ibus_rxbuff[cnt2] = uart5_rx_data;
 8001dfc:	4b13      	ldr	r3, [pc, #76]	; (8001e4c <UART5_IRQHandler+0xe0>)
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	461a      	mov	r2, r3
 8001e02:	4b10      	ldr	r3, [pc, #64]	; (8001e44 <UART5_IRQHandler+0xd8>)
 8001e04:	7819      	ldrb	r1, [r3, #0]
 8001e06:	4b12      	ldr	r3, [pc, #72]	; (8001e50 <UART5_IRQHandler+0xe4>)
 8001e08:	5499      	strb	r1, [r3, r2]
					cnt2=0;
 8001e0a:	4b10      	ldr	r3, [pc, #64]	; (8001e4c <UART5_IRQHandler+0xe0>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	701a      	strb	r2, [r3, #0]
					ibus_rx_cplt_flag = 1;
 8001e10:	4b10      	ldr	r3, [pc, #64]	; (8001e54 <UART5_IRQHandler+0xe8>)
 8001e12:	2201      	movs	r2, #1
 8001e14:	701a      	strb	r2, [r3, #0]
					break;
 8001e16:	e010      	b.n	8001e3a <UART5_IRQHandler+0xce>
				default:
					ibus_rxbuff[cnt2] = uart5_rx_data;
 8001e18:	4b0c      	ldr	r3, [pc, #48]	; (8001e4c <UART5_IRQHandler+0xe0>)
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	4b09      	ldr	r3, [pc, #36]	; (8001e44 <UART5_IRQHandler+0xd8>)
 8001e20:	7819      	ldrb	r1, [r3, #0]
 8001e22:	4b0b      	ldr	r3, [pc, #44]	; (8001e50 <UART5_IRQHandler+0xe4>)
 8001e24:	5499      	strb	r1, [r3, r2]
					cnt2++;
 8001e26:	4b09      	ldr	r3, [pc, #36]	; (8001e4c <UART5_IRQHandler+0xe0>)
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	b2da      	uxtb	r2, r3
 8001e2e:	4b07      	ldr	r3, [pc, #28]	; (8001e4c <UART5_IRQHandler+0xe0>)
 8001e30:	701a      	strb	r2, [r3, #0]
					break;
 8001e32:	e002      	b.n	8001e3a <UART5_IRQHandler+0xce>

				}
			}
 8001e34:	bf00      	nop
 8001e36:	e000      	b.n	8001e3a <UART5_IRQHandler+0xce>
					break;
 8001e38:	bf00      	nop

  /* USER CODE END UART5_IRQn 0 */
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8001e3a:	bf00      	nop
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	40005000 	.word	0x40005000
 8001e44:	2000021f 	.word	0x2000021f
 8001e48:	2000021e 	.word	0x2000021e
 8001e4c:	2000026a 	.word	0x2000026a
 8001e50:	20000220 	.word	0x20000220
 8001e54:	20000240 	.word	0x20000240

08001e58 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	if(LL_USART_IsActiveFlag_RXNE(USART6)) // bu bir receive işlemi mi?
 8001e5c:	480a      	ldr	r0, [pc, #40]	; (8001e88 <USART6_IRQHandler+0x30>)
 8001e5e:	f7ff feb7 	bl	8001bd0 <LL_USART_IsActiveFlag_RXNE>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d00c      	beq.n	8001e82 <USART6_IRQHandler+0x2a>
	{
		LL_USART_ClearFlag_RXNE(USART6); // bayragı temizle
 8001e68:	4807      	ldr	r0, [pc, #28]	; (8001e88 <USART6_IRQHandler+0x30>)
 8001e6a:	f7ff fec4 	bl	8001bf6 <LL_USART_ClearFlag_RXNE>
		uart6_rx_data = LL_USART_ReceiveData8(USART6); // veriyi alalım
 8001e6e:	4806      	ldr	r0, [pc, #24]	; (8001e88 <USART6_IRQHandler+0x30>)
 8001e70:	f7ff fecf 	bl	8001c12 <LL_USART_ReceiveData8>
 8001e74:	4603      	mov	r3, r0
 8001e76:	461a      	mov	r2, r3
 8001e78:	4b04      	ldr	r3, [pc, #16]	; (8001e8c <USART6_IRQHandler+0x34>)
 8001e7a:	701a      	strb	r2, [r3, #0]
		uart6_rx_flag = 1; // once main icerisindeki while kodu okunacak
 8001e7c:	4b04      	ldr	r3, [pc, #16]	; (8001e90 <USART6_IRQHandler+0x38>)
 8001e7e:	2201      	movs	r2, #1
 8001e80:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END USART6_IRQn 0 */
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001e82:	bf00      	nop
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	40011400 	.word	0x40011400
 8001e8c:	2000021b 	.word	0x2000021b
 8001e90:	2000021a 	.word	0x2000021a

08001e94 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
	return 1;
 8001e98:	2301      	movs	r3, #1
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <_kill>:

int _kill(int pid, int sig)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001eae:	f003 fb11 	bl	80054d4 <__errno>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2216      	movs	r2, #22
 8001eb6:	601a      	str	r2, [r3, #0]
	return -1;
 8001eb8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3708      	adds	r7, #8
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}

08001ec4 <_exit>:

void _exit (int status)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001ecc:	f04f 31ff 	mov.w	r1, #4294967295
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	f7ff ffe7 	bl	8001ea4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001ed6:	e7fe      	b.n	8001ed6 <_exit+0x12>

08001ed8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b086      	sub	sp, #24
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	60f8      	str	r0, [r7, #12]
 8001ee0:	60b9      	str	r1, [r7, #8]
 8001ee2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	617b      	str	r3, [r7, #20]
 8001ee8:	e00a      	b.n	8001f00 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001eea:	f3af 8000 	nop.w
 8001eee:	4601      	mov	r1, r0
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	1c5a      	adds	r2, r3, #1
 8001ef4:	60ba      	str	r2, [r7, #8]
 8001ef6:	b2ca      	uxtb	r2, r1
 8001ef8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	3301      	adds	r3, #1
 8001efe:	617b      	str	r3, [r7, #20]
 8001f00:	697a      	ldr	r2, [r7, #20]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	dbf0      	blt.n	8001eea <_read+0x12>
	}

return len;
 8001f08:	687b      	ldr	r3, [r7, #4]
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3718      	adds	r7, #24
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001f12:	b480      	push	{r7}
 8001f14:	b083      	sub	sp, #12
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
	return -1;
 8001f1a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	370c      	adds	r7, #12
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr

08001f2a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f2a:	b480      	push	{r7}
 8001f2c:	b083      	sub	sp, #12
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	6078      	str	r0, [r7, #4]
 8001f32:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f3a:	605a      	str	r2, [r3, #4]
	return 0;
 8001f3c:	2300      	movs	r3, #0
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	370c      	adds	r7, #12
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr

08001f4a <_isatty>:

int _isatty(int file)
{
 8001f4a:	b480      	push	{r7}
 8001f4c:	b083      	sub	sp, #12
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	6078      	str	r0, [r7, #4]
	return 1;
 8001f52:	2301      	movs	r3, #1
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	370c      	adds	r7, #12
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b085      	sub	sp, #20
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	60f8      	str	r0, [r7, #12]
 8001f68:	60b9      	str	r1, [r7, #8]
 8001f6a:	607a      	str	r2, [r7, #4]
	return 0;
 8001f6c:	2300      	movs	r3, #0
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3714      	adds	r7, #20
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
	...

08001f7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b086      	sub	sp, #24
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f84:	4a14      	ldr	r2, [pc, #80]	; (8001fd8 <_sbrk+0x5c>)
 8001f86:	4b15      	ldr	r3, [pc, #84]	; (8001fdc <_sbrk+0x60>)
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f90:	4b13      	ldr	r3, [pc, #76]	; (8001fe0 <_sbrk+0x64>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d102      	bne.n	8001f9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f98:	4b11      	ldr	r3, [pc, #68]	; (8001fe0 <_sbrk+0x64>)
 8001f9a:	4a12      	ldr	r2, [pc, #72]	; (8001fe4 <_sbrk+0x68>)
 8001f9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f9e:	4b10      	ldr	r3, [pc, #64]	; (8001fe0 <_sbrk+0x64>)
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4413      	add	r3, r2
 8001fa6:	693a      	ldr	r2, [r7, #16]
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d207      	bcs.n	8001fbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fac:	f003 fa92 	bl	80054d4 <__errno>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	220c      	movs	r2, #12
 8001fb4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fb6:	f04f 33ff 	mov.w	r3, #4294967295
 8001fba:	e009      	b.n	8001fd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fbc:	4b08      	ldr	r3, [pc, #32]	; (8001fe0 <_sbrk+0x64>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fc2:	4b07      	ldr	r3, [pc, #28]	; (8001fe0 <_sbrk+0x64>)
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4413      	add	r3, r2
 8001fca:	4a05      	ldr	r2, [pc, #20]	; (8001fe0 <_sbrk+0x64>)
 8001fcc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fce:	68fb      	ldr	r3, [r7, #12]
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3718      	adds	r7, #24
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	20020000 	.word	0x20020000
 8001fdc:	00000400 	.word	0x00000400
 8001fe0:	2000026c 	.word	0x2000026c
 8001fe4:	200002d0 	.word	0x200002d0

08001fe8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001fec:	4b06      	ldr	r3, [pc, #24]	; (8002008 <SystemInit+0x20>)
 8001fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ff2:	4a05      	ldr	r2, [pc, #20]	; (8002008 <SystemInit+0x20>)
 8001ff4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ff8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ffc:	bf00      	nop
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	e000ed00 	.word	0xe000ed00

0800200c <LL_TIM_EnableARRPreload>:
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	601a      	str	r2, [r3, #0]
}
 8002020:	bf00      	nop
 8002022:	370c      	adds	r7, #12
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr

0800202c <LL_TIM_OC_EnableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 800202c:	b480      	push	{r7}
 800202e:	b085      	sub	sp, #20
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	2b01      	cmp	r3, #1
 800203a:	d01c      	beq.n	8002076 <LL_TIM_OC_EnableFast+0x4a>
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	2b04      	cmp	r3, #4
 8002040:	d017      	beq.n	8002072 <LL_TIM_OC_EnableFast+0x46>
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	2b10      	cmp	r3, #16
 8002046:	d012      	beq.n	800206e <LL_TIM_OC_EnableFast+0x42>
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	2b40      	cmp	r3, #64	; 0x40
 800204c:	d00d      	beq.n	800206a <LL_TIM_OC_EnableFast+0x3e>
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002054:	d007      	beq.n	8002066 <LL_TIM_OC_EnableFast+0x3a>
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800205c:	d101      	bne.n	8002062 <LL_TIM_OC_EnableFast+0x36>
 800205e:	2305      	movs	r3, #5
 8002060:	e00a      	b.n	8002078 <LL_TIM_OC_EnableFast+0x4c>
 8002062:	2306      	movs	r3, #6
 8002064:	e008      	b.n	8002078 <LL_TIM_OC_EnableFast+0x4c>
 8002066:	2304      	movs	r3, #4
 8002068:	e006      	b.n	8002078 <LL_TIM_OC_EnableFast+0x4c>
 800206a:	2303      	movs	r3, #3
 800206c:	e004      	b.n	8002078 <LL_TIM_OC_EnableFast+0x4c>
 800206e:	2302      	movs	r3, #2
 8002070:	e002      	b.n	8002078 <LL_TIM_OC_EnableFast+0x4c>
 8002072:	2301      	movs	r3, #1
 8002074:	e000      	b.n	8002078 <LL_TIM_OC_EnableFast+0x4c>
 8002076:	2300      	movs	r3, #0
 8002078:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	3318      	adds	r3, #24
 800207e:	4619      	mov	r1, r3
 8002080:	7bfb      	ldrb	r3, [r7, #15]
 8002082:	4a0a      	ldr	r2, [pc, #40]	; (80020ac <LL_TIM_OC_EnableFast+0x80>)
 8002084:	5cd3      	ldrb	r3, [r2, r3]
 8002086:	440b      	add	r3, r1
 8002088:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	7bfb      	ldrb	r3, [r7, #15]
 8002090:	4907      	ldr	r1, [pc, #28]	; (80020b0 <LL_TIM_OC_EnableFast+0x84>)
 8002092:	5ccb      	ldrb	r3, [r1, r3]
 8002094:	4619      	mov	r1, r3
 8002096:	2304      	movs	r3, #4
 8002098:	408b      	lsls	r3, r1
 800209a:	431a      	orrs	r2, r3
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	601a      	str	r2, [r3, #0]

}
 80020a0:	bf00      	nop
 80020a2:	3714      	adds	r7, #20
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr
 80020ac:	08007fec 	.word	0x08007fec
 80020b0:	08007ff4 	.word	0x08007ff4

080020b4 <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b085      	sub	sp, #20
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d01c      	beq.n	80020fe <LL_TIM_OC_EnablePreload+0x4a>
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	2b04      	cmp	r3, #4
 80020c8:	d017      	beq.n	80020fa <LL_TIM_OC_EnablePreload+0x46>
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	2b10      	cmp	r3, #16
 80020ce:	d012      	beq.n	80020f6 <LL_TIM_OC_EnablePreload+0x42>
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	2b40      	cmp	r3, #64	; 0x40
 80020d4:	d00d      	beq.n	80020f2 <LL_TIM_OC_EnablePreload+0x3e>
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020dc:	d007      	beq.n	80020ee <LL_TIM_OC_EnablePreload+0x3a>
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020e4:	d101      	bne.n	80020ea <LL_TIM_OC_EnablePreload+0x36>
 80020e6:	2305      	movs	r3, #5
 80020e8:	e00a      	b.n	8002100 <LL_TIM_OC_EnablePreload+0x4c>
 80020ea:	2306      	movs	r3, #6
 80020ec:	e008      	b.n	8002100 <LL_TIM_OC_EnablePreload+0x4c>
 80020ee:	2304      	movs	r3, #4
 80020f0:	e006      	b.n	8002100 <LL_TIM_OC_EnablePreload+0x4c>
 80020f2:	2303      	movs	r3, #3
 80020f4:	e004      	b.n	8002100 <LL_TIM_OC_EnablePreload+0x4c>
 80020f6:	2302      	movs	r3, #2
 80020f8:	e002      	b.n	8002100 <LL_TIM_OC_EnablePreload+0x4c>
 80020fa:	2301      	movs	r3, #1
 80020fc:	e000      	b.n	8002100 <LL_TIM_OC_EnablePreload+0x4c>
 80020fe:	2300      	movs	r3, #0
 8002100:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	3318      	adds	r3, #24
 8002106:	4619      	mov	r1, r3
 8002108:	7bfb      	ldrb	r3, [r7, #15]
 800210a:	4a0a      	ldr	r2, [pc, #40]	; (8002134 <LL_TIM_OC_EnablePreload+0x80>)
 800210c:	5cd3      	ldrb	r3, [r2, r3]
 800210e:	440b      	add	r3, r1
 8002110:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	7bfb      	ldrb	r3, [r7, #15]
 8002118:	4907      	ldr	r1, [pc, #28]	; (8002138 <LL_TIM_OC_EnablePreload+0x84>)
 800211a:	5ccb      	ldrb	r3, [r1, r3]
 800211c:	4619      	mov	r1, r3
 800211e:	2308      	movs	r3, #8
 8002120:	408b      	lsls	r3, r1
 8002122:	431a      	orrs	r2, r3
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	601a      	str	r2, [r3, #0]
}
 8002128:	bf00      	nop
 800212a:	3714      	adds	r7, #20
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr
 8002134:	08007fec 	.word	0x08007fec
 8002138:	08007ff4 	.word	0x08007ff4

0800213c <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800214e:	f023 0307 	bic.w	r3, r3, #7
 8002152:	683a      	ldr	r2, [r7, #0]
 8002154:	431a      	orrs	r2, r3
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	609a      	str	r2, [r3, #8]
}
 800215a:	bf00      	nop
 800215c:	370c      	adds	r7, #12
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr

08002166 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8002166:	b480      	push	{r7}
 8002168:	b083      	sub	sp, #12
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
 800216e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	431a      	orrs	r2, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	605a      	str	r2, [r3, #4]
}
 8002180:	bf00      	nop
 8002182:	370c      	adds	r7, #12
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr

0800218c <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	609a      	str	r2, [r3, #8]
}
 80021a0:	bf00      	nop
 80021a2:	370c      	adds	r7, #12
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr

080021ac <LL_AHB1_GRP1_EnableClock>:
{
 80021ac:	b480      	push	{r7}
 80021ae:	b085      	sub	sp, #20
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80021b4:	4b08      	ldr	r3, [pc, #32]	; (80021d8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80021b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021b8:	4907      	ldr	r1, [pc, #28]	; (80021d8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4313      	orrs	r3, r2
 80021be:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80021c0:	4b05      	ldr	r3, [pc, #20]	; (80021d8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80021c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	4013      	ands	r3, r2
 80021c8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80021ca:	68fb      	ldr	r3, [r7, #12]
}
 80021cc:	bf00      	nop
 80021ce:	3714      	adds	r7, #20
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr
 80021d8:	40023800 	.word	0x40023800

080021dc <LL_APB1_GRP1_EnableClock>:
{
 80021dc:	b480      	push	{r7}
 80021de:	b085      	sub	sp, #20
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80021e4:	4b08      	ldr	r3, [pc, #32]	; (8002208 <LL_APB1_GRP1_EnableClock+0x2c>)
 80021e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021e8:	4907      	ldr	r1, [pc, #28]	; (8002208 <LL_APB1_GRP1_EnableClock+0x2c>)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4313      	orrs	r3, r2
 80021ee:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80021f0:	4b05      	ldr	r3, [pc, #20]	; (8002208 <LL_APB1_GRP1_EnableClock+0x2c>)
 80021f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	4013      	ands	r3, r2
 80021f8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80021fa:	68fb      	ldr	r3, [r7, #12]
}
 80021fc:	bf00      	nop
 80021fe:	3714      	adds	r7, #20
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr
 8002208:	40023800 	.word	0x40023800

0800220c <MX_TIM3_Init>:

TIM_HandleTypeDef htim5;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b094      	sub	sp, #80	; 0x50
 8002210:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002212:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002216:	2200      	movs	r2, #0
 8002218:	601a      	str	r2, [r3, #0]
 800221a:	605a      	str	r2, [r3, #4]
 800221c:	609a      	str	r2, [r3, #8]
 800221e:	60da      	str	r2, [r3, #12]
 8002220:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8002222:	f107 031c 	add.w	r3, r7, #28
 8002226:	2220      	movs	r2, #32
 8002228:	2100      	movs	r1, #0
 800222a:	4618      	mov	r0, r3
 800222c:	f003 f97c 	bl	8005528 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002230:	1d3b      	adds	r3, r7, #4
 8002232:	2200      	movs	r2, #0
 8002234:	601a      	str	r2, [r3, #0]
 8002236:	605a      	str	r2, [r3, #4]
 8002238:	609a      	str	r2, [r3, #8]
 800223a:	60da      	str	r2, [r3, #12]
 800223c:	611a      	str	r2, [r3, #16]
 800223e:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8002240:	2002      	movs	r0, #2
 8002242:	f7ff ffcb 	bl	80021dc <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 999;
 8002246:	f240 33e7 	movw	r3, #999	; 0x3e7
 800224a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800224c:	2300      	movs	r3, #0
 800224e:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 20;
 8002250:	2314      	movs	r3, #20
 8002252:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002254:	2300      	movs	r3, #0
 8002256:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8002258:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800225c:	4619      	mov	r1, r3
 800225e:	4822      	ldr	r0, [pc, #136]	; (80022e8 <MX_TIM3_Init+0xdc>)
 8002260:	f002 fbd2 	bl	8004a08 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM3);
 8002264:	4820      	ldr	r0, [pc, #128]	; (80022e8 <MX_TIM3_Init+0xdc>)
 8002266:	f7ff fed1 	bl	800200c <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 800226a:	2100      	movs	r1, #0
 800226c:	481e      	ldr	r0, [pc, #120]	; (80022e8 <MX_TIM3_Init+0xdc>)
 800226e:	f7ff ff65 	bl	800213c <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH4);
 8002272:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002276:	481c      	ldr	r0, [pc, #112]	; (80022e8 <MX_TIM3_Init+0xdc>)
 8002278:	f7ff ff1c 	bl	80020b4 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 800227c:	2360      	movs	r3, #96	; 0x60
 800227e:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8002280:	2300      	movs	r3, #0
 8002282:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8002284:	2300      	movs	r3, #0
 8002286:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 10;
 8002288:	230a      	movs	r3, #10
 800228a:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 800228c:	2300      	movs	r3, #0
 800228e:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 8002290:	f107 031c 	add.w	r3, r7, #28
 8002294:	461a      	mov	r2, r3
 8002296:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800229a:	4813      	ldr	r0, [pc, #76]	; (80022e8 <MX_TIM3_Init+0xdc>)
 800229c:	f002 fc4e 	bl	8004b3c <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM3, LL_TIM_CHANNEL_CH4);
 80022a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022a4:	4810      	ldr	r0, [pc, #64]	; (80022e8 <MX_TIM3_Init+0xdc>)
 80022a6:	f7ff fec1 	bl	800202c <LL_TIM_OC_EnableFast>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 80022aa:	2100      	movs	r1, #0
 80022ac:	480e      	ldr	r0, [pc, #56]	; (80022e8 <MX_TIM3_Init+0xdc>)
 80022ae:	f7ff ff5a 	bl	8002166 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 80022b2:	480d      	ldr	r0, [pc, #52]	; (80022e8 <MX_TIM3_Init+0xdc>)
 80022b4:	f7ff ff6a 	bl	800218c <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80022b8:	2002      	movs	r0, #2
 80022ba:	f7ff ff77 	bl	80021ac <LL_AHB1_GRP1_EnableClock>
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
  GPIO_InitStruct.Pin = BUZZER_TIM3_CH4_Pin;
 80022be:	2302      	movs	r3, #2
 80022c0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80022c2:	2302      	movs	r3, #2
 80022c4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80022c6:	2300      	movs	r3, #0
 80022c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80022ca:	2300      	movs	r3, #0
 80022cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80022ce:	2300      	movs	r3, #0
 80022d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 80022d2:	2302      	movs	r3, #2
 80022d4:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(BUZZER_TIM3_CH4_GPIO_Port, &GPIO_InitStruct);
 80022d6:	1d3b      	adds	r3, r7, #4
 80022d8:	4619      	mov	r1, r3
 80022da:	4804      	ldr	r0, [pc, #16]	; (80022ec <MX_TIM3_Init+0xe0>)
 80022dc:	f002 f975 	bl	80045ca <LL_GPIO_Init>

}
 80022e0:	bf00      	nop
 80022e2:	3750      	adds	r7, #80	; 0x50
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	40000400 	.word	0x40000400
 80022ec:	40020400 	.word	0x40020400

080022f0 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b08e      	sub	sp, #56	; 0x38
 80022f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022fa:	2200      	movs	r2, #0
 80022fc:	601a      	str	r2, [r3, #0]
 80022fe:	605a      	str	r2, [r3, #4]
 8002300:	609a      	str	r2, [r3, #8]
 8002302:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002304:	f107 0320 	add.w	r3, r7, #32
 8002308:	2200      	movs	r2, #0
 800230a:	601a      	str	r2, [r3, #0]
 800230c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800230e:	1d3b      	adds	r3, r7, #4
 8002310:	2200      	movs	r2, #0
 8002312:	601a      	str	r2, [r3, #0]
 8002314:	605a      	str	r2, [r3, #4]
 8002316:	609a      	str	r2, [r3, #8]
 8002318:	60da      	str	r2, [r3, #12]
 800231a:	611a      	str	r2, [r3, #16]
 800231c:	615a      	str	r2, [r3, #20]
 800231e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002320:	4b3f      	ldr	r3, [pc, #252]	; (8002420 <MX_TIM5_Init+0x130>)
 8002322:	4a40      	ldr	r2, [pc, #256]	; (8002424 <MX_TIM5_Init+0x134>)
 8002324:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002326:	4b3e      	ldr	r3, [pc, #248]	; (8002420 <MX_TIM5_Init+0x130>)
 8002328:	2200      	movs	r2, #0
 800232a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800232c:	4b3c      	ldr	r3, [pc, #240]	; (8002420 <MX_TIM5_Init+0x130>)
 800232e:	2200      	movs	r2, #0
 8002330:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 41999;
 8002332:	4b3b      	ldr	r3, [pc, #236]	; (8002420 <MX_TIM5_Init+0x130>)
 8002334:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8002338:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800233a:	4b39      	ldr	r3, [pc, #228]	; (8002420 <MX_TIM5_Init+0x130>)
 800233c:	2200      	movs	r2, #0
 800233e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002340:	4b37      	ldr	r3, [pc, #220]	; (8002420 <MX_TIM5_Init+0x130>)
 8002342:	2280      	movs	r2, #128	; 0x80
 8002344:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002346:	4836      	ldr	r0, [pc, #216]	; (8002420 <MX_TIM5_Init+0x130>)
 8002348:	f001 faa2 	bl	8003890 <HAL_TIM_Base_Init>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d001      	beq.n	8002356 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 8002352:	f7ff fc0f 	bl	8001b74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002356:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800235a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800235c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002360:	4619      	mov	r1, r3
 8002362:	482f      	ldr	r0, [pc, #188]	; (8002420 <MX_TIM5_Init+0x130>)
 8002364:	f001 fbfe 	bl	8003b64 <HAL_TIM_ConfigClockSource>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d001      	beq.n	8002372 <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 800236e:	f7ff fc01 	bl	8001b74 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002372:	482b      	ldr	r0, [pc, #172]	; (8002420 <MX_TIM5_Init+0x130>)
 8002374:	f001 fadb 	bl	800392e <HAL_TIM_PWM_Init>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d001      	beq.n	8002382 <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 800237e:	f7ff fbf9 	bl	8001b74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002382:	2300      	movs	r3, #0
 8002384:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002386:	2300      	movs	r3, #0
 8002388:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800238a:	f107 0320 	add.w	r3, r7, #32
 800238e:	4619      	mov	r1, r3
 8002390:	4823      	ldr	r0, [pc, #140]	; (8002420 <MX_TIM5_Init+0x130>)
 8002392:	f001 ff99 	bl	80042c8 <HAL_TIMEx_MasterConfigSynchronization>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d001      	beq.n	80023a0 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 800239c:	f7ff fbea 	bl	8001b74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023a0:	2360      	movs	r3, #96	; 0x60
 80023a2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80023a4:	2300      	movs	r3, #0
 80023a6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023a8:	2300      	movs	r3, #0
 80023aa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80023ac:	2304      	movs	r3, #4
 80023ae:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80023b0:	1d3b      	adds	r3, r7, #4
 80023b2:	2200      	movs	r2, #0
 80023b4:	4619      	mov	r1, r3
 80023b6:	481a      	ldr	r0, [pc, #104]	; (8002420 <MX_TIM5_Init+0x130>)
 80023b8:	f001 fb12 	bl	80039e0 <HAL_TIM_PWM_ConfigChannel>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d001      	beq.n	80023c6 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 80023c2:	f7ff fbd7 	bl	8001b74 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80023c6:	1d3b      	adds	r3, r7, #4
 80023c8:	2204      	movs	r2, #4
 80023ca:	4619      	mov	r1, r3
 80023cc:	4814      	ldr	r0, [pc, #80]	; (8002420 <MX_TIM5_Init+0x130>)
 80023ce:	f001 fb07 	bl	80039e0 <HAL_TIM_PWM_ConfigChannel>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d001      	beq.n	80023dc <MX_TIM5_Init+0xec>
  {
    Error_Handler();
 80023d8:	f7ff fbcc 	bl	8001b74 <Error_Handler>
  }
  sConfigOC.Pulse = 31500;
 80023dc:	f647 330c 	movw	r3, #31500	; 0x7b0c
 80023e0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80023e2:	1d3b      	adds	r3, r7, #4
 80023e4:	2208      	movs	r2, #8
 80023e6:	4619      	mov	r1, r3
 80023e8:	480d      	ldr	r0, [pc, #52]	; (8002420 <MX_TIM5_Init+0x130>)
 80023ea:	f001 faf9 	bl	80039e0 <HAL_TIM_PWM_ConfigChannel>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d001      	beq.n	80023f8 <MX_TIM5_Init+0x108>
  {
    Error_Handler();
 80023f4:	f7ff fbbe 	bl	8001b74 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 80023f8:	2300      	movs	r3, #0
 80023fa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80023fc:	1d3b      	adds	r3, r7, #4
 80023fe:	220c      	movs	r2, #12
 8002400:	4619      	mov	r1, r3
 8002402:	4807      	ldr	r0, [pc, #28]	; (8002420 <MX_TIM5_Init+0x130>)
 8002404:	f001 faec 	bl	80039e0 <HAL_TIM_PWM_ConfigChannel>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <MX_TIM5_Init+0x122>
  {
    Error_Handler();
 800240e:	f7ff fbb1 	bl	8001b74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002412:	4803      	ldr	r0, [pc, #12]	; (8002420 <MX_TIM5_Init+0x130>)
 8002414:	f000 f82a 	bl	800246c <HAL_TIM_MspPostInit>

}
 8002418:	bf00      	nop
 800241a:	3738      	adds	r7, #56	; 0x38
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}
 8002420:	20000270 	.word	0x20000270
 8002424:	40000c00 	.word	0x40000c00

08002428 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002428:	b480      	push	{r7}
 800242a:	b085      	sub	sp, #20
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM5)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a0b      	ldr	r2, [pc, #44]	; (8002464 <HAL_TIM_Base_MspInit+0x3c>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d10d      	bne.n	8002456 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800243a:	2300      	movs	r3, #0
 800243c:	60fb      	str	r3, [r7, #12]
 800243e:	4b0a      	ldr	r3, [pc, #40]	; (8002468 <HAL_TIM_Base_MspInit+0x40>)
 8002440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002442:	4a09      	ldr	r2, [pc, #36]	; (8002468 <HAL_TIM_Base_MspInit+0x40>)
 8002444:	f043 0308 	orr.w	r3, r3, #8
 8002448:	6413      	str	r3, [r2, #64]	; 0x40
 800244a:	4b07      	ldr	r3, [pc, #28]	; (8002468 <HAL_TIM_Base_MspInit+0x40>)
 800244c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244e:	f003 0308 	and.w	r3, r3, #8
 8002452:	60fb      	str	r3, [r7, #12]
 8002454:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8002456:	bf00      	nop
 8002458:	3714      	adds	r7, #20
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr
 8002462:	bf00      	nop
 8002464:	40000c00 	.word	0x40000c00
 8002468:	40023800 	.word	0x40023800

0800246c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b088      	sub	sp, #32
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002474:	f107 030c 	add.w	r3, r7, #12
 8002478:	2200      	movs	r2, #0
 800247a:	601a      	str	r2, [r3, #0]
 800247c:	605a      	str	r2, [r3, #4]
 800247e:	609a      	str	r2, [r3, #8]
 8002480:	60da      	str	r2, [r3, #12]
 8002482:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM5)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a12      	ldr	r2, [pc, #72]	; (80024d4 <HAL_TIM_MspPostInit+0x68>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d11d      	bne.n	80024ca <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800248e:	2300      	movs	r3, #0
 8002490:	60bb      	str	r3, [r7, #8]
 8002492:	4b11      	ldr	r3, [pc, #68]	; (80024d8 <HAL_TIM_MspPostInit+0x6c>)
 8002494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002496:	4a10      	ldr	r2, [pc, #64]	; (80024d8 <HAL_TIM_MspPostInit+0x6c>)
 8002498:	f043 0301 	orr.w	r3, r3, #1
 800249c:	6313      	str	r3, [r2, #48]	; 0x30
 800249e:	4b0e      	ldr	r3, [pc, #56]	; (80024d8 <HAL_TIM_MspPostInit+0x6c>)
 80024a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a2:	f003 0301 	and.w	r3, r3, #1
 80024a6:	60bb      	str	r3, [r7, #8]
 80024a8:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    PA2     ------> TIM5_CH3
    PA3     ------> TIM5_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80024aa:	230f      	movs	r3, #15
 80024ac:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ae:	2302      	movs	r3, #2
 80024b0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b2:	2300      	movs	r3, #0
 80024b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024b6:	2300      	movs	r3, #0
 80024b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80024ba:	2302      	movs	r3, #2
 80024bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024be:	f107 030c 	add.w	r3, r7, #12
 80024c2:	4619      	mov	r1, r3
 80024c4:	4805      	ldr	r0, [pc, #20]	; (80024dc <HAL_TIM_MspPostInit+0x70>)
 80024c6:	f000 fbe3 	bl	8002c90 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80024ca:	bf00      	nop
 80024cc:	3720      	adds	r7, #32
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	40000c00 	.word	0x40000c00
 80024d8:	40023800 	.word	0x40023800
 80024dc:	40020000 	.word	0x40020000

080024e0 <__NVIC_GetPriorityGrouping>:
{
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024e4:	4b04      	ldr	r3, [pc, #16]	; (80024f8 <__NVIC_GetPriorityGrouping+0x18>)
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	0a1b      	lsrs	r3, r3, #8
 80024ea:	f003 0307 	and.w	r3, r3, #7
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr
 80024f8:	e000ed00 	.word	0xe000ed00

080024fc <__NVIC_EnableIRQ>:
{
 80024fc:	b480      	push	{r7}
 80024fe:	b083      	sub	sp, #12
 8002500:	af00      	add	r7, sp, #0
 8002502:	4603      	mov	r3, r0
 8002504:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800250a:	2b00      	cmp	r3, #0
 800250c:	db0b      	blt.n	8002526 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800250e:	79fb      	ldrb	r3, [r7, #7]
 8002510:	f003 021f 	and.w	r2, r3, #31
 8002514:	4907      	ldr	r1, [pc, #28]	; (8002534 <__NVIC_EnableIRQ+0x38>)
 8002516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800251a:	095b      	lsrs	r3, r3, #5
 800251c:	2001      	movs	r0, #1
 800251e:	fa00 f202 	lsl.w	r2, r0, r2
 8002522:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002526:	bf00      	nop
 8002528:	370c      	adds	r7, #12
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop
 8002534:	e000e100 	.word	0xe000e100

08002538 <__NVIC_SetPriority>:
{
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	4603      	mov	r3, r0
 8002540:	6039      	str	r1, [r7, #0]
 8002542:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002544:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002548:	2b00      	cmp	r3, #0
 800254a:	db0a      	blt.n	8002562 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	b2da      	uxtb	r2, r3
 8002550:	490c      	ldr	r1, [pc, #48]	; (8002584 <__NVIC_SetPriority+0x4c>)
 8002552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002556:	0112      	lsls	r2, r2, #4
 8002558:	b2d2      	uxtb	r2, r2
 800255a:	440b      	add	r3, r1
 800255c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002560:	e00a      	b.n	8002578 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	b2da      	uxtb	r2, r3
 8002566:	4908      	ldr	r1, [pc, #32]	; (8002588 <__NVIC_SetPriority+0x50>)
 8002568:	79fb      	ldrb	r3, [r7, #7]
 800256a:	f003 030f 	and.w	r3, r3, #15
 800256e:	3b04      	subs	r3, #4
 8002570:	0112      	lsls	r2, r2, #4
 8002572:	b2d2      	uxtb	r2, r2
 8002574:	440b      	add	r3, r1
 8002576:	761a      	strb	r2, [r3, #24]
}
 8002578:	bf00      	nop
 800257a:	370c      	adds	r7, #12
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr
 8002584:	e000e100 	.word	0xe000e100
 8002588:	e000ed00 	.word	0xe000ed00

0800258c <NVIC_EncodePriority>:
{
 800258c:	b480      	push	{r7}
 800258e:	b089      	sub	sp, #36	; 0x24
 8002590:	af00      	add	r7, sp, #0
 8002592:	60f8      	str	r0, [r7, #12]
 8002594:	60b9      	str	r1, [r7, #8]
 8002596:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f003 0307 	and.w	r3, r3, #7
 800259e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	f1c3 0307 	rsb	r3, r3, #7
 80025a6:	2b04      	cmp	r3, #4
 80025a8:	bf28      	it	cs
 80025aa:	2304      	movcs	r3, #4
 80025ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	3304      	adds	r3, #4
 80025b2:	2b06      	cmp	r3, #6
 80025b4:	d902      	bls.n	80025bc <NVIC_EncodePriority+0x30>
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	3b03      	subs	r3, #3
 80025ba:	e000      	b.n	80025be <NVIC_EncodePriority+0x32>
 80025bc:	2300      	movs	r3, #0
 80025be:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025c0:	f04f 32ff 	mov.w	r2, #4294967295
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ca:	43da      	mvns	r2, r3
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	401a      	ands	r2, r3
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025d4:	f04f 31ff 	mov.w	r1, #4294967295
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	fa01 f303 	lsl.w	r3, r1, r3
 80025de:	43d9      	mvns	r1, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025e4:	4313      	orrs	r3, r2
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3724      	adds	r7, #36	; 0x24
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr

080025f2 <LL_USART_Enable>:
{
 80025f2:	b480      	push	{r7}
 80025f4:	b083      	sub	sp, #12
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	60da      	str	r2, [r3, #12]
}
 8002606:	bf00      	nop
 8002608:	370c      	adds	r7, #12
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr

08002612 <LL_USART_ConfigAsyncMode>:
{
 8002612:	b480      	push	{r7}
 8002614:	b083      	sub	sp, #12
 8002616:	af00      	add	r7, sp, #0
 8002618:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	691b      	ldr	r3, [r3, #16]
 800261e:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	695b      	ldr	r3, [r3, #20]
 800262a:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	615a      	str	r2, [r3, #20]
}
 8002632:	bf00      	nop
 8002634:	370c      	adds	r7, #12
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr
	...

08002640 <LL_AHB1_GRP1_EnableClock>:
{
 8002640:	b480      	push	{r7}
 8002642:	b085      	sub	sp, #20
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002648:	4b08      	ldr	r3, [pc, #32]	; (800266c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800264a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800264c:	4907      	ldr	r1, [pc, #28]	; (800266c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4313      	orrs	r3, r2
 8002652:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002654:	4b05      	ldr	r3, [pc, #20]	; (800266c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002656:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	4013      	ands	r3, r2
 800265c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800265e:	68fb      	ldr	r3, [r7, #12]
}
 8002660:	bf00      	nop
 8002662:	3714      	adds	r7, #20
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr
 800266c:	40023800 	.word	0x40023800

08002670 <LL_APB1_GRP1_EnableClock>:
{
 8002670:	b480      	push	{r7}
 8002672:	b085      	sub	sp, #20
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002678:	4b08      	ldr	r3, [pc, #32]	; (800269c <LL_APB1_GRP1_EnableClock+0x2c>)
 800267a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800267c:	4907      	ldr	r1, [pc, #28]	; (800269c <LL_APB1_GRP1_EnableClock+0x2c>)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4313      	orrs	r3, r2
 8002682:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002684:	4b05      	ldr	r3, [pc, #20]	; (800269c <LL_APB1_GRP1_EnableClock+0x2c>)
 8002686:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	4013      	ands	r3, r2
 800268c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800268e:	68fb      	ldr	r3, [r7, #12]
}
 8002690:	bf00      	nop
 8002692:	3714      	adds	r7, #20
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr
 800269c:	40023800 	.word	0x40023800

080026a0 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b085      	sub	sp, #20
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80026a8:	4b08      	ldr	r3, [pc, #32]	; (80026cc <LL_APB2_GRP1_EnableClock+0x2c>)
 80026aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80026ac:	4907      	ldr	r1, [pc, #28]	; (80026cc <LL_APB2_GRP1_EnableClock+0x2c>)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80026b4:	4b05      	ldr	r3, [pc, #20]	; (80026cc <LL_APB2_GRP1_EnableClock+0x2c>)
 80026b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	4013      	ands	r3, r2
 80026bc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80026be:	68fb      	ldr	r3, [r7, #12]
}
 80026c0:	bf00      	nop
 80026c2:	3714      	adds	r7, #20
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr
 80026cc:	40023800 	.word	0x40023800

080026d0 <MX_UART4_Init>:

/* USER CODE END 0 */

/* UART4 init function */
void MX_UART4_Init(void)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b08e      	sub	sp, #56	; 0x38
 80026d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART4_Init 0 */

  /* USER CODE END UART4_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80026d6:	f107 031c 	add.w	r3, r7, #28
 80026da:	2200      	movs	r2, #0
 80026dc:	601a      	str	r2, [r3, #0]
 80026de:	605a      	str	r2, [r3, #4]
 80026e0:	609a      	str	r2, [r3, #8]
 80026e2:	60da      	str	r2, [r3, #12]
 80026e4:	611a      	str	r2, [r3, #16]
 80026e6:	615a      	str	r2, [r3, #20]
 80026e8:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026ea:	1d3b      	adds	r3, r7, #4
 80026ec:	2200      	movs	r2, #0
 80026ee:	601a      	str	r2, [r3, #0]
 80026f0:	605a      	str	r2, [r3, #4]
 80026f2:	609a      	str	r2, [r3, #8]
 80026f4:	60da      	str	r2, [r3, #12]
 80026f6:	611a      	str	r2, [r3, #16]
 80026f8:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART4);
 80026fa:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80026fe:	f7ff ffb7 	bl	8002670 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8002702:	2004      	movs	r0, #4
 8002704:	f7ff ff9c 	bl	8002640 <LL_AHB1_GRP1_EnableClock>
  /**UART4 GPIO Configuration
  PC10   ------> UART4_TX
  PC11   ------> UART4_RX
  */
  GPIO_InitStruct.Pin = GPS_UART4_TX_Pin|GPS_UART4_RX_Pin;
 8002708:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800270c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800270e:	2302      	movs	r3, #2
 8002710:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002712:	2303      	movs	r3, #3
 8002714:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002716:	2300      	movs	r3, #0
 8002718:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800271a:	2300      	movs	r3, #0
 800271c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 800271e:	2308      	movs	r3, #8
 8002720:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002722:	1d3b      	adds	r3, r7, #4
 8002724:	4619      	mov	r1, r3
 8002726:	4819      	ldr	r0, [pc, #100]	; (800278c <MX_UART4_Init+0xbc>)
 8002728:	f001 ff4f 	bl	80045ca <LL_GPIO_Init>

  /* UART4 interrupt Init */
  NVIC_SetPriority(UART4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800272c:	f7ff fed8 	bl	80024e0 <__NVIC_GetPriorityGrouping>
 8002730:	4603      	mov	r3, r0
 8002732:	2200      	movs	r2, #0
 8002734:	2100      	movs	r1, #0
 8002736:	4618      	mov	r0, r3
 8002738:	f7ff ff28 	bl	800258c <NVIC_EncodePriority>
 800273c:	4603      	mov	r3, r0
 800273e:	4619      	mov	r1, r3
 8002740:	2034      	movs	r0, #52	; 0x34
 8002742:	f7ff fef9 	bl	8002538 <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART4_IRQn);
 8002746:	2034      	movs	r0, #52	; 0x34
 8002748:	f7ff fed8 	bl	80024fc <__NVIC_EnableIRQ>

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  USART_InitStruct.BaudRate = 9600;
 800274c:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8002750:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002752:	2300      	movs	r3, #0
 8002754:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002756:	2300      	movs	r3, #0
 8002758:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800275a:	2300      	movs	r3, #0
 800275c:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800275e:	230c      	movs	r3, #12
 8002760:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002762:	2300      	movs	r3, #0
 8002764:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002766:	2300      	movs	r3, #0
 8002768:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(UART4, &USART_InitStruct);
 800276a:	f107 031c 	add.w	r3, r7, #28
 800276e:	4619      	mov	r1, r3
 8002770:	4807      	ldr	r0, [pc, #28]	; (8002790 <MX_UART4_Init+0xc0>)
 8002772:	f002 fe2f 	bl	80053d4 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART4);
 8002776:	4806      	ldr	r0, [pc, #24]	; (8002790 <MX_UART4_Init+0xc0>)
 8002778:	f7ff ff4b 	bl	8002612 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART4);
 800277c:	4804      	ldr	r0, [pc, #16]	; (8002790 <MX_UART4_Init+0xc0>)
 800277e:	f7ff ff38 	bl	80025f2 <LL_USART_Enable>
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002782:	bf00      	nop
 8002784:	3738      	adds	r7, #56	; 0x38
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	40020800 	.word	0x40020800
 8002790:	40004c00 	.word	0x40004c00

08002794 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b08e      	sub	sp, #56	; 0x38
 8002798:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART5_Init 0 */

  /* USER CODE END UART5_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800279a:	f107 031c 	add.w	r3, r7, #28
 800279e:	2200      	movs	r2, #0
 80027a0:	601a      	str	r2, [r3, #0]
 80027a2:	605a      	str	r2, [r3, #4]
 80027a4:	609a      	str	r2, [r3, #8]
 80027a6:	60da      	str	r2, [r3, #12]
 80027a8:	611a      	str	r2, [r3, #16]
 80027aa:	615a      	str	r2, [r3, #20]
 80027ac:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027ae:	1d3b      	adds	r3, r7, #4
 80027b0:	2200      	movs	r2, #0
 80027b2:	601a      	str	r2, [r3, #0]
 80027b4:	605a      	str	r2, [r3, #4]
 80027b6:	609a      	str	r2, [r3, #8]
 80027b8:	60da      	str	r2, [r3, #12]
 80027ba:	611a      	str	r2, [r3, #16]
 80027bc:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART5);
 80027be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80027c2:	f7ff ff55 	bl	8002670 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80027c6:	2004      	movs	r0, #4
 80027c8:	f7ff ff3a 	bl	8002640 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 80027cc:	2008      	movs	r0, #8
 80027ce:	f7ff ff37 	bl	8002640 <LL_AHB1_GRP1_EnableClock>
  /**UART5 GPIO Configuration
  PC12   ------> UART5_TX
  PD2   ------> UART5_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12;
 80027d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027d6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80027d8:	2302      	movs	r3, #2
 80027da:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80027dc:	2303      	movs	r3, #3
 80027de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80027e0:	2300      	movs	r3, #0
 80027e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80027e4:	2300      	movs	r3, #0
 80027e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 80027e8:	2308      	movs	r3, #8
 80027ea:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027ec:	1d3b      	adds	r3, r7, #4
 80027ee:	4619      	mov	r1, r3
 80027f0:	4821      	ldr	r0, [pc, #132]	; (8002878 <MX_UART5_Init+0xe4>)
 80027f2:	f001 feea 	bl	80045ca <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 80027f6:	2304      	movs	r3, #4
 80027f8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80027fa:	2302      	movs	r3, #2
 80027fc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80027fe:	2303      	movs	r3, #3
 8002800:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002802:	2300      	movs	r3, #0
 8002804:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002806:	2300      	movs	r3, #0
 8002808:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 800280a:	2308      	movs	r3, #8
 800280c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800280e:	1d3b      	adds	r3, r7, #4
 8002810:	4619      	mov	r1, r3
 8002812:	481a      	ldr	r0, [pc, #104]	; (800287c <MX_UART5_Init+0xe8>)
 8002814:	f001 fed9 	bl	80045ca <LL_GPIO_Init>

  /* UART5 interrupt Init */
  NVIC_SetPriority(UART5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002818:	f7ff fe62 	bl	80024e0 <__NVIC_GetPriorityGrouping>
 800281c:	4603      	mov	r3, r0
 800281e:	2200      	movs	r2, #0
 8002820:	2100      	movs	r1, #0
 8002822:	4618      	mov	r0, r3
 8002824:	f7ff feb2 	bl	800258c <NVIC_EncodePriority>
 8002828:	4603      	mov	r3, r0
 800282a:	4619      	mov	r1, r3
 800282c:	2035      	movs	r0, #53	; 0x35
 800282e:	f7ff fe83 	bl	8002538 <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART5_IRQn);
 8002832:	2035      	movs	r0, #53	; 0x35
 8002834:	f7ff fe62 	bl	80024fc <__NVIC_EnableIRQ>

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8002838:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800283c:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800283e:	2300      	movs	r3, #0
 8002840:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002842:	2300      	movs	r3, #0
 8002844:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002846:	2300      	movs	r3, #0
 8002848:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_RX;
 800284a:	2304      	movs	r3, #4
 800284c:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800284e:	2300      	movs	r3, #0
 8002850:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002852:	2300      	movs	r3, #0
 8002854:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(UART5, &USART_InitStruct);
 8002856:	f107 031c 	add.w	r3, r7, #28
 800285a:	4619      	mov	r1, r3
 800285c:	4808      	ldr	r0, [pc, #32]	; (8002880 <MX_UART5_Init+0xec>)
 800285e:	f002 fdb9 	bl	80053d4 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART5);
 8002862:	4807      	ldr	r0, [pc, #28]	; (8002880 <MX_UART5_Init+0xec>)
 8002864:	f7ff fed5 	bl	8002612 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART5);
 8002868:	4805      	ldr	r0, [pc, #20]	; (8002880 <MX_UART5_Init+0xec>)
 800286a:	f7ff fec2 	bl	80025f2 <LL_USART_Enable>
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800286e:	bf00      	nop
 8002870:	3738      	adds	r7, #56	; 0x38
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	40020800 	.word	0x40020800
 800287c:	40020c00 	.word	0x40020c00
 8002880:	40005000 	.word	0x40005000

08002884 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b08e      	sub	sp, #56	; 0x38
 8002888:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART6_Init 0 */

  /* USER CODE END USART6_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800288a:	f107 031c 	add.w	r3, r7, #28
 800288e:	2200      	movs	r2, #0
 8002890:	601a      	str	r2, [r3, #0]
 8002892:	605a      	str	r2, [r3, #4]
 8002894:	609a      	str	r2, [r3, #8]
 8002896:	60da      	str	r2, [r3, #12]
 8002898:	611a      	str	r2, [r3, #16]
 800289a:	615a      	str	r2, [r3, #20]
 800289c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800289e:	1d3b      	adds	r3, r7, #4
 80028a0:	2200      	movs	r2, #0
 80028a2:	601a      	str	r2, [r3, #0]
 80028a4:	605a      	str	r2, [r3, #4]
 80028a6:	609a      	str	r2, [r3, #8]
 80028a8:	60da      	str	r2, [r3, #12]
 80028aa:	611a      	str	r2, [r3, #16]
 80028ac:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART6);
 80028ae:	2020      	movs	r0, #32
 80028b0:	f7ff fef6 	bl	80026a0 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80028b4:	2004      	movs	r0, #4
 80028b6:	f7ff fec3 	bl	8002640 <LL_AHB1_GRP1_EnableClock>
  /**USART6 GPIO Configuration
  PC6   ------> USART6_TX
  PC7   ------> USART6_RX
  */
  GPIO_InitStruct.Pin = TELEMETRI_USART6_TX_Pin|TELEMETRI_USART6_RX_Pin;
 80028ba:	23c0      	movs	r3, #192	; 0xc0
 80028bc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80028be:	2302      	movs	r3, #2
 80028c0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80028c2:	2303      	movs	r3, #3
 80028c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80028c6:	2300      	movs	r3, #0
 80028c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80028ca:	2300      	movs	r3, #0
 80028cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 80028ce:	2308      	movs	r3, #8
 80028d0:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028d2:	1d3b      	adds	r3, r7, #4
 80028d4:	4619      	mov	r1, r3
 80028d6:	4819      	ldr	r0, [pc, #100]	; (800293c <MX_USART6_UART_Init+0xb8>)
 80028d8:	f001 fe77 	bl	80045ca <LL_GPIO_Init>

  /* USART6 interrupt Init */
  NVIC_SetPriority(USART6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80028dc:	f7ff fe00 	bl	80024e0 <__NVIC_GetPriorityGrouping>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2200      	movs	r2, #0
 80028e4:	2100      	movs	r1, #0
 80028e6:	4618      	mov	r0, r3
 80028e8:	f7ff fe50 	bl	800258c <NVIC_EncodePriority>
 80028ec:	4603      	mov	r3, r0
 80028ee:	4619      	mov	r1, r3
 80028f0:	2047      	movs	r0, #71	; 0x47
 80028f2:	f7ff fe21 	bl	8002538 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART6_IRQn);
 80028f6:	2047      	movs	r0, #71	; 0x47
 80028f8:	f7ff fe00 	bl	80024fc <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  USART_InitStruct.BaudRate = 57600;
 80028fc:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8002900:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002902:	2300      	movs	r3, #0
 8002904:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002906:	2300      	movs	r3, #0
 8002908:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800290a:	2300      	movs	r3, #0
 800290c:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800290e:	230c      	movs	r3, #12
 8002910:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002912:	2300      	movs	r3, #0
 8002914:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002916:	2300      	movs	r3, #0
 8002918:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART6, &USART_InitStruct);
 800291a:	f107 031c 	add.w	r3, r7, #28
 800291e:	4619      	mov	r1, r3
 8002920:	4807      	ldr	r0, [pc, #28]	; (8002940 <MX_USART6_UART_Init+0xbc>)
 8002922:	f002 fd57 	bl	80053d4 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART6);
 8002926:	4806      	ldr	r0, [pc, #24]	; (8002940 <MX_USART6_UART_Init+0xbc>)
 8002928:	f7ff fe73 	bl	8002612 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART6);
 800292c:	4804      	ldr	r0, [pc, #16]	; (8002940 <MX_USART6_UART_Init+0xbc>)
 800292e:	f7ff fe60 	bl	80025f2 <LL_USART_Enable>
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002932:	bf00      	nop
 8002934:	3738      	adds	r7, #56	; 0x38
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	40020800 	.word	0x40020800
 8002940:	40011400 	.word	0x40011400

08002944 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002944:	f8df d034 	ldr.w	sp, [pc, #52]	; 800297c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002948:	480d      	ldr	r0, [pc, #52]	; (8002980 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800294a:	490e      	ldr	r1, [pc, #56]	; (8002984 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800294c:	4a0e      	ldr	r2, [pc, #56]	; (8002988 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800294e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002950:	e002      	b.n	8002958 <LoopCopyDataInit>

08002952 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002952:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002954:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002956:	3304      	adds	r3, #4

08002958 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002958:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800295a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800295c:	d3f9      	bcc.n	8002952 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800295e:	4a0b      	ldr	r2, [pc, #44]	; (800298c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002960:	4c0b      	ldr	r4, [pc, #44]	; (8002990 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002962:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002964:	e001      	b.n	800296a <LoopFillZerobss>

08002966 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002966:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002968:	3204      	adds	r2, #4

0800296a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800296a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800296c:	d3fb      	bcc.n	8002966 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800296e:	f7ff fb3b 	bl	8001fe8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002972:	f002 fdb5 	bl	80054e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002976:	f7fe fe8b 	bl	8001690 <main>
  bx  lr    
 800297a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800297c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002980:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002984:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002988:	080083e4 	.word	0x080083e4
  ldr r2, =_sbss
 800298c:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002990:	200002cc 	.word	0x200002cc

08002994 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002994:	e7fe      	b.n	8002994 <ADC_IRQHandler>
	...

08002998 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800299c:	4b0e      	ldr	r3, [pc, #56]	; (80029d8 <HAL_Init+0x40>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a0d      	ldr	r2, [pc, #52]	; (80029d8 <HAL_Init+0x40>)
 80029a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80029a8:	4b0b      	ldr	r3, [pc, #44]	; (80029d8 <HAL_Init+0x40>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a0a      	ldr	r2, [pc, #40]	; (80029d8 <HAL_Init+0x40>)
 80029ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029b4:	4b08      	ldr	r3, [pc, #32]	; (80029d8 <HAL_Init+0x40>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a07      	ldr	r2, [pc, #28]	; (80029d8 <HAL_Init+0x40>)
 80029ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029c0:	2003      	movs	r0, #3
 80029c2:	f000 f931 	bl	8002c28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029c6:	2000      	movs	r0, #0
 80029c8:	f000 f808 	bl	80029dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029cc:	f7ff f8d8 	bl	8001b80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029d0:	2300      	movs	r3, #0
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	40023c00 	.word	0x40023c00

080029dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029e4:	4b12      	ldr	r3, [pc, #72]	; (8002a30 <HAL_InitTick+0x54>)
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	4b12      	ldr	r3, [pc, #72]	; (8002a34 <HAL_InitTick+0x58>)
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	4619      	mov	r1, r3
 80029ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80029f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80029fa:	4618      	mov	r0, r3
 80029fc:	f000 f93b 	bl	8002c76 <HAL_SYSTICK_Config>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d001      	beq.n	8002a0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e00e      	b.n	8002a28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2b0f      	cmp	r3, #15
 8002a0e:	d80a      	bhi.n	8002a26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a10:	2200      	movs	r2, #0
 8002a12:	6879      	ldr	r1, [r7, #4]
 8002a14:	f04f 30ff 	mov.w	r0, #4294967295
 8002a18:	f000 f911 	bl	8002c3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a1c:	4a06      	ldr	r2, [pc, #24]	; (8002a38 <HAL_InitTick+0x5c>)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a22:	2300      	movs	r3, #0
 8002a24:	e000      	b.n	8002a28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3708      	adds	r7, #8
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	20000000 	.word	0x20000000
 8002a34:	20000008 	.word	0x20000008
 8002a38:	20000004 	.word	0x20000004

08002a3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a40:	4b06      	ldr	r3, [pc, #24]	; (8002a5c <HAL_IncTick+0x20>)
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	461a      	mov	r2, r3
 8002a46:	4b06      	ldr	r3, [pc, #24]	; (8002a60 <HAL_IncTick+0x24>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4413      	add	r3, r2
 8002a4c:	4a04      	ldr	r2, [pc, #16]	; (8002a60 <HAL_IncTick+0x24>)
 8002a4e:	6013      	str	r3, [r2, #0]
}
 8002a50:	bf00      	nop
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr
 8002a5a:	bf00      	nop
 8002a5c:	20000008 	.word	0x20000008
 8002a60:	200002b8 	.word	0x200002b8

08002a64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a64:	b480      	push	{r7}
 8002a66:	af00      	add	r7, sp, #0
  return uwTick;
 8002a68:	4b03      	ldr	r3, [pc, #12]	; (8002a78 <HAL_GetTick+0x14>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr
 8002a76:	bf00      	nop
 8002a78:	200002b8 	.word	0x200002b8

08002a7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b084      	sub	sp, #16
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a84:	f7ff ffee 	bl	8002a64 <HAL_GetTick>
 8002a88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a94:	d005      	beq.n	8002aa2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a96:	4b0a      	ldr	r3, [pc, #40]	; (8002ac0 <HAL_Delay+0x44>)
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	4413      	add	r3, r2
 8002aa0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002aa2:	bf00      	nop
 8002aa4:	f7ff ffde 	bl	8002a64 <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	68fa      	ldr	r2, [r7, #12]
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d8f7      	bhi.n	8002aa4 <HAL_Delay+0x28>
  {
  }
}
 8002ab4:	bf00      	nop
 8002ab6:	bf00      	nop
 8002ab8:	3710      	adds	r7, #16
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	20000008 	.word	0x20000008

08002ac4 <__NVIC_SetPriorityGrouping>:
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b085      	sub	sp, #20
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	f003 0307 	and.w	r3, r3, #7
 8002ad2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ad4:	4b0c      	ldr	r3, [pc, #48]	; (8002b08 <__NVIC_SetPriorityGrouping+0x44>)
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ada:	68ba      	ldr	r2, [r7, #8]
 8002adc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002aec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002af0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002af4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002af6:	4a04      	ldr	r2, [pc, #16]	; (8002b08 <__NVIC_SetPriorityGrouping+0x44>)
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	60d3      	str	r3, [r2, #12]
}
 8002afc:	bf00      	nop
 8002afe:	3714      	adds	r7, #20
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr
 8002b08:	e000ed00 	.word	0xe000ed00

08002b0c <__NVIC_GetPriorityGrouping>:
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b10:	4b04      	ldr	r3, [pc, #16]	; (8002b24 <__NVIC_GetPriorityGrouping+0x18>)
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	0a1b      	lsrs	r3, r3, #8
 8002b16:	f003 0307 	and.w	r3, r3, #7
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr
 8002b24:	e000ed00 	.word	0xe000ed00

08002b28 <__NVIC_SetPriority>:
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	4603      	mov	r3, r0
 8002b30:	6039      	str	r1, [r7, #0]
 8002b32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	db0a      	blt.n	8002b52 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	b2da      	uxtb	r2, r3
 8002b40:	490c      	ldr	r1, [pc, #48]	; (8002b74 <__NVIC_SetPriority+0x4c>)
 8002b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b46:	0112      	lsls	r2, r2, #4
 8002b48:	b2d2      	uxtb	r2, r2
 8002b4a:	440b      	add	r3, r1
 8002b4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002b50:	e00a      	b.n	8002b68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	b2da      	uxtb	r2, r3
 8002b56:	4908      	ldr	r1, [pc, #32]	; (8002b78 <__NVIC_SetPriority+0x50>)
 8002b58:	79fb      	ldrb	r3, [r7, #7]
 8002b5a:	f003 030f 	and.w	r3, r3, #15
 8002b5e:	3b04      	subs	r3, #4
 8002b60:	0112      	lsls	r2, r2, #4
 8002b62:	b2d2      	uxtb	r2, r2
 8002b64:	440b      	add	r3, r1
 8002b66:	761a      	strb	r2, [r3, #24]
}
 8002b68:	bf00      	nop
 8002b6a:	370c      	adds	r7, #12
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr
 8002b74:	e000e100 	.word	0xe000e100
 8002b78:	e000ed00 	.word	0xe000ed00

08002b7c <NVIC_EncodePriority>:
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b089      	sub	sp, #36	; 0x24
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	60f8      	str	r0, [r7, #12]
 8002b84:	60b9      	str	r1, [r7, #8]
 8002b86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	f003 0307 	and.w	r3, r3, #7
 8002b8e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	f1c3 0307 	rsb	r3, r3, #7
 8002b96:	2b04      	cmp	r3, #4
 8002b98:	bf28      	it	cs
 8002b9a:	2304      	movcs	r3, #4
 8002b9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	3304      	adds	r3, #4
 8002ba2:	2b06      	cmp	r3, #6
 8002ba4:	d902      	bls.n	8002bac <NVIC_EncodePriority+0x30>
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	3b03      	subs	r3, #3
 8002baa:	e000      	b.n	8002bae <NVIC_EncodePriority+0x32>
 8002bac:	2300      	movs	r3, #0
 8002bae:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bb0:	f04f 32ff 	mov.w	r2, #4294967295
 8002bb4:	69bb      	ldr	r3, [r7, #24]
 8002bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bba:	43da      	mvns	r2, r3
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	401a      	ands	r2, r3
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bc4:	f04f 31ff 	mov.w	r1, #4294967295
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	fa01 f303 	lsl.w	r3, r1, r3
 8002bce:	43d9      	mvns	r1, r3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bd4:	4313      	orrs	r3, r2
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3724      	adds	r7, #36	; 0x24
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr
	...

08002be4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b082      	sub	sp, #8
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	3b01      	subs	r3, #1
 8002bf0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bf4:	d301      	bcc.n	8002bfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e00f      	b.n	8002c1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bfa:	4a0a      	ldr	r2, [pc, #40]	; (8002c24 <SysTick_Config+0x40>)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	3b01      	subs	r3, #1
 8002c00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c02:	210f      	movs	r1, #15
 8002c04:	f04f 30ff 	mov.w	r0, #4294967295
 8002c08:	f7ff ff8e 	bl	8002b28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c0c:	4b05      	ldr	r3, [pc, #20]	; (8002c24 <SysTick_Config+0x40>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c12:	4b04      	ldr	r3, [pc, #16]	; (8002c24 <SysTick_Config+0x40>)
 8002c14:	2207      	movs	r2, #7
 8002c16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c18:	2300      	movs	r3, #0
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3708      	adds	r7, #8
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	e000e010 	.word	0xe000e010

08002c28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b082      	sub	sp, #8
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	f7ff ff47 	bl	8002ac4 <__NVIC_SetPriorityGrouping>
}
 8002c36:	bf00      	nop
 8002c38:	3708      	adds	r7, #8
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}

08002c3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c3e:	b580      	push	{r7, lr}
 8002c40:	b086      	sub	sp, #24
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	4603      	mov	r3, r0
 8002c46:	60b9      	str	r1, [r7, #8]
 8002c48:	607a      	str	r2, [r7, #4]
 8002c4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c50:	f7ff ff5c 	bl	8002b0c <__NVIC_GetPriorityGrouping>
 8002c54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	68b9      	ldr	r1, [r7, #8]
 8002c5a:	6978      	ldr	r0, [r7, #20]
 8002c5c:	f7ff ff8e 	bl	8002b7c <NVIC_EncodePriority>
 8002c60:	4602      	mov	r2, r0
 8002c62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c66:	4611      	mov	r1, r2
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f7ff ff5d 	bl	8002b28 <__NVIC_SetPriority>
}
 8002c6e:	bf00      	nop
 8002c70:	3718      	adds	r7, #24
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}

08002c76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c76:	b580      	push	{r7, lr}
 8002c78:	b082      	sub	sp, #8
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f7ff ffb0 	bl	8002be4 <SysTick_Config>
 8002c84:	4603      	mov	r3, r0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3708      	adds	r7, #8
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
	...

08002c90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b089      	sub	sp, #36	; 0x24
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	61fb      	str	r3, [r7, #28]
 8002caa:	e16b      	b.n	8002f84 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002cac:	2201      	movs	r2, #1
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	697a      	ldr	r2, [r7, #20]
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002cc0:	693a      	ldr	r2, [r7, #16]
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	f040 815a 	bne.w	8002f7e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	f003 0303 	and.w	r3, r3, #3
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d005      	beq.n	8002ce2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	d130      	bne.n	8002d44 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	005b      	lsls	r3, r3, #1
 8002cec:	2203      	movs	r2, #3
 8002cee:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf2:	43db      	mvns	r3, r3
 8002cf4:	69ba      	ldr	r2, [r7, #24]
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	68da      	ldr	r2, [r3, #12]
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	005b      	lsls	r3, r3, #1
 8002d02:	fa02 f303 	lsl.w	r3, r2, r3
 8002d06:	69ba      	ldr	r2, [r7, #24]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	69ba      	ldr	r2, [r7, #24]
 8002d10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d18:	2201      	movs	r2, #1
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d20:	43db      	mvns	r3, r3
 8002d22:	69ba      	ldr	r2, [r7, #24]
 8002d24:	4013      	ands	r3, r2
 8002d26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	091b      	lsrs	r3, r3, #4
 8002d2e:	f003 0201 	and.w	r2, r3, #1
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	fa02 f303 	lsl.w	r3, r2, r3
 8002d38:	69ba      	ldr	r2, [r7, #24]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	69ba      	ldr	r2, [r7, #24]
 8002d42:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f003 0303 	and.w	r3, r3, #3
 8002d4c:	2b03      	cmp	r3, #3
 8002d4e:	d017      	beq.n	8002d80 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	005b      	lsls	r3, r3, #1
 8002d5a:	2203      	movs	r2, #3
 8002d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d60:	43db      	mvns	r3, r3
 8002d62:	69ba      	ldr	r2, [r7, #24]
 8002d64:	4013      	ands	r3, r2
 8002d66:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	689a      	ldr	r2, [r3, #8]
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	005b      	lsls	r3, r3, #1
 8002d70:	fa02 f303 	lsl.w	r3, r2, r3
 8002d74:	69ba      	ldr	r2, [r7, #24]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	69ba      	ldr	r2, [r7, #24]
 8002d7e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f003 0303 	and.w	r3, r3, #3
 8002d88:	2b02      	cmp	r3, #2
 8002d8a:	d123      	bne.n	8002dd4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d8c:	69fb      	ldr	r3, [r7, #28]
 8002d8e:	08da      	lsrs	r2, r3, #3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	3208      	adds	r2, #8
 8002d94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d98:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	f003 0307 	and.w	r3, r3, #7
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	220f      	movs	r2, #15
 8002da4:	fa02 f303 	lsl.w	r3, r2, r3
 8002da8:	43db      	mvns	r3, r3
 8002daa:	69ba      	ldr	r2, [r7, #24]
 8002dac:	4013      	ands	r3, r2
 8002dae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	691a      	ldr	r2, [r3, #16]
 8002db4:	69fb      	ldr	r3, [r7, #28]
 8002db6:	f003 0307 	and.w	r3, r3, #7
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc0:	69ba      	ldr	r2, [r7, #24]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	08da      	lsrs	r2, r3, #3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	3208      	adds	r2, #8
 8002dce:	69b9      	ldr	r1, [r7, #24]
 8002dd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	005b      	lsls	r3, r3, #1
 8002dde:	2203      	movs	r2, #3
 8002de0:	fa02 f303 	lsl.w	r3, r2, r3
 8002de4:	43db      	mvns	r3, r3
 8002de6:	69ba      	ldr	r2, [r7, #24]
 8002de8:	4013      	ands	r3, r2
 8002dea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	f003 0203 	and.w	r2, r3, #3
 8002df4:	69fb      	ldr	r3, [r7, #28]
 8002df6:	005b      	lsls	r3, r3, #1
 8002df8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfc:	69ba      	ldr	r2, [r7, #24]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	69ba      	ldr	r2, [r7, #24]
 8002e06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	f000 80b4 	beq.w	8002f7e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e16:	2300      	movs	r3, #0
 8002e18:	60fb      	str	r3, [r7, #12]
 8002e1a:	4b60      	ldr	r3, [pc, #384]	; (8002f9c <HAL_GPIO_Init+0x30c>)
 8002e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e1e:	4a5f      	ldr	r2, [pc, #380]	; (8002f9c <HAL_GPIO_Init+0x30c>)
 8002e20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e24:	6453      	str	r3, [r2, #68]	; 0x44
 8002e26:	4b5d      	ldr	r3, [pc, #372]	; (8002f9c <HAL_GPIO_Init+0x30c>)
 8002e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e2e:	60fb      	str	r3, [r7, #12]
 8002e30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e32:	4a5b      	ldr	r2, [pc, #364]	; (8002fa0 <HAL_GPIO_Init+0x310>)
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	089b      	lsrs	r3, r3, #2
 8002e38:	3302      	adds	r3, #2
 8002e3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	f003 0303 	and.w	r3, r3, #3
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	220f      	movs	r2, #15
 8002e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4e:	43db      	mvns	r3, r3
 8002e50:	69ba      	ldr	r2, [r7, #24]
 8002e52:	4013      	ands	r3, r2
 8002e54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4a52      	ldr	r2, [pc, #328]	; (8002fa4 <HAL_GPIO_Init+0x314>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d02b      	beq.n	8002eb6 <HAL_GPIO_Init+0x226>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4a51      	ldr	r2, [pc, #324]	; (8002fa8 <HAL_GPIO_Init+0x318>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d025      	beq.n	8002eb2 <HAL_GPIO_Init+0x222>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4a50      	ldr	r2, [pc, #320]	; (8002fac <HAL_GPIO_Init+0x31c>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d01f      	beq.n	8002eae <HAL_GPIO_Init+0x21e>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4a4f      	ldr	r2, [pc, #316]	; (8002fb0 <HAL_GPIO_Init+0x320>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d019      	beq.n	8002eaa <HAL_GPIO_Init+0x21a>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	4a4e      	ldr	r2, [pc, #312]	; (8002fb4 <HAL_GPIO_Init+0x324>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d013      	beq.n	8002ea6 <HAL_GPIO_Init+0x216>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	4a4d      	ldr	r2, [pc, #308]	; (8002fb8 <HAL_GPIO_Init+0x328>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d00d      	beq.n	8002ea2 <HAL_GPIO_Init+0x212>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4a4c      	ldr	r2, [pc, #304]	; (8002fbc <HAL_GPIO_Init+0x32c>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d007      	beq.n	8002e9e <HAL_GPIO_Init+0x20e>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	4a4b      	ldr	r2, [pc, #300]	; (8002fc0 <HAL_GPIO_Init+0x330>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d101      	bne.n	8002e9a <HAL_GPIO_Init+0x20a>
 8002e96:	2307      	movs	r3, #7
 8002e98:	e00e      	b.n	8002eb8 <HAL_GPIO_Init+0x228>
 8002e9a:	2308      	movs	r3, #8
 8002e9c:	e00c      	b.n	8002eb8 <HAL_GPIO_Init+0x228>
 8002e9e:	2306      	movs	r3, #6
 8002ea0:	e00a      	b.n	8002eb8 <HAL_GPIO_Init+0x228>
 8002ea2:	2305      	movs	r3, #5
 8002ea4:	e008      	b.n	8002eb8 <HAL_GPIO_Init+0x228>
 8002ea6:	2304      	movs	r3, #4
 8002ea8:	e006      	b.n	8002eb8 <HAL_GPIO_Init+0x228>
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e004      	b.n	8002eb8 <HAL_GPIO_Init+0x228>
 8002eae:	2302      	movs	r3, #2
 8002eb0:	e002      	b.n	8002eb8 <HAL_GPIO_Init+0x228>
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e000      	b.n	8002eb8 <HAL_GPIO_Init+0x228>
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	69fa      	ldr	r2, [r7, #28]
 8002eba:	f002 0203 	and.w	r2, r2, #3
 8002ebe:	0092      	lsls	r2, r2, #2
 8002ec0:	4093      	lsls	r3, r2
 8002ec2:	69ba      	ldr	r2, [r7, #24]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ec8:	4935      	ldr	r1, [pc, #212]	; (8002fa0 <HAL_GPIO_Init+0x310>)
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	089b      	lsrs	r3, r3, #2
 8002ece:	3302      	adds	r3, #2
 8002ed0:	69ba      	ldr	r2, [r7, #24]
 8002ed2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ed6:	4b3b      	ldr	r3, [pc, #236]	; (8002fc4 <HAL_GPIO_Init+0x334>)
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	43db      	mvns	r3, r3
 8002ee0:	69ba      	ldr	r2, [r7, #24]
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d003      	beq.n	8002efa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002ef2:	69ba      	ldr	r2, [r7, #24]
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002efa:	4a32      	ldr	r2, [pc, #200]	; (8002fc4 <HAL_GPIO_Init+0x334>)
 8002efc:	69bb      	ldr	r3, [r7, #24]
 8002efe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f00:	4b30      	ldr	r3, [pc, #192]	; (8002fc4 <HAL_GPIO_Init+0x334>)
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	43db      	mvns	r3, r3
 8002f0a:	69ba      	ldr	r2, [r7, #24]
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d003      	beq.n	8002f24 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002f1c:	69ba      	ldr	r2, [r7, #24]
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f24:	4a27      	ldr	r2, [pc, #156]	; (8002fc4 <HAL_GPIO_Init+0x334>)
 8002f26:	69bb      	ldr	r3, [r7, #24]
 8002f28:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f2a:	4b26      	ldr	r3, [pc, #152]	; (8002fc4 <HAL_GPIO_Init+0x334>)
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	43db      	mvns	r3, r3
 8002f34:	69ba      	ldr	r2, [r7, #24]
 8002f36:	4013      	ands	r3, r2
 8002f38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d003      	beq.n	8002f4e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002f46:	69ba      	ldr	r2, [r7, #24]
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f4e:	4a1d      	ldr	r2, [pc, #116]	; (8002fc4 <HAL_GPIO_Init+0x334>)
 8002f50:	69bb      	ldr	r3, [r7, #24]
 8002f52:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f54:	4b1b      	ldr	r3, [pc, #108]	; (8002fc4 <HAL_GPIO_Init+0x334>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	43db      	mvns	r3, r3
 8002f5e:	69ba      	ldr	r2, [r7, #24]
 8002f60:	4013      	ands	r3, r2
 8002f62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d003      	beq.n	8002f78 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002f70:	69ba      	ldr	r2, [r7, #24]
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	4313      	orrs	r3, r2
 8002f76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f78:	4a12      	ldr	r2, [pc, #72]	; (8002fc4 <HAL_GPIO_Init+0x334>)
 8002f7a:	69bb      	ldr	r3, [r7, #24]
 8002f7c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	3301      	adds	r3, #1
 8002f82:	61fb      	str	r3, [r7, #28]
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	2b0f      	cmp	r3, #15
 8002f88:	f67f ae90 	bls.w	8002cac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f8c:	bf00      	nop
 8002f8e:	bf00      	nop
 8002f90:	3724      	adds	r7, #36	; 0x24
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr
 8002f9a:	bf00      	nop
 8002f9c:	40023800 	.word	0x40023800
 8002fa0:	40013800 	.word	0x40013800
 8002fa4:	40020000 	.word	0x40020000
 8002fa8:	40020400 	.word	0x40020400
 8002fac:	40020800 	.word	0x40020800
 8002fb0:	40020c00 	.word	0x40020c00
 8002fb4:	40021000 	.word	0x40021000
 8002fb8:	40021400 	.word	0x40021400
 8002fbc:	40021800 	.word	0x40021800
 8002fc0:	40021c00 	.word	0x40021c00
 8002fc4:	40013c00 	.word	0x40013c00

08002fc8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b086      	sub	sp, #24
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d101      	bne.n	8002fda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e267      	b.n	80034aa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0301 	and.w	r3, r3, #1
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d075      	beq.n	80030d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002fe6:	4b88      	ldr	r3, [pc, #544]	; (8003208 <HAL_RCC_OscConfig+0x240>)
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	f003 030c 	and.w	r3, r3, #12
 8002fee:	2b04      	cmp	r3, #4
 8002ff0:	d00c      	beq.n	800300c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ff2:	4b85      	ldr	r3, [pc, #532]	; (8003208 <HAL_RCC_OscConfig+0x240>)
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ffa:	2b08      	cmp	r3, #8
 8002ffc:	d112      	bne.n	8003024 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ffe:	4b82      	ldr	r3, [pc, #520]	; (8003208 <HAL_RCC_OscConfig+0x240>)
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003006:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800300a:	d10b      	bne.n	8003024 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800300c:	4b7e      	ldr	r3, [pc, #504]	; (8003208 <HAL_RCC_OscConfig+0x240>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003014:	2b00      	cmp	r3, #0
 8003016:	d05b      	beq.n	80030d0 <HAL_RCC_OscConfig+0x108>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d157      	bne.n	80030d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e242      	b.n	80034aa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800302c:	d106      	bne.n	800303c <HAL_RCC_OscConfig+0x74>
 800302e:	4b76      	ldr	r3, [pc, #472]	; (8003208 <HAL_RCC_OscConfig+0x240>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a75      	ldr	r2, [pc, #468]	; (8003208 <HAL_RCC_OscConfig+0x240>)
 8003034:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003038:	6013      	str	r3, [r2, #0]
 800303a:	e01d      	b.n	8003078 <HAL_RCC_OscConfig+0xb0>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003044:	d10c      	bne.n	8003060 <HAL_RCC_OscConfig+0x98>
 8003046:	4b70      	ldr	r3, [pc, #448]	; (8003208 <HAL_RCC_OscConfig+0x240>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a6f      	ldr	r2, [pc, #444]	; (8003208 <HAL_RCC_OscConfig+0x240>)
 800304c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003050:	6013      	str	r3, [r2, #0]
 8003052:	4b6d      	ldr	r3, [pc, #436]	; (8003208 <HAL_RCC_OscConfig+0x240>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a6c      	ldr	r2, [pc, #432]	; (8003208 <HAL_RCC_OscConfig+0x240>)
 8003058:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800305c:	6013      	str	r3, [r2, #0]
 800305e:	e00b      	b.n	8003078 <HAL_RCC_OscConfig+0xb0>
 8003060:	4b69      	ldr	r3, [pc, #420]	; (8003208 <HAL_RCC_OscConfig+0x240>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a68      	ldr	r2, [pc, #416]	; (8003208 <HAL_RCC_OscConfig+0x240>)
 8003066:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800306a:	6013      	str	r3, [r2, #0]
 800306c:	4b66      	ldr	r3, [pc, #408]	; (8003208 <HAL_RCC_OscConfig+0x240>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a65      	ldr	r2, [pc, #404]	; (8003208 <HAL_RCC_OscConfig+0x240>)
 8003072:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003076:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d013      	beq.n	80030a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003080:	f7ff fcf0 	bl	8002a64 <HAL_GetTick>
 8003084:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003086:	e008      	b.n	800309a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003088:	f7ff fcec 	bl	8002a64 <HAL_GetTick>
 800308c:	4602      	mov	r2, r0
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	2b64      	cmp	r3, #100	; 0x64
 8003094:	d901      	bls.n	800309a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e207      	b.n	80034aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800309a:	4b5b      	ldr	r3, [pc, #364]	; (8003208 <HAL_RCC_OscConfig+0x240>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d0f0      	beq.n	8003088 <HAL_RCC_OscConfig+0xc0>
 80030a6:	e014      	b.n	80030d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030a8:	f7ff fcdc 	bl	8002a64 <HAL_GetTick>
 80030ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030ae:	e008      	b.n	80030c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030b0:	f7ff fcd8 	bl	8002a64 <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	2b64      	cmp	r3, #100	; 0x64
 80030bc:	d901      	bls.n	80030c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e1f3      	b.n	80034aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030c2:	4b51      	ldr	r3, [pc, #324]	; (8003208 <HAL_RCC_OscConfig+0x240>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d1f0      	bne.n	80030b0 <HAL_RCC_OscConfig+0xe8>
 80030ce:	e000      	b.n	80030d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 0302 	and.w	r3, r3, #2
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d063      	beq.n	80031a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030de:	4b4a      	ldr	r3, [pc, #296]	; (8003208 <HAL_RCC_OscConfig+0x240>)
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	f003 030c 	and.w	r3, r3, #12
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d00b      	beq.n	8003102 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030ea:	4b47      	ldr	r3, [pc, #284]	; (8003208 <HAL_RCC_OscConfig+0x240>)
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030f2:	2b08      	cmp	r3, #8
 80030f4:	d11c      	bne.n	8003130 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030f6:	4b44      	ldr	r3, [pc, #272]	; (8003208 <HAL_RCC_OscConfig+0x240>)
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d116      	bne.n	8003130 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003102:	4b41      	ldr	r3, [pc, #260]	; (8003208 <HAL_RCC_OscConfig+0x240>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 0302 	and.w	r3, r3, #2
 800310a:	2b00      	cmp	r3, #0
 800310c:	d005      	beq.n	800311a <HAL_RCC_OscConfig+0x152>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	68db      	ldr	r3, [r3, #12]
 8003112:	2b01      	cmp	r3, #1
 8003114:	d001      	beq.n	800311a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e1c7      	b.n	80034aa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800311a:	4b3b      	ldr	r3, [pc, #236]	; (8003208 <HAL_RCC_OscConfig+0x240>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	691b      	ldr	r3, [r3, #16]
 8003126:	00db      	lsls	r3, r3, #3
 8003128:	4937      	ldr	r1, [pc, #220]	; (8003208 <HAL_RCC_OscConfig+0x240>)
 800312a:	4313      	orrs	r3, r2
 800312c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800312e:	e03a      	b.n	80031a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d020      	beq.n	800317a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003138:	4b34      	ldr	r3, [pc, #208]	; (800320c <HAL_RCC_OscConfig+0x244>)
 800313a:	2201      	movs	r2, #1
 800313c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800313e:	f7ff fc91 	bl	8002a64 <HAL_GetTick>
 8003142:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003144:	e008      	b.n	8003158 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003146:	f7ff fc8d 	bl	8002a64 <HAL_GetTick>
 800314a:	4602      	mov	r2, r0
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	2b02      	cmp	r3, #2
 8003152:	d901      	bls.n	8003158 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003154:	2303      	movs	r3, #3
 8003156:	e1a8      	b.n	80034aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003158:	4b2b      	ldr	r3, [pc, #172]	; (8003208 <HAL_RCC_OscConfig+0x240>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0302 	and.w	r3, r3, #2
 8003160:	2b00      	cmp	r3, #0
 8003162:	d0f0      	beq.n	8003146 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003164:	4b28      	ldr	r3, [pc, #160]	; (8003208 <HAL_RCC_OscConfig+0x240>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	691b      	ldr	r3, [r3, #16]
 8003170:	00db      	lsls	r3, r3, #3
 8003172:	4925      	ldr	r1, [pc, #148]	; (8003208 <HAL_RCC_OscConfig+0x240>)
 8003174:	4313      	orrs	r3, r2
 8003176:	600b      	str	r3, [r1, #0]
 8003178:	e015      	b.n	80031a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800317a:	4b24      	ldr	r3, [pc, #144]	; (800320c <HAL_RCC_OscConfig+0x244>)
 800317c:	2200      	movs	r2, #0
 800317e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003180:	f7ff fc70 	bl	8002a64 <HAL_GetTick>
 8003184:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003186:	e008      	b.n	800319a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003188:	f7ff fc6c 	bl	8002a64 <HAL_GetTick>
 800318c:	4602      	mov	r2, r0
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	2b02      	cmp	r3, #2
 8003194:	d901      	bls.n	800319a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e187      	b.n	80034aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800319a:	4b1b      	ldr	r3, [pc, #108]	; (8003208 <HAL_RCC_OscConfig+0x240>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0302 	and.w	r3, r3, #2
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d1f0      	bne.n	8003188 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0308 	and.w	r3, r3, #8
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d036      	beq.n	8003220 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	695b      	ldr	r3, [r3, #20]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d016      	beq.n	80031e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031ba:	4b15      	ldr	r3, [pc, #84]	; (8003210 <HAL_RCC_OscConfig+0x248>)
 80031bc:	2201      	movs	r2, #1
 80031be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031c0:	f7ff fc50 	bl	8002a64 <HAL_GetTick>
 80031c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031c6:	e008      	b.n	80031da <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031c8:	f7ff fc4c 	bl	8002a64 <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	d901      	bls.n	80031da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	e167      	b.n	80034aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031da:	4b0b      	ldr	r3, [pc, #44]	; (8003208 <HAL_RCC_OscConfig+0x240>)
 80031dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031de:	f003 0302 	and.w	r3, r3, #2
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d0f0      	beq.n	80031c8 <HAL_RCC_OscConfig+0x200>
 80031e6:	e01b      	b.n	8003220 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031e8:	4b09      	ldr	r3, [pc, #36]	; (8003210 <HAL_RCC_OscConfig+0x248>)
 80031ea:	2200      	movs	r2, #0
 80031ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031ee:	f7ff fc39 	bl	8002a64 <HAL_GetTick>
 80031f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031f4:	e00e      	b.n	8003214 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031f6:	f7ff fc35 	bl	8002a64 <HAL_GetTick>
 80031fa:	4602      	mov	r2, r0
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	2b02      	cmp	r3, #2
 8003202:	d907      	bls.n	8003214 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003204:	2303      	movs	r3, #3
 8003206:	e150      	b.n	80034aa <HAL_RCC_OscConfig+0x4e2>
 8003208:	40023800 	.word	0x40023800
 800320c:	42470000 	.word	0x42470000
 8003210:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003214:	4b88      	ldr	r3, [pc, #544]	; (8003438 <HAL_RCC_OscConfig+0x470>)
 8003216:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003218:	f003 0302 	and.w	r3, r3, #2
 800321c:	2b00      	cmp	r3, #0
 800321e:	d1ea      	bne.n	80031f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0304 	and.w	r3, r3, #4
 8003228:	2b00      	cmp	r3, #0
 800322a:	f000 8097 	beq.w	800335c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800322e:	2300      	movs	r3, #0
 8003230:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003232:	4b81      	ldr	r3, [pc, #516]	; (8003438 <HAL_RCC_OscConfig+0x470>)
 8003234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003236:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d10f      	bne.n	800325e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800323e:	2300      	movs	r3, #0
 8003240:	60bb      	str	r3, [r7, #8]
 8003242:	4b7d      	ldr	r3, [pc, #500]	; (8003438 <HAL_RCC_OscConfig+0x470>)
 8003244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003246:	4a7c      	ldr	r2, [pc, #496]	; (8003438 <HAL_RCC_OscConfig+0x470>)
 8003248:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800324c:	6413      	str	r3, [r2, #64]	; 0x40
 800324e:	4b7a      	ldr	r3, [pc, #488]	; (8003438 <HAL_RCC_OscConfig+0x470>)
 8003250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003252:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003256:	60bb      	str	r3, [r7, #8]
 8003258:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800325a:	2301      	movs	r3, #1
 800325c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800325e:	4b77      	ldr	r3, [pc, #476]	; (800343c <HAL_RCC_OscConfig+0x474>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003266:	2b00      	cmp	r3, #0
 8003268:	d118      	bne.n	800329c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800326a:	4b74      	ldr	r3, [pc, #464]	; (800343c <HAL_RCC_OscConfig+0x474>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a73      	ldr	r2, [pc, #460]	; (800343c <HAL_RCC_OscConfig+0x474>)
 8003270:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003274:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003276:	f7ff fbf5 	bl	8002a64 <HAL_GetTick>
 800327a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800327c:	e008      	b.n	8003290 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800327e:	f7ff fbf1 	bl	8002a64 <HAL_GetTick>
 8003282:	4602      	mov	r2, r0
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	2b02      	cmp	r3, #2
 800328a:	d901      	bls.n	8003290 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800328c:	2303      	movs	r3, #3
 800328e:	e10c      	b.n	80034aa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003290:	4b6a      	ldr	r3, [pc, #424]	; (800343c <HAL_RCC_OscConfig+0x474>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003298:	2b00      	cmp	r3, #0
 800329a:	d0f0      	beq.n	800327e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d106      	bne.n	80032b2 <HAL_RCC_OscConfig+0x2ea>
 80032a4:	4b64      	ldr	r3, [pc, #400]	; (8003438 <HAL_RCC_OscConfig+0x470>)
 80032a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032a8:	4a63      	ldr	r2, [pc, #396]	; (8003438 <HAL_RCC_OscConfig+0x470>)
 80032aa:	f043 0301 	orr.w	r3, r3, #1
 80032ae:	6713      	str	r3, [r2, #112]	; 0x70
 80032b0:	e01c      	b.n	80032ec <HAL_RCC_OscConfig+0x324>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	2b05      	cmp	r3, #5
 80032b8:	d10c      	bne.n	80032d4 <HAL_RCC_OscConfig+0x30c>
 80032ba:	4b5f      	ldr	r3, [pc, #380]	; (8003438 <HAL_RCC_OscConfig+0x470>)
 80032bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032be:	4a5e      	ldr	r2, [pc, #376]	; (8003438 <HAL_RCC_OscConfig+0x470>)
 80032c0:	f043 0304 	orr.w	r3, r3, #4
 80032c4:	6713      	str	r3, [r2, #112]	; 0x70
 80032c6:	4b5c      	ldr	r3, [pc, #368]	; (8003438 <HAL_RCC_OscConfig+0x470>)
 80032c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ca:	4a5b      	ldr	r2, [pc, #364]	; (8003438 <HAL_RCC_OscConfig+0x470>)
 80032cc:	f043 0301 	orr.w	r3, r3, #1
 80032d0:	6713      	str	r3, [r2, #112]	; 0x70
 80032d2:	e00b      	b.n	80032ec <HAL_RCC_OscConfig+0x324>
 80032d4:	4b58      	ldr	r3, [pc, #352]	; (8003438 <HAL_RCC_OscConfig+0x470>)
 80032d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032d8:	4a57      	ldr	r2, [pc, #348]	; (8003438 <HAL_RCC_OscConfig+0x470>)
 80032da:	f023 0301 	bic.w	r3, r3, #1
 80032de:	6713      	str	r3, [r2, #112]	; 0x70
 80032e0:	4b55      	ldr	r3, [pc, #340]	; (8003438 <HAL_RCC_OscConfig+0x470>)
 80032e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032e4:	4a54      	ldr	r2, [pc, #336]	; (8003438 <HAL_RCC_OscConfig+0x470>)
 80032e6:	f023 0304 	bic.w	r3, r3, #4
 80032ea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d015      	beq.n	8003320 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032f4:	f7ff fbb6 	bl	8002a64 <HAL_GetTick>
 80032f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032fa:	e00a      	b.n	8003312 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032fc:	f7ff fbb2 	bl	8002a64 <HAL_GetTick>
 8003300:	4602      	mov	r2, r0
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	f241 3288 	movw	r2, #5000	; 0x1388
 800330a:	4293      	cmp	r3, r2
 800330c:	d901      	bls.n	8003312 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800330e:	2303      	movs	r3, #3
 8003310:	e0cb      	b.n	80034aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003312:	4b49      	ldr	r3, [pc, #292]	; (8003438 <HAL_RCC_OscConfig+0x470>)
 8003314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003316:	f003 0302 	and.w	r3, r3, #2
 800331a:	2b00      	cmp	r3, #0
 800331c:	d0ee      	beq.n	80032fc <HAL_RCC_OscConfig+0x334>
 800331e:	e014      	b.n	800334a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003320:	f7ff fba0 	bl	8002a64 <HAL_GetTick>
 8003324:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003326:	e00a      	b.n	800333e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003328:	f7ff fb9c 	bl	8002a64 <HAL_GetTick>
 800332c:	4602      	mov	r2, r0
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	f241 3288 	movw	r2, #5000	; 0x1388
 8003336:	4293      	cmp	r3, r2
 8003338:	d901      	bls.n	800333e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800333a:	2303      	movs	r3, #3
 800333c:	e0b5      	b.n	80034aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800333e:	4b3e      	ldr	r3, [pc, #248]	; (8003438 <HAL_RCC_OscConfig+0x470>)
 8003340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003342:	f003 0302 	and.w	r3, r3, #2
 8003346:	2b00      	cmp	r3, #0
 8003348:	d1ee      	bne.n	8003328 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800334a:	7dfb      	ldrb	r3, [r7, #23]
 800334c:	2b01      	cmp	r3, #1
 800334e:	d105      	bne.n	800335c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003350:	4b39      	ldr	r3, [pc, #228]	; (8003438 <HAL_RCC_OscConfig+0x470>)
 8003352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003354:	4a38      	ldr	r2, [pc, #224]	; (8003438 <HAL_RCC_OscConfig+0x470>)
 8003356:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800335a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	699b      	ldr	r3, [r3, #24]
 8003360:	2b00      	cmp	r3, #0
 8003362:	f000 80a1 	beq.w	80034a8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003366:	4b34      	ldr	r3, [pc, #208]	; (8003438 <HAL_RCC_OscConfig+0x470>)
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	f003 030c 	and.w	r3, r3, #12
 800336e:	2b08      	cmp	r3, #8
 8003370:	d05c      	beq.n	800342c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	699b      	ldr	r3, [r3, #24]
 8003376:	2b02      	cmp	r3, #2
 8003378:	d141      	bne.n	80033fe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800337a:	4b31      	ldr	r3, [pc, #196]	; (8003440 <HAL_RCC_OscConfig+0x478>)
 800337c:	2200      	movs	r2, #0
 800337e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003380:	f7ff fb70 	bl	8002a64 <HAL_GetTick>
 8003384:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003386:	e008      	b.n	800339a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003388:	f7ff fb6c 	bl	8002a64 <HAL_GetTick>
 800338c:	4602      	mov	r2, r0
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	2b02      	cmp	r3, #2
 8003394:	d901      	bls.n	800339a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e087      	b.n	80034aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800339a:	4b27      	ldr	r3, [pc, #156]	; (8003438 <HAL_RCC_OscConfig+0x470>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d1f0      	bne.n	8003388 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	69da      	ldr	r2, [r3, #28]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6a1b      	ldr	r3, [r3, #32]
 80033ae:	431a      	orrs	r2, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b4:	019b      	lsls	r3, r3, #6
 80033b6:	431a      	orrs	r2, r3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033bc:	085b      	lsrs	r3, r3, #1
 80033be:	3b01      	subs	r3, #1
 80033c0:	041b      	lsls	r3, r3, #16
 80033c2:	431a      	orrs	r2, r3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c8:	061b      	lsls	r3, r3, #24
 80033ca:	491b      	ldr	r1, [pc, #108]	; (8003438 <HAL_RCC_OscConfig+0x470>)
 80033cc:	4313      	orrs	r3, r2
 80033ce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033d0:	4b1b      	ldr	r3, [pc, #108]	; (8003440 <HAL_RCC_OscConfig+0x478>)
 80033d2:	2201      	movs	r2, #1
 80033d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033d6:	f7ff fb45 	bl	8002a64 <HAL_GetTick>
 80033da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033dc:	e008      	b.n	80033f0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033de:	f7ff fb41 	bl	8002a64 <HAL_GetTick>
 80033e2:	4602      	mov	r2, r0
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	1ad3      	subs	r3, r2, r3
 80033e8:	2b02      	cmp	r3, #2
 80033ea:	d901      	bls.n	80033f0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80033ec:	2303      	movs	r3, #3
 80033ee:	e05c      	b.n	80034aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033f0:	4b11      	ldr	r3, [pc, #68]	; (8003438 <HAL_RCC_OscConfig+0x470>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d0f0      	beq.n	80033de <HAL_RCC_OscConfig+0x416>
 80033fc:	e054      	b.n	80034a8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033fe:	4b10      	ldr	r3, [pc, #64]	; (8003440 <HAL_RCC_OscConfig+0x478>)
 8003400:	2200      	movs	r2, #0
 8003402:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003404:	f7ff fb2e 	bl	8002a64 <HAL_GetTick>
 8003408:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800340a:	e008      	b.n	800341e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800340c:	f7ff fb2a 	bl	8002a64 <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	2b02      	cmp	r3, #2
 8003418:	d901      	bls.n	800341e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e045      	b.n	80034aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800341e:	4b06      	ldr	r3, [pc, #24]	; (8003438 <HAL_RCC_OscConfig+0x470>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d1f0      	bne.n	800340c <HAL_RCC_OscConfig+0x444>
 800342a:	e03d      	b.n	80034a8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	699b      	ldr	r3, [r3, #24]
 8003430:	2b01      	cmp	r3, #1
 8003432:	d107      	bne.n	8003444 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e038      	b.n	80034aa <HAL_RCC_OscConfig+0x4e2>
 8003438:	40023800 	.word	0x40023800
 800343c:	40007000 	.word	0x40007000
 8003440:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003444:	4b1b      	ldr	r3, [pc, #108]	; (80034b4 <HAL_RCC_OscConfig+0x4ec>)
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	699b      	ldr	r3, [r3, #24]
 800344e:	2b01      	cmp	r3, #1
 8003450:	d028      	beq.n	80034a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800345c:	429a      	cmp	r2, r3
 800345e:	d121      	bne.n	80034a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800346a:	429a      	cmp	r2, r3
 800346c:	d11a      	bne.n	80034a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800346e:	68fa      	ldr	r2, [r7, #12]
 8003470:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003474:	4013      	ands	r3, r2
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800347a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800347c:	4293      	cmp	r3, r2
 800347e:	d111      	bne.n	80034a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800348a:	085b      	lsrs	r3, r3, #1
 800348c:	3b01      	subs	r3, #1
 800348e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003490:	429a      	cmp	r2, r3
 8003492:	d107      	bne.n	80034a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800349e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d001      	beq.n	80034a8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e000      	b.n	80034aa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80034a8:	2300      	movs	r3, #0
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3718      	adds	r7, #24
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	40023800 	.word	0x40023800

080034b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b084      	sub	sp, #16
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d101      	bne.n	80034cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e0cc      	b.n	8003666 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034cc:	4b68      	ldr	r3, [pc, #416]	; (8003670 <HAL_RCC_ClockConfig+0x1b8>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 0307 	and.w	r3, r3, #7
 80034d4:	683a      	ldr	r2, [r7, #0]
 80034d6:	429a      	cmp	r2, r3
 80034d8:	d90c      	bls.n	80034f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034da:	4b65      	ldr	r3, [pc, #404]	; (8003670 <HAL_RCC_ClockConfig+0x1b8>)
 80034dc:	683a      	ldr	r2, [r7, #0]
 80034de:	b2d2      	uxtb	r2, r2
 80034e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034e2:	4b63      	ldr	r3, [pc, #396]	; (8003670 <HAL_RCC_ClockConfig+0x1b8>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0307 	and.w	r3, r3, #7
 80034ea:	683a      	ldr	r2, [r7, #0]
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d001      	beq.n	80034f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	e0b8      	b.n	8003666 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0302 	and.w	r3, r3, #2
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d020      	beq.n	8003542 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 0304 	and.w	r3, r3, #4
 8003508:	2b00      	cmp	r3, #0
 800350a:	d005      	beq.n	8003518 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800350c:	4b59      	ldr	r3, [pc, #356]	; (8003674 <HAL_RCC_ClockConfig+0x1bc>)
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	4a58      	ldr	r2, [pc, #352]	; (8003674 <HAL_RCC_ClockConfig+0x1bc>)
 8003512:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003516:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 0308 	and.w	r3, r3, #8
 8003520:	2b00      	cmp	r3, #0
 8003522:	d005      	beq.n	8003530 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003524:	4b53      	ldr	r3, [pc, #332]	; (8003674 <HAL_RCC_ClockConfig+0x1bc>)
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	4a52      	ldr	r2, [pc, #328]	; (8003674 <HAL_RCC_ClockConfig+0x1bc>)
 800352a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800352e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003530:	4b50      	ldr	r3, [pc, #320]	; (8003674 <HAL_RCC_ClockConfig+0x1bc>)
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	494d      	ldr	r1, [pc, #308]	; (8003674 <HAL_RCC_ClockConfig+0x1bc>)
 800353e:	4313      	orrs	r3, r2
 8003540:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0301 	and.w	r3, r3, #1
 800354a:	2b00      	cmp	r3, #0
 800354c:	d044      	beq.n	80035d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	2b01      	cmp	r3, #1
 8003554:	d107      	bne.n	8003566 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003556:	4b47      	ldr	r3, [pc, #284]	; (8003674 <HAL_RCC_ClockConfig+0x1bc>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d119      	bne.n	8003596 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e07f      	b.n	8003666 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	2b02      	cmp	r3, #2
 800356c:	d003      	beq.n	8003576 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003572:	2b03      	cmp	r3, #3
 8003574:	d107      	bne.n	8003586 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003576:	4b3f      	ldr	r3, [pc, #252]	; (8003674 <HAL_RCC_ClockConfig+0x1bc>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d109      	bne.n	8003596 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e06f      	b.n	8003666 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003586:	4b3b      	ldr	r3, [pc, #236]	; (8003674 <HAL_RCC_ClockConfig+0x1bc>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0302 	and.w	r3, r3, #2
 800358e:	2b00      	cmp	r3, #0
 8003590:	d101      	bne.n	8003596 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e067      	b.n	8003666 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003596:	4b37      	ldr	r3, [pc, #220]	; (8003674 <HAL_RCC_ClockConfig+0x1bc>)
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	f023 0203 	bic.w	r2, r3, #3
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	4934      	ldr	r1, [pc, #208]	; (8003674 <HAL_RCC_ClockConfig+0x1bc>)
 80035a4:	4313      	orrs	r3, r2
 80035a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035a8:	f7ff fa5c 	bl	8002a64 <HAL_GetTick>
 80035ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035ae:	e00a      	b.n	80035c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035b0:	f7ff fa58 	bl	8002a64 <HAL_GetTick>
 80035b4:	4602      	mov	r2, r0
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80035be:	4293      	cmp	r3, r2
 80035c0:	d901      	bls.n	80035c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035c2:	2303      	movs	r3, #3
 80035c4:	e04f      	b.n	8003666 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035c6:	4b2b      	ldr	r3, [pc, #172]	; (8003674 <HAL_RCC_ClockConfig+0x1bc>)
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	f003 020c 	and.w	r2, r3, #12
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d1eb      	bne.n	80035b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035d8:	4b25      	ldr	r3, [pc, #148]	; (8003670 <HAL_RCC_ClockConfig+0x1b8>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0307 	and.w	r3, r3, #7
 80035e0:	683a      	ldr	r2, [r7, #0]
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d20c      	bcs.n	8003600 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035e6:	4b22      	ldr	r3, [pc, #136]	; (8003670 <HAL_RCC_ClockConfig+0x1b8>)
 80035e8:	683a      	ldr	r2, [r7, #0]
 80035ea:	b2d2      	uxtb	r2, r2
 80035ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ee:	4b20      	ldr	r3, [pc, #128]	; (8003670 <HAL_RCC_ClockConfig+0x1b8>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 0307 	and.w	r3, r3, #7
 80035f6:	683a      	ldr	r2, [r7, #0]
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d001      	beq.n	8003600 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	e032      	b.n	8003666 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0304 	and.w	r3, r3, #4
 8003608:	2b00      	cmp	r3, #0
 800360a:	d008      	beq.n	800361e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800360c:	4b19      	ldr	r3, [pc, #100]	; (8003674 <HAL_RCC_ClockConfig+0x1bc>)
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	4916      	ldr	r1, [pc, #88]	; (8003674 <HAL_RCC_ClockConfig+0x1bc>)
 800361a:	4313      	orrs	r3, r2
 800361c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0308 	and.w	r3, r3, #8
 8003626:	2b00      	cmp	r3, #0
 8003628:	d009      	beq.n	800363e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800362a:	4b12      	ldr	r3, [pc, #72]	; (8003674 <HAL_RCC_ClockConfig+0x1bc>)
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	691b      	ldr	r3, [r3, #16]
 8003636:	00db      	lsls	r3, r3, #3
 8003638:	490e      	ldr	r1, [pc, #56]	; (8003674 <HAL_RCC_ClockConfig+0x1bc>)
 800363a:	4313      	orrs	r3, r2
 800363c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800363e:	f000 f821 	bl	8003684 <HAL_RCC_GetSysClockFreq>
 8003642:	4602      	mov	r2, r0
 8003644:	4b0b      	ldr	r3, [pc, #44]	; (8003674 <HAL_RCC_ClockConfig+0x1bc>)
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	091b      	lsrs	r3, r3, #4
 800364a:	f003 030f 	and.w	r3, r3, #15
 800364e:	490a      	ldr	r1, [pc, #40]	; (8003678 <HAL_RCC_ClockConfig+0x1c0>)
 8003650:	5ccb      	ldrb	r3, [r1, r3]
 8003652:	fa22 f303 	lsr.w	r3, r2, r3
 8003656:	4a09      	ldr	r2, [pc, #36]	; (800367c <HAL_RCC_ClockConfig+0x1c4>)
 8003658:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800365a:	4b09      	ldr	r3, [pc, #36]	; (8003680 <HAL_RCC_ClockConfig+0x1c8>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4618      	mov	r0, r3
 8003660:	f7ff f9bc 	bl	80029dc <HAL_InitTick>

  return HAL_OK;
 8003664:	2300      	movs	r3, #0
}
 8003666:	4618      	mov	r0, r3
 8003668:	3710      	adds	r7, #16
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop
 8003670:	40023c00 	.word	0x40023c00
 8003674:	40023800 	.word	0x40023800
 8003678:	08007fd4 	.word	0x08007fd4
 800367c:	20000000 	.word	0x20000000
 8003680:	20000004 	.word	0x20000004

08003684 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003684:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003688:	b094      	sub	sp, #80	; 0x50
 800368a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800368c:	2300      	movs	r3, #0
 800368e:	647b      	str	r3, [r7, #68]	; 0x44
 8003690:	2300      	movs	r3, #0
 8003692:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003694:	2300      	movs	r3, #0
 8003696:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003698:	2300      	movs	r3, #0
 800369a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800369c:	4b79      	ldr	r3, [pc, #484]	; (8003884 <HAL_RCC_GetSysClockFreq+0x200>)
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	f003 030c 	and.w	r3, r3, #12
 80036a4:	2b08      	cmp	r3, #8
 80036a6:	d00d      	beq.n	80036c4 <HAL_RCC_GetSysClockFreq+0x40>
 80036a8:	2b08      	cmp	r3, #8
 80036aa:	f200 80e1 	bhi.w	8003870 <HAL_RCC_GetSysClockFreq+0x1ec>
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d002      	beq.n	80036b8 <HAL_RCC_GetSysClockFreq+0x34>
 80036b2:	2b04      	cmp	r3, #4
 80036b4:	d003      	beq.n	80036be <HAL_RCC_GetSysClockFreq+0x3a>
 80036b6:	e0db      	b.n	8003870 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80036b8:	4b73      	ldr	r3, [pc, #460]	; (8003888 <HAL_RCC_GetSysClockFreq+0x204>)
 80036ba:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80036bc:	e0db      	b.n	8003876 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80036be:	4b73      	ldr	r3, [pc, #460]	; (800388c <HAL_RCC_GetSysClockFreq+0x208>)
 80036c0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80036c2:	e0d8      	b.n	8003876 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036c4:	4b6f      	ldr	r3, [pc, #444]	; (8003884 <HAL_RCC_GetSysClockFreq+0x200>)
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036cc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80036ce:	4b6d      	ldr	r3, [pc, #436]	; (8003884 <HAL_RCC_GetSysClockFreq+0x200>)
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d063      	beq.n	80037a2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036da:	4b6a      	ldr	r3, [pc, #424]	; (8003884 <HAL_RCC_GetSysClockFreq+0x200>)
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	099b      	lsrs	r3, r3, #6
 80036e0:	2200      	movs	r2, #0
 80036e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80036e4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80036e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036ec:	633b      	str	r3, [r7, #48]	; 0x30
 80036ee:	2300      	movs	r3, #0
 80036f0:	637b      	str	r3, [r7, #52]	; 0x34
 80036f2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80036f6:	4622      	mov	r2, r4
 80036f8:	462b      	mov	r3, r5
 80036fa:	f04f 0000 	mov.w	r0, #0
 80036fe:	f04f 0100 	mov.w	r1, #0
 8003702:	0159      	lsls	r1, r3, #5
 8003704:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003708:	0150      	lsls	r0, r2, #5
 800370a:	4602      	mov	r2, r0
 800370c:	460b      	mov	r3, r1
 800370e:	4621      	mov	r1, r4
 8003710:	1a51      	subs	r1, r2, r1
 8003712:	6139      	str	r1, [r7, #16]
 8003714:	4629      	mov	r1, r5
 8003716:	eb63 0301 	sbc.w	r3, r3, r1
 800371a:	617b      	str	r3, [r7, #20]
 800371c:	f04f 0200 	mov.w	r2, #0
 8003720:	f04f 0300 	mov.w	r3, #0
 8003724:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003728:	4659      	mov	r1, fp
 800372a:	018b      	lsls	r3, r1, #6
 800372c:	4651      	mov	r1, sl
 800372e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003732:	4651      	mov	r1, sl
 8003734:	018a      	lsls	r2, r1, #6
 8003736:	4651      	mov	r1, sl
 8003738:	ebb2 0801 	subs.w	r8, r2, r1
 800373c:	4659      	mov	r1, fp
 800373e:	eb63 0901 	sbc.w	r9, r3, r1
 8003742:	f04f 0200 	mov.w	r2, #0
 8003746:	f04f 0300 	mov.w	r3, #0
 800374a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800374e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003752:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003756:	4690      	mov	r8, r2
 8003758:	4699      	mov	r9, r3
 800375a:	4623      	mov	r3, r4
 800375c:	eb18 0303 	adds.w	r3, r8, r3
 8003760:	60bb      	str	r3, [r7, #8]
 8003762:	462b      	mov	r3, r5
 8003764:	eb49 0303 	adc.w	r3, r9, r3
 8003768:	60fb      	str	r3, [r7, #12]
 800376a:	f04f 0200 	mov.w	r2, #0
 800376e:	f04f 0300 	mov.w	r3, #0
 8003772:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003776:	4629      	mov	r1, r5
 8003778:	024b      	lsls	r3, r1, #9
 800377a:	4621      	mov	r1, r4
 800377c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003780:	4621      	mov	r1, r4
 8003782:	024a      	lsls	r2, r1, #9
 8003784:	4610      	mov	r0, r2
 8003786:	4619      	mov	r1, r3
 8003788:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800378a:	2200      	movs	r2, #0
 800378c:	62bb      	str	r3, [r7, #40]	; 0x28
 800378e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003790:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003794:	f7fd fa28 	bl	8000be8 <__aeabi_uldivmod>
 8003798:	4602      	mov	r2, r0
 800379a:	460b      	mov	r3, r1
 800379c:	4613      	mov	r3, r2
 800379e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037a0:	e058      	b.n	8003854 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037a2:	4b38      	ldr	r3, [pc, #224]	; (8003884 <HAL_RCC_GetSysClockFreq+0x200>)
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	099b      	lsrs	r3, r3, #6
 80037a8:	2200      	movs	r2, #0
 80037aa:	4618      	mov	r0, r3
 80037ac:	4611      	mov	r1, r2
 80037ae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80037b2:	623b      	str	r3, [r7, #32]
 80037b4:	2300      	movs	r3, #0
 80037b6:	627b      	str	r3, [r7, #36]	; 0x24
 80037b8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80037bc:	4642      	mov	r2, r8
 80037be:	464b      	mov	r3, r9
 80037c0:	f04f 0000 	mov.w	r0, #0
 80037c4:	f04f 0100 	mov.w	r1, #0
 80037c8:	0159      	lsls	r1, r3, #5
 80037ca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037ce:	0150      	lsls	r0, r2, #5
 80037d0:	4602      	mov	r2, r0
 80037d2:	460b      	mov	r3, r1
 80037d4:	4641      	mov	r1, r8
 80037d6:	ebb2 0a01 	subs.w	sl, r2, r1
 80037da:	4649      	mov	r1, r9
 80037dc:	eb63 0b01 	sbc.w	fp, r3, r1
 80037e0:	f04f 0200 	mov.w	r2, #0
 80037e4:	f04f 0300 	mov.w	r3, #0
 80037e8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80037ec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80037f0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80037f4:	ebb2 040a 	subs.w	r4, r2, sl
 80037f8:	eb63 050b 	sbc.w	r5, r3, fp
 80037fc:	f04f 0200 	mov.w	r2, #0
 8003800:	f04f 0300 	mov.w	r3, #0
 8003804:	00eb      	lsls	r3, r5, #3
 8003806:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800380a:	00e2      	lsls	r2, r4, #3
 800380c:	4614      	mov	r4, r2
 800380e:	461d      	mov	r5, r3
 8003810:	4643      	mov	r3, r8
 8003812:	18e3      	adds	r3, r4, r3
 8003814:	603b      	str	r3, [r7, #0]
 8003816:	464b      	mov	r3, r9
 8003818:	eb45 0303 	adc.w	r3, r5, r3
 800381c:	607b      	str	r3, [r7, #4]
 800381e:	f04f 0200 	mov.w	r2, #0
 8003822:	f04f 0300 	mov.w	r3, #0
 8003826:	e9d7 4500 	ldrd	r4, r5, [r7]
 800382a:	4629      	mov	r1, r5
 800382c:	028b      	lsls	r3, r1, #10
 800382e:	4621      	mov	r1, r4
 8003830:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003834:	4621      	mov	r1, r4
 8003836:	028a      	lsls	r2, r1, #10
 8003838:	4610      	mov	r0, r2
 800383a:	4619      	mov	r1, r3
 800383c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800383e:	2200      	movs	r2, #0
 8003840:	61bb      	str	r3, [r7, #24]
 8003842:	61fa      	str	r2, [r7, #28]
 8003844:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003848:	f7fd f9ce 	bl	8000be8 <__aeabi_uldivmod>
 800384c:	4602      	mov	r2, r0
 800384e:	460b      	mov	r3, r1
 8003850:	4613      	mov	r3, r2
 8003852:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003854:	4b0b      	ldr	r3, [pc, #44]	; (8003884 <HAL_RCC_GetSysClockFreq+0x200>)
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	0c1b      	lsrs	r3, r3, #16
 800385a:	f003 0303 	and.w	r3, r3, #3
 800385e:	3301      	adds	r3, #1
 8003860:	005b      	lsls	r3, r3, #1
 8003862:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003864:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003866:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003868:	fbb2 f3f3 	udiv	r3, r2, r3
 800386c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800386e:	e002      	b.n	8003876 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003870:	4b05      	ldr	r3, [pc, #20]	; (8003888 <HAL_RCC_GetSysClockFreq+0x204>)
 8003872:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003874:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003876:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003878:	4618      	mov	r0, r3
 800387a:	3750      	adds	r7, #80	; 0x50
 800387c:	46bd      	mov	sp, r7
 800387e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003882:	bf00      	nop
 8003884:	40023800 	.word	0x40023800
 8003888:	00f42400 	.word	0x00f42400
 800388c:	007a1200 	.word	0x007a1200

08003890 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b082      	sub	sp, #8
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d101      	bne.n	80038a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e041      	b.n	8003926 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d106      	bne.n	80038bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f7fe fdb6 	bl	8002428 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2202      	movs	r2, #2
 80038c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	3304      	adds	r3, #4
 80038cc:	4619      	mov	r1, r3
 80038ce:	4610      	mov	r0, r2
 80038d0:	f000 fa10 	bl	8003cf4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2201      	movs	r2, #1
 80038d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2201      	movs	r2, #1
 80038e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2201      	movs	r2, #1
 80038e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2201      	movs	r2, #1
 80038f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2201      	movs	r2, #1
 80038f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2201      	movs	r2, #1
 8003900:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2201      	movs	r2, #1
 8003908:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2201      	movs	r2, #1
 8003910:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2201      	movs	r2, #1
 8003918:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2201      	movs	r2, #1
 8003920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003924:	2300      	movs	r3, #0
}
 8003926:	4618      	mov	r0, r3
 8003928:	3708      	adds	r7, #8
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}

0800392e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800392e:	b580      	push	{r7, lr}
 8003930:	b082      	sub	sp, #8
 8003932:	af00      	add	r7, sp, #0
 8003934:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d101      	bne.n	8003940 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	e041      	b.n	80039c4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003946:	b2db      	uxtb	r3, r3
 8003948:	2b00      	cmp	r3, #0
 800394a:	d106      	bne.n	800395a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2200      	movs	r2, #0
 8003950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f000 f839 	bl	80039cc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2202      	movs	r2, #2
 800395e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	3304      	adds	r3, #4
 800396a:	4619      	mov	r1, r3
 800396c:	4610      	mov	r0, r2
 800396e:	f000 f9c1 	bl	8003cf4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2201      	movs	r2, #1
 8003976:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2201      	movs	r2, #1
 800397e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2201      	movs	r2, #1
 8003986:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2201      	movs	r2, #1
 800398e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2201      	movs	r2, #1
 8003996:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2201      	movs	r2, #1
 800399e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2201      	movs	r2, #1
 80039a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2201      	movs	r2, #1
 80039ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2201      	movs	r2, #1
 80039b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2201      	movs	r2, #1
 80039be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039c2:	2300      	movs	r3, #0
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	3708      	adds	r7, #8
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}

080039cc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b083      	sub	sp, #12
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80039d4:	bf00      	nop
 80039d6:	370c      	adds	r7, #12
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr

080039e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b086      	sub	sp, #24
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	60f8      	str	r0, [r7, #12]
 80039e8:	60b9      	str	r1, [r7, #8]
 80039ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039ec:	2300      	movs	r3, #0
 80039ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d101      	bne.n	80039fe <HAL_TIM_PWM_ConfigChannel+0x1e>
 80039fa:	2302      	movs	r3, #2
 80039fc:	e0ae      	b.n	8003b5c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2201      	movs	r2, #1
 8003a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2b0c      	cmp	r3, #12
 8003a0a:	f200 809f 	bhi.w	8003b4c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003a0e:	a201      	add	r2, pc, #4	; (adr r2, 8003a14 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a14:	08003a49 	.word	0x08003a49
 8003a18:	08003b4d 	.word	0x08003b4d
 8003a1c:	08003b4d 	.word	0x08003b4d
 8003a20:	08003b4d 	.word	0x08003b4d
 8003a24:	08003a89 	.word	0x08003a89
 8003a28:	08003b4d 	.word	0x08003b4d
 8003a2c:	08003b4d 	.word	0x08003b4d
 8003a30:	08003b4d 	.word	0x08003b4d
 8003a34:	08003acb 	.word	0x08003acb
 8003a38:	08003b4d 	.word	0x08003b4d
 8003a3c:	08003b4d 	.word	0x08003b4d
 8003a40:	08003b4d 	.word	0x08003b4d
 8003a44:	08003b0b 	.word	0x08003b0b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	68b9      	ldr	r1, [r7, #8]
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f000 f9f0 	bl	8003e34 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	699a      	ldr	r2, [r3, #24]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f042 0208 	orr.w	r2, r2, #8
 8003a62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	699a      	ldr	r2, [r3, #24]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f022 0204 	bic.w	r2, r2, #4
 8003a72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	6999      	ldr	r1, [r3, #24]
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	691a      	ldr	r2, [r3, #16]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	430a      	orrs	r2, r1
 8003a84:	619a      	str	r2, [r3, #24]
      break;
 8003a86:	e064      	b.n	8003b52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	68b9      	ldr	r1, [r7, #8]
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f000 fa40 	bl	8003f14 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	699a      	ldr	r2, [r3, #24]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003aa2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	699a      	ldr	r2, [r3, #24]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ab2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	6999      	ldr	r1, [r3, #24]
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	691b      	ldr	r3, [r3, #16]
 8003abe:	021a      	lsls	r2, r3, #8
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	430a      	orrs	r2, r1
 8003ac6:	619a      	str	r2, [r3, #24]
      break;
 8003ac8:	e043      	b.n	8003b52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	68b9      	ldr	r1, [r7, #8]
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f000 fa95 	bl	8004000 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	69da      	ldr	r2, [r3, #28]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f042 0208 	orr.w	r2, r2, #8
 8003ae4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	69da      	ldr	r2, [r3, #28]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f022 0204 	bic.w	r2, r2, #4
 8003af4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	69d9      	ldr	r1, [r3, #28]
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	691a      	ldr	r2, [r3, #16]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	430a      	orrs	r2, r1
 8003b06:	61da      	str	r2, [r3, #28]
      break;
 8003b08:	e023      	b.n	8003b52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	68b9      	ldr	r1, [r7, #8]
 8003b10:	4618      	mov	r0, r3
 8003b12:	f000 fae9 	bl	80040e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	69da      	ldr	r2, [r3, #28]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	69da      	ldr	r2, [r3, #28]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	69d9      	ldr	r1, [r3, #28]
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	691b      	ldr	r3, [r3, #16]
 8003b40:	021a      	lsls	r2, r3, #8
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	430a      	orrs	r2, r1
 8003b48:	61da      	str	r2, [r3, #28]
      break;
 8003b4a:	e002      	b.n	8003b52 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	75fb      	strb	r3, [r7, #23]
      break;
 8003b50:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2200      	movs	r2, #0
 8003b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003b5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3718      	adds	r7, #24
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}

08003b64 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b084      	sub	sp, #16
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d101      	bne.n	8003b80 <HAL_TIM_ConfigClockSource+0x1c>
 8003b7c:	2302      	movs	r3, #2
 8003b7e:	e0b4      	b.n	8003cea <HAL_TIM_ConfigClockSource+0x186>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2201      	movs	r2, #1
 8003b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2202      	movs	r2, #2
 8003b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003b9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ba6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	68ba      	ldr	r2, [r7, #8]
 8003bae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bb8:	d03e      	beq.n	8003c38 <HAL_TIM_ConfigClockSource+0xd4>
 8003bba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bbe:	f200 8087 	bhi.w	8003cd0 <HAL_TIM_ConfigClockSource+0x16c>
 8003bc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bc6:	f000 8086 	beq.w	8003cd6 <HAL_TIM_ConfigClockSource+0x172>
 8003bca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bce:	d87f      	bhi.n	8003cd0 <HAL_TIM_ConfigClockSource+0x16c>
 8003bd0:	2b70      	cmp	r3, #112	; 0x70
 8003bd2:	d01a      	beq.n	8003c0a <HAL_TIM_ConfigClockSource+0xa6>
 8003bd4:	2b70      	cmp	r3, #112	; 0x70
 8003bd6:	d87b      	bhi.n	8003cd0 <HAL_TIM_ConfigClockSource+0x16c>
 8003bd8:	2b60      	cmp	r3, #96	; 0x60
 8003bda:	d050      	beq.n	8003c7e <HAL_TIM_ConfigClockSource+0x11a>
 8003bdc:	2b60      	cmp	r3, #96	; 0x60
 8003bde:	d877      	bhi.n	8003cd0 <HAL_TIM_ConfigClockSource+0x16c>
 8003be0:	2b50      	cmp	r3, #80	; 0x50
 8003be2:	d03c      	beq.n	8003c5e <HAL_TIM_ConfigClockSource+0xfa>
 8003be4:	2b50      	cmp	r3, #80	; 0x50
 8003be6:	d873      	bhi.n	8003cd0 <HAL_TIM_ConfigClockSource+0x16c>
 8003be8:	2b40      	cmp	r3, #64	; 0x40
 8003bea:	d058      	beq.n	8003c9e <HAL_TIM_ConfigClockSource+0x13a>
 8003bec:	2b40      	cmp	r3, #64	; 0x40
 8003bee:	d86f      	bhi.n	8003cd0 <HAL_TIM_ConfigClockSource+0x16c>
 8003bf0:	2b30      	cmp	r3, #48	; 0x30
 8003bf2:	d064      	beq.n	8003cbe <HAL_TIM_ConfigClockSource+0x15a>
 8003bf4:	2b30      	cmp	r3, #48	; 0x30
 8003bf6:	d86b      	bhi.n	8003cd0 <HAL_TIM_ConfigClockSource+0x16c>
 8003bf8:	2b20      	cmp	r3, #32
 8003bfa:	d060      	beq.n	8003cbe <HAL_TIM_ConfigClockSource+0x15a>
 8003bfc:	2b20      	cmp	r3, #32
 8003bfe:	d867      	bhi.n	8003cd0 <HAL_TIM_ConfigClockSource+0x16c>
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d05c      	beq.n	8003cbe <HAL_TIM_ConfigClockSource+0x15a>
 8003c04:	2b10      	cmp	r3, #16
 8003c06:	d05a      	beq.n	8003cbe <HAL_TIM_ConfigClockSource+0x15a>
 8003c08:	e062      	b.n	8003cd0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6818      	ldr	r0, [r3, #0]
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	6899      	ldr	r1, [r3, #8]
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	685a      	ldr	r2, [r3, #4]
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	f000 fb35 	bl	8004288 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003c2c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	68ba      	ldr	r2, [r7, #8]
 8003c34:	609a      	str	r2, [r3, #8]
      break;
 8003c36:	e04f      	b.n	8003cd8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6818      	ldr	r0, [r3, #0]
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	6899      	ldr	r1, [r3, #8]
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	685a      	ldr	r2, [r3, #4]
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	f000 fb1e 	bl	8004288 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	689a      	ldr	r2, [r3, #8]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c5a:	609a      	str	r2, [r3, #8]
      break;
 8003c5c:	e03c      	b.n	8003cd8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6818      	ldr	r0, [r3, #0]
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	6859      	ldr	r1, [r3, #4]
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	68db      	ldr	r3, [r3, #12]
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	f000 fa92 	bl	8004194 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	2150      	movs	r1, #80	; 0x50
 8003c76:	4618      	mov	r0, r3
 8003c78:	f000 faeb 	bl	8004252 <TIM_ITRx_SetConfig>
      break;
 8003c7c:	e02c      	b.n	8003cd8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6818      	ldr	r0, [r3, #0]
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	6859      	ldr	r1, [r3, #4]
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	461a      	mov	r2, r3
 8003c8c:	f000 fab1 	bl	80041f2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	2160      	movs	r1, #96	; 0x60
 8003c96:	4618      	mov	r0, r3
 8003c98:	f000 fadb 	bl	8004252 <TIM_ITRx_SetConfig>
      break;
 8003c9c:	e01c      	b.n	8003cd8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6818      	ldr	r0, [r3, #0]
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	6859      	ldr	r1, [r3, #4]
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	461a      	mov	r2, r3
 8003cac:	f000 fa72 	bl	8004194 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	2140      	movs	r1, #64	; 0x40
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f000 facb 	bl	8004252 <TIM_ITRx_SetConfig>
      break;
 8003cbc:	e00c      	b.n	8003cd8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4619      	mov	r1, r3
 8003cc8:	4610      	mov	r0, r2
 8003cca:	f000 fac2 	bl	8004252 <TIM_ITRx_SetConfig>
      break;
 8003cce:	e003      	b.n	8003cd8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	73fb      	strb	r3, [r7, #15]
      break;
 8003cd4:	e000      	b.n	8003cd8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003cd6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3710      	adds	r7, #16
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
	...

08003cf4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b085      	sub	sp, #20
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
 8003cfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	4a40      	ldr	r2, [pc, #256]	; (8003e08 <TIM_Base_SetConfig+0x114>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d013      	beq.n	8003d34 <TIM_Base_SetConfig+0x40>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d12:	d00f      	beq.n	8003d34 <TIM_Base_SetConfig+0x40>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	4a3d      	ldr	r2, [pc, #244]	; (8003e0c <TIM_Base_SetConfig+0x118>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d00b      	beq.n	8003d34 <TIM_Base_SetConfig+0x40>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	4a3c      	ldr	r2, [pc, #240]	; (8003e10 <TIM_Base_SetConfig+0x11c>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d007      	beq.n	8003d34 <TIM_Base_SetConfig+0x40>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	4a3b      	ldr	r2, [pc, #236]	; (8003e14 <TIM_Base_SetConfig+0x120>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d003      	beq.n	8003d34 <TIM_Base_SetConfig+0x40>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	4a3a      	ldr	r2, [pc, #232]	; (8003e18 <TIM_Base_SetConfig+0x124>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d108      	bne.n	8003d46 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	68fa      	ldr	r2, [r7, #12]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	4a2f      	ldr	r2, [pc, #188]	; (8003e08 <TIM_Base_SetConfig+0x114>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d02b      	beq.n	8003da6 <TIM_Base_SetConfig+0xb2>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d54:	d027      	beq.n	8003da6 <TIM_Base_SetConfig+0xb2>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	4a2c      	ldr	r2, [pc, #176]	; (8003e0c <TIM_Base_SetConfig+0x118>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d023      	beq.n	8003da6 <TIM_Base_SetConfig+0xb2>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	4a2b      	ldr	r2, [pc, #172]	; (8003e10 <TIM_Base_SetConfig+0x11c>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d01f      	beq.n	8003da6 <TIM_Base_SetConfig+0xb2>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	4a2a      	ldr	r2, [pc, #168]	; (8003e14 <TIM_Base_SetConfig+0x120>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d01b      	beq.n	8003da6 <TIM_Base_SetConfig+0xb2>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	4a29      	ldr	r2, [pc, #164]	; (8003e18 <TIM_Base_SetConfig+0x124>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d017      	beq.n	8003da6 <TIM_Base_SetConfig+0xb2>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	4a28      	ldr	r2, [pc, #160]	; (8003e1c <TIM_Base_SetConfig+0x128>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d013      	beq.n	8003da6 <TIM_Base_SetConfig+0xb2>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4a27      	ldr	r2, [pc, #156]	; (8003e20 <TIM_Base_SetConfig+0x12c>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d00f      	beq.n	8003da6 <TIM_Base_SetConfig+0xb2>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4a26      	ldr	r2, [pc, #152]	; (8003e24 <TIM_Base_SetConfig+0x130>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d00b      	beq.n	8003da6 <TIM_Base_SetConfig+0xb2>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	4a25      	ldr	r2, [pc, #148]	; (8003e28 <TIM_Base_SetConfig+0x134>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d007      	beq.n	8003da6 <TIM_Base_SetConfig+0xb2>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	4a24      	ldr	r2, [pc, #144]	; (8003e2c <TIM_Base_SetConfig+0x138>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d003      	beq.n	8003da6 <TIM_Base_SetConfig+0xb2>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	4a23      	ldr	r2, [pc, #140]	; (8003e30 <TIM_Base_SetConfig+0x13c>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d108      	bne.n	8003db8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	68db      	ldr	r3, [r3, #12]
 8003db2:	68fa      	ldr	r2, [r7, #12]
 8003db4:	4313      	orrs	r3, r2
 8003db6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	695b      	ldr	r3, [r3, #20]
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	68fa      	ldr	r2, [r7, #12]
 8003dca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	689a      	ldr	r2, [r3, #8]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	4a0a      	ldr	r2, [pc, #40]	; (8003e08 <TIM_Base_SetConfig+0x114>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d003      	beq.n	8003dec <TIM_Base_SetConfig+0xf8>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	4a0c      	ldr	r2, [pc, #48]	; (8003e18 <TIM_Base_SetConfig+0x124>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d103      	bne.n	8003df4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	691a      	ldr	r2, [r3, #16]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2201      	movs	r2, #1
 8003df8:	615a      	str	r2, [r3, #20]
}
 8003dfa:	bf00      	nop
 8003dfc:	3714      	adds	r7, #20
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr
 8003e06:	bf00      	nop
 8003e08:	40010000 	.word	0x40010000
 8003e0c:	40000400 	.word	0x40000400
 8003e10:	40000800 	.word	0x40000800
 8003e14:	40000c00 	.word	0x40000c00
 8003e18:	40010400 	.word	0x40010400
 8003e1c:	40014000 	.word	0x40014000
 8003e20:	40014400 	.word	0x40014400
 8003e24:	40014800 	.word	0x40014800
 8003e28:	40001800 	.word	0x40001800
 8003e2c:	40001c00 	.word	0x40001c00
 8003e30:	40002000 	.word	0x40002000

08003e34 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b087      	sub	sp, #28
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6a1b      	ldr	r3, [r3, #32]
 8003e42:	f023 0201 	bic.w	r2, r3, #1
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6a1b      	ldr	r3, [r3, #32]
 8003e4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	699b      	ldr	r3, [r3, #24]
 8003e5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f023 0303 	bic.w	r3, r3, #3
 8003e6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	68fa      	ldr	r2, [r7, #12]
 8003e72:	4313      	orrs	r3, r2
 8003e74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	f023 0302 	bic.w	r3, r3, #2
 8003e7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	697a      	ldr	r2, [r7, #20]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	4a20      	ldr	r2, [pc, #128]	; (8003f0c <TIM_OC1_SetConfig+0xd8>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d003      	beq.n	8003e98 <TIM_OC1_SetConfig+0x64>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	4a1f      	ldr	r2, [pc, #124]	; (8003f10 <TIM_OC1_SetConfig+0xdc>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d10c      	bne.n	8003eb2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	f023 0308 	bic.w	r3, r3, #8
 8003e9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	697a      	ldr	r2, [r7, #20]
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	f023 0304 	bic.w	r3, r3, #4
 8003eb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a15      	ldr	r2, [pc, #84]	; (8003f0c <TIM_OC1_SetConfig+0xd8>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d003      	beq.n	8003ec2 <TIM_OC1_SetConfig+0x8e>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4a14      	ldr	r2, [pc, #80]	; (8003f10 <TIM_OC1_SetConfig+0xdc>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d111      	bne.n	8003ee6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ec8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ed0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	695b      	ldr	r3, [r3, #20]
 8003ed6:	693a      	ldr	r2, [r7, #16]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	699b      	ldr	r3, [r3, #24]
 8003ee0:	693a      	ldr	r2, [r7, #16]
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	693a      	ldr	r2, [r7, #16]
 8003eea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	68fa      	ldr	r2, [r7, #12]
 8003ef0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	685a      	ldr	r2, [r3, #4]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	697a      	ldr	r2, [r7, #20]
 8003efe:	621a      	str	r2, [r3, #32]
}
 8003f00:	bf00      	nop
 8003f02:	371c      	adds	r7, #28
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr
 8003f0c:	40010000 	.word	0x40010000
 8003f10:	40010400 	.word	0x40010400

08003f14 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b087      	sub	sp, #28
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a1b      	ldr	r3, [r3, #32]
 8003f22:	f023 0210 	bic.w	r2, r3, #16
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6a1b      	ldr	r3, [r3, #32]
 8003f2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	699b      	ldr	r3, [r3, #24]
 8003f3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	021b      	lsls	r3, r3, #8
 8003f52:	68fa      	ldr	r2, [r7, #12]
 8003f54:	4313      	orrs	r3, r2
 8003f56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	f023 0320 	bic.w	r3, r3, #32
 8003f5e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	011b      	lsls	r3, r3, #4
 8003f66:	697a      	ldr	r2, [r7, #20]
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	4a22      	ldr	r2, [pc, #136]	; (8003ff8 <TIM_OC2_SetConfig+0xe4>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d003      	beq.n	8003f7c <TIM_OC2_SetConfig+0x68>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	4a21      	ldr	r2, [pc, #132]	; (8003ffc <TIM_OC2_SetConfig+0xe8>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d10d      	bne.n	8003f98 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	011b      	lsls	r3, r3, #4
 8003f8a:	697a      	ldr	r2, [r7, #20]
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f96:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	4a17      	ldr	r2, [pc, #92]	; (8003ff8 <TIM_OC2_SetConfig+0xe4>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d003      	beq.n	8003fa8 <TIM_OC2_SetConfig+0x94>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	4a16      	ldr	r2, [pc, #88]	; (8003ffc <TIM_OC2_SetConfig+0xe8>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d113      	bne.n	8003fd0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003fae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003fb6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	695b      	ldr	r3, [r3, #20]
 8003fbc:	009b      	lsls	r3, r3, #2
 8003fbe:	693a      	ldr	r2, [r7, #16]
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	699b      	ldr	r3, [r3, #24]
 8003fc8:	009b      	lsls	r3, r3, #2
 8003fca:	693a      	ldr	r2, [r7, #16]
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	693a      	ldr	r2, [r7, #16]
 8003fd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	68fa      	ldr	r2, [r7, #12]
 8003fda:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	685a      	ldr	r2, [r3, #4]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	697a      	ldr	r2, [r7, #20]
 8003fe8:	621a      	str	r2, [r3, #32]
}
 8003fea:	bf00      	nop
 8003fec:	371c      	adds	r7, #28
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr
 8003ff6:	bf00      	nop
 8003ff8:	40010000 	.word	0x40010000
 8003ffc:	40010400 	.word	0x40010400

08004000 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004000:	b480      	push	{r7}
 8004002:	b087      	sub	sp, #28
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
 8004008:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6a1b      	ldr	r3, [r3, #32]
 800400e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6a1b      	ldr	r3, [r3, #32]
 800401a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	69db      	ldr	r3, [r3, #28]
 8004026:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800402e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f023 0303 	bic.w	r3, r3, #3
 8004036:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	68fa      	ldr	r2, [r7, #12]
 800403e:	4313      	orrs	r3, r2
 8004040:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004048:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	021b      	lsls	r3, r3, #8
 8004050:	697a      	ldr	r2, [r7, #20]
 8004052:	4313      	orrs	r3, r2
 8004054:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	4a21      	ldr	r2, [pc, #132]	; (80040e0 <TIM_OC3_SetConfig+0xe0>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d003      	beq.n	8004066 <TIM_OC3_SetConfig+0x66>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4a20      	ldr	r2, [pc, #128]	; (80040e4 <TIM_OC3_SetConfig+0xe4>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d10d      	bne.n	8004082 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800406c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	021b      	lsls	r3, r3, #8
 8004074:	697a      	ldr	r2, [r7, #20]
 8004076:	4313      	orrs	r3, r2
 8004078:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004080:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4a16      	ldr	r2, [pc, #88]	; (80040e0 <TIM_OC3_SetConfig+0xe0>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d003      	beq.n	8004092 <TIM_OC3_SetConfig+0x92>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	4a15      	ldr	r2, [pc, #84]	; (80040e4 <TIM_OC3_SetConfig+0xe4>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d113      	bne.n	80040ba <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004098:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80040a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	695b      	ldr	r3, [r3, #20]
 80040a6:	011b      	lsls	r3, r3, #4
 80040a8:	693a      	ldr	r2, [r7, #16]
 80040aa:	4313      	orrs	r3, r2
 80040ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	699b      	ldr	r3, [r3, #24]
 80040b2:	011b      	lsls	r3, r3, #4
 80040b4:	693a      	ldr	r2, [r7, #16]
 80040b6:	4313      	orrs	r3, r2
 80040b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	693a      	ldr	r2, [r7, #16]
 80040be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	68fa      	ldr	r2, [r7, #12]
 80040c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	685a      	ldr	r2, [r3, #4]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	697a      	ldr	r2, [r7, #20]
 80040d2:	621a      	str	r2, [r3, #32]
}
 80040d4:	bf00      	nop
 80040d6:	371c      	adds	r7, #28
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr
 80040e0:	40010000 	.word	0x40010000
 80040e4:	40010400 	.word	0x40010400

080040e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b087      	sub	sp, #28
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a1b      	ldr	r3, [r3, #32]
 80040f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6a1b      	ldr	r3, [r3, #32]
 8004102:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	69db      	ldr	r3, [r3, #28]
 800410e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004116:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800411e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	021b      	lsls	r3, r3, #8
 8004126:	68fa      	ldr	r2, [r7, #12]
 8004128:	4313      	orrs	r3, r2
 800412a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004132:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	031b      	lsls	r3, r3, #12
 800413a:	693a      	ldr	r2, [r7, #16]
 800413c:	4313      	orrs	r3, r2
 800413e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	4a12      	ldr	r2, [pc, #72]	; (800418c <TIM_OC4_SetConfig+0xa4>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d003      	beq.n	8004150 <TIM_OC4_SetConfig+0x68>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	4a11      	ldr	r2, [pc, #68]	; (8004190 <TIM_OC4_SetConfig+0xa8>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d109      	bne.n	8004164 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004156:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	695b      	ldr	r3, [r3, #20]
 800415c:	019b      	lsls	r3, r3, #6
 800415e:	697a      	ldr	r2, [r7, #20]
 8004160:	4313      	orrs	r3, r2
 8004162:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	697a      	ldr	r2, [r7, #20]
 8004168:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	68fa      	ldr	r2, [r7, #12]
 800416e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	685a      	ldr	r2, [r3, #4]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	693a      	ldr	r2, [r7, #16]
 800417c:	621a      	str	r2, [r3, #32]
}
 800417e:	bf00      	nop
 8004180:	371c      	adds	r7, #28
 8004182:	46bd      	mov	sp, r7
 8004184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004188:	4770      	bx	lr
 800418a:	bf00      	nop
 800418c:	40010000 	.word	0x40010000
 8004190:	40010400 	.word	0x40010400

08004194 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004194:	b480      	push	{r7}
 8004196:	b087      	sub	sp, #28
 8004198:	af00      	add	r7, sp, #0
 800419a:	60f8      	str	r0, [r7, #12]
 800419c:	60b9      	str	r1, [r7, #8]
 800419e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6a1b      	ldr	r3, [r3, #32]
 80041a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	6a1b      	ldr	r3, [r3, #32]
 80041aa:	f023 0201 	bic.w	r2, r3, #1
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	699b      	ldr	r3, [r3, #24]
 80041b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80041be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	011b      	lsls	r3, r3, #4
 80041c4:	693a      	ldr	r2, [r7, #16]
 80041c6:	4313      	orrs	r3, r2
 80041c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	f023 030a 	bic.w	r3, r3, #10
 80041d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80041d2:	697a      	ldr	r2, [r7, #20]
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	4313      	orrs	r3, r2
 80041d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	693a      	ldr	r2, [r7, #16]
 80041de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	697a      	ldr	r2, [r7, #20]
 80041e4:	621a      	str	r2, [r3, #32]
}
 80041e6:	bf00      	nop
 80041e8:	371c      	adds	r7, #28
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr

080041f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041f2:	b480      	push	{r7}
 80041f4:	b087      	sub	sp, #28
 80041f6:	af00      	add	r7, sp, #0
 80041f8:	60f8      	str	r0, [r7, #12]
 80041fa:	60b9      	str	r1, [r7, #8]
 80041fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	6a1b      	ldr	r3, [r3, #32]
 8004202:	f023 0210 	bic.w	r2, r3, #16
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	699b      	ldr	r3, [r3, #24]
 800420e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	6a1b      	ldr	r3, [r3, #32]
 8004214:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800421c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	031b      	lsls	r3, r3, #12
 8004222:	697a      	ldr	r2, [r7, #20]
 8004224:	4313      	orrs	r3, r2
 8004226:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800422e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	011b      	lsls	r3, r3, #4
 8004234:	693a      	ldr	r2, [r7, #16]
 8004236:	4313      	orrs	r3, r2
 8004238:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	697a      	ldr	r2, [r7, #20]
 800423e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	693a      	ldr	r2, [r7, #16]
 8004244:	621a      	str	r2, [r3, #32]
}
 8004246:	bf00      	nop
 8004248:	371c      	adds	r7, #28
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr

08004252 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004252:	b480      	push	{r7}
 8004254:	b085      	sub	sp, #20
 8004256:	af00      	add	r7, sp, #0
 8004258:	6078      	str	r0, [r7, #4]
 800425a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004268:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800426a:	683a      	ldr	r2, [r7, #0]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	4313      	orrs	r3, r2
 8004270:	f043 0307 	orr.w	r3, r3, #7
 8004274:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	68fa      	ldr	r2, [r7, #12]
 800427a:	609a      	str	r2, [r3, #8]
}
 800427c:	bf00      	nop
 800427e:	3714      	adds	r7, #20
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr

08004288 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004288:	b480      	push	{r7}
 800428a:	b087      	sub	sp, #28
 800428c:	af00      	add	r7, sp, #0
 800428e:	60f8      	str	r0, [r7, #12]
 8004290:	60b9      	str	r1, [r7, #8]
 8004292:	607a      	str	r2, [r7, #4]
 8004294:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	021a      	lsls	r2, r3, #8
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	431a      	orrs	r2, r3
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	4313      	orrs	r3, r2
 80042b0:	697a      	ldr	r2, [r7, #20]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	697a      	ldr	r2, [r7, #20]
 80042ba:	609a      	str	r2, [r3, #8]
}
 80042bc:	bf00      	nop
 80042be:	371c      	adds	r7, #28
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr

080042c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b085      	sub	sp, #20
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
 80042d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d101      	bne.n	80042e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042dc:	2302      	movs	r3, #2
 80042de:	e05a      	b.n	8004396 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2201      	movs	r2, #1
 80042e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2202      	movs	r2, #2
 80042ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004306:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	68fa      	ldr	r2, [r7, #12]
 800430e:	4313      	orrs	r3, r2
 8004310:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	68fa      	ldr	r2, [r7, #12]
 8004318:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a21      	ldr	r2, [pc, #132]	; (80043a4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d022      	beq.n	800436a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800432c:	d01d      	beq.n	800436a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a1d      	ldr	r2, [pc, #116]	; (80043a8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d018      	beq.n	800436a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a1b      	ldr	r2, [pc, #108]	; (80043ac <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d013      	beq.n	800436a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a1a      	ldr	r2, [pc, #104]	; (80043b0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d00e      	beq.n	800436a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a18      	ldr	r2, [pc, #96]	; (80043b4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d009      	beq.n	800436a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a17      	ldr	r2, [pc, #92]	; (80043b8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d004      	beq.n	800436a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a15      	ldr	r2, [pc, #84]	; (80043bc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d10c      	bne.n	8004384 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004370:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	68ba      	ldr	r2, [r7, #8]
 8004378:	4313      	orrs	r3, r2
 800437a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	68ba      	ldr	r2, [r7, #8]
 8004382:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2201      	movs	r2, #1
 8004388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2200      	movs	r2, #0
 8004390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004394:	2300      	movs	r3, #0
}
 8004396:	4618      	mov	r0, r3
 8004398:	3714      	adds	r7, #20
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr
 80043a2:	bf00      	nop
 80043a4:	40010000 	.word	0x40010000
 80043a8:	40000400 	.word	0x40000400
 80043ac:	40000800 	.word	0x40000800
 80043b0:	40000c00 	.word	0x40000c00
 80043b4:	40010400 	.word	0x40010400
 80043b8:	40014000 	.word	0x40014000
 80043bc:	40001800 	.word	0x40001800

080043c0 <LL_GPIO_SetPinMode>:
{
 80043c0:	b480      	push	{r7}
 80043c2:	b089      	sub	sp, #36	; 0x24
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	60f8      	str	r0, [r7, #12]
 80043c8:	60b9      	str	r1, [r7, #8]
 80043ca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	fa93 f3a3 	rbit	r3, r3
 80043da:	613b      	str	r3, [r7, #16]
  return result;
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	fab3 f383 	clz	r3, r3
 80043e2:	b2db      	uxtb	r3, r3
 80043e4:	005b      	lsls	r3, r3, #1
 80043e6:	2103      	movs	r1, #3
 80043e8:	fa01 f303 	lsl.w	r3, r1, r3
 80043ec:	43db      	mvns	r3, r3
 80043ee:	401a      	ands	r2, r3
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043f4:	69fb      	ldr	r3, [r7, #28]
 80043f6:	fa93 f3a3 	rbit	r3, r3
 80043fa:	61bb      	str	r3, [r7, #24]
  return result;
 80043fc:	69bb      	ldr	r3, [r7, #24]
 80043fe:	fab3 f383 	clz	r3, r3
 8004402:	b2db      	uxtb	r3, r3
 8004404:	005b      	lsls	r3, r3, #1
 8004406:	6879      	ldr	r1, [r7, #4]
 8004408:	fa01 f303 	lsl.w	r3, r1, r3
 800440c:	431a      	orrs	r2, r3
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	601a      	str	r2, [r3, #0]
}
 8004412:	bf00      	nop
 8004414:	3724      	adds	r7, #36	; 0x24
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr

0800441e <LL_GPIO_SetPinOutputType>:
{
 800441e:	b480      	push	{r7}
 8004420:	b085      	sub	sp, #20
 8004422:	af00      	add	r7, sp, #0
 8004424:	60f8      	str	r0, [r7, #12]
 8004426:	60b9      	str	r1, [r7, #8]
 8004428:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	685a      	ldr	r2, [r3, #4]
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	43db      	mvns	r3, r3
 8004432:	401a      	ands	r2, r3
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	6879      	ldr	r1, [r7, #4]
 8004438:	fb01 f303 	mul.w	r3, r1, r3
 800443c:	431a      	orrs	r2, r3
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	605a      	str	r2, [r3, #4]
}
 8004442:	bf00      	nop
 8004444:	3714      	adds	r7, #20
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr

0800444e <LL_GPIO_SetPinSpeed>:
{
 800444e:	b480      	push	{r7}
 8004450:	b089      	sub	sp, #36	; 0x24
 8004452:	af00      	add	r7, sp, #0
 8004454:	60f8      	str	r0, [r7, #12]
 8004456:	60b9      	str	r1, [r7, #8]
 8004458:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	689a      	ldr	r2, [r3, #8]
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	fa93 f3a3 	rbit	r3, r3
 8004468:	613b      	str	r3, [r7, #16]
  return result;
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	fab3 f383 	clz	r3, r3
 8004470:	b2db      	uxtb	r3, r3
 8004472:	005b      	lsls	r3, r3, #1
 8004474:	2103      	movs	r1, #3
 8004476:	fa01 f303 	lsl.w	r3, r1, r3
 800447a:	43db      	mvns	r3, r3
 800447c:	401a      	ands	r2, r3
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004482:	69fb      	ldr	r3, [r7, #28]
 8004484:	fa93 f3a3 	rbit	r3, r3
 8004488:	61bb      	str	r3, [r7, #24]
  return result;
 800448a:	69bb      	ldr	r3, [r7, #24]
 800448c:	fab3 f383 	clz	r3, r3
 8004490:	b2db      	uxtb	r3, r3
 8004492:	005b      	lsls	r3, r3, #1
 8004494:	6879      	ldr	r1, [r7, #4]
 8004496:	fa01 f303 	lsl.w	r3, r1, r3
 800449a:	431a      	orrs	r2, r3
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	609a      	str	r2, [r3, #8]
}
 80044a0:	bf00      	nop
 80044a2:	3724      	adds	r7, #36	; 0x24
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr

080044ac <LL_GPIO_SetPinPull>:
{
 80044ac:	b480      	push	{r7}
 80044ae:	b089      	sub	sp, #36	; 0x24
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	60f8      	str	r0, [r7, #12]
 80044b4:	60b9      	str	r1, [r7, #8]
 80044b6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	68da      	ldr	r2, [r3, #12]
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	fa93 f3a3 	rbit	r3, r3
 80044c6:	613b      	str	r3, [r7, #16]
  return result;
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	fab3 f383 	clz	r3, r3
 80044ce:	b2db      	uxtb	r3, r3
 80044d0:	005b      	lsls	r3, r3, #1
 80044d2:	2103      	movs	r1, #3
 80044d4:	fa01 f303 	lsl.w	r3, r1, r3
 80044d8:	43db      	mvns	r3, r3
 80044da:	401a      	ands	r2, r3
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044e0:	69fb      	ldr	r3, [r7, #28]
 80044e2:	fa93 f3a3 	rbit	r3, r3
 80044e6:	61bb      	str	r3, [r7, #24]
  return result;
 80044e8:	69bb      	ldr	r3, [r7, #24]
 80044ea:	fab3 f383 	clz	r3, r3
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	005b      	lsls	r3, r3, #1
 80044f2:	6879      	ldr	r1, [r7, #4]
 80044f4:	fa01 f303 	lsl.w	r3, r1, r3
 80044f8:	431a      	orrs	r2, r3
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	60da      	str	r2, [r3, #12]
}
 80044fe:	bf00      	nop
 8004500:	3724      	adds	r7, #36	; 0x24
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr

0800450a <LL_GPIO_SetAFPin_0_7>:
{
 800450a:	b480      	push	{r7}
 800450c:	b089      	sub	sp, #36	; 0x24
 800450e:	af00      	add	r7, sp, #0
 8004510:	60f8      	str	r0, [r7, #12]
 8004512:	60b9      	str	r1, [r7, #8]
 8004514:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	6a1a      	ldr	r2, [r3, #32]
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	fa93 f3a3 	rbit	r3, r3
 8004524:	613b      	str	r3, [r7, #16]
  return result;
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	fab3 f383 	clz	r3, r3
 800452c:	b2db      	uxtb	r3, r3
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	210f      	movs	r1, #15
 8004532:	fa01 f303 	lsl.w	r3, r1, r3
 8004536:	43db      	mvns	r3, r3
 8004538:	401a      	ands	r2, r3
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800453e:	69fb      	ldr	r3, [r7, #28]
 8004540:	fa93 f3a3 	rbit	r3, r3
 8004544:	61bb      	str	r3, [r7, #24]
  return result;
 8004546:	69bb      	ldr	r3, [r7, #24]
 8004548:	fab3 f383 	clz	r3, r3
 800454c:	b2db      	uxtb	r3, r3
 800454e:	009b      	lsls	r3, r3, #2
 8004550:	6879      	ldr	r1, [r7, #4]
 8004552:	fa01 f303 	lsl.w	r3, r1, r3
 8004556:	431a      	orrs	r2, r3
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	621a      	str	r2, [r3, #32]
}
 800455c:	bf00      	nop
 800455e:	3724      	adds	r7, #36	; 0x24
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr

08004568 <LL_GPIO_SetAFPin_8_15>:
{
 8004568:	b480      	push	{r7}
 800456a:	b089      	sub	sp, #36	; 0x24
 800456c:	af00      	add	r7, sp, #0
 800456e:	60f8      	str	r0, [r7, #12]
 8004570:	60b9      	str	r1, [r7, #8]
 8004572:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	0a1b      	lsrs	r3, r3, #8
 800457c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	fa93 f3a3 	rbit	r3, r3
 8004584:	613b      	str	r3, [r7, #16]
  return result;
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	fab3 f383 	clz	r3, r3
 800458c:	b2db      	uxtb	r3, r3
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	210f      	movs	r1, #15
 8004592:	fa01 f303 	lsl.w	r3, r1, r3
 8004596:	43db      	mvns	r3, r3
 8004598:	401a      	ands	r2, r3
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	0a1b      	lsrs	r3, r3, #8
 800459e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045a0:	69fb      	ldr	r3, [r7, #28]
 80045a2:	fa93 f3a3 	rbit	r3, r3
 80045a6:	61bb      	str	r3, [r7, #24]
  return result;
 80045a8:	69bb      	ldr	r3, [r7, #24]
 80045aa:	fab3 f383 	clz	r3, r3
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	009b      	lsls	r3, r3, #2
 80045b2:	6879      	ldr	r1, [r7, #4]
 80045b4:	fa01 f303 	lsl.w	r3, r1, r3
 80045b8:	431a      	orrs	r2, r3
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	625a      	str	r2, [r3, #36]	; 0x24
}
 80045be:	bf00      	nop
 80045c0:	3724      	adds	r7, #36	; 0x24
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr

080045ca <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80045ca:	b580      	push	{r7, lr}
 80045cc:	b088      	sub	sp, #32
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	6078      	str	r0, [r7, #4]
 80045d2:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 80045d4:	2300      	movs	r3, #0
 80045d6:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 80045d8:	2300      	movs	r3, #0
 80045da:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	fa93 f3a3 	rbit	r3, r3
 80045e8:	613b      	str	r3, [r7, #16]
  return result;
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	fab3 f383 	clz	r3, r3
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80045f4:	e050      	b.n	8004698 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	2101      	movs	r1, #1
 80045fc:	69fb      	ldr	r3, [r7, #28]
 80045fe:	fa01 f303 	lsl.w	r3, r1, r3
 8004602:	4013      	ands	r3, r2
 8004604:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 8004606:	69bb      	ldr	r3, [r7, #24]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d042      	beq.n	8004692 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	2b01      	cmp	r3, #1
 8004612:	d003      	beq.n	800461c <LL_GPIO_Init+0x52>
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	2b02      	cmp	r3, #2
 800461a:	d10d      	bne.n	8004638 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	461a      	mov	r2, r3
 8004622:	69b9      	ldr	r1, [r7, #24]
 8004624:	6878      	ldr	r0, [r7, #4]
 8004626:	f7ff ff12 	bl	800444e <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	68db      	ldr	r3, [r3, #12]
 800462e:	461a      	mov	r2, r3
 8004630:	69b9      	ldr	r1, [r7, #24]
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f7ff fef3 	bl	800441e <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	691b      	ldr	r3, [r3, #16]
 800463c:	461a      	mov	r2, r3
 800463e:	69b9      	ldr	r1, [r7, #24]
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	f7ff ff33 	bl	80044ac <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	2b02      	cmp	r3, #2
 800464c:	d11a      	bne.n	8004684 <LL_GPIO_Init+0xba>
 800464e:	69bb      	ldr	r3, [r7, #24]
 8004650:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	fa93 f3a3 	rbit	r3, r3
 8004658:	60bb      	str	r3, [r7, #8]
  return result;
 800465a:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800465c:	fab3 f383 	clz	r3, r3
 8004660:	b2db      	uxtb	r3, r3
 8004662:	2b07      	cmp	r3, #7
 8004664:	d807      	bhi.n	8004676 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	695b      	ldr	r3, [r3, #20]
 800466a:	461a      	mov	r2, r3
 800466c:	69b9      	ldr	r1, [r7, #24]
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f7ff ff4b 	bl	800450a <LL_GPIO_SetAFPin_0_7>
 8004674:	e006      	b.n	8004684 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	695b      	ldr	r3, [r3, #20]
 800467a:	461a      	mov	r2, r3
 800467c:	69b9      	ldr	r1, [r7, #24]
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f7ff ff72 	bl	8004568 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	461a      	mov	r2, r3
 800468a:	69b9      	ldr	r1, [r7, #24]
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	f7ff fe97 	bl	80043c0 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8004692:	69fb      	ldr	r3, [r7, #28]
 8004694:	3301      	adds	r3, #1
 8004696:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	69fb      	ldr	r3, [r7, #28]
 800469e:	fa22 f303 	lsr.w	r3, r2, r3
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d1a7      	bne.n	80045f6 <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 80046a6:	2300      	movs	r3, #0
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3720      	adds	r7, #32
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}

080046b0 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80046b0:	b480      	push	{r7}
 80046b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80046b4:	4b04      	ldr	r3, [pc, #16]	; (80046c8 <LL_RCC_GetSysClkSource+0x18>)
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	f003 030c 	and.w	r3, r3, #12
}
 80046bc:	4618      	mov	r0, r3
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr
 80046c6:	bf00      	nop
 80046c8:	40023800 	.word	0x40023800

080046cc <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80046cc:	b480      	push	{r7}
 80046ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80046d0:	4b04      	ldr	r3, [pc, #16]	; (80046e4 <LL_RCC_GetAHBPrescaler+0x18>)
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80046d8:	4618      	mov	r0, r3
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr
 80046e2:	bf00      	nop
 80046e4:	40023800 	.word	0x40023800

080046e8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80046e8:	b480      	push	{r7}
 80046ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80046ec:	4b04      	ldr	r3, [pc, #16]	; (8004700 <LL_RCC_GetAPB1Prescaler+0x18>)
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	46bd      	mov	sp, r7
 80046f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fc:	4770      	bx	lr
 80046fe:	bf00      	nop
 8004700:	40023800 	.word	0x40023800

08004704 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8004704:	b480      	push	{r7}
 8004706:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004708:	4b04      	ldr	r3, [pc, #16]	; (800471c <LL_RCC_GetAPB2Prescaler+0x18>)
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8004710:	4618      	mov	r0, r3
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr
 800471a:	bf00      	nop
 800471c:	40023800 	.word	0x40023800

08004720 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8004720:	b480      	push	{r7}
 8004722:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004724:	4b04      	ldr	r3, [pc, #16]	; (8004738 <LL_RCC_PLL_GetMainSource+0x18>)
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 800472c:	4618      	mov	r0, r3
 800472e:	46bd      	mov	sp, r7
 8004730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004734:	4770      	bx	lr
 8004736:	bf00      	nop
 8004738:	40023800 	.word	0x40023800

0800473c <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800473c:	b480      	push	{r7}
 800473e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004740:	4b04      	ldr	r3, [pc, #16]	; (8004754 <LL_RCC_PLL_GetN+0x18>)
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	099b      	lsrs	r3, r3, #6
 8004746:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 800474a:	4618      	mov	r0, r3
 800474c:	46bd      	mov	sp, r7
 800474e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004752:	4770      	bx	lr
 8004754:	40023800 	.word	0x40023800

08004758 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8004758:	b480      	push	{r7}
 800475a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 800475c:	4b04      	ldr	r3, [pc, #16]	; (8004770 <LL_RCC_PLL_GetP+0x18>)
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8004764:	4618      	mov	r0, r3
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr
 800476e:	bf00      	nop
 8004770:	40023800 	.word	0x40023800

08004774 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8004774:	b480      	push	{r7}
 8004776:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004778:	4b04      	ldr	r3, [pc, #16]	; (800478c <LL_RCC_PLL_GetDivider+0x18>)
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8004780:	4618      	mov	r0, r3
 8004782:	46bd      	mov	sp, r7
 8004784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004788:	4770      	bx	lr
 800478a:	bf00      	nop
 800478c:	40023800 	.word	0x40023800

08004790 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b082      	sub	sp, #8
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8004798:	f000 f820 	bl	80047dc <RCC_GetSystemClockFreq>
 800479c:	4602      	mov	r2, r0
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4618      	mov	r0, r3
 80047a8:	f000 f840 	bl	800482c <RCC_GetHCLKClockFreq>
 80047ac:	4602      	mov	r2, r0
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	4618      	mov	r0, r3
 80047b8:	f000 f84e 	bl	8004858 <RCC_GetPCLK1ClockFreq>
 80047bc:	4602      	mov	r2, r0
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	4618      	mov	r0, r3
 80047c8:	f000 f85a 	bl	8004880 <RCC_GetPCLK2ClockFreq>
 80047cc:	4602      	mov	r2, r0
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	60da      	str	r2, [r3, #12]
}
 80047d2:	bf00      	nop
 80047d4:	3708      	adds	r7, #8
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}
	...

080047dc <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b082      	sub	sp, #8
 80047e0:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80047e2:	2300      	movs	r3, #0
 80047e4:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80047e6:	f7ff ff63 	bl	80046b0 <LL_RCC_GetSysClkSource>
 80047ea:	4603      	mov	r3, r0
 80047ec:	2b08      	cmp	r3, #8
 80047ee:	d00c      	beq.n	800480a <RCC_GetSystemClockFreq+0x2e>
 80047f0:	2b08      	cmp	r3, #8
 80047f2:	d80f      	bhi.n	8004814 <RCC_GetSystemClockFreq+0x38>
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d002      	beq.n	80047fe <RCC_GetSystemClockFreq+0x22>
 80047f8:	2b04      	cmp	r3, #4
 80047fa:	d003      	beq.n	8004804 <RCC_GetSystemClockFreq+0x28>
 80047fc:	e00a      	b.n	8004814 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80047fe:	4b09      	ldr	r3, [pc, #36]	; (8004824 <RCC_GetSystemClockFreq+0x48>)
 8004800:	607b      	str	r3, [r7, #4]
      break;
 8004802:	e00a      	b.n	800481a <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8004804:	4b08      	ldr	r3, [pc, #32]	; (8004828 <RCC_GetSystemClockFreq+0x4c>)
 8004806:	607b      	str	r3, [r7, #4]
      break;
 8004808:	e007      	b.n	800481a <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 800480a:	2008      	movs	r0, #8
 800480c:	f000 f84c 	bl	80048a8 <RCC_PLL_GetFreqDomain_SYS>
 8004810:	6078      	str	r0, [r7, #4]
      break;
 8004812:	e002      	b.n	800481a <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8004814:	4b03      	ldr	r3, [pc, #12]	; (8004824 <RCC_GetSystemClockFreq+0x48>)
 8004816:	607b      	str	r3, [r7, #4]
      break;
 8004818:	bf00      	nop
  }

  return frequency;
 800481a:	687b      	ldr	r3, [r7, #4]
}
 800481c:	4618      	mov	r0, r3
 800481e:	3708      	adds	r7, #8
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}
 8004824:	00f42400 	.word	0x00f42400
 8004828:	007a1200 	.word	0x007a1200

0800482c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b082      	sub	sp, #8
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8004834:	f7ff ff4a 	bl	80046cc <LL_RCC_GetAHBPrescaler>
 8004838:	4603      	mov	r3, r0
 800483a:	091b      	lsrs	r3, r3, #4
 800483c:	f003 030f 	and.w	r3, r3, #15
 8004840:	4a04      	ldr	r2, [pc, #16]	; (8004854 <RCC_GetHCLKClockFreq+0x28>)
 8004842:	5cd3      	ldrb	r3, [r2, r3]
 8004844:	461a      	mov	r2, r3
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	40d3      	lsrs	r3, r2
}
 800484a:	4618      	mov	r0, r3
 800484c:	3708      	adds	r7, #8
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}
 8004852:	bf00      	nop
 8004854:	08007fd4 	.word	0x08007fd4

08004858 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b082      	sub	sp, #8
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8004860:	f7ff ff42 	bl	80046e8 <LL_RCC_GetAPB1Prescaler>
 8004864:	4603      	mov	r3, r0
 8004866:	0a9b      	lsrs	r3, r3, #10
 8004868:	4a04      	ldr	r2, [pc, #16]	; (800487c <RCC_GetPCLK1ClockFreq+0x24>)
 800486a:	5cd3      	ldrb	r3, [r2, r3]
 800486c:	461a      	mov	r2, r3
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	40d3      	lsrs	r3, r2
}
 8004872:	4618      	mov	r0, r3
 8004874:	3708      	adds	r7, #8
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}
 800487a:	bf00      	nop
 800487c:	08007fe4 	.word	0x08007fe4

08004880 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b082      	sub	sp, #8
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8004888:	f7ff ff3c 	bl	8004704 <LL_RCC_GetAPB2Prescaler>
 800488c:	4603      	mov	r3, r0
 800488e:	0b5b      	lsrs	r3, r3, #13
 8004890:	4a04      	ldr	r2, [pc, #16]	; (80048a4 <RCC_GetPCLK2ClockFreq+0x24>)
 8004892:	5cd3      	ldrb	r3, [r2, r3]
 8004894:	461a      	mov	r2, r3
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	40d3      	lsrs	r3, r2
}
 800489a:	4618      	mov	r0, r3
 800489c:	3708      	adds	r7, #8
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
 80048a2:	bf00      	nop
 80048a4:	08007fe4 	.word	0x08007fe4

080048a8 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 80048a8:	b590      	push	{r4, r7, lr}
 80048aa:	b087      	sub	sp, #28
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 80048b0:	2300      	movs	r3, #0
 80048b2:	617b      	str	r3, [r7, #20]
 80048b4:	2300      	movs	r3, #0
 80048b6:	60fb      	str	r3, [r7, #12]
 80048b8:	2300      	movs	r3, #0
 80048ba:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 80048bc:	f7ff ff30 	bl	8004720 <LL_RCC_PLL_GetMainSource>
 80048c0:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d004      	beq.n	80048d2 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048ce:	d003      	beq.n	80048d8 <RCC_PLL_GetFreqDomain_SYS+0x30>
 80048d0:	e005      	b.n	80048de <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 80048d2:	4b12      	ldr	r3, [pc, #72]	; (800491c <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80048d4:	617b      	str	r3, [r7, #20]
      break;
 80048d6:	e005      	b.n	80048e4 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80048d8:	4b11      	ldr	r3, [pc, #68]	; (8004920 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 80048da:	617b      	str	r3, [r7, #20]
      break;
 80048dc:	e002      	b.n	80048e4 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 80048de:	4b0f      	ldr	r3, [pc, #60]	; (800491c <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80048e0:	617b      	str	r3, [r7, #20]
      break;
 80048e2:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2b08      	cmp	r3, #8
 80048e8:	d113      	bne.n	8004912 <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80048ea:	f7ff ff43 	bl	8004774 <LL_RCC_PLL_GetDivider>
 80048ee:	4602      	mov	r2, r0
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	fbb3 f4f2 	udiv	r4, r3, r2
 80048f6:	f7ff ff21 	bl	800473c <LL_RCC_PLL_GetN>
 80048fa:	4603      	mov	r3, r0
 80048fc:	fb03 f404 	mul.w	r4, r3, r4
 8004900:	f7ff ff2a 	bl	8004758 <LL_RCC_PLL_GetP>
 8004904:	4603      	mov	r3, r0
 8004906:	0c1b      	lsrs	r3, r3, #16
 8004908:	3301      	adds	r3, #1
 800490a:	005b      	lsls	r3, r3, #1
 800490c:	fbb4 f3f3 	udiv	r3, r4, r3
 8004910:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8004912:	693b      	ldr	r3, [r7, #16]
}
 8004914:	4618      	mov	r0, r3
 8004916:	371c      	adds	r7, #28
 8004918:	46bd      	mov	sp, r7
 800491a:	bd90      	pop	{r4, r7, pc}
 800491c:	00f42400 	.word	0x00f42400
 8004920:	007a1200 	.word	0x007a1200

08004924 <LL_TIM_SetPrescaler>:
{
 8004924:	b480      	push	{r7}
 8004926:	b083      	sub	sp, #12
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
 800492c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	683a      	ldr	r2, [r7, #0]
 8004932:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004934:	bf00      	nop
 8004936:	370c      	adds	r7, #12
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr

08004940 <LL_TIM_SetAutoReload>:
{
 8004940:	b480      	push	{r7}
 8004942:	b083      	sub	sp, #12
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
 8004948:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	683a      	ldr	r2, [r7, #0]
 800494e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004950:	bf00      	nop
 8004952:	370c      	adds	r7, #12
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr

0800495c <LL_TIM_SetRepetitionCounter>:
{
 800495c:	b480      	push	{r7}
 800495e:	b083      	sub	sp, #12
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
 8004964:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	683a      	ldr	r2, [r7, #0]
 800496a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800496c:	bf00      	nop
 800496e:	370c      	adds	r7, #12
 8004970:	46bd      	mov	sp, r7
 8004972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004976:	4770      	bx	lr

08004978 <LL_TIM_OC_SetCompareCH1>:
{
 8004978:	b480      	push	{r7}
 800497a:	b083      	sub	sp, #12
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
 8004980:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	683a      	ldr	r2, [r7, #0]
 8004986:	635a      	str	r2, [r3, #52]	; 0x34
}
 8004988:	bf00      	nop
 800498a:	370c      	adds	r7, #12
 800498c:	46bd      	mov	sp, r7
 800498e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004992:	4770      	bx	lr

08004994 <LL_TIM_OC_SetCompareCH2>:
{
 8004994:	b480      	push	{r7}
 8004996:	b083      	sub	sp, #12
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	683a      	ldr	r2, [r7, #0]
 80049a2:	639a      	str	r2, [r3, #56]	; 0x38
}
 80049a4:	bf00      	nop
 80049a6:	370c      	adds	r7, #12
 80049a8:	46bd      	mov	sp, r7
 80049aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ae:	4770      	bx	lr

080049b0 <LL_TIM_OC_SetCompareCH3>:
{
 80049b0:	b480      	push	{r7}
 80049b2:	b083      	sub	sp, #12
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	683a      	ldr	r2, [r7, #0]
 80049be:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80049c0:	bf00      	nop
 80049c2:	370c      	adds	r7, #12
 80049c4:	46bd      	mov	sp, r7
 80049c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ca:	4770      	bx	lr

080049cc <LL_TIM_OC_SetCompareCH4>:
{
 80049cc:	b480      	push	{r7}
 80049ce:	b083      	sub	sp, #12
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
 80049d4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	683a      	ldr	r2, [r7, #0]
 80049da:	641a      	str	r2, [r3, #64]	; 0x40
}
 80049dc:	bf00      	nop
 80049de:	370c      	adds	r7, #12
 80049e0:	46bd      	mov	sp, r7
 80049e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e6:	4770      	bx	lr

080049e8 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b083      	sub	sp, #12
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	695b      	ldr	r3, [r3, #20]
 80049f4:	f043 0201 	orr.w	r2, r3, #1
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	615a      	str	r2, [r3, #20]
}
 80049fc:	bf00      	nop
 80049fe:	370c      	adds	r7, #12
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr

08004a08 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b084      	sub	sp, #16
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
 8004a10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	4a3d      	ldr	r2, [pc, #244]	; (8004b10 <LL_TIM_Init+0x108>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d013      	beq.n	8004a48 <LL_TIM_Init+0x40>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a26:	d00f      	beq.n	8004a48 <LL_TIM_Init+0x40>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	4a3a      	ldr	r2, [pc, #232]	; (8004b14 <LL_TIM_Init+0x10c>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d00b      	beq.n	8004a48 <LL_TIM_Init+0x40>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	4a39      	ldr	r2, [pc, #228]	; (8004b18 <LL_TIM_Init+0x110>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d007      	beq.n	8004a48 <LL_TIM_Init+0x40>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	4a38      	ldr	r2, [pc, #224]	; (8004b1c <LL_TIM_Init+0x114>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d003      	beq.n	8004a48 <LL_TIM_Init+0x40>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	4a37      	ldr	r2, [pc, #220]	; (8004b20 <LL_TIM_Init+0x118>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d106      	bne.n	8004a56 <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	4313      	orrs	r3, r2
 8004a54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	4a2d      	ldr	r2, [pc, #180]	; (8004b10 <LL_TIM_Init+0x108>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d02b      	beq.n	8004ab6 <LL_TIM_Init+0xae>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a64:	d027      	beq.n	8004ab6 <LL_TIM_Init+0xae>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	4a2a      	ldr	r2, [pc, #168]	; (8004b14 <LL_TIM_Init+0x10c>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d023      	beq.n	8004ab6 <LL_TIM_Init+0xae>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	4a29      	ldr	r2, [pc, #164]	; (8004b18 <LL_TIM_Init+0x110>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d01f      	beq.n	8004ab6 <LL_TIM_Init+0xae>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	4a28      	ldr	r2, [pc, #160]	; (8004b1c <LL_TIM_Init+0x114>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d01b      	beq.n	8004ab6 <LL_TIM_Init+0xae>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	4a27      	ldr	r2, [pc, #156]	; (8004b20 <LL_TIM_Init+0x118>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d017      	beq.n	8004ab6 <LL_TIM_Init+0xae>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	4a26      	ldr	r2, [pc, #152]	; (8004b24 <LL_TIM_Init+0x11c>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d013      	beq.n	8004ab6 <LL_TIM_Init+0xae>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	4a25      	ldr	r2, [pc, #148]	; (8004b28 <LL_TIM_Init+0x120>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d00f      	beq.n	8004ab6 <LL_TIM_Init+0xae>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	4a24      	ldr	r2, [pc, #144]	; (8004b2c <LL_TIM_Init+0x124>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d00b      	beq.n	8004ab6 <LL_TIM_Init+0xae>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	4a23      	ldr	r2, [pc, #140]	; (8004b30 <LL_TIM_Init+0x128>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d007      	beq.n	8004ab6 <LL_TIM_Init+0xae>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	4a22      	ldr	r2, [pc, #136]	; (8004b34 <LL_TIM_Init+0x12c>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d003      	beq.n	8004ab6 <LL_TIM_Init+0xae>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	4a21      	ldr	r2, [pc, #132]	; (8004b38 <LL_TIM_Init+0x130>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d106      	bne.n	8004ac4 <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	68db      	ldr	r3, [r3, #12]
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	68fa      	ldr	r2, [r7, #12]
 8004ac8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	4619      	mov	r1, r3
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	f7ff ff35 	bl	8004940 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	881b      	ldrh	r3, [r3, #0]
 8004ada:	4619      	mov	r1, r3
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f7ff ff21 	bl	8004924 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	4a0a      	ldr	r2, [pc, #40]	; (8004b10 <LL_TIM_Init+0x108>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d003      	beq.n	8004af2 <LL_TIM_Init+0xea>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	4a0c      	ldr	r2, [pc, #48]	; (8004b20 <LL_TIM_Init+0x118>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d105      	bne.n	8004afe <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	691b      	ldr	r3, [r3, #16]
 8004af6:	4619      	mov	r1, r3
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	f7ff ff2f 	bl	800495c <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f7ff ff72 	bl	80049e8 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8004b04:	2300      	movs	r3, #0
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3710      	adds	r7, #16
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	bf00      	nop
 8004b10:	40010000 	.word	0x40010000
 8004b14:	40000400 	.word	0x40000400
 8004b18:	40000800 	.word	0x40000800
 8004b1c:	40000c00 	.word	0x40000c00
 8004b20:	40010400 	.word	0x40010400
 8004b24:	40014000 	.word	0x40014000
 8004b28:	40014400 	.word	0x40014400
 8004b2c:	40014800 	.word	0x40014800
 8004b30:	40001800 	.word	0x40001800
 8004b34:	40001c00 	.word	0x40001c00
 8004b38:	40002000 	.word	0x40002000

08004b3c <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b086      	sub	sp, #24
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	60f8      	str	r0, [r7, #12]
 8004b44:	60b9      	str	r1, [r7, #8]
 8004b46:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b52:	d027      	beq.n	8004ba4 <LL_TIM_OC_Init+0x68>
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b5a:	d82a      	bhi.n	8004bb2 <LL_TIM_OC_Init+0x76>
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b62:	d018      	beq.n	8004b96 <LL_TIM_OC_Init+0x5a>
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b6a:	d822      	bhi.n	8004bb2 <LL_TIM_OC_Init+0x76>
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d003      	beq.n	8004b7a <LL_TIM_OC_Init+0x3e>
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	2b10      	cmp	r3, #16
 8004b76:	d007      	beq.n	8004b88 <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8004b78:	e01b      	b.n	8004bb2 <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8004b7a:	6879      	ldr	r1, [r7, #4]
 8004b7c:	68f8      	ldr	r0, [r7, #12]
 8004b7e:	f000 f81f 	bl	8004bc0 <OC1Config>
 8004b82:	4603      	mov	r3, r0
 8004b84:	75fb      	strb	r3, [r7, #23]
      break;
 8004b86:	e015      	b.n	8004bb4 <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8004b88:	6879      	ldr	r1, [r7, #4]
 8004b8a:	68f8      	ldr	r0, [r7, #12]
 8004b8c:	f000 f884 	bl	8004c98 <OC2Config>
 8004b90:	4603      	mov	r3, r0
 8004b92:	75fb      	strb	r3, [r7, #23]
      break;
 8004b94:	e00e      	b.n	8004bb4 <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8004b96:	6879      	ldr	r1, [r7, #4]
 8004b98:	68f8      	ldr	r0, [r7, #12]
 8004b9a:	f000 f8ed 	bl	8004d78 <OC3Config>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	75fb      	strb	r3, [r7, #23]
      break;
 8004ba2:	e007      	b.n	8004bb4 <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8004ba4:	6879      	ldr	r1, [r7, #4]
 8004ba6:	68f8      	ldr	r0, [r7, #12]
 8004ba8:	f000 f956 	bl	8004e58 <OC4Config>
 8004bac:	4603      	mov	r3, r0
 8004bae:	75fb      	strb	r3, [r7, #23]
      break;
 8004bb0:	e000      	b.n	8004bb4 <LL_TIM_OC_Init+0x78>
      break;
 8004bb2:	bf00      	nop
  }

  return result;
 8004bb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3718      	adds	r7, #24
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}
	...

08004bc0 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b086      	sub	sp, #24
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
 8004bc8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6a1b      	ldr	r3, [r3, #32]
 8004bce:	f023 0201 	bic.w	r2, r3, #1
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6a1b      	ldr	r3, [r3, #32]
 8004bda:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	699b      	ldr	r3, [r3, #24]
 8004be6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f023 0303 	bic.w	r3, r3, #3
 8004bee:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	f023 0202 	bic.w	r2, r3, #2
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	691b      	ldr	r3, [r3, #16]
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	f023 0201 	bic.w	r2, r3, #1
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	4313      	orrs	r3, r2
 8004c18:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	4a1c      	ldr	r2, [pc, #112]	; (8004c90 <OC1Config+0xd0>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d003      	beq.n	8004c2a <OC1Config+0x6a>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	4a1b      	ldr	r2, [pc, #108]	; (8004c94 <OC1Config+0xd4>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d11e      	bne.n	8004c68 <OC1Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	f023 0208 	bic.w	r2, r3, #8
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	695b      	ldr	r3, [r3, #20]
 8004c34:	009b      	lsls	r3, r3, #2
 8004c36:	4313      	orrs	r3, r2
 8004c38:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	f023 0204 	bic.w	r2, r3, #4
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	009b      	lsls	r3, r3, #2
 8004c46:	4313      	orrs	r3, r2
 8004c48:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	699b      	ldr	r3, [r3, #24]
 8004c54:	4313      	orrs	r3, r2
 8004c56:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	69db      	ldr	r3, [r3, #28]
 8004c62:	005b      	lsls	r3, r3, #1
 8004c64:	4313      	orrs	r3, r2
 8004c66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	693a      	ldr	r2, [r7, #16]
 8004c6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	68fa      	ldr	r2, [r7, #12]
 8004c72:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	68db      	ldr	r3, [r3, #12]
 8004c78:	4619      	mov	r1, r3
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f7ff fe7c 	bl	8004978 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	697a      	ldr	r2, [r7, #20]
 8004c84:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004c86:	2300      	movs	r3, #0
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3718      	adds	r7, #24
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}
 8004c90:	40010000 	.word	0x40010000
 8004c94:	40010400 	.word	0x40010400

08004c98 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b086      	sub	sp, #24
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6a1b      	ldr	r3, [r3, #32]
 8004ca6:	f023 0210 	bic.w	r2, r3, #16
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6a1b      	ldr	r3, [r3, #32]
 8004cb2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	699b      	ldr	r3, [r3, #24]
 8004cbe:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	021b      	lsls	r3, r3, #8
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	f023 0220 	bic.w	r2, r3, #32
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	691b      	ldr	r3, [r3, #16]
 8004ce2:	011b      	lsls	r3, r3, #4
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	f023 0210 	bic.w	r2, r3, #16
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	011b      	lsls	r3, r3, #4
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	4a1d      	ldr	r2, [pc, #116]	; (8004d70 <OC2Config+0xd8>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d003      	beq.n	8004d08 <OC2Config+0x70>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	4a1c      	ldr	r2, [pc, #112]	; (8004d74 <OC2Config+0xdc>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d11f      	bne.n	8004d48 <OC2Config+0xb0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	695b      	ldr	r3, [r3, #20]
 8004d12:	019b      	lsls	r3, r3, #6
 8004d14:	4313      	orrs	r3, r2
 8004d16:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	019b      	lsls	r3, r3, #6
 8004d24:	4313      	orrs	r3, r2
 8004d26:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	699b      	ldr	r3, [r3, #24]
 8004d32:	009b      	lsls	r3, r3, #2
 8004d34:	4313      	orrs	r3, r2
 8004d36:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	69db      	ldr	r3, [r3, #28]
 8004d42:	00db      	lsls	r3, r3, #3
 8004d44:	4313      	orrs	r3, r2
 8004d46:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	693a      	ldr	r2, [r7, #16]
 8004d4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	68fa      	ldr	r2, [r7, #12]
 8004d52:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	68db      	ldr	r3, [r3, #12]
 8004d58:	4619      	mov	r1, r3
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f7ff fe1a 	bl	8004994 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	697a      	ldr	r2, [r7, #20]
 8004d64:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004d66:	2300      	movs	r3, #0
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3718      	adds	r7, #24
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}
 8004d70:	40010000 	.word	0x40010000
 8004d74:	40010400 	.word	0x40010400

08004d78 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b086      	sub	sp, #24
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6a1b      	ldr	r3, [r3, #32]
 8004d86:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6a1b      	ldr	r3, [r3, #32]
 8004d92:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	69db      	ldr	r3, [r3, #28]
 8004d9e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f023 0303 	bic.w	r3, r3, #3
 8004da6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4313      	orrs	r3, r2
 8004db4:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	691b      	ldr	r3, [r3, #16]
 8004dc0:	021b      	lsls	r3, r3, #8
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	021b      	lsls	r3, r3, #8
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	4a1d      	ldr	r2, [pc, #116]	; (8004e50 <OC3Config+0xd8>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d003      	beq.n	8004de6 <OC3Config+0x6e>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	4a1c      	ldr	r2, [pc, #112]	; (8004e54 <OC3Config+0xdc>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d11f      	bne.n	8004e26 <OC3Config+0xae>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	695b      	ldr	r3, [r3, #20]
 8004df0:	029b      	lsls	r3, r3, #10
 8004df2:	4313      	orrs	r3, r2
 8004df4:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	029b      	lsls	r3, r3, #10
 8004e02:	4313      	orrs	r3, r2
 8004e04:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	699b      	ldr	r3, [r3, #24]
 8004e10:	011b      	lsls	r3, r3, #4
 8004e12:	4313      	orrs	r3, r2
 8004e14:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	69db      	ldr	r3, [r3, #28]
 8004e20:	015b      	lsls	r3, r3, #5
 8004e22:	4313      	orrs	r3, r2
 8004e24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	693a      	ldr	r2, [r7, #16]
 8004e2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	68fa      	ldr	r2, [r7, #12]
 8004e30:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	68db      	ldr	r3, [r3, #12]
 8004e36:	4619      	mov	r1, r3
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	f7ff fdb9 	bl	80049b0 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	697a      	ldr	r2, [r7, #20]
 8004e42:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004e44:	2300      	movs	r3, #0
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3718      	adds	r7, #24
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}
 8004e4e:	bf00      	nop
 8004e50:	40010000 	.word	0x40010000
 8004e54:	40010400 	.word	0x40010400

08004e58 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b086      	sub	sp, #24
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
 8004e60:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6a1b      	ldr	r3, [r3, #32]
 8004e66:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6a1b      	ldr	r3, [r3, #32]
 8004e72:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	69db      	ldr	r3, [r3, #28]
 8004e7e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	021b      	lsls	r3, r3, #8
 8004e94:	4313      	orrs	r3, r2
 8004e96:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	691b      	ldr	r3, [r3, #16]
 8004ea2:	031b      	lsls	r3, r3, #12
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	031b      	lsls	r3, r3, #12
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	4a11      	ldr	r2, [pc, #68]	; (8004f00 <OC4Config+0xa8>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d003      	beq.n	8004ec8 <OC4Config+0x70>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	4a10      	ldr	r2, [pc, #64]	; (8004f04 <OC4Config+0xac>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d107      	bne.n	8004ed8 <OC4Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	699b      	ldr	r3, [r3, #24]
 8004ed2:	019b      	lsls	r3, r3, #6
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	697a      	ldr	r2, [r7, #20]
 8004edc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	68fa      	ldr	r2, [r7, #12]
 8004ee2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	68db      	ldr	r3, [r3, #12]
 8004ee8:	4619      	mov	r1, r3
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f7ff fd6e 	bl	80049cc <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	693a      	ldr	r2, [r7, #16]
 8004ef4:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004ef6:	2300      	movs	r3, #0
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3718      	adds	r7, #24
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}
 8004f00:	40010000 	.word	0x40010000
 8004f04:	40010400 	.word	0x40010400

08004f08 <LL_USART_IsEnabled>:
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b083      	sub	sp, #12
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	68db      	ldr	r3, [r3, #12]
 8004f14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f1c:	bf0c      	ite	eq
 8004f1e:	2301      	moveq	r3, #1
 8004f20:	2300      	movne	r3, #0
 8004f22:	b2db      	uxtb	r3, r3
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	370c      	adds	r7, #12
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2e:	4770      	bx	lr

08004f30 <LL_USART_SetStopBitsLength>:
{
 8004f30:	b480      	push	{r7}
 8004f32:	b083      	sub	sp, #12
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	691b      	ldr	r3, [r3, #16]
 8004f3e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	431a      	orrs	r2, r3
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	611a      	str	r2, [r3, #16]
}
 8004f4a:	bf00      	nop
 8004f4c:	370c      	adds	r7, #12
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f54:	4770      	bx	lr

08004f56 <LL_USART_SetHWFlowCtrl>:
{
 8004f56:	b480      	push	{r7}
 8004f58:	b083      	sub	sp, #12
 8004f5a:	af00      	add	r7, sp, #0
 8004f5c:	6078      	str	r0, [r7, #4]
 8004f5e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	695b      	ldr	r3, [r3, #20]
 8004f64:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	431a      	orrs	r2, r3
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	615a      	str	r2, [r3, #20]
}
 8004f70:	bf00      	nop
 8004f72:	370c      	adds	r7, #12
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr

08004f7c <LL_USART_SetBaudRate>:
{
 8004f7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f80:	b0c0      	sub	sp, #256	; 0x100
 8004f82:	af00      	add	r7, sp, #0
 8004f84:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004f88:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 8004f8c:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8004f90:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8004f94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f9c:	f040 810c 	bne.w	80051b8 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8004fa0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004faa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004fae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004fb2:	4622      	mov	r2, r4
 8004fb4:	462b      	mov	r3, r5
 8004fb6:	1891      	adds	r1, r2, r2
 8004fb8:	6639      	str	r1, [r7, #96]	; 0x60
 8004fba:	415b      	adcs	r3, r3
 8004fbc:	667b      	str	r3, [r7, #100]	; 0x64
 8004fbe:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8004fc2:	4621      	mov	r1, r4
 8004fc4:	eb12 0801 	adds.w	r8, r2, r1
 8004fc8:	4629      	mov	r1, r5
 8004fca:	eb43 0901 	adc.w	r9, r3, r1
 8004fce:	f04f 0200 	mov.w	r2, #0
 8004fd2:	f04f 0300 	mov.w	r3, #0
 8004fd6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004fda:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004fde:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004fe2:	4690      	mov	r8, r2
 8004fe4:	4699      	mov	r9, r3
 8004fe6:	4623      	mov	r3, r4
 8004fe8:	eb18 0303 	adds.w	r3, r8, r3
 8004fec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004ff0:	462b      	mov	r3, r5
 8004ff2:	eb49 0303 	adc.w	r3, r9, r3
 8004ff6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004ffa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004ffe:	2200      	movs	r2, #0
 8005000:	469a      	mov	sl, r3
 8005002:	4693      	mov	fp, r2
 8005004:	eb1a 030a 	adds.w	r3, sl, sl
 8005008:	65bb      	str	r3, [r7, #88]	; 0x58
 800500a:	eb4b 030b 	adc.w	r3, fp, fp
 800500e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005010:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005014:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005018:	f7fb fde6 	bl	8000be8 <__aeabi_uldivmod>
 800501c:	4602      	mov	r2, r0
 800501e:	460b      	mov	r3, r1
 8005020:	4b64      	ldr	r3, [pc, #400]	; (80051b4 <LL_USART_SetBaudRate+0x238>)
 8005022:	fba3 2302 	umull	r2, r3, r3, r2
 8005026:	095b      	lsrs	r3, r3, #5
 8005028:	b29b      	uxth	r3, r3
 800502a:	011b      	lsls	r3, r3, #4
 800502c:	b29c      	uxth	r4, r3
 800502e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005032:	2200      	movs	r2, #0
 8005034:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005038:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800503c:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 8005040:	4642      	mov	r2, r8
 8005042:	464b      	mov	r3, r9
 8005044:	1891      	adds	r1, r2, r2
 8005046:	6539      	str	r1, [r7, #80]	; 0x50
 8005048:	415b      	adcs	r3, r3
 800504a:	657b      	str	r3, [r7, #84]	; 0x54
 800504c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005050:	4641      	mov	r1, r8
 8005052:	1851      	adds	r1, r2, r1
 8005054:	64b9      	str	r1, [r7, #72]	; 0x48
 8005056:	4649      	mov	r1, r9
 8005058:	414b      	adcs	r3, r1
 800505a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800505c:	f04f 0200 	mov.w	r2, #0
 8005060:	f04f 0300 	mov.w	r3, #0
 8005064:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	; 0x48
 8005068:	4659      	mov	r1, fp
 800506a:	00cb      	lsls	r3, r1, #3
 800506c:	4651      	mov	r1, sl
 800506e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005072:	4651      	mov	r1, sl
 8005074:	00ca      	lsls	r2, r1, #3
 8005076:	4610      	mov	r0, r2
 8005078:	4619      	mov	r1, r3
 800507a:	4603      	mov	r3, r0
 800507c:	4642      	mov	r2, r8
 800507e:	189b      	adds	r3, r3, r2
 8005080:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005084:	464b      	mov	r3, r9
 8005086:	460a      	mov	r2, r1
 8005088:	eb42 0303 	adc.w	r3, r2, r3
 800508c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005090:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005094:	2200      	movs	r2, #0
 8005096:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800509a:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 800509e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80050a2:	460b      	mov	r3, r1
 80050a4:	18db      	adds	r3, r3, r3
 80050a6:	643b      	str	r3, [r7, #64]	; 0x40
 80050a8:	4613      	mov	r3, r2
 80050aa:	eb42 0303 	adc.w	r3, r2, r3
 80050ae:	647b      	str	r3, [r7, #68]	; 0x44
 80050b0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80050b4:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80050b8:	f7fb fd96 	bl	8000be8 <__aeabi_uldivmod>
 80050bc:	4602      	mov	r2, r0
 80050be:	460b      	mov	r3, r1
 80050c0:	4611      	mov	r1, r2
 80050c2:	4b3c      	ldr	r3, [pc, #240]	; (80051b4 <LL_USART_SetBaudRate+0x238>)
 80050c4:	fba3 2301 	umull	r2, r3, r3, r1
 80050c8:	095b      	lsrs	r3, r3, #5
 80050ca:	2264      	movs	r2, #100	; 0x64
 80050cc:	fb02 f303 	mul.w	r3, r2, r3
 80050d0:	1acb      	subs	r3, r1, r3
 80050d2:	00db      	lsls	r3, r3, #3
 80050d4:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80050d8:	4b36      	ldr	r3, [pc, #216]	; (80051b4 <LL_USART_SetBaudRate+0x238>)
 80050da:	fba3 2302 	umull	r2, r3, r3, r2
 80050de:	095b      	lsrs	r3, r3, #5
 80050e0:	b29b      	uxth	r3, r3
 80050e2:	005b      	lsls	r3, r3, #1
 80050e4:	b29b      	uxth	r3, r3
 80050e6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80050ea:	b29b      	uxth	r3, r3
 80050ec:	4423      	add	r3, r4
 80050ee:	b29c      	uxth	r4, r3
 80050f0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80050f4:	2200      	movs	r2, #0
 80050f6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80050fa:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80050fe:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 8005102:	4642      	mov	r2, r8
 8005104:	464b      	mov	r3, r9
 8005106:	1891      	adds	r1, r2, r2
 8005108:	63b9      	str	r1, [r7, #56]	; 0x38
 800510a:	415b      	adcs	r3, r3
 800510c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800510e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005112:	4641      	mov	r1, r8
 8005114:	1851      	adds	r1, r2, r1
 8005116:	6339      	str	r1, [r7, #48]	; 0x30
 8005118:	4649      	mov	r1, r9
 800511a:	414b      	adcs	r3, r1
 800511c:	637b      	str	r3, [r7, #52]	; 0x34
 800511e:	f04f 0200 	mov.w	r2, #0
 8005122:	f04f 0300 	mov.w	r3, #0
 8005126:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800512a:	4659      	mov	r1, fp
 800512c:	00cb      	lsls	r3, r1, #3
 800512e:	4651      	mov	r1, sl
 8005130:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005134:	4651      	mov	r1, sl
 8005136:	00ca      	lsls	r2, r1, #3
 8005138:	4610      	mov	r0, r2
 800513a:	4619      	mov	r1, r3
 800513c:	4603      	mov	r3, r0
 800513e:	4642      	mov	r2, r8
 8005140:	189b      	adds	r3, r3, r2
 8005142:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005146:	464b      	mov	r3, r9
 8005148:	460a      	mov	r2, r1
 800514a:	eb42 0303 	adc.w	r3, r2, r3
 800514e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005152:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005156:	2200      	movs	r2, #0
 8005158:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800515c:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8005160:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8005164:	460b      	mov	r3, r1
 8005166:	18db      	adds	r3, r3, r3
 8005168:	62bb      	str	r3, [r7, #40]	; 0x28
 800516a:	4613      	mov	r3, r2
 800516c:	eb42 0303 	adc.w	r3, r2, r3
 8005170:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005172:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005176:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800517a:	f7fb fd35 	bl	8000be8 <__aeabi_uldivmod>
 800517e:	4602      	mov	r2, r0
 8005180:	460b      	mov	r3, r1
 8005182:	4b0c      	ldr	r3, [pc, #48]	; (80051b4 <LL_USART_SetBaudRate+0x238>)
 8005184:	fba3 1302 	umull	r1, r3, r3, r2
 8005188:	095b      	lsrs	r3, r3, #5
 800518a:	2164      	movs	r1, #100	; 0x64
 800518c:	fb01 f303 	mul.w	r3, r1, r3
 8005190:	1ad3      	subs	r3, r2, r3
 8005192:	00db      	lsls	r3, r3, #3
 8005194:	3332      	adds	r3, #50	; 0x32
 8005196:	4a07      	ldr	r2, [pc, #28]	; (80051b4 <LL_USART_SetBaudRate+0x238>)
 8005198:	fba2 2303 	umull	r2, r3, r2, r3
 800519c:	095b      	lsrs	r3, r3, #5
 800519e:	b29b      	uxth	r3, r3
 80051a0:	f003 0307 	and.w	r3, r3, #7
 80051a4:	b29b      	uxth	r3, r3
 80051a6:	4423      	add	r3, r4
 80051a8:	b29b      	uxth	r3, r3
 80051aa:	461a      	mov	r2, r3
 80051ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051b0:	609a      	str	r2, [r3, #8]
}
 80051b2:	e107      	b.n	80053c4 <LL_USART_SetBaudRate+0x448>
 80051b4:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80051b8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80051bc:	2200      	movs	r2, #0
 80051be:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80051c2:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80051c6:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 80051ca:	4642      	mov	r2, r8
 80051cc:	464b      	mov	r3, r9
 80051ce:	1891      	adds	r1, r2, r2
 80051d0:	6239      	str	r1, [r7, #32]
 80051d2:	415b      	adcs	r3, r3
 80051d4:	627b      	str	r3, [r7, #36]	; 0x24
 80051d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80051da:	4641      	mov	r1, r8
 80051dc:	1854      	adds	r4, r2, r1
 80051de:	4649      	mov	r1, r9
 80051e0:	eb43 0501 	adc.w	r5, r3, r1
 80051e4:	f04f 0200 	mov.w	r2, #0
 80051e8:	f04f 0300 	mov.w	r3, #0
 80051ec:	00eb      	lsls	r3, r5, #3
 80051ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80051f2:	00e2      	lsls	r2, r4, #3
 80051f4:	4614      	mov	r4, r2
 80051f6:	461d      	mov	r5, r3
 80051f8:	4643      	mov	r3, r8
 80051fa:	18e3      	adds	r3, r4, r3
 80051fc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005200:	464b      	mov	r3, r9
 8005202:	eb45 0303 	adc.w	r3, r5, r3
 8005206:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800520a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800520e:	2200      	movs	r2, #0
 8005210:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005214:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8005218:	f04f 0200 	mov.w	r2, #0
 800521c:	f04f 0300 	mov.w	r3, #0
 8005220:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8005224:	4629      	mov	r1, r5
 8005226:	008b      	lsls	r3, r1, #2
 8005228:	4621      	mov	r1, r4
 800522a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800522e:	4621      	mov	r1, r4
 8005230:	008a      	lsls	r2, r1, #2
 8005232:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8005236:	f7fb fcd7 	bl	8000be8 <__aeabi_uldivmod>
 800523a:	4602      	mov	r2, r0
 800523c:	460b      	mov	r3, r1
 800523e:	4b64      	ldr	r3, [pc, #400]	; (80053d0 <LL_USART_SetBaudRate+0x454>)
 8005240:	fba3 2302 	umull	r2, r3, r3, r2
 8005244:	095b      	lsrs	r3, r3, #5
 8005246:	b29b      	uxth	r3, r3
 8005248:	011b      	lsls	r3, r3, #4
 800524a:	b29c      	uxth	r4, r3
 800524c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005250:	2200      	movs	r2, #0
 8005252:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005256:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800525a:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 800525e:	4642      	mov	r2, r8
 8005260:	464b      	mov	r3, r9
 8005262:	1891      	adds	r1, r2, r2
 8005264:	61b9      	str	r1, [r7, #24]
 8005266:	415b      	adcs	r3, r3
 8005268:	61fb      	str	r3, [r7, #28]
 800526a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800526e:	4641      	mov	r1, r8
 8005270:	1851      	adds	r1, r2, r1
 8005272:	6139      	str	r1, [r7, #16]
 8005274:	4649      	mov	r1, r9
 8005276:	414b      	adcs	r3, r1
 8005278:	617b      	str	r3, [r7, #20]
 800527a:	f04f 0200 	mov.w	r2, #0
 800527e:	f04f 0300 	mov.w	r3, #0
 8005282:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005286:	4659      	mov	r1, fp
 8005288:	00cb      	lsls	r3, r1, #3
 800528a:	4651      	mov	r1, sl
 800528c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005290:	4651      	mov	r1, sl
 8005292:	00ca      	lsls	r2, r1, #3
 8005294:	4610      	mov	r0, r2
 8005296:	4619      	mov	r1, r3
 8005298:	4603      	mov	r3, r0
 800529a:	4642      	mov	r2, r8
 800529c:	189b      	adds	r3, r3, r2
 800529e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80052a2:	464b      	mov	r3, r9
 80052a4:	460a      	mov	r2, r1
 80052a6:	eb42 0303 	adc.w	r3, r2, r3
 80052aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80052ae:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80052b2:	2200      	movs	r2, #0
 80052b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80052b8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80052bc:	f04f 0200 	mov.w	r2, #0
 80052c0:	f04f 0300 	mov.w	r3, #0
 80052c4:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 80052c8:	4649      	mov	r1, r9
 80052ca:	008b      	lsls	r3, r1, #2
 80052cc:	4641      	mov	r1, r8
 80052ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80052d2:	4641      	mov	r1, r8
 80052d4:	008a      	lsls	r2, r1, #2
 80052d6:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 80052da:	f7fb fc85 	bl	8000be8 <__aeabi_uldivmod>
 80052de:	4602      	mov	r2, r0
 80052e0:	460b      	mov	r3, r1
 80052e2:	4b3b      	ldr	r3, [pc, #236]	; (80053d0 <LL_USART_SetBaudRate+0x454>)
 80052e4:	fba3 1302 	umull	r1, r3, r3, r2
 80052e8:	095b      	lsrs	r3, r3, #5
 80052ea:	2164      	movs	r1, #100	; 0x64
 80052ec:	fb01 f303 	mul.w	r3, r1, r3
 80052f0:	1ad3      	subs	r3, r2, r3
 80052f2:	011b      	lsls	r3, r3, #4
 80052f4:	3332      	adds	r3, #50	; 0x32
 80052f6:	4a36      	ldr	r2, [pc, #216]	; (80053d0 <LL_USART_SetBaudRate+0x454>)
 80052f8:	fba2 2303 	umull	r2, r3, r2, r3
 80052fc:	095b      	lsrs	r3, r3, #5
 80052fe:	b29b      	uxth	r3, r3
 8005300:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005304:	b29b      	uxth	r3, r3
 8005306:	4423      	add	r3, r4
 8005308:	b29c      	uxth	r4, r3
 800530a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800530e:	2200      	movs	r2, #0
 8005310:	67bb      	str	r3, [r7, #120]	; 0x78
 8005312:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005314:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005318:	4642      	mov	r2, r8
 800531a:	464b      	mov	r3, r9
 800531c:	1891      	adds	r1, r2, r2
 800531e:	60b9      	str	r1, [r7, #8]
 8005320:	415b      	adcs	r3, r3
 8005322:	60fb      	str	r3, [r7, #12]
 8005324:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005328:	4641      	mov	r1, r8
 800532a:	1851      	adds	r1, r2, r1
 800532c:	6039      	str	r1, [r7, #0]
 800532e:	4649      	mov	r1, r9
 8005330:	414b      	adcs	r3, r1
 8005332:	607b      	str	r3, [r7, #4]
 8005334:	f04f 0200 	mov.w	r2, #0
 8005338:	f04f 0300 	mov.w	r3, #0
 800533c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005340:	4659      	mov	r1, fp
 8005342:	00cb      	lsls	r3, r1, #3
 8005344:	4651      	mov	r1, sl
 8005346:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800534a:	4651      	mov	r1, sl
 800534c:	00ca      	lsls	r2, r1, #3
 800534e:	4610      	mov	r0, r2
 8005350:	4619      	mov	r1, r3
 8005352:	4603      	mov	r3, r0
 8005354:	4642      	mov	r2, r8
 8005356:	189b      	adds	r3, r3, r2
 8005358:	673b      	str	r3, [r7, #112]	; 0x70
 800535a:	464b      	mov	r3, r9
 800535c:	460a      	mov	r2, r1
 800535e:	eb42 0303 	adc.w	r3, r2, r3
 8005362:	677b      	str	r3, [r7, #116]	; 0x74
 8005364:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005368:	2200      	movs	r2, #0
 800536a:	66bb      	str	r3, [r7, #104]	; 0x68
 800536c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800536e:	f04f 0200 	mov.w	r2, #0
 8005372:	f04f 0300 	mov.w	r3, #0
 8005376:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 800537a:	4649      	mov	r1, r9
 800537c:	008b      	lsls	r3, r1, #2
 800537e:	4641      	mov	r1, r8
 8005380:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005384:	4641      	mov	r1, r8
 8005386:	008a      	lsls	r2, r1, #2
 8005388:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800538c:	f7fb fc2c 	bl	8000be8 <__aeabi_uldivmod>
 8005390:	4602      	mov	r2, r0
 8005392:	460b      	mov	r3, r1
 8005394:	4b0e      	ldr	r3, [pc, #56]	; (80053d0 <LL_USART_SetBaudRate+0x454>)
 8005396:	fba3 1302 	umull	r1, r3, r3, r2
 800539a:	095b      	lsrs	r3, r3, #5
 800539c:	2164      	movs	r1, #100	; 0x64
 800539e:	fb01 f303 	mul.w	r3, r1, r3
 80053a2:	1ad3      	subs	r3, r2, r3
 80053a4:	011b      	lsls	r3, r3, #4
 80053a6:	3332      	adds	r3, #50	; 0x32
 80053a8:	4a09      	ldr	r2, [pc, #36]	; (80053d0 <LL_USART_SetBaudRate+0x454>)
 80053aa:	fba2 2303 	umull	r2, r3, r2, r3
 80053ae:	095b      	lsrs	r3, r3, #5
 80053b0:	b29b      	uxth	r3, r3
 80053b2:	f003 030f 	and.w	r3, r3, #15
 80053b6:	b29b      	uxth	r3, r3
 80053b8:	4423      	add	r3, r4
 80053ba:	b29b      	uxth	r3, r3
 80053bc:	461a      	mov	r2, r3
 80053be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053c2:	609a      	str	r2, [r3, #8]
}
 80053c4:	bf00      	nop
 80053c6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80053ca:	46bd      	mov	sp, r7
 80053cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80053d0:	51eb851f 	.word	0x51eb851f

080053d4 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b088      	sub	sp, #32
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
 80053dc:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80053de:	2301      	movs	r3, #1
 80053e0:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80053e2:	2300      	movs	r3, #0
 80053e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f7ff fd8e 	bl	8004f08 <LL_USART_IsEnabled>
 80053ec:	4603      	mov	r3, r0
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d15e      	bne.n	80054b0 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	68db      	ldr	r3, [r3, #12]
 80053f6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80053fa:	f023 030c 	bic.w	r3, r3, #12
 80053fe:	683a      	ldr	r2, [r7, #0]
 8005400:	6851      	ldr	r1, [r2, #4]
 8005402:	683a      	ldr	r2, [r7, #0]
 8005404:	68d2      	ldr	r2, [r2, #12]
 8005406:	4311      	orrs	r1, r2
 8005408:	683a      	ldr	r2, [r7, #0]
 800540a:	6912      	ldr	r2, [r2, #16]
 800540c:	4311      	orrs	r1, r2
 800540e:	683a      	ldr	r2, [r7, #0]
 8005410:	6992      	ldr	r2, [r2, #24]
 8005412:	430a      	orrs	r2, r1
 8005414:	431a      	orrs	r2, r3
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	4619      	mov	r1, r3
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	f7ff fd85 	bl	8004f30 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	695b      	ldr	r3, [r3, #20]
 800542a:	4619      	mov	r1, r3
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f7ff fd92 	bl	8004f56 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8005432:	f107 0308 	add.w	r3, r7, #8
 8005436:	4618      	mov	r0, r3
 8005438:	f7ff f9aa 	bl	8004790 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	4a1f      	ldr	r2, [pc, #124]	; (80054bc <LL_USART_Init+0xe8>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d102      	bne.n	800544a <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	61bb      	str	r3, [r7, #24]
 8005448:	e021      	b.n	800548e <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	4a1c      	ldr	r2, [pc, #112]	; (80054c0 <LL_USART_Init+0xec>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d102      	bne.n	8005458 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	61bb      	str	r3, [r7, #24]
 8005456:	e01a      	b.n	800548e <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	4a1a      	ldr	r2, [pc, #104]	; (80054c4 <LL_USART_Init+0xf0>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d102      	bne.n	8005466 <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	61bb      	str	r3, [r7, #24]
 8005464:	e013      	b.n	800548e <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	4a17      	ldr	r2, [pc, #92]	; (80054c8 <LL_USART_Init+0xf4>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d102      	bne.n	8005474 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	61bb      	str	r3, [r7, #24]
 8005472:	e00c      	b.n	800548e <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	4a15      	ldr	r2, [pc, #84]	; (80054cc <LL_USART_Init+0xf8>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d102      	bne.n	8005482 <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	61bb      	str	r3, [r7, #24]
 8005480:	e005      	b.n	800548e <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	4a12      	ldr	r2, [pc, #72]	; (80054d0 <LL_USART_Init+0xfc>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d101      	bne.n	800548e <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800548e:	69bb      	ldr	r3, [r7, #24]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d00d      	beq.n	80054b0 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d009      	beq.n	80054b0 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 800549c:	2300      	movs	r3, #0
 800549e:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	699a      	ldr	r2, [r3, #24]
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	69b9      	ldr	r1, [r7, #24]
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f7ff fd66 	bl	8004f7c <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80054b0:	7ffb      	ldrb	r3, [r7, #31]
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	3720      	adds	r7, #32
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}
 80054ba:	bf00      	nop
 80054bc:	40011000 	.word	0x40011000
 80054c0:	40004400 	.word	0x40004400
 80054c4:	40004800 	.word	0x40004800
 80054c8:	40011400 	.word	0x40011400
 80054cc:	40004c00 	.word	0x40004c00
 80054d0:	40005000 	.word	0x40005000

080054d4 <__errno>:
 80054d4:	4b01      	ldr	r3, [pc, #4]	; (80054dc <__errno+0x8>)
 80054d6:	6818      	ldr	r0, [r3, #0]
 80054d8:	4770      	bx	lr
 80054da:	bf00      	nop
 80054dc:	2000000c 	.word	0x2000000c

080054e0 <__libc_init_array>:
 80054e0:	b570      	push	{r4, r5, r6, lr}
 80054e2:	4d0d      	ldr	r5, [pc, #52]	; (8005518 <__libc_init_array+0x38>)
 80054e4:	4c0d      	ldr	r4, [pc, #52]	; (800551c <__libc_init_array+0x3c>)
 80054e6:	1b64      	subs	r4, r4, r5
 80054e8:	10a4      	asrs	r4, r4, #2
 80054ea:	2600      	movs	r6, #0
 80054ec:	42a6      	cmp	r6, r4
 80054ee:	d109      	bne.n	8005504 <__libc_init_array+0x24>
 80054f0:	4d0b      	ldr	r5, [pc, #44]	; (8005520 <__libc_init_array+0x40>)
 80054f2:	4c0c      	ldr	r4, [pc, #48]	; (8005524 <__libc_init_array+0x44>)
 80054f4:	f002 fd38 	bl	8007f68 <_init>
 80054f8:	1b64      	subs	r4, r4, r5
 80054fa:	10a4      	asrs	r4, r4, #2
 80054fc:	2600      	movs	r6, #0
 80054fe:	42a6      	cmp	r6, r4
 8005500:	d105      	bne.n	800550e <__libc_init_array+0x2e>
 8005502:	bd70      	pop	{r4, r5, r6, pc}
 8005504:	f855 3b04 	ldr.w	r3, [r5], #4
 8005508:	4798      	blx	r3
 800550a:	3601      	adds	r6, #1
 800550c:	e7ee      	b.n	80054ec <__libc_init_array+0xc>
 800550e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005512:	4798      	blx	r3
 8005514:	3601      	adds	r6, #1
 8005516:	e7f2      	b.n	80054fe <__libc_init_array+0x1e>
 8005518:	080083dc 	.word	0x080083dc
 800551c:	080083dc 	.word	0x080083dc
 8005520:	080083dc 	.word	0x080083dc
 8005524:	080083e0 	.word	0x080083e0

08005528 <memset>:
 8005528:	4402      	add	r2, r0
 800552a:	4603      	mov	r3, r0
 800552c:	4293      	cmp	r3, r2
 800552e:	d100      	bne.n	8005532 <memset+0xa>
 8005530:	4770      	bx	lr
 8005532:	f803 1b01 	strb.w	r1, [r3], #1
 8005536:	e7f9      	b.n	800552c <memset+0x4>

08005538 <__cvt>:
 8005538:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800553c:	ec55 4b10 	vmov	r4, r5, d0
 8005540:	2d00      	cmp	r5, #0
 8005542:	460e      	mov	r6, r1
 8005544:	4619      	mov	r1, r3
 8005546:	462b      	mov	r3, r5
 8005548:	bfbb      	ittet	lt
 800554a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800554e:	461d      	movlt	r5, r3
 8005550:	2300      	movge	r3, #0
 8005552:	232d      	movlt	r3, #45	; 0x2d
 8005554:	700b      	strb	r3, [r1, #0]
 8005556:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005558:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800555c:	4691      	mov	r9, r2
 800555e:	f023 0820 	bic.w	r8, r3, #32
 8005562:	bfbc      	itt	lt
 8005564:	4622      	movlt	r2, r4
 8005566:	4614      	movlt	r4, r2
 8005568:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800556c:	d005      	beq.n	800557a <__cvt+0x42>
 800556e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005572:	d100      	bne.n	8005576 <__cvt+0x3e>
 8005574:	3601      	adds	r6, #1
 8005576:	2102      	movs	r1, #2
 8005578:	e000      	b.n	800557c <__cvt+0x44>
 800557a:	2103      	movs	r1, #3
 800557c:	ab03      	add	r3, sp, #12
 800557e:	9301      	str	r3, [sp, #4]
 8005580:	ab02      	add	r3, sp, #8
 8005582:	9300      	str	r3, [sp, #0]
 8005584:	ec45 4b10 	vmov	d0, r4, r5
 8005588:	4653      	mov	r3, sl
 800558a:	4632      	mov	r2, r6
 800558c:	f000 fccc 	bl	8005f28 <_dtoa_r>
 8005590:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005594:	4607      	mov	r7, r0
 8005596:	d102      	bne.n	800559e <__cvt+0x66>
 8005598:	f019 0f01 	tst.w	r9, #1
 800559c:	d022      	beq.n	80055e4 <__cvt+0xac>
 800559e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80055a2:	eb07 0906 	add.w	r9, r7, r6
 80055a6:	d110      	bne.n	80055ca <__cvt+0x92>
 80055a8:	783b      	ldrb	r3, [r7, #0]
 80055aa:	2b30      	cmp	r3, #48	; 0x30
 80055ac:	d10a      	bne.n	80055c4 <__cvt+0x8c>
 80055ae:	2200      	movs	r2, #0
 80055b0:	2300      	movs	r3, #0
 80055b2:	4620      	mov	r0, r4
 80055b4:	4629      	mov	r1, r5
 80055b6:	f7fb fa87 	bl	8000ac8 <__aeabi_dcmpeq>
 80055ba:	b918      	cbnz	r0, 80055c4 <__cvt+0x8c>
 80055bc:	f1c6 0601 	rsb	r6, r6, #1
 80055c0:	f8ca 6000 	str.w	r6, [sl]
 80055c4:	f8da 3000 	ldr.w	r3, [sl]
 80055c8:	4499      	add	r9, r3
 80055ca:	2200      	movs	r2, #0
 80055cc:	2300      	movs	r3, #0
 80055ce:	4620      	mov	r0, r4
 80055d0:	4629      	mov	r1, r5
 80055d2:	f7fb fa79 	bl	8000ac8 <__aeabi_dcmpeq>
 80055d6:	b108      	cbz	r0, 80055dc <__cvt+0xa4>
 80055d8:	f8cd 900c 	str.w	r9, [sp, #12]
 80055dc:	2230      	movs	r2, #48	; 0x30
 80055de:	9b03      	ldr	r3, [sp, #12]
 80055e0:	454b      	cmp	r3, r9
 80055e2:	d307      	bcc.n	80055f4 <__cvt+0xbc>
 80055e4:	9b03      	ldr	r3, [sp, #12]
 80055e6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80055e8:	1bdb      	subs	r3, r3, r7
 80055ea:	4638      	mov	r0, r7
 80055ec:	6013      	str	r3, [r2, #0]
 80055ee:	b004      	add	sp, #16
 80055f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055f4:	1c59      	adds	r1, r3, #1
 80055f6:	9103      	str	r1, [sp, #12]
 80055f8:	701a      	strb	r2, [r3, #0]
 80055fa:	e7f0      	b.n	80055de <__cvt+0xa6>

080055fc <__exponent>:
 80055fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80055fe:	4603      	mov	r3, r0
 8005600:	2900      	cmp	r1, #0
 8005602:	bfb8      	it	lt
 8005604:	4249      	neglt	r1, r1
 8005606:	f803 2b02 	strb.w	r2, [r3], #2
 800560a:	bfb4      	ite	lt
 800560c:	222d      	movlt	r2, #45	; 0x2d
 800560e:	222b      	movge	r2, #43	; 0x2b
 8005610:	2909      	cmp	r1, #9
 8005612:	7042      	strb	r2, [r0, #1]
 8005614:	dd2a      	ble.n	800566c <__exponent+0x70>
 8005616:	f10d 0407 	add.w	r4, sp, #7
 800561a:	46a4      	mov	ip, r4
 800561c:	270a      	movs	r7, #10
 800561e:	46a6      	mov	lr, r4
 8005620:	460a      	mov	r2, r1
 8005622:	fb91 f6f7 	sdiv	r6, r1, r7
 8005626:	fb07 1516 	mls	r5, r7, r6, r1
 800562a:	3530      	adds	r5, #48	; 0x30
 800562c:	2a63      	cmp	r2, #99	; 0x63
 800562e:	f104 34ff 	add.w	r4, r4, #4294967295
 8005632:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005636:	4631      	mov	r1, r6
 8005638:	dcf1      	bgt.n	800561e <__exponent+0x22>
 800563a:	3130      	adds	r1, #48	; 0x30
 800563c:	f1ae 0502 	sub.w	r5, lr, #2
 8005640:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005644:	1c44      	adds	r4, r0, #1
 8005646:	4629      	mov	r1, r5
 8005648:	4561      	cmp	r1, ip
 800564a:	d30a      	bcc.n	8005662 <__exponent+0x66>
 800564c:	f10d 0209 	add.w	r2, sp, #9
 8005650:	eba2 020e 	sub.w	r2, r2, lr
 8005654:	4565      	cmp	r5, ip
 8005656:	bf88      	it	hi
 8005658:	2200      	movhi	r2, #0
 800565a:	4413      	add	r3, r2
 800565c:	1a18      	subs	r0, r3, r0
 800565e:	b003      	add	sp, #12
 8005660:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005662:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005666:	f804 2f01 	strb.w	r2, [r4, #1]!
 800566a:	e7ed      	b.n	8005648 <__exponent+0x4c>
 800566c:	2330      	movs	r3, #48	; 0x30
 800566e:	3130      	adds	r1, #48	; 0x30
 8005670:	7083      	strb	r3, [r0, #2]
 8005672:	70c1      	strb	r1, [r0, #3]
 8005674:	1d03      	adds	r3, r0, #4
 8005676:	e7f1      	b.n	800565c <__exponent+0x60>

08005678 <_printf_float>:
 8005678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800567c:	ed2d 8b02 	vpush	{d8}
 8005680:	b08d      	sub	sp, #52	; 0x34
 8005682:	460c      	mov	r4, r1
 8005684:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005688:	4616      	mov	r6, r2
 800568a:	461f      	mov	r7, r3
 800568c:	4605      	mov	r5, r0
 800568e:	f001 fa39 	bl	8006b04 <_localeconv_r>
 8005692:	f8d0 a000 	ldr.w	sl, [r0]
 8005696:	4650      	mov	r0, sl
 8005698:	f7fa fd9a 	bl	80001d0 <strlen>
 800569c:	2300      	movs	r3, #0
 800569e:	930a      	str	r3, [sp, #40]	; 0x28
 80056a0:	6823      	ldr	r3, [r4, #0]
 80056a2:	9305      	str	r3, [sp, #20]
 80056a4:	f8d8 3000 	ldr.w	r3, [r8]
 80056a8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80056ac:	3307      	adds	r3, #7
 80056ae:	f023 0307 	bic.w	r3, r3, #7
 80056b2:	f103 0208 	add.w	r2, r3, #8
 80056b6:	f8c8 2000 	str.w	r2, [r8]
 80056ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056be:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80056c2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80056c6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80056ca:	9307      	str	r3, [sp, #28]
 80056cc:	f8cd 8018 	str.w	r8, [sp, #24]
 80056d0:	ee08 0a10 	vmov	s16, r0
 80056d4:	4b9f      	ldr	r3, [pc, #636]	; (8005954 <_printf_float+0x2dc>)
 80056d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80056da:	f04f 32ff 	mov.w	r2, #4294967295
 80056de:	f7fb fa25 	bl	8000b2c <__aeabi_dcmpun>
 80056e2:	bb88      	cbnz	r0, 8005748 <_printf_float+0xd0>
 80056e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80056e8:	4b9a      	ldr	r3, [pc, #616]	; (8005954 <_printf_float+0x2dc>)
 80056ea:	f04f 32ff 	mov.w	r2, #4294967295
 80056ee:	f7fb f9ff 	bl	8000af0 <__aeabi_dcmple>
 80056f2:	bb48      	cbnz	r0, 8005748 <_printf_float+0xd0>
 80056f4:	2200      	movs	r2, #0
 80056f6:	2300      	movs	r3, #0
 80056f8:	4640      	mov	r0, r8
 80056fa:	4649      	mov	r1, r9
 80056fc:	f7fb f9ee 	bl	8000adc <__aeabi_dcmplt>
 8005700:	b110      	cbz	r0, 8005708 <_printf_float+0x90>
 8005702:	232d      	movs	r3, #45	; 0x2d
 8005704:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005708:	4b93      	ldr	r3, [pc, #588]	; (8005958 <_printf_float+0x2e0>)
 800570a:	4894      	ldr	r0, [pc, #592]	; (800595c <_printf_float+0x2e4>)
 800570c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005710:	bf94      	ite	ls
 8005712:	4698      	movls	r8, r3
 8005714:	4680      	movhi	r8, r0
 8005716:	2303      	movs	r3, #3
 8005718:	6123      	str	r3, [r4, #16]
 800571a:	9b05      	ldr	r3, [sp, #20]
 800571c:	f023 0204 	bic.w	r2, r3, #4
 8005720:	6022      	str	r2, [r4, #0]
 8005722:	f04f 0900 	mov.w	r9, #0
 8005726:	9700      	str	r7, [sp, #0]
 8005728:	4633      	mov	r3, r6
 800572a:	aa0b      	add	r2, sp, #44	; 0x2c
 800572c:	4621      	mov	r1, r4
 800572e:	4628      	mov	r0, r5
 8005730:	f000 f9d8 	bl	8005ae4 <_printf_common>
 8005734:	3001      	adds	r0, #1
 8005736:	f040 8090 	bne.w	800585a <_printf_float+0x1e2>
 800573a:	f04f 30ff 	mov.w	r0, #4294967295
 800573e:	b00d      	add	sp, #52	; 0x34
 8005740:	ecbd 8b02 	vpop	{d8}
 8005744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005748:	4642      	mov	r2, r8
 800574a:	464b      	mov	r3, r9
 800574c:	4640      	mov	r0, r8
 800574e:	4649      	mov	r1, r9
 8005750:	f7fb f9ec 	bl	8000b2c <__aeabi_dcmpun>
 8005754:	b140      	cbz	r0, 8005768 <_printf_float+0xf0>
 8005756:	464b      	mov	r3, r9
 8005758:	2b00      	cmp	r3, #0
 800575a:	bfbc      	itt	lt
 800575c:	232d      	movlt	r3, #45	; 0x2d
 800575e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005762:	487f      	ldr	r0, [pc, #508]	; (8005960 <_printf_float+0x2e8>)
 8005764:	4b7f      	ldr	r3, [pc, #508]	; (8005964 <_printf_float+0x2ec>)
 8005766:	e7d1      	b.n	800570c <_printf_float+0x94>
 8005768:	6863      	ldr	r3, [r4, #4]
 800576a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800576e:	9206      	str	r2, [sp, #24]
 8005770:	1c5a      	adds	r2, r3, #1
 8005772:	d13f      	bne.n	80057f4 <_printf_float+0x17c>
 8005774:	2306      	movs	r3, #6
 8005776:	6063      	str	r3, [r4, #4]
 8005778:	9b05      	ldr	r3, [sp, #20]
 800577a:	6861      	ldr	r1, [r4, #4]
 800577c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005780:	2300      	movs	r3, #0
 8005782:	9303      	str	r3, [sp, #12]
 8005784:	ab0a      	add	r3, sp, #40	; 0x28
 8005786:	e9cd b301 	strd	fp, r3, [sp, #4]
 800578a:	ab09      	add	r3, sp, #36	; 0x24
 800578c:	ec49 8b10 	vmov	d0, r8, r9
 8005790:	9300      	str	r3, [sp, #0]
 8005792:	6022      	str	r2, [r4, #0]
 8005794:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005798:	4628      	mov	r0, r5
 800579a:	f7ff fecd 	bl	8005538 <__cvt>
 800579e:	9b06      	ldr	r3, [sp, #24]
 80057a0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80057a2:	2b47      	cmp	r3, #71	; 0x47
 80057a4:	4680      	mov	r8, r0
 80057a6:	d108      	bne.n	80057ba <_printf_float+0x142>
 80057a8:	1cc8      	adds	r0, r1, #3
 80057aa:	db02      	blt.n	80057b2 <_printf_float+0x13a>
 80057ac:	6863      	ldr	r3, [r4, #4]
 80057ae:	4299      	cmp	r1, r3
 80057b0:	dd41      	ble.n	8005836 <_printf_float+0x1be>
 80057b2:	f1ab 0b02 	sub.w	fp, fp, #2
 80057b6:	fa5f fb8b 	uxtb.w	fp, fp
 80057ba:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80057be:	d820      	bhi.n	8005802 <_printf_float+0x18a>
 80057c0:	3901      	subs	r1, #1
 80057c2:	465a      	mov	r2, fp
 80057c4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80057c8:	9109      	str	r1, [sp, #36]	; 0x24
 80057ca:	f7ff ff17 	bl	80055fc <__exponent>
 80057ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80057d0:	1813      	adds	r3, r2, r0
 80057d2:	2a01      	cmp	r2, #1
 80057d4:	4681      	mov	r9, r0
 80057d6:	6123      	str	r3, [r4, #16]
 80057d8:	dc02      	bgt.n	80057e0 <_printf_float+0x168>
 80057da:	6822      	ldr	r2, [r4, #0]
 80057dc:	07d2      	lsls	r2, r2, #31
 80057de:	d501      	bpl.n	80057e4 <_printf_float+0x16c>
 80057e0:	3301      	adds	r3, #1
 80057e2:	6123      	str	r3, [r4, #16]
 80057e4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d09c      	beq.n	8005726 <_printf_float+0xae>
 80057ec:	232d      	movs	r3, #45	; 0x2d
 80057ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80057f2:	e798      	b.n	8005726 <_printf_float+0xae>
 80057f4:	9a06      	ldr	r2, [sp, #24]
 80057f6:	2a47      	cmp	r2, #71	; 0x47
 80057f8:	d1be      	bne.n	8005778 <_printf_float+0x100>
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d1bc      	bne.n	8005778 <_printf_float+0x100>
 80057fe:	2301      	movs	r3, #1
 8005800:	e7b9      	b.n	8005776 <_printf_float+0xfe>
 8005802:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005806:	d118      	bne.n	800583a <_printf_float+0x1c2>
 8005808:	2900      	cmp	r1, #0
 800580a:	6863      	ldr	r3, [r4, #4]
 800580c:	dd0b      	ble.n	8005826 <_printf_float+0x1ae>
 800580e:	6121      	str	r1, [r4, #16]
 8005810:	b913      	cbnz	r3, 8005818 <_printf_float+0x1a0>
 8005812:	6822      	ldr	r2, [r4, #0]
 8005814:	07d0      	lsls	r0, r2, #31
 8005816:	d502      	bpl.n	800581e <_printf_float+0x1a6>
 8005818:	3301      	adds	r3, #1
 800581a:	440b      	add	r3, r1
 800581c:	6123      	str	r3, [r4, #16]
 800581e:	65a1      	str	r1, [r4, #88]	; 0x58
 8005820:	f04f 0900 	mov.w	r9, #0
 8005824:	e7de      	b.n	80057e4 <_printf_float+0x16c>
 8005826:	b913      	cbnz	r3, 800582e <_printf_float+0x1b6>
 8005828:	6822      	ldr	r2, [r4, #0]
 800582a:	07d2      	lsls	r2, r2, #31
 800582c:	d501      	bpl.n	8005832 <_printf_float+0x1ba>
 800582e:	3302      	adds	r3, #2
 8005830:	e7f4      	b.n	800581c <_printf_float+0x1a4>
 8005832:	2301      	movs	r3, #1
 8005834:	e7f2      	b.n	800581c <_printf_float+0x1a4>
 8005836:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800583a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800583c:	4299      	cmp	r1, r3
 800583e:	db05      	blt.n	800584c <_printf_float+0x1d4>
 8005840:	6823      	ldr	r3, [r4, #0]
 8005842:	6121      	str	r1, [r4, #16]
 8005844:	07d8      	lsls	r0, r3, #31
 8005846:	d5ea      	bpl.n	800581e <_printf_float+0x1a6>
 8005848:	1c4b      	adds	r3, r1, #1
 800584a:	e7e7      	b.n	800581c <_printf_float+0x1a4>
 800584c:	2900      	cmp	r1, #0
 800584e:	bfd4      	ite	le
 8005850:	f1c1 0202 	rsble	r2, r1, #2
 8005854:	2201      	movgt	r2, #1
 8005856:	4413      	add	r3, r2
 8005858:	e7e0      	b.n	800581c <_printf_float+0x1a4>
 800585a:	6823      	ldr	r3, [r4, #0]
 800585c:	055a      	lsls	r2, r3, #21
 800585e:	d407      	bmi.n	8005870 <_printf_float+0x1f8>
 8005860:	6923      	ldr	r3, [r4, #16]
 8005862:	4642      	mov	r2, r8
 8005864:	4631      	mov	r1, r6
 8005866:	4628      	mov	r0, r5
 8005868:	47b8      	blx	r7
 800586a:	3001      	adds	r0, #1
 800586c:	d12c      	bne.n	80058c8 <_printf_float+0x250>
 800586e:	e764      	b.n	800573a <_printf_float+0xc2>
 8005870:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005874:	f240 80e0 	bls.w	8005a38 <_printf_float+0x3c0>
 8005878:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800587c:	2200      	movs	r2, #0
 800587e:	2300      	movs	r3, #0
 8005880:	f7fb f922 	bl	8000ac8 <__aeabi_dcmpeq>
 8005884:	2800      	cmp	r0, #0
 8005886:	d034      	beq.n	80058f2 <_printf_float+0x27a>
 8005888:	4a37      	ldr	r2, [pc, #220]	; (8005968 <_printf_float+0x2f0>)
 800588a:	2301      	movs	r3, #1
 800588c:	4631      	mov	r1, r6
 800588e:	4628      	mov	r0, r5
 8005890:	47b8      	blx	r7
 8005892:	3001      	adds	r0, #1
 8005894:	f43f af51 	beq.w	800573a <_printf_float+0xc2>
 8005898:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800589c:	429a      	cmp	r2, r3
 800589e:	db02      	blt.n	80058a6 <_printf_float+0x22e>
 80058a0:	6823      	ldr	r3, [r4, #0]
 80058a2:	07d8      	lsls	r0, r3, #31
 80058a4:	d510      	bpl.n	80058c8 <_printf_float+0x250>
 80058a6:	ee18 3a10 	vmov	r3, s16
 80058aa:	4652      	mov	r2, sl
 80058ac:	4631      	mov	r1, r6
 80058ae:	4628      	mov	r0, r5
 80058b0:	47b8      	blx	r7
 80058b2:	3001      	adds	r0, #1
 80058b4:	f43f af41 	beq.w	800573a <_printf_float+0xc2>
 80058b8:	f04f 0800 	mov.w	r8, #0
 80058bc:	f104 091a 	add.w	r9, r4, #26
 80058c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058c2:	3b01      	subs	r3, #1
 80058c4:	4543      	cmp	r3, r8
 80058c6:	dc09      	bgt.n	80058dc <_printf_float+0x264>
 80058c8:	6823      	ldr	r3, [r4, #0]
 80058ca:	079b      	lsls	r3, r3, #30
 80058cc:	f100 8105 	bmi.w	8005ada <_printf_float+0x462>
 80058d0:	68e0      	ldr	r0, [r4, #12]
 80058d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80058d4:	4298      	cmp	r0, r3
 80058d6:	bfb8      	it	lt
 80058d8:	4618      	movlt	r0, r3
 80058da:	e730      	b.n	800573e <_printf_float+0xc6>
 80058dc:	2301      	movs	r3, #1
 80058de:	464a      	mov	r2, r9
 80058e0:	4631      	mov	r1, r6
 80058e2:	4628      	mov	r0, r5
 80058e4:	47b8      	blx	r7
 80058e6:	3001      	adds	r0, #1
 80058e8:	f43f af27 	beq.w	800573a <_printf_float+0xc2>
 80058ec:	f108 0801 	add.w	r8, r8, #1
 80058f0:	e7e6      	b.n	80058c0 <_printf_float+0x248>
 80058f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	dc39      	bgt.n	800596c <_printf_float+0x2f4>
 80058f8:	4a1b      	ldr	r2, [pc, #108]	; (8005968 <_printf_float+0x2f0>)
 80058fa:	2301      	movs	r3, #1
 80058fc:	4631      	mov	r1, r6
 80058fe:	4628      	mov	r0, r5
 8005900:	47b8      	blx	r7
 8005902:	3001      	adds	r0, #1
 8005904:	f43f af19 	beq.w	800573a <_printf_float+0xc2>
 8005908:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800590c:	4313      	orrs	r3, r2
 800590e:	d102      	bne.n	8005916 <_printf_float+0x29e>
 8005910:	6823      	ldr	r3, [r4, #0]
 8005912:	07d9      	lsls	r1, r3, #31
 8005914:	d5d8      	bpl.n	80058c8 <_printf_float+0x250>
 8005916:	ee18 3a10 	vmov	r3, s16
 800591a:	4652      	mov	r2, sl
 800591c:	4631      	mov	r1, r6
 800591e:	4628      	mov	r0, r5
 8005920:	47b8      	blx	r7
 8005922:	3001      	adds	r0, #1
 8005924:	f43f af09 	beq.w	800573a <_printf_float+0xc2>
 8005928:	f04f 0900 	mov.w	r9, #0
 800592c:	f104 0a1a 	add.w	sl, r4, #26
 8005930:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005932:	425b      	negs	r3, r3
 8005934:	454b      	cmp	r3, r9
 8005936:	dc01      	bgt.n	800593c <_printf_float+0x2c4>
 8005938:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800593a:	e792      	b.n	8005862 <_printf_float+0x1ea>
 800593c:	2301      	movs	r3, #1
 800593e:	4652      	mov	r2, sl
 8005940:	4631      	mov	r1, r6
 8005942:	4628      	mov	r0, r5
 8005944:	47b8      	blx	r7
 8005946:	3001      	adds	r0, #1
 8005948:	f43f aef7 	beq.w	800573a <_printf_float+0xc2>
 800594c:	f109 0901 	add.w	r9, r9, #1
 8005950:	e7ee      	b.n	8005930 <_printf_float+0x2b8>
 8005952:	bf00      	nop
 8005954:	7fefffff 	.word	0x7fefffff
 8005958:	08008000 	.word	0x08008000
 800595c:	08008004 	.word	0x08008004
 8005960:	0800800c 	.word	0x0800800c
 8005964:	08008008 	.word	0x08008008
 8005968:	08008010 	.word	0x08008010
 800596c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800596e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005970:	429a      	cmp	r2, r3
 8005972:	bfa8      	it	ge
 8005974:	461a      	movge	r2, r3
 8005976:	2a00      	cmp	r2, #0
 8005978:	4691      	mov	r9, r2
 800597a:	dc37      	bgt.n	80059ec <_printf_float+0x374>
 800597c:	f04f 0b00 	mov.w	fp, #0
 8005980:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005984:	f104 021a 	add.w	r2, r4, #26
 8005988:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800598a:	9305      	str	r3, [sp, #20]
 800598c:	eba3 0309 	sub.w	r3, r3, r9
 8005990:	455b      	cmp	r3, fp
 8005992:	dc33      	bgt.n	80059fc <_printf_float+0x384>
 8005994:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005998:	429a      	cmp	r2, r3
 800599a:	db3b      	blt.n	8005a14 <_printf_float+0x39c>
 800599c:	6823      	ldr	r3, [r4, #0]
 800599e:	07da      	lsls	r2, r3, #31
 80059a0:	d438      	bmi.n	8005a14 <_printf_float+0x39c>
 80059a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059a4:	9a05      	ldr	r2, [sp, #20]
 80059a6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80059a8:	1a9a      	subs	r2, r3, r2
 80059aa:	eba3 0901 	sub.w	r9, r3, r1
 80059ae:	4591      	cmp	r9, r2
 80059b0:	bfa8      	it	ge
 80059b2:	4691      	movge	r9, r2
 80059b4:	f1b9 0f00 	cmp.w	r9, #0
 80059b8:	dc35      	bgt.n	8005a26 <_printf_float+0x3ae>
 80059ba:	f04f 0800 	mov.w	r8, #0
 80059be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80059c2:	f104 0a1a 	add.w	sl, r4, #26
 80059c6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80059ca:	1a9b      	subs	r3, r3, r2
 80059cc:	eba3 0309 	sub.w	r3, r3, r9
 80059d0:	4543      	cmp	r3, r8
 80059d2:	f77f af79 	ble.w	80058c8 <_printf_float+0x250>
 80059d6:	2301      	movs	r3, #1
 80059d8:	4652      	mov	r2, sl
 80059da:	4631      	mov	r1, r6
 80059dc:	4628      	mov	r0, r5
 80059de:	47b8      	blx	r7
 80059e0:	3001      	adds	r0, #1
 80059e2:	f43f aeaa 	beq.w	800573a <_printf_float+0xc2>
 80059e6:	f108 0801 	add.w	r8, r8, #1
 80059ea:	e7ec      	b.n	80059c6 <_printf_float+0x34e>
 80059ec:	4613      	mov	r3, r2
 80059ee:	4631      	mov	r1, r6
 80059f0:	4642      	mov	r2, r8
 80059f2:	4628      	mov	r0, r5
 80059f4:	47b8      	blx	r7
 80059f6:	3001      	adds	r0, #1
 80059f8:	d1c0      	bne.n	800597c <_printf_float+0x304>
 80059fa:	e69e      	b.n	800573a <_printf_float+0xc2>
 80059fc:	2301      	movs	r3, #1
 80059fe:	4631      	mov	r1, r6
 8005a00:	4628      	mov	r0, r5
 8005a02:	9205      	str	r2, [sp, #20]
 8005a04:	47b8      	blx	r7
 8005a06:	3001      	adds	r0, #1
 8005a08:	f43f ae97 	beq.w	800573a <_printf_float+0xc2>
 8005a0c:	9a05      	ldr	r2, [sp, #20]
 8005a0e:	f10b 0b01 	add.w	fp, fp, #1
 8005a12:	e7b9      	b.n	8005988 <_printf_float+0x310>
 8005a14:	ee18 3a10 	vmov	r3, s16
 8005a18:	4652      	mov	r2, sl
 8005a1a:	4631      	mov	r1, r6
 8005a1c:	4628      	mov	r0, r5
 8005a1e:	47b8      	blx	r7
 8005a20:	3001      	adds	r0, #1
 8005a22:	d1be      	bne.n	80059a2 <_printf_float+0x32a>
 8005a24:	e689      	b.n	800573a <_printf_float+0xc2>
 8005a26:	9a05      	ldr	r2, [sp, #20]
 8005a28:	464b      	mov	r3, r9
 8005a2a:	4442      	add	r2, r8
 8005a2c:	4631      	mov	r1, r6
 8005a2e:	4628      	mov	r0, r5
 8005a30:	47b8      	blx	r7
 8005a32:	3001      	adds	r0, #1
 8005a34:	d1c1      	bne.n	80059ba <_printf_float+0x342>
 8005a36:	e680      	b.n	800573a <_printf_float+0xc2>
 8005a38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a3a:	2a01      	cmp	r2, #1
 8005a3c:	dc01      	bgt.n	8005a42 <_printf_float+0x3ca>
 8005a3e:	07db      	lsls	r3, r3, #31
 8005a40:	d538      	bpl.n	8005ab4 <_printf_float+0x43c>
 8005a42:	2301      	movs	r3, #1
 8005a44:	4642      	mov	r2, r8
 8005a46:	4631      	mov	r1, r6
 8005a48:	4628      	mov	r0, r5
 8005a4a:	47b8      	blx	r7
 8005a4c:	3001      	adds	r0, #1
 8005a4e:	f43f ae74 	beq.w	800573a <_printf_float+0xc2>
 8005a52:	ee18 3a10 	vmov	r3, s16
 8005a56:	4652      	mov	r2, sl
 8005a58:	4631      	mov	r1, r6
 8005a5a:	4628      	mov	r0, r5
 8005a5c:	47b8      	blx	r7
 8005a5e:	3001      	adds	r0, #1
 8005a60:	f43f ae6b 	beq.w	800573a <_printf_float+0xc2>
 8005a64:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005a68:	2200      	movs	r2, #0
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	f7fb f82c 	bl	8000ac8 <__aeabi_dcmpeq>
 8005a70:	b9d8      	cbnz	r0, 8005aaa <_printf_float+0x432>
 8005a72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a74:	f108 0201 	add.w	r2, r8, #1
 8005a78:	3b01      	subs	r3, #1
 8005a7a:	4631      	mov	r1, r6
 8005a7c:	4628      	mov	r0, r5
 8005a7e:	47b8      	blx	r7
 8005a80:	3001      	adds	r0, #1
 8005a82:	d10e      	bne.n	8005aa2 <_printf_float+0x42a>
 8005a84:	e659      	b.n	800573a <_printf_float+0xc2>
 8005a86:	2301      	movs	r3, #1
 8005a88:	4652      	mov	r2, sl
 8005a8a:	4631      	mov	r1, r6
 8005a8c:	4628      	mov	r0, r5
 8005a8e:	47b8      	blx	r7
 8005a90:	3001      	adds	r0, #1
 8005a92:	f43f ae52 	beq.w	800573a <_printf_float+0xc2>
 8005a96:	f108 0801 	add.w	r8, r8, #1
 8005a9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a9c:	3b01      	subs	r3, #1
 8005a9e:	4543      	cmp	r3, r8
 8005aa0:	dcf1      	bgt.n	8005a86 <_printf_float+0x40e>
 8005aa2:	464b      	mov	r3, r9
 8005aa4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005aa8:	e6dc      	b.n	8005864 <_printf_float+0x1ec>
 8005aaa:	f04f 0800 	mov.w	r8, #0
 8005aae:	f104 0a1a 	add.w	sl, r4, #26
 8005ab2:	e7f2      	b.n	8005a9a <_printf_float+0x422>
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	4642      	mov	r2, r8
 8005ab8:	e7df      	b.n	8005a7a <_printf_float+0x402>
 8005aba:	2301      	movs	r3, #1
 8005abc:	464a      	mov	r2, r9
 8005abe:	4631      	mov	r1, r6
 8005ac0:	4628      	mov	r0, r5
 8005ac2:	47b8      	blx	r7
 8005ac4:	3001      	adds	r0, #1
 8005ac6:	f43f ae38 	beq.w	800573a <_printf_float+0xc2>
 8005aca:	f108 0801 	add.w	r8, r8, #1
 8005ace:	68e3      	ldr	r3, [r4, #12]
 8005ad0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005ad2:	1a5b      	subs	r3, r3, r1
 8005ad4:	4543      	cmp	r3, r8
 8005ad6:	dcf0      	bgt.n	8005aba <_printf_float+0x442>
 8005ad8:	e6fa      	b.n	80058d0 <_printf_float+0x258>
 8005ada:	f04f 0800 	mov.w	r8, #0
 8005ade:	f104 0919 	add.w	r9, r4, #25
 8005ae2:	e7f4      	b.n	8005ace <_printf_float+0x456>

08005ae4 <_printf_common>:
 8005ae4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ae8:	4616      	mov	r6, r2
 8005aea:	4699      	mov	r9, r3
 8005aec:	688a      	ldr	r2, [r1, #8]
 8005aee:	690b      	ldr	r3, [r1, #16]
 8005af0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005af4:	4293      	cmp	r3, r2
 8005af6:	bfb8      	it	lt
 8005af8:	4613      	movlt	r3, r2
 8005afa:	6033      	str	r3, [r6, #0]
 8005afc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005b00:	4607      	mov	r7, r0
 8005b02:	460c      	mov	r4, r1
 8005b04:	b10a      	cbz	r2, 8005b0a <_printf_common+0x26>
 8005b06:	3301      	adds	r3, #1
 8005b08:	6033      	str	r3, [r6, #0]
 8005b0a:	6823      	ldr	r3, [r4, #0]
 8005b0c:	0699      	lsls	r1, r3, #26
 8005b0e:	bf42      	ittt	mi
 8005b10:	6833      	ldrmi	r3, [r6, #0]
 8005b12:	3302      	addmi	r3, #2
 8005b14:	6033      	strmi	r3, [r6, #0]
 8005b16:	6825      	ldr	r5, [r4, #0]
 8005b18:	f015 0506 	ands.w	r5, r5, #6
 8005b1c:	d106      	bne.n	8005b2c <_printf_common+0x48>
 8005b1e:	f104 0a19 	add.w	sl, r4, #25
 8005b22:	68e3      	ldr	r3, [r4, #12]
 8005b24:	6832      	ldr	r2, [r6, #0]
 8005b26:	1a9b      	subs	r3, r3, r2
 8005b28:	42ab      	cmp	r3, r5
 8005b2a:	dc26      	bgt.n	8005b7a <_printf_common+0x96>
 8005b2c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005b30:	1e13      	subs	r3, r2, #0
 8005b32:	6822      	ldr	r2, [r4, #0]
 8005b34:	bf18      	it	ne
 8005b36:	2301      	movne	r3, #1
 8005b38:	0692      	lsls	r2, r2, #26
 8005b3a:	d42b      	bmi.n	8005b94 <_printf_common+0xb0>
 8005b3c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005b40:	4649      	mov	r1, r9
 8005b42:	4638      	mov	r0, r7
 8005b44:	47c0      	blx	r8
 8005b46:	3001      	adds	r0, #1
 8005b48:	d01e      	beq.n	8005b88 <_printf_common+0xa4>
 8005b4a:	6823      	ldr	r3, [r4, #0]
 8005b4c:	68e5      	ldr	r5, [r4, #12]
 8005b4e:	6832      	ldr	r2, [r6, #0]
 8005b50:	f003 0306 	and.w	r3, r3, #6
 8005b54:	2b04      	cmp	r3, #4
 8005b56:	bf08      	it	eq
 8005b58:	1aad      	subeq	r5, r5, r2
 8005b5a:	68a3      	ldr	r3, [r4, #8]
 8005b5c:	6922      	ldr	r2, [r4, #16]
 8005b5e:	bf0c      	ite	eq
 8005b60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b64:	2500      	movne	r5, #0
 8005b66:	4293      	cmp	r3, r2
 8005b68:	bfc4      	itt	gt
 8005b6a:	1a9b      	subgt	r3, r3, r2
 8005b6c:	18ed      	addgt	r5, r5, r3
 8005b6e:	2600      	movs	r6, #0
 8005b70:	341a      	adds	r4, #26
 8005b72:	42b5      	cmp	r5, r6
 8005b74:	d11a      	bne.n	8005bac <_printf_common+0xc8>
 8005b76:	2000      	movs	r0, #0
 8005b78:	e008      	b.n	8005b8c <_printf_common+0xa8>
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	4652      	mov	r2, sl
 8005b7e:	4649      	mov	r1, r9
 8005b80:	4638      	mov	r0, r7
 8005b82:	47c0      	blx	r8
 8005b84:	3001      	adds	r0, #1
 8005b86:	d103      	bne.n	8005b90 <_printf_common+0xac>
 8005b88:	f04f 30ff 	mov.w	r0, #4294967295
 8005b8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b90:	3501      	adds	r5, #1
 8005b92:	e7c6      	b.n	8005b22 <_printf_common+0x3e>
 8005b94:	18e1      	adds	r1, r4, r3
 8005b96:	1c5a      	adds	r2, r3, #1
 8005b98:	2030      	movs	r0, #48	; 0x30
 8005b9a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005b9e:	4422      	add	r2, r4
 8005ba0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005ba4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005ba8:	3302      	adds	r3, #2
 8005baa:	e7c7      	b.n	8005b3c <_printf_common+0x58>
 8005bac:	2301      	movs	r3, #1
 8005bae:	4622      	mov	r2, r4
 8005bb0:	4649      	mov	r1, r9
 8005bb2:	4638      	mov	r0, r7
 8005bb4:	47c0      	blx	r8
 8005bb6:	3001      	adds	r0, #1
 8005bb8:	d0e6      	beq.n	8005b88 <_printf_common+0xa4>
 8005bba:	3601      	adds	r6, #1
 8005bbc:	e7d9      	b.n	8005b72 <_printf_common+0x8e>
	...

08005bc0 <_printf_i>:
 8005bc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005bc4:	7e0f      	ldrb	r7, [r1, #24]
 8005bc6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005bc8:	2f78      	cmp	r7, #120	; 0x78
 8005bca:	4691      	mov	r9, r2
 8005bcc:	4680      	mov	r8, r0
 8005bce:	460c      	mov	r4, r1
 8005bd0:	469a      	mov	sl, r3
 8005bd2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005bd6:	d807      	bhi.n	8005be8 <_printf_i+0x28>
 8005bd8:	2f62      	cmp	r7, #98	; 0x62
 8005bda:	d80a      	bhi.n	8005bf2 <_printf_i+0x32>
 8005bdc:	2f00      	cmp	r7, #0
 8005bde:	f000 80d8 	beq.w	8005d92 <_printf_i+0x1d2>
 8005be2:	2f58      	cmp	r7, #88	; 0x58
 8005be4:	f000 80a3 	beq.w	8005d2e <_printf_i+0x16e>
 8005be8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005bec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005bf0:	e03a      	b.n	8005c68 <_printf_i+0xa8>
 8005bf2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005bf6:	2b15      	cmp	r3, #21
 8005bf8:	d8f6      	bhi.n	8005be8 <_printf_i+0x28>
 8005bfa:	a101      	add	r1, pc, #4	; (adr r1, 8005c00 <_printf_i+0x40>)
 8005bfc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005c00:	08005c59 	.word	0x08005c59
 8005c04:	08005c6d 	.word	0x08005c6d
 8005c08:	08005be9 	.word	0x08005be9
 8005c0c:	08005be9 	.word	0x08005be9
 8005c10:	08005be9 	.word	0x08005be9
 8005c14:	08005be9 	.word	0x08005be9
 8005c18:	08005c6d 	.word	0x08005c6d
 8005c1c:	08005be9 	.word	0x08005be9
 8005c20:	08005be9 	.word	0x08005be9
 8005c24:	08005be9 	.word	0x08005be9
 8005c28:	08005be9 	.word	0x08005be9
 8005c2c:	08005d79 	.word	0x08005d79
 8005c30:	08005c9d 	.word	0x08005c9d
 8005c34:	08005d5b 	.word	0x08005d5b
 8005c38:	08005be9 	.word	0x08005be9
 8005c3c:	08005be9 	.word	0x08005be9
 8005c40:	08005d9b 	.word	0x08005d9b
 8005c44:	08005be9 	.word	0x08005be9
 8005c48:	08005c9d 	.word	0x08005c9d
 8005c4c:	08005be9 	.word	0x08005be9
 8005c50:	08005be9 	.word	0x08005be9
 8005c54:	08005d63 	.word	0x08005d63
 8005c58:	682b      	ldr	r3, [r5, #0]
 8005c5a:	1d1a      	adds	r2, r3, #4
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	602a      	str	r2, [r5, #0]
 8005c60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005c68:	2301      	movs	r3, #1
 8005c6a:	e0a3      	b.n	8005db4 <_printf_i+0x1f4>
 8005c6c:	6820      	ldr	r0, [r4, #0]
 8005c6e:	6829      	ldr	r1, [r5, #0]
 8005c70:	0606      	lsls	r6, r0, #24
 8005c72:	f101 0304 	add.w	r3, r1, #4
 8005c76:	d50a      	bpl.n	8005c8e <_printf_i+0xce>
 8005c78:	680e      	ldr	r6, [r1, #0]
 8005c7a:	602b      	str	r3, [r5, #0]
 8005c7c:	2e00      	cmp	r6, #0
 8005c7e:	da03      	bge.n	8005c88 <_printf_i+0xc8>
 8005c80:	232d      	movs	r3, #45	; 0x2d
 8005c82:	4276      	negs	r6, r6
 8005c84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c88:	485e      	ldr	r0, [pc, #376]	; (8005e04 <_printf_i+0x244>)
 8005c8a:	230a      	movs	r3, #10
 8005c8c:	e019      	b.n	8005cc2 <_printf_i+0x102>
 8005c8e:	680e      	ldr	r6, [r1, #0]
 8005c90:	602b      	str	r3, [r5, #0]
 8005c92:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005c96:	bf18      	it	ne
 8005c98:	b236      	sxthne	r6, r6
 8005c9a:	e7ef      	b.n	8005c7c <_printf_i+0xbc>
 8005c9c:	682b      	ldr	r3, [r5, #0]
 8005c9e:	6820      	ldr	r0, [r4, #0]
 8005ca0:	1d19      	adds	r1, r3, #4
 8005ca2:	6029      	str	r1, [r5, #0]
 8005ca4:	0601      	lsls	r1, r0, #24
 8005ca6:	d501      	bpl.n	8005cac <_printf_i+0xec>
 8005ca8:	681e      	ldr	r6, [r3, #0]
 8005caa:	e002      	b.n	8005cb2 <_printf_i+0xf2>
 8005cac:	0646      	lsls	r6, r0, #25
 8005cae:	d5fb      	bpl.n	8005ca8 <_printf_i+0xe8>
 8005cb0:	881e      	ldrh	r6, [r3, #0]
 8005cb2:	4854      	ldr	r0, [pc, #336]	; (8005e04 <_printf_i+0x244>)
 8005cb4:	2f6f      	cmp	r7, #111	; 0x6f
 8005cb6:	bf0c      	ite	eq
 8005cb8:	2308      	moveq	r3, #8
 8005cba:	230a      	movne	r3, #10
 8005cbc:	2100      	movs	r1, #0
 8005cbe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005cc2:	6865      	ldr	r5, [r4, #4]
 8005cc4:	60a5      	str	r5, [r4, #8]
 8005cc6:	2d00      	cmp	r5, #0
 8005cc8:	bfa2      	ittt	ge
 8005cca:	6821      	ldrge	r1, [r4, #0]
 8005ccc:	f021 0104 	bicge.w	r1, r1, #4
 8005cd0:	6021      	strge	r1, [r4, #0]
 8005cd2:	b90e      	cbnz	r6, 8005cd8 <_printf_i+0x118>
 8005cd4:	2d00      	cmp	r5, #0
 8005cd6:	d04d      	beq.n	8005d74 <_printf_i+0x1b4>
 8005cd8:	4615      	mov	r5, r2
 8005cda:	fbb6 f1f3 	udiv	r1, r6, r3
 8005cde:	fb03 6711 	mls	r7, r3, r1, r6
 8005ce2:	5dc7      	ldrb	r7, [r0, r7]
 8005ce4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005ce8:	4637      	mov	r7, r6
 8005cea:	42bb      	cmp	r3, r7
 8005cec:	460e      	mov	r6, r1
 8005cee:	d9f4      	bls.n	8005cda <_printf_i+0x11a>
 8005cf0:	2b08      	cmp	r3, #8
 8005cf2:	d10b      	bne.n	8005d0c <_printf_i+0x14c>
 8005cf4:	6823      	ldr	r3, [r4, #0]
 8005cf6:	07de      	lsls	r6, r3, #31
 8005cf8:	d508      	bpl.n	8005d0c <_printf_i+0x14c>
 8005cfa:	6923      	ldr	r3, [r4, #16]
 8005cfc:	6861      	ldr	r1, [r4, #4]
 8005cfe:	4299      	cmp	r1, r3
 8005d00:	bfde      	ittt	le
 8005d02:	2330      	movle	r3, #48	; 0x30
 8005d04:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005d08:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005d0c:	1b52      	subs	r2, r2, r5
 8005d0e:	6122      	str	r2, [r4, #16]
 8005d10:	f8cd a000 	str.w	sl, [sp]
 8005d14:	464b      	mov	r3, r9
 8005d16:	aa03      	add	r2, sp, #12
 8005d18:	4621      	mov	r1, r4
 8005d1a:	4640      	mov	r0, r8
 8005d1c:	f7ff fee2 	bl	8005ae4 <_printf_common>
 8005d20:	3001      	adds	r0, #1
 8005d22:	d14c      	bne.n	8005dbe <_printf_i+0x1fe>
 8005d24:	f04f 30ff 	mov.w	r0, #4294967295
 8005d28:	b004      	add	sp, #16
 8005d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d2e:	4835      	ldr	r0, [pc, #212]	; (8005e04 <_printf_i+0x244>)
 8005d30:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005d34:	6829      	ldr	r1, [r5, #0]
 8005d36:	6823      	ldr	r3, [r4, #0]
 8005d38:	f851 6b04 	ldr.w	r6, [r1], #4
 8005d3c:	6029      	str	r1, [r5, #0]
 8005d3e:	061d      	lsls	r5, r3, #24
 8005d40:	d514      	bpl.n	8005d6c <_printf_i+0x1ac>
 8005d42:	07df      	lsls	r7, r3, #31
 8005d44:	bf44      	itt	mi
 8005d46:	f043 0320 	orrmi.w	r3, r3, #32
 8005d4a:	6023      	strmi	r3, [r4, #0]
 8005d4c:	b91e      	cbnz	r6, 8005d56 <_printf_i+0x196>
 8005d4e:	6823      	ldr	r3, [r4, #0]
 8005d50:	f023 0320 	bic.w	r3, r3, #32
 8005d54:	6023      	str	r3, [r4, #0]
 8005d56:	2310      	movs	r3, #16
 8005d58:	e7b0      	b.n	8005cbc <_printf_i+0xfc>
 8005d5a:	6823      	ldr	r3, [r4, #0]
 8005d5c:	f043 0320 	orr.w	r3, r3, #32
 8005d60:	6023      	str	r3, [r4, #0]
 8005d62:	2378      	movs	r3, #120	; 0x78
 8005d64:	4828      	ldr	r0, [pc, #160]	; (8005e08 <_printf_i+0x248>)
 8005d66:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005d6a:	e7e3      	b.n	8005d34 <_printf_i+0x174>
 8005d6c:	0659      	lsls	r1, r3, #25
 8005d6e:	bf48      	it	mi
 8005d70:	b2b6      	uxthmi	r6, r6
 8005d72:	e7e6      	b.n	8005d42 <_printf_i+0x182>
 8005d74:	4615      	mov	r5, r2
 8005d76:	e7bb      	b.n	8005cf0 <_printf_i+0x130>
 8005d78:	682b      	ldr	r3, [r5, #0]
 8005d7a:	6826      	ldr	r6, [r4, #0]
 8005d7c:	6961      	ldr	r1, [r4, #20]
 8005d7e:	1d18      	adds	r0, r3, #4
 8005d80:	6028      	str	r0, [r5, #0]
 8005d82:	0635      	lsls	r5, r6, #24
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	d501      	bpl.n	8005d8c <_printf_i+0x1cc>
 8005d88:	6019      	str	r1, [r3, #0]
 8005d8a:	e002      	b.n	8005d92 <_printf_i+0x1d2>
 8005d8c:	0670      	lsls	r0, r6, #25
 8005d8e:	d5fb      	bpl.n	8005d88 <_printf_i+0x1c8>
 8005d90:	8019      	strh	r1, [r3, #0]
 8005d92:	2300      	movs	r3, #0
 8005d94:	6123      	str	r3, [r4, #16]
 8005d96:	4615      	mov	r5, r2
 8005d98:	e7ba      	b.n	8005d10 <_printf_i+0x150>
 8005d9a:	682b      	ldr	r3, [r5, #0]
 8005d9c:	1d1a      	adds	r2, r3, #4
 8005d9e:	602a      	str	r2, [r5, #0]
 8005da0:	681d      	ldr	r5, [r3, #0]
 8005da2:	6862      	ldr	r2, [r4, #4]
 8005da4:	2100      	movs	r1, #0
 8005da6:	4628      	mov	r0, r5
 8005da8:	f7fa fa1a 	bl	80001e0 <memchr>
 8005dac:	b108      	cbz	r0, 8005db2 <_printf_i+0x1f2>
 8005dae:	1b40      	subs	r0, r0, r5
 8005db0:	6060      	str	r0, [r4, #4]
 8005db2:	6863      	ldr	r3, [r4, #4]
 8005db4:	6123      	str	r3, [r4, #16]
 8005db6:	2300      	movs	r3, #0
 8005db8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005dbc:	e7a8      	b.n	8005d10 <_printf_i+0x150>
 8005dbe:	6923      	ldr	r3, [r4, #16]
 8005dc0:	462a      	mov	r2, r5
 8005dc2:	4649      	mov	r1, r9
 8005dc4:	4640      	mov	r0, r8
 8005dc6:	47d0      	blx	sl
 8005dc8:	3001      	adds	r0, #1
 8005dca:	d0ab      	beq.n	8005d24 <_printf_i+0x164>
 8005dcc:	6823      	ldr	r3, [r4, #0]
 8005dce:	079b      	lsls	r3, r3, #30
 8005dd0:	d413      	bmi.n	8005dfa <_printf_i+0x23a>
 8005dd2:	68e0      	ldr	r0, [r4, #12]
 8005dd4:	9b03      	ldr	r3, [sp, #12]
 8005dd6:	4298      	cmp	r0, r3
 8005dd8:	bfb8      	it	lt
 8005dda:	4618      	movlt	r0, r3
 8005ddc:	e7a4      	b.n	8005d28 <_printf_i+0x168>
 8005dde:	2301      	movs	r3, #1
 8005de0:	4632      	mov	r2, r6
 8005de2:	4649      	mov	r1, r9
 8005de4:	4640      	mov	r0, r8
 8005de6:	47d0      	blx	sl
 8005de8:	3001      	adds	r0, #1
 8005dea:	d09b      	beq.n	8005d24 <_printf_i+0x164>
 8005dec:	3501      	adds	r5, #1
 8005dee:	68e3      	ldr	r3, [r4, #12]
 8005df0:	9903      	ldr	r1, [sp, #12]
 8005df2:	1a5b      	subs	r3, r3, r1
 8005df4:	42ab      	cmp	r3, r5
 8005df6:	dcf2      	bgt.n	8005dde <_printf_i+0x21e>
 8005df8:	e7eb      	b.n	8005dd2 <_printf_i+0x212>
 8005dfa:	2500      	movs	r5, #0
 8005dfc:	f104 0619 	add.w	r6, r4, #25
 8005e00:	e7f5      	b.n	8005dee <_printf_i+0x22e>
 8005e02:	bf00      	nop
 8005e04:	08008012 	.word	0x08008012
 8005e08:	08008023 	.word	0x08008023

08005e0c <quorem>:
 8005e0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e10:	6903      	ldr	r3, [r0, #16]
 8005e12:	690c      	ldr	r4, [r1, #16]
 8005e14:	42a3      	cmp	r3, r4
 8005e16:	4607      	mov	r7, r0
 8005e18:	f2c0 8081 	blt.w	8005f1e <quorem+0x112>
 8005e1c:	3c01      	subs	r4, #1
 8005e1e:	f101 0814 	add.w	r8, r1, #20
 8005e22:	f100 0514 	add.w	r5, r0, #20
 8005e26:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005e2a:	9301      	str	r3, [sp, #4]
 8005e2c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005e30:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005e34:	3301      	adds	r3, #1
 8005e36:	429a      	cmp	r2, r3
 8005e38:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005e3c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005e40:	fbb2 f6f3 	udiv	r6, r2, r3
 8005e44:	d331      	bcc.n	8005eaa <quorem+0x9e>
 8005e46:	f04f 0e00 	mov.w	lr, #0
 8005e4a:	4640      	mov	r0, r8
 8005e4c:	46ac      	mov	ip, r5
 8005e4e:	46f2      	mov	sl, lr
 8005e50:	f850 2b04 	ldr.w	r2, [r0], #4
 8005e54:	b293      	uxth	r3, r2
 8005e56:	fb06 e303 	mla	r3, r6, r3, lr
 8005e5a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005e5e:	b29b      	uxth	r3, r3
 8005e60:	ebaa 0303 	sub.w	r3, sl, r3
 8005e64:	f8dc a000 	ldr.w	sl, [ip]
 8005e68:	0c12      	lsrs	r2, r2, #16
 8005e6a:	fa13 f38a 	uxtah	r3, r3, sl
 8005e6e:	fb06 e202 	mla	r2, r6, r2, lr
 8005e72:	9300      	str	r3, [sp, #0]
 8005e74:	9b00      	ldr	r3, [sp, #0]
 8005e76:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005e7a:	b292      	uxth	r2, r2
 8005e7c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005e80:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005e84:	f8bd 3000 	ldrh.w	r3, [sp]
 8005e88:	4581      	cmp	r9, r0
 8005e8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005e8e:	f84c 3b04 	str.w	r3, [ip], #4
 8005e92:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005e96:	d2db      	bcs.n	8005e50 <quorem+0x44>
 8005e98:	f855 300b 	ldr.w	r3, [r5, fp]
 8005e9c:	b92b      	cbnz	r3, 8005eaa <quorem+0x9e>
 8005e9e:	9b01      	ldr	r3, [sp, #4]
 8005ea0:	3b04      	subs	r3, #4
 8005ea2:	429d      	cmp	r5, r3
 8005ea4:	461a      	mov	r2, r3
 8005ea6:	d32e      	bcc.n	8005f06 <quorem+0xfa>
 8005ea8:	613c      	str	r4, [r7, #16]
 8005eaa:	4638      	mov	r0, r7
 8005eac:	f001 f8c6 	bl	800703c <__mcmp>
 8005eb0:	2800      	cmp	r0, #0
 8005eb2:	db24      	blt.n	8005efe <quorem+0xf2>
 8005eb4:	3601      	adds	r6, #1
 8005eb6:	4628      	mov	r0, r5
 8005eb8:	f04f 0c00 	mov.w	ip, #0
 8005ebc:	f858 2b04 	ldr.w	r2, [r8], #4
 8005ec0:	f8d0 e000 	ldr.w	lr, [r0]
 8005ec4:	b293      	uxth	r3, r2
 8005ec6:	ebac 0303 	sub.w	r3, ip, r3
 8005eca:	0c12      	lsrs	r2, r2, #16
 8005ecc:	fa13 f38e 	uxtah	r3, r3, lr
 8005ed0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005ed4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005ed8:	b29b      	uxth	r3, r3
 8005eda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005ede:	45c1      	cmp	r9, r8
 8005ee0:	f840 3b04 	str.w	r3, [r0], #4
 8005ee4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005ee8:	d2e8      	bcs.n	8005ebc <quorem+0xb0>
 8005eea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005eee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005ef2:	b922      	cbnz	r2, 8005efe <quorem+0xf2>
 8005ef4:	3b04      	subs	r3, #4
 8005ef6:	429d      	cmp	r5, r3
 8005ef8:	461a      	mov	r2, r3
 8005efa:	d30a      	bcc.n	8005f12 <quorem+0x106>
 8005efc:	613c      	str	r4, [r7, #16]
 8005efe:	4630      	mov	r0, r6
 8005f00:	b003      	add	sp, #12
 8005f02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f06:	6812      	ldr	r2, [r2, #0]
 8005f08:	3b04      	subs	r3, #4
 8005f0a:	2a00      	cmp	r2, #0
 8005f0c:	d1cc      	bne.n	8005ea8 <quorem+0x9c>
 8005f0e:	3c01      	subs	r4, #1
 8005f10:	e7c7      	b.n	8005ea2 <quorem+0x96>
 8005f12:	6812      	ldr	r2, [r2, #0]
 8005f14:	3b04      	subs	r3, #4
 8005f16:	2a00      	cmp	r2, #0
 8005f18:	d1f0      	bne.n	8005efc <quorem+0xf0>
 8005f1a:	3c01      	subs	r4, #1
 8005f1c:	e7eb      	b.n	8005ef6 <quorem+0xea>
 8005f1e:	2000      	movs	r0, #0
 8005f20:	e7ee      	b.n	8005f00 <quorem+0xf4>
 8005f22:	0000      	movs	r0, r0
 8005f24:	0000      	movs	r0, r0
	...

08005f28 <_dtoa_r>:
 8005f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f2c:	ed2d 8b04 	vpush	{d8-d9}
 8005f30:	ec57 6b10 	vmov	r6, r7, d0
 8005f34:	b093      	sub	sp, #76	; 0x4c
 8005f36:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005f38:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005f3c:	9106      	str	r1, [sp, #24]
 8005f3e:	ee10 aa10 	vmov	sl, s0
 8005f42:	4604      	mov	r4, r0
 8005f44:	9209      	str	r2, [sp, #36]	; 0x24
 8005f46:	930c      	str	r3, [sp, #48]	; 0x30
 8005f48:	46bb      	mov	fp, r7
 8005f4a:	b975      	cbnz	r5, 8005f6a <_dtoa_r+0x42>
 8005f4c:	2010      	movs	r0, #16
 8005f4e:	f000 fddd 	bl	8006b0c <malloc>
 8005f52:	4602      	mov	r2, r0
 8005f54:	6260      	str	r0, [r4, #36]	; 0x24
 8005f56:	b920      	cbnz	r0, 8005f62 <_dtoa_r+0x3a>
 8005f58:	4ba7      	ldr	r3, [pc, #668]	; (80061f8 <_dtoa_r+0x2d0>)
 8005f5a:	21ea      	movs	r1, #234	; 0xea
 8005f5c:	48a7      	ldr	r0, [pc, #668]	; (80061fc <_dtoa_r+0x2d4>)
 8005f5e:	f001 fa75 	bl	800744c <__assert_func>
 8005f62:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005f66:	6005      	str	r5, [r0, #0]
 8005f68:	60c5      	str	r5, [r0, #12]
 8005f6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f6c:	6819      	ldr	r1, [r3, #0]
 8005f6e:	b151      	cbz	r1, 8005f86 <_dtoa_r+0x5e>
 8005f70:	685a      	ldr	r2, [r3, #4]
 8005f72:	604a      	str	r2, [r1, #4]
 8005f74:	2301      	movs	r3, #1
 8005f76:	4093      	lsls	r3, r2
 8005f78:	608b      	str	r3, [r1, #8]
 8005f7a:	4620      	mov	r0, r4
 8005f7c:	f000 fe1c 	bl	8006bb8 <_Bfree>
 8005f80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f82:	2200      	movs	r2, #0
 8005f84:	601a      	str	r2, [r3, #0]
 8005f86:	1e3b      	subs	r3, r7, #0
 8005f88:	bfaa      	itet	ge
 8005f8a:	2300      	movge	r3, #0
 8005f8c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8005f90:	f8c8 3000 	strge.w	r3, [r8]
 8005f94:	4b9a      	ldr	r3, [pc, #616]	; (8006200 <_dtoa_r+0x2d8>)
 8005f96:	bfbc      	itt	lt
 8005f98:	2201      	movlt	r2, #1
 8005f9a:	f8c8 2000 	strlt.w	r2, [r8]
 8005f9e:	ea33 030b 	bics.w	r3, r3, fp
 8005fa2:	d11b      	bne.n	8005fdc <_dtoa_r+0xb4>
 8005fa4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005fa6:	f242 730f 	movw	r3, #9999	; 0x270f
 8005faa:	6013      	str	r3, [r2, #0]
 8005fac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005fb0:	4333      	orrs	r3, r6
 8005fb2:	f000 8592 	beq.w	8006ada <_dtoa_r+0xbb2>
 8005fb6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005fb8:	b963      	cbnz	r3, 8005fd4 <_dtoa_r+0xac>
 8005fba:	4b92      	ldr	r3, [pc, #584]	; (8006204 <_dtoa_r+0x2dc>)
 8005fbc:	e022      	b.n	8006004 <_dtoa_r+0xdc>
 8005fbe:	4b92      	ldr	r3, [pc, #584]	; (8006208 <_dtoa_r+0x2e0>)
 8005fc0:	9301      	str	r3, [sp, #4]
 8005fc2:	3308      	adds	r3, #8
 8005fc4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005fc6:	6013      	str	r3, [r2, #0]
 8005fc8:	9801      	ldr	r0, [sp, #4]
 8005fca:	b013      	add	sp, #76	; 0x4c
 8005fcc:	ecbd 8b04 	vpop	{d8-d9}
 8005fd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fd4:	4b8b      	ldr	r3, [pc, #556]	; (8006204 <_dtoa_r+0x2dc>)
 8005fd6:	9301      	str	r3, [sp, #4]
 8005fd8:	3303      	adds	r3, #3
 8005fda:	e7f3      	b.n	8005fc4 <_dtoa_r+0x9c>
 8005fdc:	2200      	movs	r2, #0
 8005fde:	2300      	movs	r3, #0
 8005fe0:	4650      	mov	r0, sl
 8005fe2:	4659      	mov	r1, fp
 8005fe4:	f7fa fd70 	bl	8000ac8 <__aeabi_dcmpeq>
 8005fe8:	ec4b ab19 	vmov	d9, sl, fp
 8005fec:	4680      	mov	r8, r0
 8005fee:	b158      	cbz	r0, 8006008 <_dtoa_r+0xe0>
 8005ff0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	6013      	str	r3, [r2, #0]
 8005ff6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	f000 856b 	beq.w	8006ad4 <_dtoa_r+0xbac>
 8005ffe:	4883      	ldr	r0, [pc, #524]	; (800620c <_dtoa_r+0x2e4>)
 8006000:	6018      	str	r0, [r3, #0]
 8006002:	1e43      	subs	r3, r0, #1
 8006004:	9301      	str	r3, [sp, #4]
 8006006:	e7df      	b.n	8005fc8 <_dtoa_r+0xa0>
 8006008:	ec4b ab10 	vmov	d0, sl, fp
 800600c:	aa10      	add	r2, sp, #64	; 0x40
 800600e:	a911      	add	r1, sp, #68	; 0x44
 8006010:	4620      	mov	r0, r4
 8006012:	f001 f8b9 	bl	8007188 <__d2b>
 8006016:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800601a:	ee08 0a10 	vmov	s16, r0
 800601e:	2d00      	cmp	r5, #0
 8006020:	f000 8084 	beq.w	800612c <_dtoa_r+0x204>
 8006024:	ee19 3a90 	vmov	r3, s19
 8006028:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800602c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006030:	4656      	mov	r6, sl
 8006032:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006036:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800603a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800603e:	4b74      	ldr	r3, [pc, #464]	; (8006210 <_dtoa_r+0x2e8>)
 8006040:	2200      	movs	r2, #0
 8006042:	4630      	mov	r0, r6
 8006044:	4639      	mov	r1, r7
 8006046:	f7fa f91f 	bl	8000288 <__aeabi_dsub>
 800604a:	a365      	add	r3, pc, #404	; (adr r3, 80061e0 <_dtoa_r+0x2b8>)
 800604c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006050:	f7fa fad2 	bl	80005f8 <__aeabi_dmul>
 8006054:	a364      	add	r3, pc, #400	; (adr r3, 80061e8 <_dtoa_r+0x2c0>)
 8006056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800605a:	f7fa f917 	bl	800028c <__adddf3>
 800605e:	4606      	mov	r6, r0
 8006060:	4628      	mov	r0, r5
 8006062:	460f      	mov	r7, r1
 8006064:	f7fa fa5e 	bl	8000524 <__aeabi_i2d>
 8006068:	a361      	add	r3, pc, #388	; (adr r3, 80061f0 <_dtoa_r+0x2c8>)
 800606a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800606e:	f7fa fac3 	bl	80005f8 <__aeabi_dmul>
 8006072:	4602      	mov	r2, r0
 8006074:	460b      	mov	r3, r1
 8006076:	4630      	mov	r0, r6
 8006078:	4639      	mov	r1, r7
 800607a:	f7fa f907 	bl	800028c <__adddf3>
 800607e:	4606      	mov	r6, r0
 8006080:	460f      	mov	r7, r1
 8006082:	f7fa fd69 	bl	8000b58 <__aeabi_d2iz>
 8006086:	2200      	movs	r2, #0
 8006088:	9000      	str	r0, [sp, #0]
 800608a:	2300      	movs	r3, #0
 800608c:	4630      	mov	r0, r6
 800608e:	4639      	mov	r1, r7
 8006090:	f7fa fd24 	bl	8000adc <__aeabi_dcmplt>
 8006094:	b150      	cbz	r0, 80060ac <_dtoa_r+0x184>
 8006096:	9800      	ldr	r0, [sp, #0]
 8006098:	f7fa fa44 	bl	8000524 <__aeabi_i2d>
 800609c:	4632      	mov	r2, r6
 800609e:	463b      	mov	r3, r7
 80060a0:	f7fa fd12 	bl	8000ac8 <__aeabi_dcmpeq>
 80060a4:	b910      	cbnz	r0, 80060ac <_dtoa_r+0x184>
 80060a6:	9b00      	ldr	r3, [sp, #0]
 80060a8:	3b01      	subs	r3, #1
 80060aa:	9300      	str	r3, [sp, #0]
 80060ac:	9b00      	ldr	r3, [sp, #0]
 80060ae:	2b16      	cmp	r3, #22
 80060b0:	d85a      	bhi.n	8006168 <_dtoa_r+0x240>
 80060b2:	9a00      	ldr	r2, [sp, #0]
 80060b4:	4b57      	ldr	r3, [pc, #348]	; (8006214 <_dtoa_r+0x2ec>)
 80060b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80060ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060be:	ec51 0b19 	vmov	r0, r1, d9
 80060c2:	f7fa fd0b 	bl	8000adc <__aeabi_dcmplt>
 80060c6:	2800      	cmp	r0, #0
 80060c8:	d050      	beq.n	800616c <_dtoa_r+0x244>
 80060ca:	9b00      	ldr	r3, [sp, #0]
 80060cc:	3b01      	subs	r3, #1
 80060ce:	9300      	str	r3, [sp, #0]
 80060d0:	2300      	movs	r3, #0
 80060d2:	930b      	str	r3, [sp, #44]	; 0x2c
 80060d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80060d6:	1b5d      	subs	r5, r3, r5
 80060d8:	1e6b      	subs	r3, r5, #1
 80060da:	9305      	str	r3, [sp, #20]
 80060dc:	bf45      	ittet	mi
 80060de:	f1c5 0301 	rsbmi	r3, r5, #1
 80060e2:	9304      	strmi	r3, [sp, #16]
 80060e4:	2300      	movpl	r3, #0
 80060e6:	2300      	movmi	r3, #0
 80060e8:	bf4c      	ite	mi
 80060ea:	9305      	strmi	r3, [sp, #20]
 80060ec:	9304      	strpl	r3, [sp, #16]
 80060ee:	9b00      	ldr	r3, [sp, #0]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	db3d      	blt.n	8006170 <_dtoa_r+0x248>
 80060f4:	9b05      	ldr	r3, [sp, #20]
 80060f6:	9a00      	ldr	r2, [sp, #0]
 80060f8:	920a      	str	r2, [sp, #40]	; 0x28
 80060fa:	4413      	add	r3, r2
 80060fc:	9305      	str	r3, [sp, #20]
 80060fe:	2300      	movs	r3, #0
 8006100:	9307      	str	r3, [sp, #28]
 8006102:	9b06      	ldr	r3, [sp, #24]
 8006104:	2b09      	cmp	r3, #9
 8006106:	f200 8089 	bhi.w	800621c <_dtoa_r+0x2f4>
 800610a:	2b05      	cmp	r3, #5
 800610c:	bfc4      	itt	gt
 800610e:	3b04      	subgt	r3, #4
 8006110:	9306      	strgt	r3, [sp, #24]
 8006112:	9b06      	ldr	r3, [sp, #24]
 8006114:	f1a3 0302 	sub.w	r3, r3, #2
 8006118:	bfcc      	ite	gt
 800611a:	2500      	movgt	r5, #0
 800611c:	2501      	movle	r5, #1
 800611e:	2b03      	cmp	r3, #3
 8006120:	f200 8087 	bhi.w	8006232 <_dtoa_r+0x30a>
 8006124:	e8df f003 	tbb	[pc, r3]
 8006128:	59383a2d 	.word	0x59383a2d
 800612c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006130:	441d      	add	r5, r3
 8006132:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006136:	2b20      	cmp	r3, #32
 8006138:	bfc1      	itttt	gt
 800613a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800613e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006142:	fa0b f303 	lslgt.w	r3, fp, r3
 8006146:	fa26 f000 	lsrgt.w	r0, r6, r0
 800614a:	bfda      	itte	le
 800614c:	f1c3 0320 	rsble	r3, r3, #32
 8006150:	fa06 f003 	lslle.w	r0, r6, r3
 8006154:	4318      	orrgt	r0, r3
 8006156:	f7fa f9d5 	bl	8000504 <__aeabi_ui2d>
 800615a:	2301      	movs	r3, #1
 800615c:	4606      	mov	r6, r0
 800615e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006162:	3d01      	subs	r5, #1
 8006164:	930e      	str	r3, [sp, #56]	; 0x38
 8006166:	e76a      	b.n	800603e <_dtoa_r+0x116>
 8006168:	2301      	movs	r3, #1
 800616a:	e7b2      	b.n	80060d2 <_dtoa_r+0x1aa>
 800616c:	900b      	str	r0, [sp, #44]	; 0x2c
 800616e:	e7b1      	b.n	80060d4 <_dtoa_r+0x1ac>
 8006170:	9b04      	ldr	r3, [sp, #16]
 8006172:	9a00      	ldr	r2, [sp, #0]
 8006174:	1a9b      	subs	r3, r3, r2
 8006176:	9304      	str	r3, [sp, #16]
 8006178:	4253      	negs	r3, r2
 800617a:	9307      	str	r3, [sp, #28]
 800617c:	2300      	movs	r3, #0
 800617e:	930a      	str	r3, [sp, #40]	; 0x28
 8006180:	e7bf      	b.n	8006102 <_dtoa_r+0x1da>
 8006182:	2300      	movs	r3, #0
 8006184:	9308      	str	r3, [sp, #32]
 8006186:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006188:	2b00      	cmp	r3, #0
 800618a:	dc55      	bgt.n	8006238 <_dtoa_r+0x310>
 800618c:	2301      	movs	r3, #1
 800618e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006192:	461a      	mov	r2, r3
 8006194:	9209      	str	r2, [sp, #36]	; 0x24
 8006196:	e00c      	b.n	80061b2 <_dtoa_r+0x28a>
 8006198:	2301      	movs	r3, #1
 800619a:	e7f3      	b.n	8006184 <_dtoa_r+0x25c>
 800619c:	2300      	movs	r3, #0
 800619e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80061a0:	9308      	str	r3, [sp, #32]
 80061a2:	9b00      	ldr	r3, [sp, #0]
 80061a4:	4413      	add	r3, r2
 80061a6:	9302      	str	r3, [sp, #8]
 80061a8:	3301      	adds	r3, #1
 80061aa:	2b01      	cmp	r3, #1
 80061ac:	9303      	str	r3, [sp, #12]
 80061ae:	bfb8      	it	lt
 80061b0:	2301      	movlt	r3, #1
 80061b2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80061b4:	2200      	movs	r2, #0
 80061b6:	6042      	str	r2, [r0, #4]
 80061b8:	2204      	movs	r2, #4
 80061ba:	f102 0614 	add.w	r6, r2, #20
 80061be:	429e      	cmp	r6, r3
 80061c0:	6841      	ldr	r1, [r0, #4]
 80061c2:	d93d      	bls.n	8006240 <_dtoa_r+0x318>
 80061c4:	4620      	mov	r0, r4
 80061c6:	f000 fcb7 	bl	8006b38 <_Balloc>
 80061ca:	9001      	str	r0, [sp, #4]
 80061cc:	2800      	cmp	r0, #0
 80061ce:	d13b      	bne.n	8006248 <_dtoa_r+0x320>
 80061d0:	4b11      	ldr	r3, [pc, #68]	; (8006218 <_dtoa_r+0x2f0>)
 80061d2:	4602      	mov	r2, r0
 80061d4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80061d8:	e6c0      	b.n	8005f5c <_dtoa_r+0x34>
 80061da:	2301      	movs	r3, #1
 80061dc:	e7df      	b.n	800619e <_dtoa_r+0x276>
 80061de:	bf00      	nop
 80061e0:	636f4361 	.word	0x636f4361
 80061e4:	3fd287a7 	.word	0x3fd287a7
 80061e8:	8b60c8b3 	.word	0x8b60c8b3
 80061ec:	3fc68a28 	.word	0x3fc68a28
 80061f0:	509f79fb 	.word	0x509f79fb
 80061f4:	3fd34413 	.word	0x3fd34413
 80061f8:	08008041 	.word	0x08008041
 80061fc:	08008058 	.word	0x08008058
 8006200:	7ff00000 	.word	0x7ff00000
 8006204:	0800803d 	.word	0x0800803d
 8006208:	08008034 	.word	0x08008034
 800620c:	08008011 	.word	0x08008011
 8006210:	3ff80000 	.word	0x3ff80000
 8006214:	08008148 	.word	0x08008148
 8006218:	080080b3 	.word	0x080080b3
 800621c:	2501      	movs	r5, #1
 800621e:	2300      	movs	r3, #0
 8006220:	9306      	str	r3, [sp, #24]
 8006222:	9508      	str	r5, [sp, #32]
 8006224:	f04f 33ff 	mov.w	r3, #4294967295
 8006228:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800622c:	2200      	movs	r2, #0
 800622e:	2312      	movs	r3, #18
 8006230:	e7b0      	b.n	8006194 <_dtoa_r+0x26c>
 8006232:	2301      	movs	r3, #1
 8006234:	9308      	str	r3, [sp, #32]
 8006236:	e7f5      	b.n	8006224 <_dtoa_r+0x2fc>
 8006238:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800623a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800623e:	e7b8      	b.n	80061b2 <_dtoa_r+0x28a>
 8006240:	3101      	adds	r1, #1
 8006242:	6041      	str	r1, [r0, #4]
 8006244:	0052      	lsls	r2, r2, #1
 8006246:	e7b8      	b.n	80061ba <_dtoa_r+0x292>
 8006248:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800624a:	9a01      	ldr	r2, [sp, #4]
 800624c:	601a      	str	r2, [r3, #0]
 800624e:	9b03      	ldr	r3, [sp, #12]
 8006250:	2b0e      	cmp	r3, #14
 8006252:	f200 809d 	bhi.w	8006390 <_dtoa_r+0x468>
 8006256:	2d00      	cmp	r5, #0
 8006258:	f000 809a 	beq.w	8006390 <_dtoa_r+0x468>
 800625c:	9b00      	ldr	r3, [sp, #0]
 800625e:	2b00      	cmp	r3, #0
 8006260:	dd32      	ble.n	80062c8 <_dtoa_r+0x3a0>
 8006262:	4ab7      	ldr	r2, [pc, #732]	; (8006540 <_dtoa_r+0x618>)
 8006264:	f003 030f 	and.w	r3, r3, #15
 8006268:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800626c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006270:	9b00      	ldr	r3, [sp, #0]
 8006272:	05d8      	lsls	r0, r3, #23
 8006274:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006278:	d516      	bpl.n	80062a8 <_dtoa_r+0x380>
 800627a:	4bb2      	ldr	r3, [pc, #712]	; (8006544 <_dtoa_r+0x61c>)
 800627c:	ec51 0b19 	vmov	r0, r1, d9
 8006280:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006284:	f7fa fae2 	bl	800084c <__aeabi_ddiv>
 8006288:	f007 070f 	and.w	r7, r7, #15
 800628c:	4682      	mov	sl, r0
 800628e:	468b      	mov	fp, r1
 8006290:	2503      	movs	r5, #3
 8006292:	4eac      	ldr	r6, [pc, #688]	; (8006544 <_dtoa_r+0x61c>)
 8006294:	b957      	cbnz	r7, 80062ac <_dtoa_r+0x384>
 8006296:	4642      	mov	r2, r8
 8006298:	464b      	mov	r3, r9
 800629a:	4650      	mov	r0, sl
 800629c:	4659      	mov	r1, fp
 800629e:	f7fa fad5 	bl	800084c <__aeabi_ddiv>
 80062a2:	4682      	mov	sl, r0
 80062a4:	468b      	mov	fp, r1
 80062a6:	e028      	b.n	80062fa <_dtoa_r+0x3d2>
 80062a8:	2502      	movs	r5, #2
 80062aa:	e7f2      	b.n	8006292 <_dtoa_r+0x36a>
 80062ac:	07f9      	lsls	r1, r7, #31
 80062ae:	d508      	bpl.n	80062c2 <_dtoa_r+0x39a>
 80062b0:	4640      	mov	r0, r8
 80062b2:	4649      	mov	r1, r9
 80062b4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80062b8:	f7fa f99e 	bl	80005f8 <__aeabi_dmul>
 80062bc:	3501      	adds	r5, #1
 80062be:	4680      	mov	r8, r0
 80062c0:	4689      	mov	r9, r1
 80062c2:	107f      	asrs	r7, r7, #1
 80062c4:	3608      	adds	r6, #8
 80062c6:	e7e5      	b.n	8006294 <_dtoa_r+0x36c>
 80062c8:	f000 809b 	beq.w	8006402 <_dtoa_r+0x4da>
 80062cc:	9b00      	ldr	r3, [sp, #0]
 80062ce:	4f9d      	ldr	r7, [pc, #628]	; (8006544 <_dtoa_r+0x61c>)
 80062d0:	425e      	negs	r6, r3
 80062d2:	4b9b      	ldr	r3, [pc, #620]	; (8006540 <_dtoa_r+0x618>)
 80062d4:	f006 020f 	and.w	r2, r6, #15
 80062d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80062dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062e0:	ec51 0b19 	vmov	r0, r1, d9
 80062e4:	f7fa f988 	bl	80005f8 <__aeabi_dmul>
 80062e8:	1136      	asrs	r6, r6, #4
 80062ea:	4682      	mov	sl, r0
 80062ec:	468b      	mov	fp, r1
 80062ee:	2300      	movs	r3, #0
 80062f0:	2502      	movs	r5, #2
 80062f2:	2e00      	cmp	r6, #0
 80062f4:	d17a      	bne.n	80063ec <_dtoa_r+0x4c4>
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d1d3      	bne.n	80062a2 <_dtoa_r+0x37a>
 80062fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	f000 8082 	beq.w	8006406 <_dtoa_r+0x4de>
 8006302:	4b91      	ldr	r3, [pc, #580]	; (8006548 <_dtoa_r+0x620>)
 8006304:	2200      	movs	r2, #0
 8006306:	4650      	mov	r0, sl
 8006308:	4659      	mov	r1, fp
 800630a:	f7fa fbe7 	bl	8000adc <__aeabi_dcmplt>
 800630e:	2800      	cmp	r0, #0
 8006310:	d079      	beq.n	8006406 <_dtoa_r+0x4de>
 8006312:	9b03      	ldr	r3, [sp, #12]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d076      	beq.n	8006406 <_dtoa_r+0x4de>
 8006318:	9b02      	ldr	r3, [sp, #8]
 800631a:	2b00      	cmp	r3, #0
 800631c:	dd36      	ble.n	800638c <_dtoa_r+0x464>
 800631e:	9b00      	ldr	r3, [sp, #0]
 8006320:	4650      	mov	r0, sl
 8006322:	4659      	mov	r1, fp
 8006324:	1e5f      	subs	r7, r3, #1
 8006326:	2200      	movs	r2, #0
 8006328:	4b88      	ldr	r3, [pc, #544]	; (800654c <_dtoa_r+0x624>)
 800632a:	f7fa f965 	bl	80005f8 <__aeabi_dmul>
 800632e:	9e02      	ldr	r6, [sp, #8]
 8006330:	4682      	mov	sl, r0
 8006332:	468b      	mov	fp, r1
 8006334:	3501      	adds	r5, #1
 8006336:	4628      	mov	r0, r5
 8006338:	f7fa f8f4 	bl	8000524 <__aeabi_i2d>
 800633c:	4652      	mov	r2, sl
 800633e:	465b      	mov	r3, fp
 8006340:	f7fa f95a 	bl	80005f8 <__aeabi_dmul>
 8006344:	4b82      	ldr	r3, [pc, #520]	; (8006550 <_dtoa_r+0x628>)
 8006346:	2200      	movs	r2, #0
 8006348:	f7f9 ffa0 	bl	800028c <__adddf3>
 800634c:	46d0      	mov	r8, sl
 800634e:	46d9      	mov	r9, fp
 8006350:	4682      	mov	sl, r0
 8006352:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8006356:	2e00      	cmp	r6, #0
 8006358:	d158      	bne.n	800640c <_dtoa_r+0x4e4>
 800635a:	4b7e      	ldr	r3, [pc, #504]	; (8006554 <_dtoa_r+0x62c>)
 800635c:	2200      	movs	r2, #0
 800635e:	4640      	mov	r0, r8
 8006360:	4649      	mov	r1, r9
 8006362:	f7f9 ff91 	bl	8000288 <__aeabi_dsub>
 8006366:	4652      	mov	r2, sl
 8006368:	465b      	mov	r3, fp
 800636a:	4680      	mov	r8, r0
 800636c:	4689      	mov	r9, r1
 800636e:	f7fa fbd3 	bl	8000b18 <__aeabi_dcmpgt>
 8006372:	2800      	cmp	r0, #0
 8006374:	f040 8295 	bne.w	80068a2 <_dtoa_r+0x97a>
 8006378:	4652      	mov	r2, sl
 800637a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800637e:	4640      	mov	r0, r8
 8006380:	4649      	mov	r1, r9
 8006382:	f7fa fbab 	bl	8000adc <__aeabi_dcmplt>
 8006386:	2800      	cmp	r0, #0
 8006388:	f040 8289 	bne.w	800689e <_dtoa_r+0x976>
 800638c:	ec5b ab19 	vmov	sl, fp, d9
 8006390:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006392:	2b00      	cmp	r3, #0
 8006394:	f2c0 8148 	blt.w	8006628 <_dtoa_r+0x700>
 8006398:	9a00      	ldr	r2, [sp, #0]
 800639a:	2a0e      	cmp	r2, #14
 800639c:	f300 8144 	bgt.w	8006628 <_dtoa_r+0x700>
 80063a0:	4b67      	ldr	r3, [pc, #412]	; (8006540 <_dtoa_r+0x618>)
 80063a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80063a6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80063aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	f280 80d5 	bge.w	800655c <_dtoa_r+0x634>
 80063b2:	9b03      	ldr	r3, [sp, #12]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	f300 80d1 	bgt.w	800655c <_dtoa_r+0x634>
 80063ba:	f040 826f 	bne.w	800689c <_dtoa_r+0x974>
 80063be:	4b65      	ldr	r3, [pc, #404]	; (8006554 <_dtoa_r+0x62c>)
 80063c0:	2200      	movs	r2, #0
 80063c2:	4640      	mov	r0, r8
 80063c4:	4649      	mov	r1, r9
 80063c6:	f7fa f917 	bl	80005f8 <__aeabi_dmul>
 80063ca:	4652      	mov	r2, sl
 80063cc:	465b      	mov	r3, fp
 80063ce:	f7fa fb99 	bl	8000b04 <__aeabi_dcmpge>
 80063d2:	9e03      	ldr	r6, [sp, #12]
 80063d4:	4637      	mov	r7, r6
 80063d6:	2800      	cmp	r0, #0
 80063d8:	f040 8245 	bne.w	8006866 <_dtoa_r+0x93e>
 80063dc:	9d01      	ldr	r5, [sp, #4]
 80063de:	2331      	movs	r3, #49	; 0x31
 80063e0:	f805 3b01 	strb.w	r3, [r5], #1
 80063e4:	9b00      	ldr	r3, [sp, #0]
 80063e6:	3301      	adds	r3, #1
 80063e8:	9300      	str	r3, [sp, #0]
 80063ea:	e240      	b.n	800686e <_dtoa_r+0x946>
 80063ec:	07f2      	lsls	r2, r6, #31
 80063ee:	d505      	bpl.n	80063fc <_dtoa_r+0x4d4>
 80063f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063f4:	f7fa f900 	bl	80005f8 <__aeabi_dmul>
 80063f8:	3501      	adds	r5, #1
 80063fa:	2301      	movs	r3, #1
 80063fc:	1076      	asrs	r6, r6, #1
 80063fe:	3708      	adds	r7, #8
 8006400:	e777      	b.n	80062f2 <_dtoa_r+0x3ca>
 8006402:	2502      	movs	r5, #2
 8006404:	e779      	b.n	80062fa <_dtoa_r+0x3d2>
 8006406:	9f00      	ldr	r7, [sp, #0]
 8006408:	9e03      	ldr	r6, [sp, #12]
 800640a:	e794      	b.n	8006336 <_dtoa_r+0x40e>
 800640c:	9901      	ldr	r1, [sp, #4]
 800640e:	4b4c      	ldr	r3, [pc, #304]	; (8006540 <_dtoa_r+0x618>)
 8006410:	4431      	add	r1, r6
 8006412:	910d      	str	r1, [sp, #52]	; 0x34
 8006414:	9908      	ldr	r1, [sp, #32]
 8006416:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800641a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800641e:	2900      	cmp	r1, #0
 8006420:	d043      	beq.n	80064aa <_dtoa_r+0x582>
 8006422:	494d      	ldr	r1, [pc, #308]	; (8006558 <_dtoa_r+0x630>)
 8006424:	2000      	movs	r0, #0
 8006426:	f7fa fa11 	bl	800084c <__aeabi_ddiv>
 800642a:	4652      	mov	r2, sl
 800642c:	465b      	mov	r3, fp
 800642e:	f7f9 ff2b 	bl	8000288 <__aeabi_dsub>
 8006432:	9d01      	ldr	r5, [sp, #4]
 8006434:	4682      	mov	sl, r0
 8006436:	468b      	mov	fp, r1
 8006438:	4649      	mov	r1, r9
 800643a:	4640      	mov	r0, r8
 800643c:	f7fa fb8c 	bl	8000b58 <__aeabi_d2iz>
 8006440:	4606      	mov	r6, r0
 8006442:	f7fa f86f 	bl	8000524 <__aeabi_i2d>
 8006446:	4602      	mov	r2, r0
 8006448:	460b      	mov	r3, r1
 800644a:	4640      	mov	r0, r8
 800644c:	4649      	mov	r1, r9
 800644e:	f7f9 ff1b 	bl	8000288 <__aeabi_dsub>
 8006452:	3630      	adds	r6, #48	; 0x30
 8006454:	f805 6b01 	strb.w	r6, [r5], #1
 8006458:	4652      	mov	r2, sl
 800645a:	465b      	mov	r3, fp
 800645c:	4680      	mov	r8, r0
 800645e:	4689      	mov	r9, r1
 8006460:	f7fa fb3c 	bl	8000adc <__aeabi_dcmplt>
 8006464:	2800      	cmp	r0, #0
 8006466:	d163      	bne.n	8006530 <_dtoa_r+0x608>
 8006468:	4642      	mov	r2, r8
 800646a:	464b      	mov	r3, r9
 800646c:	4936      	ldr	r1, [pc, #216]	; (8006548 <_dtoa_r+0x620>)
 800646e:	2000      	movs	r0, #0
 8006470:	f7f9 ff0a 	bl	8000288 <__aeabi_dsub>
 8006474:	4652      	mov	r2, sl
 8006476:	465b      	mov	r3, fp
 8006478:	f7fa fb30 	bl	8000adc <__aeabi_dcmplt>
 800647c:	2800      	cmp	r0, #0
 800647e:	f040 80b5 	bne.w	80065ec <_dtoa_r+0x6c4>
 8006482:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006484:	429d      	cmp	r5, r3
 8006486:	d081      	beq.n	800638c <_dtoa_r+0x464>
 8006488:	4b30      	ldr	r3, [pc, #192]	; (800654c <_dtoa_r+0x624>)
 800648a:	2200      	movs	r2, #0
 800648c:	4650      	mov	r0, sl
 800648e:	4659      	mov	r1, fp
 8006490:	f7fa f8b2 	bl	80005f8 <__aeabi_dmul>
 8006494:	4b2d      	ldr	r3, [pc, #180]	; (800654c <_dtoa_r+0x624>)
 8006496:	4682      	mov	sl, r0
 8006498:	468b      	mov	fp, r1
 800649a:	4640      	mov	r0, r8
 800649c:	4649      	mov	r1, r9
 800649e:	2200      	movs	r2, #0
 80064a0:	f7fa f8aa 	bl	80005f8 <__aeabi_dmul>
 80064a4:	4680      	mov	r8, r0
 80064a6:	4689      	mov	r9, r1
 80064a8:	e7c6      	b.n	8006438 <_dtoa_r+0x510>
 80064aa:	4650      	mov	r0, sl
 80064ac:	4659      	mov	r1, fp
 80064ae:	f7fa f8a3 	bl	80005f8 <__aeabi_dmul>
 80064b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80064b4:	9d01      	ldr	r5, [sp, #4]
 80064b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80064b8:	4682      	mov	sl, r0
 80064ba:	468b      	mov	fp, r1
 80064bc:	4649      	mov	r1, r9
 80064be:	4640      	mov	r0, r8
 80064c0:	f7fa fb4a 	bl	8000b58 <__aeabi_d2iz>
 80064c4:	4606      	mov	r6, r0
 80064c6:	f7fa f82d 	bl	8000524 <__aeabi_i2d>
 80064ca:	3630      	adds	r6, #48	; 0x30
 80064cc:	4602      	mov	r2, r0
 80064ce:	460b      	mov	r3, r1
 80064d0:	4640      	mov	r0, r8
 80064d2:	4649      	mov	r1, r9
 80064d4:	f7f9 fed8 	bl	8000288 <__aeabi_dsub>
 80064d8:	f805 6b01 	strb.w	r6, [r5], #1
 80064dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80064de:	429d      	cmp	r5, r3
 80064e0:	4680      	mov	r8, r0
 80064e2:	4689      	mov	r9, r1
 80064e4:	f04f 0200 	mov.w	r2, #0
 80064e8:	d124      	bne.n	8006534 <_dtoa_r+0x60c>
 80064ea:	4b1b      	ldr	r3, [pc, #108]	; (8006558 <_dtoa_r+0x630>)
 80064ec:	4650      	mov	r0, sl
 80064ee:	4659      	mov	r1, fp
 80064f0:	f7f9 fecc 	bl	800028c <__adddf3>
 80064f4:	4602      	mov	r2, r0
 80064f6:	460b      	mov	r3, r1
 80064f8:	4640      	mov	r0, r8
 80064fa:	4649      	mov	r1, r9
 80064fc:	f7fa fb0c 	bl	8000b18 <__aeabi_dcmpgt>
 8006500:	2800      	cmp	r0, #0
 8006502:	d173      	bne.n	80065ec <_dtoa_r+0x6c4>
 8006504:	4652      	mov	r2, sl
 8006506:	465b      	mov	r3, fp
 8006508:	4913      	ldr	r1, [pc, #76]	; (8006558 <_dtoa_r+0x630>)
 800650a:	2000      	movs	r0, #0
 800650c:	f7f9 febc 	bl	8000288 <__aeabi_dsub>
 8006510:	4602      	mov	r2, r0
 8006512:	460b      	mov	r3, r1
 8006514:	4640      	mov	r0, r8
 8006516:	4649      	mov	r1, r9
 8006518:	f7fa fae0 	bl	8000adc <__aeabi_dcmplt>
 800651c:	2800      	cmp	r0, #0
 800651e:	f43f af35 	beq.w	800638c <_dtoa_r+0x464>
 8006522:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006524:	1e6b      	subs	r3, r5, #1
 8006526:	930f      	str	r3, [sp, #60]	; 0x3c
 8006528:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800652c:	2b30      	cmp	r3, #48	; 0x30
 800652e:	d0f8      	beq.n	8006522 <_dtoa_r+0x5fa>
 8006530:	9700      	str	r7, [sp, #0]
 8006532:	e049      	b.n	80065c8 <_dtoa_r+0x6a0>
 8006534:	4b05      	ldr	r3, [pc, #20]	; (800654c <_dtoa_r+0x624>)
 8006536:	f7fa f85f 	bl	80005f8 <__aeabi_dmul>
 800653a:	4680      	mov	r8, r0
 800653c:	4689      	mov	r9, r1
 800653e:	e7bd      	b.n	80064bc <_dtoa_r+0x594>
 8006540:	08008148 	.word	0x08008148
 8006544:	08008120 	.word	0x08008120
 8006548:	3ff00000 	.word	0x3ff00000
 800654c:	40240000 	.word	0x40240000
 8006550:	401c0000 	.word	0x401c0000
 8006554:	40140000 	.word	0x40140000
 8006558:	3fe00000 	.word	0x3fe00000
 800655c:	9d01      	ldr	r5, [sp, #4]
 800655e:	4656      	mov	r6, sl
 8006560:	465f      	mov	r7, fp
 8006562:	4642      	mov	r2, r8
 8006564:	464b      	mov	r3, r9
 8006566:	4630      	mov	r0, r6
 8006568:	4639      	mov	r1, r7
 800656a:	f7fa f96f 	bl	800084c <__aeabi_ddiv>
 800656e:	f7fa faf3 	bl	8000b58 <__aeabi_d2iz>
 8006572:	4682      	mov	sl, r0
 8006574:	f7f9 ffd6 	bl	8000524 <__aeabi_i2d>
 8006578:	4642      	mov	r2, r8
 800657a:	464b      	mov	r3, r9
 800657c:	f7fa f83c 	bl	80005f8 <__aeabi_dmul>
 8006580:	4602      	mov	r2, r0
 8006582:	460b      	mov	r3, r1
 8006584:	4630      	mov	r0, r6
 8006586:	4639      	mov	r1, r7
 8006588:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800658c:	f7f9 fe7c 	bl	8000288 <__aeabi_dsub>
 8006590:	f805 6b01 	strb.w	r6, [r5], #1
 8006594:	9e01      	ldr	r6, [sp, #4]
 8006596:	9f03      	ldr	r7, [sp, #12]
 8006598:	1bae      	subs	r6, r5, r6
 800659a:	42b7      	cmp	r7, r6
 800659c:	4602      	mov	r2, r0
 800659e:	460b      	mov	r3, r1
 80065a0:	d135      	bne.n	800660e <_dtoa_r+0x6e6>
 80065a2:	f7f9 fe73 	bl	800028c <__adddf3>
 80065a6:	4642      	mov	r2, r8
 80065a8:	464b      	mov	r3, r9
 80065aa:	4606      	mov	r6, r0
 80065ac:	460f      	mov	r7, r1
 80065ae:	f7fa fab3 	bl	8000b18 <__aeabi_dcmpgt>
 80065b2:	b9d0      	cbnz	r0, 80065ea <_dtoa_r+0x6c2>
 80065b4:	4642      	mov	r2, r8
 80065b6:	464b      	mov	r3, r9
 80065b8:	4630      	mov	r0, r6
 80065ba:	4639      	mov	r1, r7
 80065bc:	f7fa fa84 	bl	8000ac8 <__aeabi_dcmpeq>
 80065c0:	b110      	cbz	r0, 80065c8 <_dtoa_r+0x6a0>
 80065c2:	f01a 0f01 	tst.w	sl, #1
 80065c6:	d110      	bne.n	80065ea <_dtoa_r+0x6c2>
 80065c8:	4620      	mov	r0, r4
 80065ca:	ee18 1a10 	vmov	r1, s16
 80065ce:	f000 faf3 	bl	8006bb8 <_Bfree>
 80065d2:	2300      	movs	r3, #0
 80065d4:	9800      	ldr	r0, [sp, #0]
 80065d6:	702b      	strb	r3, [r5, #0]
 80065d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80065da:	3001      	adds	r0, #1
 80065dc:	6018      	str	r0, [r3, #0]
 80065de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	f43f acf1 	beq.w	8005fc8 <_dtoa_r+0xa0>
 80065e6:	601d      	str	r5, [r3, #0]
 80065e8:	e4ee      	b.n	8005fc8 <_dtoa_r+0xa0>
 80065ea:	9f00      	ldr	r7, [sp, #0]
 80065ec:	462b      	mov	r3, r5
 80065ee:	461d      	mov	r5, r3
 80065f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80065f4:	2a39      	cmp	r2, #57	; 0x39
 80065f6:	d106      	bne.n	8006606 <_dtoa_r+0x6de>
 80065f8:	9a01      	ldr	r2, [sp, #4]
 80065fa:	429a      	cmp	r2, r3
 80065fc:	d1f7      	bne.n	80065ee <_dtoa_r+0x6c6>
 80065fe:	9901      	ldr	r1, [sp, #4]
 8006600:	2230      	movs	r2, #48	; 0x30
 8006602:	3701      	adds	r7, #1
 8006604:	700a      	strb	r2, [r1, #0]
 8006606:	781a      	ldrb	r2, [r3, #0]
 8006608:	3201      	adds	r2, #1
 800660a:	701a      	strb	r2, [r3, #0]
 800660c:	e790      	b.n	8006530 <_dtoa_r+0x608>
 800660e:	4ba6      	ldr	r3, [pc, #664]	; (80068a8 <_dtoa_r+0x980>)
 8006610:	2200      	movs	r2, #0
 8006612:	f7f9 fff1 	bl	80005f8 <__aeabi_dmul>
 8006616:	2200      	movs	r2, #0
 8006618:	2300      	movs	r3, #0
 800661a:	4606      	mov	r6, r0
 800661c:	460f      	mov	r7, r1
 800661e:	f7fa fa53 	bl	8000ac8 <__aeabi_dcmpeq>
 8006622:	2800      	cmp	r0, #0
 8006624:	d09d      	beq.n	8006562 <_dtoa_r+0x63a>
 8006626:	e7cf      	b.n	80065c8 <_dtoa_r+0x6a0>
 8006628:	9a08      	ldr	r2, [sp, #32]
 800662a:	2a00      	cmp	r2, #0
 800662c:	f000 80d7 	beq.w	80067de <_dtoa_r+0x8b6>
 8006630:	9a06      	ldr	r2, [sp, #24]
 8006632:	2a01      	cmp	r2, #1
 8006634:	f300 80ba 	bgt.w	80067ac <_dtoa_r+0x884>
 8006638:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800663a:	2a00      	cmp	r2, #0
 800663c:	f000 80b2 	beq.w	80067a4 <_dtoa_r+0x87c>
 8006640:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006644:	9e07      	ldr	r6, [sp, #28]
 8006646:	9d04      	ldr	r5, [sp, #16]
 8006648:	9a04      	ldr	r2, [sp, #16]
 800664a:	441a      	add	r2, r3
 800664c:	9204      	str	r2, [sp, #16]
 800664e:	9a05      	ldr	r2, [sp, #20]
 8006650:	2101      	movs	r1, #1
 8006652:	441a      	add	r2, r3
 8006654:	4620      	mov	r0, r4
 8006656:	9205      	str	r2, [sp, #20]
 8006658:	f000 fb66 	bl	8006d28 <__i2b>
 800665c:	4607      	mov	r7, r0
 800665e:	2d00      	cmp	r5, #0
 8006660:	dd0c      	ble.n	800667c <_dtoa_r+0x754>
 8006662:	9b05      	ldr	r3, [sp, #20]
 8006664:	2b00      	cmp	r3, #0
 8006666:	dd09      	ble.n	800667c <_dtoa_r+0x754>
 8006668:	42ab      	cmp	r3, r5
 800666a:	9a04      	ldr	r2, [sp, #16]
 800666c:	bfa8      	it	ge
 800666e:	462b      	movge	r3, r5
 8006670:	1ad2      	subs	r2, r2, r3
 8006672:	9204      	str	r2, [sp, #16]
 8006674:	9a05      	ldr	r2, [sp, #20]
 8006676:	1aed      	subs	r5, r5, r3
 8006678:	1ad3      	subs	r3, r2, r3
 800667a:	9305      	str	r3, [sp, #20]
 800667c:	9b07      	ldr	r3, [sp, #28]
 800667e:	b31b      	cbz	r3, 80066c8 <_dtoa_r+0x7a0>
 8006680:	9b08      	ldr	r3, [sp, #32]
 8006682:	2b00      	cmp	r3, #0
 8006684:	f000 80af 	beq.w	80067e6 <_dtoa_r+0x8be>
 8006688:	2e00      	cmp	r6, #0
 800668a:	dd13      	ble.n	80066b4 <_dtoa_r+0x78c>
 800668c:	4639      	mov	r1, r7
 800668e:	4632      	mov	r2, r6
 8006690:	4620      	mov	r0, r4
 8006692:	f000 fc09 	bl	8006ea8 <__pow5mult>
 8006696:	ee18 2a10 	vmov	r2, s16
 800669a:	4601      	mov	r1, r0
 800669c:	4607      	mov	r7, r0
 800669e:	4620      	mov	r0, r4
 80066a0:	f000 fb58 	bl	8006d54 <__multiply>
 80066a4:	ee18 1a10 	vmov	r1, s16
 80066a8:	4680      	mov	r8, r0
 80066aa:	4620      	mov	r0, r4
 80066ac:	f000 fa84 	bl	8006bb8 <_Bfree>
 80066b0:	ee08 8a10 	vmov	s16, r8
 80066b4:	9b07      	ldr	r3, [sp, #28]
 80066b6:	1b9a      	subs	r2, r3, r6
 80066b8:	d006      	beq.n	80066c8 <_dtoa_r+0x7a0>
 80066ba:	ee18 1a10 	vmov	r1, s16
 80066be:	4620      	mov	r0, r4
 80066c0:	f000 fbf2 	bl	8006ea8 <__pow5mult>
 80066c4:	ee08 0a10 	vmov	s16, r0
 80066c8:	2101      	movs	r1, #1
 80066ca:	4620      	mov	r0, r4
 80066cc:	f000 fb2c 	bl	8006d28 <__i2b>
 80066d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	4606      	mov	r6, r0
 80066d6:	f340 8088 	ble.w	80067ea <_dtoa_r+0x8c2>
 80066da:	461a      	mov	r2, r3
 80066dc:	4601      	mov	r1, r0
 80066de:	4620      	mov	r0, r4
 80066e0:	f000 fbe2 	bl	8006ea8 <__pow5mult>
 80066e4:	9b06      	ldr	r3, [sp, #24]
 80066e6:	2b01      	cmp	r3, #1
 80066e8:	4606      	mov	r6, r0
 80066ea:	f340 8081 	ble.w	80067f0 <_dtoa_r+0x8c8>
 80066ee:	f04f 0800 	mov.w	r8, #0
 80066f2:	6933      	ldr	r3, [r6, #16]
 80066f4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80066f8:	6918      	ldr	r0, [r3, #16]
 80066fa:	f000 fac5 	bl	8006c88 <__hi0bits>
 80066fe:	f1c0 0020 	rsb	r0, r0, #32
 8006702:	9b05      	ldr	r3, [sp, #20]
 8006704:	4418      	add	r0, r3
 8006706:	f010 001f 	ands.w	r0, r0, #31
 800670a:	f000 8092 	beq.w	8006832 <_dtoa_r+0x90a>
 800670e:	f1c0 0320 	rsb	r3, r0, #32
 8006712:	2b04      	cmp	r3, #4
 8006714:	f340 808a 	ble.w	800682c <_dtoa_r+0x904>
 8006718:	f1c0 001c 	rsb	r0, r0, #28
 800671c:	9b04      	ldr	r3, [sp, #16]
 800671e:	4403      	add	r3, r0
 8006720:	9304      	str	r3, [sp, #16]
 8006722:	9b05      	ldr	r3, [sp, #20]
 8006724:	4403      	add	r3, r0
 8006726:	4405      	add	r5, r0
 8006728:	9305      	str	r3, [sp, #20]
 800672a:	9b04      	ldr	r3, [sp, #16]
 800672c:	2b00      	cmp	r3, #0
 800672e:	dd07      	ble.n	8006740 <_dtoa_r+0x818>
 8006730:	ee18 1a10 	vmov	r1, s16
 8006734:	461a      	mov	r2, r3
 8006736:	4620      	mov	r0, r4
 8006738:	f000 fc10 	bl	8006f5c <__lshift>
 800673c:	ee08 0a10 	vmov	s16, r0
 8006740:	9b05      	ldr	r3, [sp, #20]
 8006742:	2b00      	cmp	r3, #0
 8006744:	dd05      	ble.n	8006752 <_dtoa_r+0x82a>
 8006746:	4631      	mov	r1, r6
 8006748:	461a      	mov	r2, r3
 800674a:	4620      	mov	r0, r4
 800674c:	f000 fc06 	bl	8006f5c <__lshift>
 8006750:	4606      	mov	r6, r0
 8006752:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006754:	2b00      	cmp	r3, #0
 8006756:	d06e      	beq.n	8006836 <_dtoa_r+0x90e>
 8006758:	ee18 0a10 	vmov	r0, s16
 800675c:	4631      	mov	r1, r6
 800675e:	f000 fc6d 	bl	800703c <__mcmp>
 8006762:	2800      	cmp	r0, #0
 8006764:	da67      	bge.n	8006836 <_dtoa_r+0x90e>
 8006766:	9b00      	ldr	r3, [sp, #0]
 8006768:	3b01      	subs	r3, #1
 800676a:	ee18 1a10 	vmov	r1, s16
 800676e:	9300      	str	r3, [sp, #0]
 8006770:	220a      	movs	r2, #10
 8006772:	2300      	movs	r3, #0
 8006774:	4620      	mov	r0, r4
 8006776:	f000 fa41 	bl	8006bfc <__multadd>
 800677a:	9b08      	ldr	r3, [sp, #32]
 800677c:	ee08 0a10 	vmov	s16, r0
 8006780:	2b00      	cmp	r3, #0
 8006782:	f000 81b1 	beq.w	8006ae8 <_dtoa_r+0xbc0>
 8006786:	2300      	movs	r3, #0
 8006788:	4639      	mov	r1, r7
 800678a:	220a      	movs	r2, #10
 800678c:	4620      	mov	r0, r4
 800678e:	f000 fa35 	bl	8006bfc <__multadd>
 8006792:	9b02      	ldr	r3, [sp, #8]
 8006794:	2b00      	cmp	r3, #0
 8006796:	4607      	mov	r7, r0
 8006798:	f300 808e 	bgt.w	80068b8 <_dtoa_r+0x990>
 800679c:	9b06      	ldr	r3, [sp, #24]
 800679e:	2b02      	cmp	r3, #2
 80067a0:	dc51      	bgt.n	8006846 <_dtoa_r+0x91e>
 80067a2:	e089      	b.n	80068b8 <_dtoa_r+0x990>
 80067a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80067a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80067aa:	e74b      	b.n	8006644 <_dtoa_r+0x71c>
 80067ac:	9b03      	ldr	r3, [sp, #12]
 80067ae:	1e5e      	subs	r6, r3, #1
 80067b0:	9b07      	ldr	r3, [sp, #28]
 80067b2:	42b3      	cmp	r3, r6
 80067b4:	bfbf      	itttt	lt
 80067b6:	9b07      	ldrlt	r3, [sp, #28]
 80067b8:	9607      	strlt	r6, [sp, #28]
 80067ba:	1af2      	sublt	r2, r6, r3
 80067bc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80067be:	bfb6      	itet	lt
 80067c0:	189b      	addlt	r3, r3, r2
 80067c2:	1b9e      	subge	r6, r3, r6
 80067c4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80067c6:	9b03      	ldr	r3, [sp, #12]
 80067c8:	bfb8      	it	lt
 80067ca:	2600      	movlt	r6, #0
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	bfb7      	itett	lt
 80067d0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80067d4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80067d8:	1a9d      	sublt	r5, r3, r2
 80067da:	2300      	movlt	r3, #0
 80067dc:	e734      	b.n	8006648 <_dtoa_r+0x720>
 80067de:	9e07      	ldr	r6, [sp, #28]
 80067e0:	9d04      	ldr	r5, [sp, #16]
 80067e2:	9f08      	ldr	r7, [sp, #32]
 80067e4:	e73b      	b.n	800665e <_dtoa_r+0x736>
 80067e6:	9a07      	ldr	r2, [sp, #28]
 80067e8:	e767      	b.n	80066ba <_dtoa_r+0x792>
 80067ea:	9b06      	ldr	r3, [sp, #24]
 80067ec:	2b01      	cmp	r3, #1
 80067ee:	dc18      	bgt.n	8006822 <_dtoa_r+0x8fa>
 80067f0:	f1ba 0f00 	cmp.w	sl, #0
 80067f4:	d115      	bne.n	8006822 <_dtoa_r+0x8fa>
 80067f6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80067fa:	b993      	cbnz	r3, 8006822 <_dtoa_r+0x8fa>
 80067fc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006800:	0d1b      	lsrs	r3, r3, #20
 8006802:	051b      	lsls	r3, r3, #20
 8006804:	b183      	cbz	r3, 8006828 <_dtoa_r+0x900>
 8006806:	9b04      	ldr	r3, [sp, #16]
 8006808:	3301      	adds	r3, #1
 800680a:	9304      	str	r3, [sp, #16]
 800680c:	9b05      	ldr	r3, [sp, #20]
 800680e:	3301      	adds	r3, #1
 8006810:	9305      	str	r3, [sp, #20]
 8006812:	f04f 0801 	mov.w	r8, #1
 8006816:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006818:	2b00      	cmp	r3, #0
 800681a:	f47f af6a 	bne.w	80066f2 <_dtoa_r+0x7ca>
 800681e:	2001      	movs	r0, #1
 8006820:	e76f      	b.n	8006702 <_dtoa_r+0x7da>
 8006822:	f04f 0800 	mov.w	r8, #0
 8006826:	e7f6      	b.n	8006816 <_dtoa_r+0x8ee>
 8006828:	4698      	mov	r8, r3
 800682a:	e7f4      	b.n	8006816 <_dtoa_r+0x8ee>
 800682c:	f43f af7d 	beq.w	800672a <_dtoa_r+0x802>
 8006830:	4618      	mov	r0, r3
 8006832:	301c      	adds	r0, #28
 8006834:	e772      	b.n	800671c <_dtoa_r+0x7f4>
 8006836:	9b03      	ldr	r3, [sp, #12]
 8006838:	2b00      	cmp	r3, #0
 800683a:	dc37      	bgt.n	80068ac <_dtoa_r+0x984>
 800683c:	9b06      	ldr	r3, [sp, #24]
 800683e:	2b02      	cmp	r3, #2
 8006840:	dd34      	ble.n	80068ac <_dtoa_r+0x984>
 8006842:	9b03      	ldr	r3, [sp, #12]
 8006844:	9302      	str	r3, [sp, #8]
 8006846:	9b02      	ldr	r3, [sp, #8]
 8006848:	b96b      	cbnz	r3, 8006866 <_dtoa_r+0x93e>
 800684a:	4631      	mov	r1, r6
 800684c:	2205      	movs	r2, #5
 800684e:	4620      	mov	r0, r4
 8006850:	f000 f9d4 	bl	8006bfc <__multadd>
 8006854:	4601      	mov	r1, r0
 8006856:	4606      	mov	r6, r0
 8006858:	ee18 0a10 	vmov	r0, s16
 800685c:	f000 fbee 	bl	800703c <__mcmp>
 8006860:	2800      	cmp	r0, #0
 8006862:	f73f adbb 	bgt.w	80063dc <_dtoa_r+0x4b4>
 8006866:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006868:	9d01      	ldr	r5, [sp, #4]
 800686a:	43db      	mvns	r3, r3
 800686c:	9300      	str	r3, [sp, #0]
 800686e:	f04f 0800 	mov.w	r8, #0
 8006872:	4631      	mov	r1, r6
 8006874:	4620      	mov	r0, r4
 8006876:	f000 f99f 	bl	8006bb8 <_Bfree>
 800687a:	2f00      	cmp	r7, #0
 800687c:	f43f aea4 	beq.w	80065c8 <_dtoa_r+0x6a0>
 8006880:	f1b8 0f00 	cmp.w	r8, #0
 8006884:	d005      	beq.n	8006892 <_dtoa_r+0x96a>
 8006886:	45b8      	cmp	r8, r7
 8006888:	d003      	beq.n	8006892 <_dtoa_r+0x96a>
 800688a:	4641      	mov	r1, r8
 800688c:	4620      	mov	r0, r4
 800688e:	f000 f993 	bl	8006bb8 <_Bfree>
 8006892:	4639      	mov	r1, r7
 8006894:	4620      	mov	r0, r4
 8006896:	f000 f98f 	bl	8006bb8 <_Bfree>
 800689a:	e695      	b.n	80065c8 <_dtoa_r+0x6a0>
 800689c:	2600      	movs	r6, #0
 800689e:	4637      	mov	r7, r6
 80068a0:	e7e1      	b.n	8006866 <_dtoa_r+0x93e>
 80068a2:	9700      	str	r7, [sp, #0]
 80068a4:	4637      	mov	r7, r6
 80068a6:	e599      	b.n	80063dc <_dtoa_r+0x4b4>
 80068a8:	40240000 	.word	0x40240000
 80068ac:	9b08      	ldr	r3, [sp, #32]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	f000 80ca 	beq.w	8006a48 <_dtoa_r+0xb20>
 80068b4:	9b03      	ldr	r3, [sp, #12]
 80068b6:	9302      	str	r3, [sp, #8]
 80068b8:	2d00      	cmp	r5, #0
 80068ba:	dd05      	ble.n	80068c8 <_dtoa_r+0x9a0>
 80068bc:	4639      	mov	r1, r7
 80068be:	462a      	mov	r2, r5
 80068c0:	4620      	mov	r0, r4
 80068c2:	f000 fb4b 	bl	8006f5c <__lshift>
 80068c6:	4607      	mov	r7, r0
 80068c8:	f1b8 0f00 	cmp.w	r8, #0
 80068cc:	d05b      	beq.n	8006986 <_dtoa_r+0xa5e>
 80068ce:	6879      	ldr	r1, [r7, #4]
 80068d0:	4620      	mov	r0, r4
 80068d2:	f000 f931 	bl	8006b38 <_Balloc>
 80068d6:	4605      	mov	r5, r0
 80068d8:	b928      	cbnz	r0, 80068e6 <_dtoa_r+0x9be>
 80068da:	4b87      	ldr	r3, [pc, #540]	; (8006af8 <_dtoa_r+0xbd0>)
 80068dc:	4602      	mov	r2, r0
 80068de:	f240 21ea 	movw	r1, #746	; 0x2ea
 80068e2:	f7ff bb3b 	b.w	8005f5c <_dtoa_r+0x34>
 80068e6:	693a      	ldr	r2, [r7, #16]
 80068e8:	3202      	adds	r2, #2
 80068ea:	0092      	lsls	r2, r2, #2
 80068ec:	f107 010c 	add.w	r1, r7, #12
 80068f0:	300c      	adds	r0, #12
 80068f2:	f000 f913 	bl	8006b1c <memcpy>
 80068f6:	2201      	movs	r2, #1
 80068f8:	4629      	mov	r1, r5
 80068fa:	4620      	mov	r0, r4
 80068fc:	f000 fb2e 	bl	8006f5c <__lshift>
 8006900:	9b01      	ldr	r3, [sp, #4]
 8006902:	f103 0901 	add.w	r9, r3, #1
 8006906:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800690a:	4413      	add	r3, r2
 800690c:	9305      	str	r3, [sp, #20]
 800690e:	f00a 0301 	and.w	r3, sl, #1
 8006912:	46b8      	mov	r8, r7
 8006914:	9304      	str	r3, [sp, #16]
 8006916:	4607      	mov	r7, r0
 8006918:	4631      	mov	r1, r6
 800691a:	ee18 0a10 	vmov	r0, s16
 800691e:	f7ff fa75 	bl	8005e0c <quorem>
 8006922:	4641      	mov	r1, r8
 8006924:	9002      	str	r0, [sp, #8]
 8006926:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800692a:	ee18 0a10 	vmov	r0, s16
 800692e:	f000 fb85 	bl	800703c <__mcmp>
 8006932:	463a      	mov	r2, r7
 8006934:	9003      	str	r0, [sp, #12]
 8006936:	4631      	mov	r1, r6
 8006938:	4620      	mov	r0, r4
 800693a:	f000 fb9b 	bl	8007074 <__mdiff>
 800693e:	68c2      	ldr	r2, [r0, #12]
 8006940:	f109 3bff 	add.w	fp, r9, #4294967295
 8006944:	4605      	mov	r5, r0
 8006946:	bb02      	cbnz	r2, 800698a <_dtoa_r+0xa62>
 8006948:	4601      	mov	r1, r0
 800694a:	ee18 0a10 	vmov	r0, s16
 800694e:	f000 fb75 	bl	800703c <__mcmp>
 8006952:	4602      	mov	r2, r0
 8006954:	4629      	mov	r1, r5
 8006956:	4620      	mov	r0, r4
 8006958:	9207      	str	r2, [sp, #28]
 800695a:	f000 f92d 	bl	8006bb8 <_Bfree>
 800695e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006962:	ea43 0102 	orr.w	r1, r3, r2
 8006966:	9b04      	ldr	r3, [sp, #16]
 8006968:	430b      	orrs	r3, r1
 800696a:	464d      	mov	r5, r9
 800696c:	d10f      	bne.n	800698e <_dtoa_r+0xa66>
 800696e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006972:	d02a      	beq.n	80069ca <_dtoa_r+0xaa2>
 8006974:	9b03      	ldr	r3, [sp, #12]
 8006976:	2b00      	cmp	r3, #0
 8006978:	dd02      	ble.n	8006980 <_dtoa_r+0xa58>
 800697a:	9b02      	ldr	r3, [sp, #8]
 800697c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006980:	f88b a000 	strb.w	sl, [fp]
 8006984:	e775      	b.n	8006872 <_dtoa_r+0x94a>
 8006986:	4638      	mov	r0, r7
 8006988:	e7ba      	b.n	8006900 <_dtoa_r+0x9d8>
 800698a:	2201      	movs	r2, #1
 800698c:	e7e2      	b.n	8006954 <_dtoa_r+0xa2c>
 800698e:	9b03      	ldr	r3, [sp, #12]
 8006990:	2b00      	cmp	r3, #0
 8006992:	db04      	blt.n	800699e <_dtoa_r+0xa76>
 8006994:	9906      	ldr	r1, [sp, #24]
 8006996:	430b      	orrs	r3, r1
 8006998:	9904      	ldr	r1, [sp, #16]
 800699a:	430b      	orrs	r3, r1
 800699c:	d122      	bne.n	80069e4 <_dtoa_r+0xabc>
 800699e:	2a00      	cmp	r2, #0
 80069a0:	ddee      	ble.n	8006980 <_dtoa_r+0xa58>
 80069a2:	ee18 1a10 	vmov	r1, s16
 80069a6:	2201      	movs	r2, #1
 80069a8:	4620      	mov	r0, r4
 80069aa:	f000 fad7 	bl	8006f5c <__lshift>
 80069ae:	4631      	mov	r1, r6
 80069b0:	ee08 0a10 	vmov	s16, r0
 80069b4:	f000 fb42 	bl	800703c <__mcmp>
 80069b8:	2800      	cmp	r0, #0
 80069ba:	dc03      	bgt.n	80069c4 <_dtoa_r+0xa9c>
 80069bc:	d1e0      	bne.n	8006980 <_dtoa_r+0xa58>
 80069be:	f01a 0f01 	tst.w	sl, #1
 80069c2:	d0dd      	beq.n	8006980 <_dtoa_r+0xa58>
 80069c4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80069c8:	d1d7      	bne.n	800697a <_dtoa_r+0xa52>
 80069ca:	2339      	movs	r3, #57	; 0x39
 80069cc:	f88b 3000 	strb.w	r3, [fp]
 80069d0:	462b      	mov	r3, r5
 80069d2:	461d      	mov	r5, r3
 80069d4:	3b01      	subs	r3, #1
 80069d6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80069da:	2a39      	cmp	r2, #57	; 0x39
 80069dc:	d071      	beq.n	8006ac2 <_dtoa_r+0xb9a>
 80069de:	3201      	adds	r2, #1
 80069e0:	701a      	strb	r2, [r3, #0]
 80069e2:	e746      	b.n	8006872 <_dtoa_r+0x94a>
 80069e4:	2a00      	cmp	r2, #0
 80069e6:	dd07      	ble.n	80069f8 <_dtoa_r+0xad0>
 80069e8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80069ec:	d0ed      	beq.n	80069ca <_dtoa_r+0xaa2>
 80069ee:	f10a 0301 	add.w	r3, sl, #1
 80069f2:	f88b 3000 	strb.w	r3, [fp]
 80069f6:	e73c      	b.n	8006872 <_dtoa_r+0x94a>
 80069f8:	9b05      	ldr	r3, [sp, #20]
 80069fa:	f809 ac01 	strb.w	sl, [r9, #-1]
 80069fe:	4599      	cmp	r9, r3
 8006a00:	d047      	beq.n	8006a92 <_dtoa_r+0xb6a>
 8006a02:	ee18 1a10 	vmov	r1, s16
 8006a06:	2300      	movs	r3, #0
 8006a08:	220a      	movs	r2, #10
 8006a0a:	4620      	mov	r0, r4
 8006a0c:	f000 f8f6 	bl	8006bfc <__multadd>
 8006a10:	45b8      	cmp	r8, r7
 8006a12:	ee08 0a10 	vmov	s16, r0
 8006a16:	f04f 0300 	mov.w	r3, #0
 8006a1a:	f04f 020a 	mov.w	r2, #10
 8006a1e:	4641      	mov	r1, r8
 8006a20:	4620      	mov	r0, r4
 8006a22:	d106      	bne.n	8006a32 <_dtoa_r+0xb0a>
 8006a24:	f000 f8ea 	bl	8006bfc <__multadd>
 8006a28:	4680      	mov	r8, r0
 8006a2a:	4607      	mov	r7, r0
 8006a2c:	f109 0901 	add.w	r9, r9, #1
 8006a30:	e772      	b.n	8006918 <_dtoa_r+0x9f0>
 8006a32:	f000 f8e3 	bl	8006bfc <__multadd>
 8006a36:	4639      	mov	r1, r7
 8006a38:	4680      	mov	r8, r0
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	220a      	movs	r2, #10
 8006a3e:	4620      	mov	r0, r4
 8006a40:	f000 f8dc 	bl	8006bfc <__multadd>
 8006a44:	4607      	mov	r7, r0
 8006a46:	e7f1      	b.n	8006a2c <_dtoa_r+0xb04>
 8006a48:	9b03      	ldr	r3, [sp, #12]
 8006a4a:	9302      	str	r3, [sp, #8]
 8006a4c:	9d01      	ldr	r5, [sp, #4]
 8006a4e:	ee18 0a10 	vmov	r0, s16
 8006a52:	4631      	mov	r1, r6
 8006a54:	f7ff f9da 	bl	8005e0c <quorem>
 8006a58:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006a5c:	9b01      	ldr	r3, [sp, #4]
 8006a5e:	f805 ab01 	strb.w	sl, [r5], #1
 8006a62:	1aea      	subs	r2, r5, r3
 8006a64:	9b02      	ldr	r3, [sp, #8]
 8006a66:	4293      	cmp	r3, r2
 8006a68:	dd09      	ble.n	8006a7e <_dtoa_r+0xb56>
 8006a6a:	ee18 1a10 	vmov	r1, s16
 8006a6e:	2300      	movs	r3, #0
 8006a70:	220a      	movs	r2, #10
 8006a72:	4620      	mov	r0, r4
 8006a74:	f000 f8c2 	bl	8006bfc <__multadd>
 8006a78:	ee08 0a10 	vmov	s16, r0
 8006a7c:	e7e7      	b.n	8006a4e <_dtoa_r+0xb26>
 8006a7e:	9b02      	ldr	r3, [sp, #8]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	bfc8      	it	gt
 8006a84:	461d      	movgt	r5, r3
 8006a86:	9b01      	ldr	r3, [sp, #4]
 8006a88:	bfd8      	it	le
 8006a8a:	2501      	movle	r5, #1
 8006a8c:	441d      	add	r5, r3
 8006a8e:	f04f 0800 	mov.w	r8, #0
 8006a92:	ee18 1a10 	vmov	r1, s16
 8006a96:	2201      	movs	r2, #1
 8006a98:	4620      	mov	r0, r4
 8006a9a:	f000 fa5f 	bl	8006f5c <__lshift>
 8006a9e:	4631      	mov	r1, r6
 8006aa0:	ee08 0a10 	vmov	s16, r0
 8006aa4:	f000 faca 	bl	800703c <__mcmp>
 8006aa8:	2800      	cmp	r0, #0
 8006aaa:	dc91      	bgt.n	80069d0 <_dtoa_r+0xaa8>
 8006aac:	d102      	bne.n	8006ab4 <_dtoa_r+0xb8c>
 8006aae:	f01a 0f01 	tst.w	sl, #1
 8006ab2:	d18d      	bne.n	80069d0 <_dtoa_r+0xaa8>
 8006ab4:	462b      	mov	r3, r5
 8006ab6:	461d      	mov	r5, r3
 8006ab8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006abc:	2a30      	cmp	r2, #48	; 0x30
 8006abe:	d0fa      	beq.n	8006ab6 <_dtoa_r+0xb8e>
 8006ac0:	e6d7      	b.n	8006872 <_dtoa_r+0x94a>
 8006ac2:	9a01      	ldr	r2, [sp, #4]
 8006ac4:	429a      	cmp	r2, r3
 8006ac6:	d184      	bne.n	80069d2 <_dtoa_r+0xaaa>
 8006ac8:	9b00      	ldr	r3, [sp, #0]
 8006aca:	3301      	adds	r3, #1
 8006acc:	9300      	str	r3, [sp, #0]
 8006ace:	2331      	movs	r3, #49	; 0x31
 8006ad0:	7013      	strb	r3, [r2, #0]
 8006ad2:	e6ce      	b.n	8006872 <_dtoa_r+0x94a>
 8006ad4:	4b09      	ldr	r3, [pc, #36]	; (8006afc <_dtoa_r+0xbd4>)
 8006ad6:	f7ff ba95 	b.w	8006004 <_dtoa_r+0xdc>
 8006ada:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	f47f aa6e 	bne.w	8005fbe <_dtoa_r+0x96>
 8006ae2:	4b07      	ldr	r3, [pc, #28]	; (8006b00 <_dtoa_r+0xbd8>)
 8006ae4:	f7ff ba8e 	b.w	8006004 <_dtoa_r+0xdc>
 8006ae8:	9b02      	ldr	r3, [sp, #8]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	dcae      	bgt.n	8006a4c <_dtoa_r+0xb24>
 8006aee:	9b06      	ldr	r3, [sp, #24]
 8006af0:	2b02      	cmp	r3, #2
 8006af2:	f73f aea8 	bgt.w	8006846 <_dtoa_r+0x91e>
 8006af6:	e7a9      	b.n	8006a4c <_dtoa_r+0xb24>
 8006af8:	080080b3 	.word	0x080080b3
 8006afc:	08008010 	.word	0x08008010
 8006b00:	08008034 	.word	0x08008034

08006b04 <_localeconv_r>:
 8006b04:	4800      	ldr	r0, [pc, #0]	; (8006b08 <_localeconv_r+0x4>)
 8006b06:	4770      	bx	lr
 8006b08:	20000160 	.word	0x20000160

08006b0c <malloc>:
 8006b0c:	4b02      	ldr	r3, [pc, #8]	; (8006b18 <malloc+0xc>)
 8006b0e:	4601      	mov	r1, r0
 8006b10:	6818      	ldr	r0, [r3, #0]
 8006b12:	f000 bc17 	b.w	8007344 <_malloc_r>
 8006b16:	bf00      	nop
 8006b18:	2000000c 	.word	0x2000000c

08006b1c <memcpy>:
 8006b1c:	440a      	add	r2, r1
 8006b1e:	4291      	cmp	r1, r2
 8006b20:	f100 33ff 	add.w	r3, r0, #4294967295
 8006b24:	d100      	bne.n	8006b28 <memcpy+0xc>
 8006b26:	4770      	bx	lr
 8006b28:	b510      	push	{r4, lr}
 8006b2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b2e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b32:	4291      	cmp	r1, r2
 8006b34:	d1f9      	bne.n	8006b2a <memcpy+0xe>
 8006b36:	bd10      	pop	{r4, pc}

08006b38 <_Balloc>:
 8006b38:	b570      	push	{r4, r5, r6, lr}
 8006b3a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006b3c:	4604      	mov	r4, r0
 8006b3e:	460d      	mov	r5, r1
 8006b40:	b976      	cbnz	r6, 8006b60 <_Balloc+0x28>
 8006b42:	2010      	movs	r0, #16
 8006b44:	f7ff ffe2 	bl	8006b0c <malloc>
 8006b48:	4602      	mov	r2, r0
 8006b4a:	6260      	str	r0, [r4, #36]	; 0x24
 8006b4c:	b920      	cbnz	r0, 8006b58 <_Balloc+0x20>
 8006b4e:	4b18      	ldr	r3, [pc, #96]	; (8006bb0 <_Balloc+0x78>)
 8006b50:	4818      	ldr	r0, [pc, #96]	; (8006bb4 <_Balloc+0x7c>)
 8006b52:	2166      	movs	r1, #102	; 0x66
 8006b54:	f000 fc7a 	bl	800744c <__assert_func>
 8006b58:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006b5c:	6006      	str	r6, [r0, #0]
 8006b5e:	60c6      	str	r6, [r0, #12]
 8006b60:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006b62:	68f3      	ldr	r3, [r6, #12]
 8006b64:	b183      	cbz	r3, 8006b88 <_Balloc+0x50>
 8006b66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b68:	68db      	ldr	r3, [r3, #12]
 8006b6a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006b6e:	b9b8      	cbnz	r0, 8006ba0 <_Balloc+0x68>
 8006b70:	2101      	movs	r1, #1
 8006b72:	fa01 f605 	lsl.w	r6, r1, r5
 8006b76:	1d72      	adds	r2, r6, #5
 8006b78:	0092      	lsls	r2, r2, #2
 8006b7a:	4620      	mov	r0, r4
 8006b7c:	f000 fb60 	bl	8007240 <_calloc_r>
 8006b80:	b160      	cbz	r0, 8006b9c <_Balloc+0x64>
 8006b82:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006b86:	e00e      	b.n	8006ba6 <_Balloc+0x6e>
 8006b88:	2221      	movs	r2, #33	; 0x21
 8006b8a:	2104      	movs	r1, #4
 8006b8c:	4620      	mov	r0, r4
 8006b8e:	f000 fb57 	bl	8007240 <_calloc_r>
 8006b92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b94:	60f0      	str	r0, [r6, #12]
 8006b96:	68db      	ldr	r3, [r3, #12]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d1e4      	bne.n	8006b66 <_Balloc+0x2e>
 8006b9c:	2000      	movs	r0, #0
 8006b9e:	bd70      	pop	{r4, r5, r6, pc}
 8006ba0:	6802      	ldr	r2, [r0, #0]
 8006ba2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006bac:	e7f7      	b.n	8006b9e <_Balloc+0x66>
 8006bae:	bf00      	nop
 8006bb0:	08008041 	.word	0x08008041
 8006bb4:	080080c4 	.word	0x080080c4

08006bb8 <_Bfree>:
 8006bb8:	b570      	push	{r4, r5, r6, lr}
 8006bba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006bbc:	4605      	mov	r5, r0
 8006bbe:	460c      	mov	r4, r1
 8006bc0:	b976      	cbnz	r6, 8006be0 <_Bfree+0x28>
 8006bc2:	2010      	movs	r0, #16
 8006bc4:	f7ff ffa2 	bl	8006b0c <malloc>
 8006bc8:	4602      	mov	r2, r0
 8006bca:	6268      	str	r0, [r5, #36]	; 0x24
 8006bcc:	b920      	cbnz	r0, 8006bd8 <_Bfree+0x20>
 8006bce:	4b09      	ldr	r3, [pc, #36]	; (8006bf4 <_Bfree+0x3c>)
 8006bd0:	4809      	ldr	r0, [pc, #36]	; (8006bf8 <_Bfree+0x40>)
 8006bd2:	218a      	movs	r1, #138	; 0x8a
 8006bd4:	f000 fc3a 	bl	800744c <__assert_func>
 8006bd8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006bdc:	6006      	str	r6, [r0, #0]
 8006bde:	60c6      	str	r6, [r0, #12]
 8006be0:	b13c      	cbz	r4, 8006bf2 <_Bfree+0x3a>
 8006be2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006be4:	6862      	ldr	r2, [r4, #4]
 8006be6:	68db      	ldr	r3, [r3, #12]
 8006be8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006bec:	6021      	str	r1, [r4, #0]
 8006bee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006bf2:	bd70      	pop	{r4, r5, r6, pc}
 8006bf4:	08008041 	.word	0x08008041
 8006bf8:	080080c4 	.word	0x080080c4

08006bfc <__multadd>:
 8006bfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c00:	690d      	ldr	r5, [r1, #16]
 8006c02:	4607      	mov	r7, r0
 8006c04:	460c      	mov	r4, r1
 8006c06:	461e      	mov	r6, r3
 8006c08:	f101 0c14 	add.w	ip, r1, #20
 8006c0c:	2000      	movs	r0, #0
 8006c0e:	f8dc 3000 	ldr.w	r3, [ip]
 8006c12:	b299      	uxth	r1, r3
 8006c14:	fb02 6101 	mla	r1, r2, r1, r6
 8006c18:	0c1e      	lsrs	r6, r3, #16
 8006c1a:	0c0b      	lsrs	r3, r1, #16
 8006c1c:	fb02 3306 	mla	r3, r2, r6, r3
 8006c20:	b289      	uxth	r1, r1
 8006c22:	3001      	adds	r0, #1
 8006c24:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006c28:	4285      	cmp	r5, r0
 8006c2a:	f84c 1b04 	str.w	r1, [ip], #4
 8006c2e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006c32:	dcec      	bgt.n	8006c0e <__multadd+0x12>
 8006c34:	b30e      	cbz	r6, 8006c7a <__multadd+0x7e>
 8006c36:	68a3      	ldr	r3, [r4, #8]
 8006c38:	42ab      	cmp	r3, r5
 8006c3a:	dc19      	bgt.n	8006c70 <__multadd+0x74>
 8006c3c:	6861      	ldr	r1, [r4, #4]
 8006c3e:	4638      	mov	r0, r7
 8006c40:	3101      	adds	r1, #1
 8006c42:	f7ff ff79 	bl	8006b38 <_Balloc>
 8006c46:	4680      	mov	r8, r0
 8006c48:	b928      	cbnz	r0, 8006c56 <__multadd+0x5a>
 8006c4a:	4602      	mov	r2, r0
 8006c4c:	4b0c      	ldr	r3, [pc, #48]	; (8006c80 <__multadd+0x84>)
 8006c4e:	480d      	ldr	r0, [pc, #52]	; (8006c84 <__multadd+0x88>)
 8006c50:	21b5      	movs	r1, #181	; 0xb5
 8006c52:	f000 fbfb 	bl	800744c <__assert_func>
 8006c56:	6922      	ldr	r2, [r4, #16]
 8006c58:	3202      	adds	r2, #2
 8006c5a:	f104 010c 	add.w	r1, r4, #12
 8006c5e:	0092      	lsls	r2, r2, #2
 8006c60:	300c      	adds	r0, #12
 8006c62:	f7ff ff5b 	bl	8006b1c <memcpy>
 8006c66:	4621      	mov	r1, r4
 8006c68:	4638      	mov	r0, r7
 8006c6a:	f7ff ffa5 	bl	8006bb8 <_Bfree>
 8006c6e:	4644      	mov	r4, r8
 8006c70:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006c74:	3501      	adds	r5, #1
 8006c76:	615e      	str	r6, [r3, #20]
 8006c78:	6125      	str	r5, [r4, #16]
 8006c7a:	4620      	mov	r0, r4
 8006c7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c80:	080080b3 	.word	0x080080b3
 8006c84:	080080c4 	.word	0x080080c4

08006c88 <__hi0bits>:
 8006c88:	0c03      	lsrs	r3, r0, #16
 8006c8a:	041b      	lsls	r3, r3, #16
 8006c8c:	b9d3      	cbnz	r3, 8006cc4 <__hi0bits+0x3c>
 8006c8e:	0400      	lsls	r0, r0, #16
 8006c90:	2310      	movs	r3, #16
 8006c92:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006c96:	bf04      	itt	eq
 8006c98:	0200      	lsleq	r0, r0, #8
 8006c9a:	3308      	addeq	r3, #8
 8006c9c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006ca0:	bf04      	itt	eq
 8006ca2:	0100      	lsleq	r0, r0, #4
 8006ca4:	3304      	addeq	r3, #4
 8006ca6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006caa:	bf04      	itt	eq
 8006cac:	0080      	lsleq	r0, r0, #2
 8006cae:	3302      	addeq	r3, #2
 8006cb0:	2800      	cmp	r0, #0
 8006cb2:	db05      	blt.n	8006cc0 <__hi0bits+0x38>
 8006cb4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006cb8:	f103 0301 	add.w	r3, r3, #1
 8006cbc:	bf08      	it	eq
 8006cbe:	2320      	moveq	r3, #32
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	4770      	bx	lr
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	e7e4      	b.n	8006c92 <__hi0bits+0xa>

08006cc8 <__lo0bits>:
 8006cc8:	6803      	ldr	r3, [r0, #0]
 8006cca:	f013 0207 	ands.w	r2, r3, #7
 8006cce:	4601      	mov	r1, r0
 8006cd0:	d00b      	beq.n	8006cea <__lo0bits+0x22>
 8006cd2:	07da      	lsls	r2, r3, #31
 8006cd4:	d423      	bmi.n	8006d1e <__lo0bits+0x56>
 8006cd6:	0798      	lsls	r0, r3, #30
 8006cd8:	bf49      	itett	mi
 8006cda:	085b      	lsrmi	r3, r3, #1
 8006cdc:	089b      	lsrpl	r3, r3, #2
 8006cde:	2001      	movmi	r0, #1
 8006ce0:	600b      	strmi	r3, [r1, #0]
 8006ce2:	bf5c      	itt	pl
 8006ce4:	600b      	strpl	r3, [r1, #0]
 8006ce6:	2002      	movpl	r0, #2
 8006ce8:	4770      	bx	lr
 8006cea:	b298      	uxth	r0, r3
 8006cec:	b9a8      	cbnz	r0, 8006d1a <__lo0bits+0x52>
 8006cee:	0c1b      	lsrs	r3, r3, #16
 8006cf0:	2010      	movs	r0, #16
 8006cf2:	b2da      	uxtb	r2, r3
 8006cf4:	b90a      	cbnz	r2, 8006cfa <__lo0bits+0x32>
 8006cf6:	3008      	adds	r0, #8
 8006cf8:	0a1b      	lsrs	r3, r3, #8
 8006cfa:	071a      	lsls	r2, r3, #28
 8006cfc:	bf04      	itt	eq
 8006cfe:	091b      	lsreq	r3, r3, #4
 8006d00:	3004      	addeq	r0, #4
 8006d02:	079a      	lsls	r2, r3, #30
 8006d04:	bf04      	itt	eq
 8006d06:	089b      	lsreq	r3, r3, #2
 8006d08:	3002      	addeq	r0, #2
 8006d0a:	07da      	lsls	r2, r3, #31
 8006d0c:	d403      	bmi.n	8006d16 <__lo0bits+0x4e>
 8006d0e:	085b      	lsrs	r3, r3, #1
 8006d10:	f100 0001 	add.w	r0, r0, #1
 8006d14:	d005      	beq.n	8006d22 <__lo0bits+0x5a>
 8006d16:	600b      	str	r3, [r1, #0]
 8006d18:	4770      	bx	lr
 8006d1a:	4610      	mov	r0, r2
 8006d1c:	e7e9      	b.n	8006cf2 <__lo0bits+0x2a>
 8006d1e:	2000      	movs	r0, #0
 8006d20:	4770      	bx	lr
 8006d22:	2020      	movs	r0, #32
 8006d24:	4770      	bx	lr
	...

08006d28 <__i2b>:
 8006d28:	b510      	push	{r4, lr}
 8006d2a:	460c      	mov	r4, r1
 8006d2c:	2101      	movs	r1, #1
 8006d2e:	f7ff ff03 	bl	8006b38 <_Balloc>
 8006d32:	4602      	mov	r2, r0
 8006d34:	b928      	cbnz	r0, 8006d42 <__i2b+0x1a>
 8006d36:	4b05      	ldr	r3, [pc, #20]	; (8006d4c <__i2b+0x24>)
 8006d38:	4805      	ldr	r0, [pc, #20]	; (8006d50 <__i2b+0x28>)
 8006d3a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006d3e:	f000 fb85 	bl	800744c <__assert_func>
 8006d42:	2301      	movs	r3, #1
 8006d44:	6144      	str	r4, [r0, #20]
 8006d46:	6103      	str	r3, [r0, #16]
 8006d48:	bd10      	pop	{r4, pc}
 8006d4a:	bf00      	nop
 8006d4c:	080080b3 	.word	0x080080b3
 8006d50:	080080c4 	.word	0x080080c4

08006d54 <__multiply>:
 8006d54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d58:	4691      	mov	r9, r2
 8006d5a:	690a      	ldr	r2, [r1, #16]
 8006d5c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006d60:	429a      	cmp	r2, r3
 8006d62:	bfb8      	it	lt
 8006d64:	460b      	movlt	r3, r1
 8006d66:	460c      	mov	r4, r1
 8006d68:	bfbc      	itt	lt
 8006d6a:	464c      	movlt	r4, r9
 8006d6c:	4699      	movlt	r9, r3
 8006d6e:	6927      	ldr	r7, [r4, #16]
 8006d70:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006d74:	68a3      	ldr	r3, [r4, #8]
 8006d76:	6861      	ldr	r1, [r4, #4]
 8006d78:	eb07 060a 	add.w	r6, r7, sl
 8006d7c:	42b3      	cmp	r3, r6
 8006d7e:	b085      	sub	sp, #20
 8006d80:	bfb8      	it	lt
 8006d82:	3101      	addlt	r1, #1
 8006d84:	f7ff fed8 	bl	8006b38 <_Balloc>
 8006d88:	b930      	cbnz	r0, 8006d98 <__multiply+0x44>
 8006d8a:	4602      	mov	r2, r0
 8006d8c:	4b44      	ldr	r3, [pc, #272]	; (8006ea0 <__multiply+0x14c>)
 8006d8e:	4845      	ldr	r0, [pc, #276]	; (8006ea4 <__multiply+0x150>)
 8006d90:	f240 115d 	movw	r1, #349	; 0x15d
 8006d94:	f000 fb5a 	bl	800744c <__assert_func>
 8006d98:	f100 0514 	add.w	r5, r0, #20
 8006d9c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006da0:	462b      	mov	r3, r5
 8006da2:	2200      	movs	r2, #0
 8006da4:	4543      	cmp	r3, r8
 8006da6:	d321      	bcc.n	8006dec <__multiply+0x98>
 8006da8:	f104 0314 	add.w	r3, r4, #20
 8006dac:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006db0:	f109 0314 	add.w	r3, r9, #20
 8006db4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006db8:	9202      	str	r2, [sp, #8]
 8006dba:	1b3a      	subs	r2, r7, r4
 8006dbc:	3a15      	subs	r2, #21
 8006dbe:	f022 0203 	bic.w	r2, r2, #3
 8006dc2:	3204      	adds	r2, #4
 8006dc4:	f104 0115 	add.w	r1, r4, #21
 8006dc8:	428f      	cmp	r7, r1
 8006dca:	bf38      	it	cc
 8006dcc:	2204      	movcc	r2, #4
 8006dce:	9201      	str	r2, [sp, #4]
 8006dd0:	9a02      	ldr	r2, [sp, #8]
 8006dd2:	9303      	str	r3, [sp, #12]
 8006dd4:	429a      	cmp	r2, r3
 8006dd6:	d80c      	bhi.n	8006df2 <__multiply+0x9e>
 8006dd8:	2e00      	cmp	r6, #0
 8006dda:	dd03      	ble.n	8006de4 <__multiply+0x90>
 8006ddc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d05a      	beq.n	8006e9a <__multiply+0x146>
 8006de4:	6106      	str	r6, [r0, #16]
 8006de6:	b005      	add	sp, #20
 8006de8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dec:	f843 2b04 	str.w	r2, [r3], #4
 8006df0:	e7d8      	b.n	8006da4 <__multiply+0x50>
 8006df2:	f8b3 a000 	ldrh.w	sl, [r3]
 8006df6:	f1ba 0f00 	cmp.w	sl, #0
 8006dfa:	d024      	beq.n	8006e46 <__multiply+0xf2>
 8006dfc:	f104 0e14 	add.w	lr, r4, #20
 8006e00:	46a9      	mov	r9, r5
 8006e02:	f04f 0c00 	mov.w	ip, #0
 8006e06:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006e0a:	f8d9 1000 	ldr.w	r1, [r9]
 8006e0e:	fa1f fb82 	uxth.w	fp, r2
 8006e12:	b289      	uxth	r1, r1
 8006e14:	fb0a 110b 	mla	r1, sl, fp, r1
 8006e18:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006e1c:	f8d9 2000 	ldr.w	r2, [r9]
 8006e20:	4461      	add	r1, ip
 8006e22:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006e26:	fb0a c20b 	mla	r2, sl, fp, ip
 8006e2a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006e2e:	b289      	uxth	r1, r1
 8006e30:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006e34:	4577      	cmp	r7, lr
 8006e36:	f849 1b04 	str.w	r1, [r9], #4
 8006e3a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006e3e:	d8e2      	bhi.n	8006e06 <__multiply+0xb2>
 8006e40:	9a01      	ldr	r2, [sp, #4]
 8006e42:	f845 c002 	str.w	ip, [r5, r2]
 8006e46:	9a03      	ldr	r2, [sp, #12]
 8006e48:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006e4c:	3304      	adds	r3, #4
 8006e4e:	f1b9 0f00 	cmp.w	r9, #0
 8006e52:	d020      	beq.n	8006e96 <__multiply+0x142>
 8006e54:	6829      	ldr	r1, [r5, #0]
 8006e56:	f104 0c14 	add.w	ip, r4, #20
 8006e5a:	46ae      	mov	lr, r5
 8006e5c:	f04f 0a00 	mov.w	sl, #0
 8006e60:	f8bc b000 	ldrh.w	fp, [ip]
 8006e64:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006e68:	fb09 220b 	mla	r2, r9, fp, r2
 8006e6c:	4492      	add	sl, r2
 8006e6e:	b289      	uxth	r1, r1
 8006e70:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006e74:	f84e 1b04 	str.w	r1, [lr], #4
 8006e78:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006e7c:	f8be 1000 	ldrh.w	r1, [lr]
 8006e80:	0c12      	lsrs	r2, r2, #16
 8006e82:	fb09 1102 	mla	r1, r9, r2, r1
 8006e86:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006e8a:	4567      	cmp	r7, ip
 8006e8c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006e90:	d8e6      	bhi.n	8006e60 <__multiply+0x10c>
 8006e92:	9a01      	ldr	r2, [sp, #4]
 8006e94:	50a9      	str	r1, [r5, r2]
 8006e96:	3504      	adds	r5, #4
 8006e98:	e79a      	b.n	8006dd0 <__multiply+0x7c>
 8006e9a:	3e01      	subs	r6, #1
 8006e9c:	e79c      	b.n	8006dd8 <__multiply+0x84>
 8006e9e:	bf00      	nop
 8006ea0:	080080b3 	.word	0x080080b3
 8006ea4:	080080c4 	.word	0x080080c4

08006ea8 <__pow5mult>:
 8006ea8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006eac:	4615      	mov	r5, r2
 8006eae:	f012 0203 	ands.w	r2, r2, #3
 8006eb2:	4606      	mov	r6, r0
 8006eb4:	460f      	mov	r7, r1
 8006eb6:	d007      	beq.n	8006ec8 <__pow5mult+0x20>
 8006eb8:	4c25      	ldr	r4, [pc, #148]	; (8006f50 <__pow5mult+0xa8>)
 8006eba:	3a01      	subs	r2, #1
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006ec2:	f7ff fe9b 	bl	8006bfc <__multadd>
 8006ec6:	4607      	mov	r7, r0
 8006ec8:	10ad      	asrs	r5, r5, #2
 8006eca:	d03d      	beq.n	8006f48 <__pow5mult+0xa0>
 8006ecc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006ece:	b97c      	cbnz	r4, 8006ef0 <__pow5mult+0x48>
 8006ed0:	2010      	movs	r0, #16
 8006ed2:	f7ff fe1b 	bl	8006b0c <malloc>
 8006ed6:	4602      	mov	r2, r0
 8006ed8:	6270      	str	r0, [r6, #36]	; 0x24
 8006eda:	b928      	cbnz	r0, 8006ee8 <__pow5mult+0x40>
 8006edc:	4b1d      	ldr	r3, [pc, #116]	; (8006f54 <__pow5mult+0xac>)
 8006ede:	481e      	ldr	r0, [pc, #120]	; (8006f58 <__pow5mult+0xb0>)
 8006ee0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006ee4:	f000 fab2 	bl	800744c <__assert_func>
 8006ee8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006eec:	6004      	str	r4, [r0, #0]
 8006eee:	60c4      	str	r4, [r0, #12]
 8006ef0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006ef4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006ef8:	b94c      	cbnz	r4, 8006f0e <__pow5mult+0x66>
 8006efa:	f240 2171 	movw	r1, #625	; 0x271
 8006efe:	4630      	mov	r0, r6
 8006f00:	f7ff ff12 	bl	8006d28 <__i2b>
 8006f04:	2300      	movs	r3, #0
 8006f06:	f8c8 0008 	str.w	r0, [r8, #8]
 8006f0a:	4604      	mov	r4, r0
 8006f0c:	6003      	str	r3, [r0, #0]
 8006f0e:	f04f 0900 	mov.w	r9, #0
 8006f12:	07eb      	lsls	r3, r5, #31
 8006f14:	d50a      	bpl.n	8006f2c <__pow5mult+0x84>
 8006f16:	4639      	mov	r1, r7
 8006f18:	4622      	mov	r2, r4
 8006f1a:	4630      	mov	r0, r6
 8006f1c:	f7ff ff1a 	bl	8006d54 <__multiply>
 8006f20:	4639      	mov	r1, r7
 8006f22:	4680      	mov	r8, r0
 8006f24:	4630      	mov	r0, r6
 8006f26:	f7ff fe47 	bl	8006bb8 <_Bfree>
 8006f2a:	4647      	mov	r7, r8
 8006f2c:	106d      	asrs	r5, r5, #1
 8006f2e:	d00b      	beq.n	8006f48 <__pow5mult+0xa0>
 8006f30:	6820      	ldr	r0, [r4, #0]
 8006f32:	b938      	cbnz	r0, 8006f44 <__pow5mult+0x9c>
 8006f34:	4622      	mov	r2, r4
 8006f36:	4621      	mov	r1, r4
 8006f38:	4630      	mov	r0, r6
 8006f3a:	f7ff ff0b 	bl	8006d54 <__multiply>
 8006f3e:	6020      	str	r0, [r4, #0]
 8006f40:	f8c0 9000 	str.w	r9, [r0]
 8006f44:	4604      	mov	r4, r0
 8006f46:	e7e4      	b.n	8006f12 <__pow5mult+0x6a>
 8006f48:	4638      	mov	r0, r7
 8006f4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f4e:	bf00      	nop
 8006f50:	08008210 	.word	0x08008210
 8006f54:	08008041 	.word	0x08008041
 8006f58:	080080c4 	.word	0x080080c4

08006f5c <__lshift>:
 8006f5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f60:	460c      	mov	r4, r1
 8006f62:	6849      	ldr	r1, [r1, #4]
 8006f64:	6923      	ldr	r3, [r4, #16]
 8006f66:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006f6a:	68a3      	ldr	r3, [r4, #8]
 8006f6c:	4607      	mov	r7, r0
 8006f6e:	4691      	mov	r9, r2
 8006f70:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006f74:	f108 0601 	add.w	r6, r8, #1
 8006f78:	42b3      	cmp	r3, r6
 8006f7a:	db0b      	blt.n	8006f94 <__lshift+0x38>
 8006f7c:	4638      	mov	r0, r7
 8006f7e:	f7ff fddb 	bl	8006b38 <_Balloc>
 8006f82:	4605      	mov	r5, r0
 8006f84:	b948      	cbnz	r0, 8006f9a <__lshift+0x3e>
 8006f86:	4602      	mov	r2, r0
 8006f88:	4b2a      	ldr	r3, [pc, #168]	; (8007034 <__lshift+0xd8>)
 8006f8a:	482b      	ldr	r0, [pc, #172]	; (8007038 <__lshift+0xdc>)
 8006f8c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006f90:	f000 fa5c 	bl	800744c <__assert_func>
 8006f94:	3101      	adds	r1, #1
 8006f96:	005b      	lsls	r3, r3, #1
 8006f98:	e7ee      	b.n	8006f78 <__lshift+0x1c>
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	f100 0114 	add.w	r1, r0, #20
 8006fa0:	f100 0210 	add.w	r2, r0, #16
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	4553      	cmp	r3, sl
 8006fa8:	db37      	blt.n	800701a <__lshift+0xbe>
 8006faa:	6920      	ldr	r0, [r4, #16]
 8006fac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006fb0:	f104 0314 	add.w	r3, r4, #20
 8006fb4:	f019 091f 	ands.w	r9, r9, #31
 8006fb8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006fbc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006fc0:	d02f      	beq.n	8007022 <__lshift+0xc6>
 8006fc2:	f1c9 0e20 	rsb	lr, r9, #32
 8006fc6:	468a      	mov	sl, r1
 8006fc8:	f04f 0c00 	mov.w	ip, #0
 8006fcc:	681a      	ldr	r2, [r3, #0]
 8006fce:	fa02 f209 	lsl.w	r2, r2, r9
 8006fd2:	ea42 020c 	orr.w	r2, r2, ip
 8006fd6:	f84a 2b04 	str.w	r2, [sl], #4
 8006fda:	f853 2b04 	ldr.w	r2, [r3], #4
 8006fde:	4298      	cmp	r0, r3
 8006fe0:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006fe4:	d8f2      	bhi.n	8006fcc <__lshift+0x70>
 8006fe6:	1b03      	subs	r3, r0, r4
 8006fe8:	3b15      	subs	r3, #21
 8006fea:	f023 0303 	bic.w	r3, r3, #3
 8006fee:	3304      	adds	r3, #4
 8006ff0:	f104 0215 	add.w	r2, r4, #21
 8006ff4:	4290      	cmp	r0, r2
 8006ff6:	bf38      	it	cc
 8006ff8:	2304      	movcc	r3, #4
 8006ffa:	f841 c003 	str.w	ip, [r1, r3]
 8006ffe:	f1bc 0f00 	cmp.w	ip, #0
 8007002:	d001      	beq.n	8007008 <__lshift+0xac>
 8007004:	f108 0602 	add.w	r6, r8, #2
 8007008:	3e01      	subs	r6, #1
 800700a:	4638      	mov	r0, r7
 800700c:	612e      	str	r6, [r5, #16]
 800700e:	4621      	mov	r1, r4
 8007010:	f7ff fdd2 	bl	8006bb8 <_Bfree>
 8007014:	4628      	mov	r0, r5
 8007016:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800701a:	f842 0f04 	str.w	r0, [r2, #4]!
 800701e:	3301      	adds	r3, #1
 8007020:	e7c1      	b.n	8006fa6 <__lshift+0x4a>
 8007022:	3904      	subs	r1, #4
 8007024:	f853 2b04 	ldr.w	r2, [r3], #4
 8007028:	f841 2f04 	str.w	r2, [r1, #4]!
 800702c:	4298      	cmp	r0, r3
 800702e:	d8f9      	bhi.n	8007024 <__lshift+0xc8>
 8007030:	e7ea      	b.n	8007008 <__lshift+0xac>
 8007032:	bf00      	nop
 8007034:	080080b3 	.word	0x080080b3
 8007038:	080080c4 	.word	0x080080c4

0800703c <__mcmp>:
 800703c:	b530      	push	{r4, r5, lr}
 800703e:	6902      	ldr	r2, [r0, #16]
 8007040:	690c      	ldr	r4, [r1, #16]
 8007042:	1b12      	subs	r2, r2, r4
 8007044:	d10e      	bne.n	8007064 <__mcmp+0x28>
 8007046:	f100 0314 	add.w	r3, r0, #20
 800704a:	3114      	adds	r1, #20
 800704c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007050:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007054:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007058:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800705c:	42a5      	cmp	r5, r4
 800705e:	d003      	beq.n	8007068 <__mcmp+0x2c>
 8007060:	d305      	bcc.n	800706e <__mcmp+0x32>
 8007062:	2201      	movs	r2, #1
 8007064:	4610      	mov	r0, r2
 8007066:	bd30      	pop	{r4, r5, pc}
 8007068:	4283      	cmp	r3, r0
 800706a:	d3f3      	bcc.n	8007054 <__mcmp+0x18>
 800706c:	e7fa      	b.n	8007064 <__mcmp+0x28>
 800706e:	f04f 32ff 	mov.w	r2, #4294967295
 8007072:	e7f7      	b.n	8007064 <__mcmp+0x28>

08007074 <__mdiff>:
 8007074:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007078:	460c      	mov	r4, r1
 800707a:	4606      	mov	r6, r0
 800707c:	4611      	mov	r1, r2
 800707e:	4620      	mov	r0, r4
 8007080:	4690      	mov	r8, r2
 8007082:	f7ff ffdb 	bl	800703c <__mcmp>
 8007086:	1e05      	subs	r5, r0, #0
 8007088:	d110      	bne.n	80070ac <__mdiff+0x38>
 800708a:	4629      	mov	r1, r5
 800708c:	4630      	mov	r0, r6
 800708e:	f7ff fd53 	bl	8006b38 <_Balloc>
 8007092:	b930      	cbnz	r0, 80070a2 <__mdiff+0x2e>
 8007094:	4b3a      	ldr	r3, [pc, #232]	; (8007180 <__mdiff+0x10c>)
 8007096:	4602      	mov	r2, r0
 8007098:	f240 2132 	movw	r1, #562	; 0x232
 800709c:	4839      	ldr	r0, [pc, #228]	; (8007184 <__mdiff+0x110>)
 800709e:	f000 f9d5 	bl	800744c <__assert_func>
 80070a2:	2301      	movs	r3, #1
 80070a4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80070a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070ac:	bfa4      	itt	ge
 80070ae:	4643      	movge	r3, r8
 80070b0:	46a0      	movge	r8, r4
 80070b2:	4630      	mov	r0, r6
 80070b4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80070b8:	bfa6      	itte	ge
 80070ba:	461c      	movge	r4, r3
 80070bc:	2500      	movge	r5, #0
 80070be:	2501      	movlt	r5, #1
 80070c0:	f7ff fd3a 	bl	8006b38 <_Balloc>
 80070c4:	b920      	cbnz	r0, 80070d0 <__mdiff+0x5c>
 80070c6:	4b2e      	ldr	r3, [pc, #184]	; (8007180 <__mdiff+0x10c>)
 80070c8:	4602      	mov	r2, r0
 80070ca:	f44f 7110 	mov.w	r1, #576	; 0x240
 80070ce:	e7e5      	b.n	800709c <__mdiff+0x28>
 80070d0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80070d4:	6926      	ldr	r6, [r4, #16]
 80070d6:	60c5      	str	r5, [r0, #12]
 80070d8:	f104 0914 	add.w	r9, r4, #20
 80070dc:	f108 0514 	add.w	r5, r8, #20
 80070e0:	f100 0e14 	add.w	lr, r0, #20
 80070e4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80070e8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80070ec:	f108 0210 	add.w	r2, r8, #16
 80070f0:	46f2      	mov	sl, lr
 80070f2:	2100      	movs	r1, #0
 80070f4:	f859 3b04 	ldr.w	r3, [r9], #4
 80070f8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80070fc:	fa1f f883 	uxth.w	r8, r3
 8007100:	fa11 f18b 	uxtah	r1, r1, fp
 8007104:	0c1b      	lsrs	r3, r3, #16
 8007106:	eba1 0808 	sub.w	r8, r1, r8
 800710a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800710e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007112:	fa1f f888 	uxth.w	r8, r8
 8007116:	1419      	asrs	r1, r3, #16
 8007118:	454e      	cmp	r6, r9
 800711a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800711e:	f84a 3b04 	str.w	r3, [sl], #4
 8007122:	d8e7      	bhi.n	80070f4 <__mdiff+0x80>
 8007124:	1b33      	subs	r3, r6, r4
 8007126:	3b15      	subs	r3, #21
 8007128:	f023 0303 	bic.w	r3, r3, #3
 800712c:	3304      	adds	r3, #4
 800712e:	3415      	adds	r4, #21
 8007130:	42a6      	cmp	r6, r4
 8007132:	bf38      	it	cc
 8007134:	2304      	movcc	r3, #4
 8007136:	441d      	add	r5, r3
 8007138:	4473      	add	r3, lr
 800713a:	469e      	mov	lr, r3
 800713c:	462e      	mov	r6, r5
 800713e:	4566      	cmp	r6, ip
 8007140:	d30e      	bcc.n	8007160 <__mdiff+0xec>
 8007142:	f10c 0203 	add.w	r2, ip, #3
 8007146:	1b52      	subs	r2, r2, r5
 8007148:	f022 0203 	bic.w	r2, r2, #3
 800714c:	3d03      	subs	r5, #3
 800714e:	45ac      	cmp	ip, r5
 8007150:	bf38      	it	cc
 8007152:	2200      	movcc	r2, #0
 8007154:	441a      	add	r2, r3
 8007156:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800715a:	b17b      	cbz	r3, 800717c <__mdiff+0x108>
 800715c:	6107      	str	r7, [r0, #16]
 800715e:	e7a3      	b.n	80070a8 <__mdiff+0x34>
 8007160:	f856 8b04 	ldr.w	r8, [r6], #4
 8007164:	fa11 f288 	uxtah	r2, r1, r8
 8007168:	1414      	asrs	r4, r2, #16
 800716a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800716e:	b292      	uxth	r2, r2
 8007170:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007174:	f84e 2b04 	str.w	r2, [lr], #4
 8007178:	1421      	asrs	r1, r4, #16
 800717a:	e7e0      	b.n	800713e <__mdiff+0xca>
 800717c:	3f01      	subs	r7, #1
 800717e:	e7ea      	b.n	8007156 <__mdiff+0xe2>
 8007180:	080080b3 	.word	0x080080b3
 8007184:	080080c4 	.word	0x080080c4

08007188 <__d2b>:
 8007188:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800718c:	4689      	mov	r9, r1
 800718e:	2101      	movs	r1, #1
 8007190:	ec57 6b10 	vmov	r6, r7, d0
 8007194:	4690      	mov	r8, r2
 8007196:	f7ff fccf 	bl	8006b38 <_Balloc>
 800719a:	4604      	mov	r4, r0
 800719c:	b930      	cbnz	r0, 80071ac <__d2b+0x24>
 800719e:	4602      	mov	r2, r0
 80071a0:	4b25      	ldr	r3, [pc, #148]	; (8007238 <__d2b+0xb0>)
 80071a2:	4826      	ldr	r0, [pc, #152]	; (800723c <__d2b+0xb4>)
 80071a4:	f240 310a 	movw	r1, #778	; 0x30a
 80071a8:	f000 f950 	bl	800744c <__assert_func>
 80071ac:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80071b0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80071b4:	bb35      	cbnz	r5, 8007204 <__d2b+0x7c>
 80071b6:	2e00      	cmp	r6, #0
 80071b8:	9301      	str	r3, [sp, #4]
 80071ba:	d028      	beq.n	800720e <__d2b+0x86>
 80071bc:	4668      	mov	r0, sp
 80071be:	9600      	str	r6, [sp, #0]
 80071c0:	f7ff fd82 	bl	8006cc8 <__lo0bits>
 80071c4:	9900      	ldr	r1, [sp, #0]
 80071c6:	b300      	cbz	r0, 800720a <__d2b+0x82>
 80071c8:	9a01      	ldr	r2, [sp, #4]
 80071ca:	f1c0 0320 	rsb	r3, r0, #32
 80071ce:	fa02 f303 	lsl.w	r3, r2, r3
 80071d2:	430b      	orrs	r3, r1
 80071d4:	40c2      	lsrs	r2, r0
 80071d6:	6163      	str	r3, [r4, #20]
 80071d8:	9201      	str	r2, [sp, #4]
 80071da:	9b01      	ldr	r3, [sp, #4]
 80071dc:	61a3      	str	r3, [r4, #24]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	bf14      	ite	ne
 80071e2:	2202      	movne	r2, #2
 80071e4:	2201      	moveq	r2, #1
 80071e6:	6122      	str	r2, [r4, #16]
 80071e8:	b1d5      	cbz	r5, 8007220 <__d2b+0x98>
 80071ea:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80071ee:	4405      	add	r5, r0
 80071f0:	f8c9 5000 	str.w	r5, [r9]
 80071f4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80071f8:	f8c8 0000 	str.w	r0, [r8]
 80071fc:	4620      	mov	r0, r4
 80071fe:	b003      	add	sp, #12
 8007200:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007204:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007208:	e7d5      	b.n	80071b6 <__d2b+0x2e>
 800720a:	6161      	str	r1, [r4, #20]
 800720c:	e7e5      	b.n	80071da <__d2b+0x52>
 800720e:	a801      	add	r0, sp, #4
 8007210:	f7ff fd5a 	bl	8006cc8 <__lo0bits>
 8007214:	9b01      	ldr	r3, [sp, #4]
 8007216:	6163      	str	r3, [r4, #20]
 8007218:	2201      	movs	r2, #1
 800721a:	6122      	str	r2, [r4, #16]
 800721c:	3020      	adds	r0, #32
 800721e:	e7e3      	b.n	80071e8 <__d2b+0x60>
 8007220:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007224:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007228:	f8c9 0000 	str.w	r0, [r9]
 800722c:	6918      	ldr	r0, [r3, #16]
 800722e:	f7ff fd2b 	bl	8006c88 <__hi0bits>
 8007232:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007236:	e7df      	b.n	80071f8 <__d2b+0x70>
 8007238:	080080b3 	.word	0x080080b3
 800723c:	080080c4 	.word	0x080080c4

08007240 <_calloc_r>:
 8007240:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007242:	fba1 2402 	umull	r2, r4, r1, r2
 8007246:	b94c      	cbnz	r4, 800725c <_calloc_r+0x1c>
 8007248:	4611      	mov	r1, r2
 800724a:	9201      	str	r2, [sp, #4]
 800724c:	f000 f87a 	bl	8007344 <_malloc_r>
 8007250:	9a01      	ldr	r2, [sp, #4]
 8007252:	4605      	mov	r5, r0
 8007254:	b930      	cbnz	r0, 8007264 <_calloc_r+0x24>
 8007256:	4628      	mov	r0, r5
 8007258:	b003      	add	sp, #12
 800725a:	bd30      	pop	{r4, r5, pc}
 800725c:	220c      	movs	r2, #12
 800725e:	6002      	str	r2, [r0, #0]
 8007260:	2500      	movs	r5, #0
 8007262:	e7f8      	b.n	8007256 <_calloc_r+0x16>
 8007264:	4621      	mov	r1, r4
 8007266:	f7fe f95f 	bl	8005528 <memset>
 800726a:	e7f4      	b.n	8007256 <_calloc_r+0x16>

0800726c <_free_r>:
 800726c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800726e:	2900      	cmp	r1, #0
 8007270:	d044      	beq.n	80072fc <_free_r+0x90>
 8007272:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007276:	9001      	str	r0, [sp, #4]
 8007278:	2b00      	cmp	r3, #0
 800727a:	f1a1 0404 	sub.w	r4, r1, #4
 800727e:	bfb8      	it	lt
 8007280:	18e4      	addlt	r4, r4, r3
 8007282:	f000 f925 	bl	80074d0 <__malloc_lock>
 8007286:	4a1e      	ldr	r2, [pc, #120]	; (8007300 <_free_r+0x94>)
 8007288:	9801      	ldr	r0, [sp, #4]
 800728a:	6813      	ldr	r3, [r2, #0]
 800728c:	b933      	cbnz	r3, 800729c <_free_r+0x30>
 800728e:	6063      	str	r3, [r4, #4]
 8007290:	6014      	str	r4, [r2, #0]
 8007292:	b003      	add	sp, #12
 8007294:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007298:	f000 b920 	b.w	80074dc <__malloc_unlock>
 800729c:	42a3      	cmp	r3, r4
 800729e:	d908      	bls.n	80072b2 <_free_r+0x46>
 80072a0:	6825      	ldr	r5, [r4, #0]
 80072a2:	1961      	adds	r1, r4, r5
 80072a4:	428b      	cmp	r3, r1
 80072a6:	bf01      	itttt	eq
 80072a8:	6819      	ldreq	r1, [r3, #0]
 80072aa:	685b      	ldreq	r3, [r3, #4]
 80072ac:	1949      	addeq	r1, r1, r5
 80072ae:	6021      	streq	r1, [r4, #0]
 80072b0:	e7ed      	b.n	800728e <_free_r+0x22>
 80072b2:	461a      	mov	r2, r3
 80072b4:	685b      	ldr	r3, [r3, #4]
 80072b6:	b10b      	cbz	r3, 80072bc <_free_r+0x50>
 80072b8:	42a3      	cmp	r3, r4
 80072ba:	d9fa      	bls.n	80072b2 <_free_r+0x46>
 80072bc:	6811      	ldr	r1, [r2, #0]
 80072be:	1855      	adds	r5, r2, r1
 80072c0:	42a5      	cmp	r5, r4
 80072c2:	d10b      	bne.n	80072dc <_free_r+0x70>
 80072c4:	6824      	ldr	r4, [r4, #0]
 80072c6:	4421      	add	r1, r4
 80072c8:	1854      	adds	r4, r2, r1
 80072ca:	42a3      	cmp	r3, r4
 80072cc:	6011      	str	r1, [r2, #0]
 80072ce:	d1e0      	bne.n	8007292 <_free_r+0x26>
 80072d0:	681c      	ldr	r4, [r3, #0]
 80072d2:	685b      	ldr	r3, [r3, #4]
 80072d4:	6053      	str	r3, [r2, #4]
 80072d6:	4421      	add	r1, r4
 80072d8:	6011      	str	r1, [r2, #0]
 80072da:	e7da      	b.n	8007292 <_free_r+0x26>
 80072dc:	d902      	bls.n	80072e4 <_free_r+0x78>
 80072de:	230c      	movs	r3, #12
 80072e0:	6003      	str	r3, [r0, #0]
 80072e2:	e7d6      	b.n	8007292 <_free_r+0x26>
 80072e4:	6825      	ldr	r5, [r4, #0]
 80072e6:	1961      	adds	r1, r4, r5
 80072e8:	428b      	cmp	r3, r1
 80072ea:	bf04      	itt	eq
 80072ec:	6819      	ldreq	r1, [r3, #0]
 80072ee:	685b      	ldreq	r3, [r3, #4]
 80072f0:	6063      	str	r3, [r4, #4]
 80072f2:	bf04      	itt	eq
 80072f4:	1949      	addeq	r1, r1, r5
 80072f6:	6021      	streq	r1, [r4, #0]
 80072f8:	6054      	str	r4, [r2, #4]
 80072fa:	e7ca      	b.n	8007292 <_free_r+0x26>
 80072fc:	b003      	add	sp, #12
 80072fe:	bd30      	pop	{r4, r5, pc}
 8007300:	200002bc 	.word	0x200002bc

08007304 <sbrk_aligned>:
 8007304:	b570      	push	{r4, r5, r6, lr}
 8007306:	4e0e      	ldr	r6, [pc, #56]	; (8007340 <sbrk_aligned+0x3c>)
 8007308:	460c      	mov	r4, r1
 800730a:	6831      	ldr	r1, [r6, #0]
 800730c:	4605      	mov	r5, r0
 800730e:	b911      	cbnz	r1, 8007316 <sbrk_aligned+0x12>
 8007310:	f000 f88c 	bl	800742c <_sbrk_r>
 8007314:	6030      	str	r0, [r6, #0]
 8007316:	4621      	mov	r1, r4
 8007318:	4628      	mov	r0, r5
 800731a:	f000 f887 	bl	800742c <_sbrk_r>
 800731e:	1c43      	adds	r3, r0, #1
 8007320:	d00a      	beq.n	8007338 <sbrk_aligned+0x34>
 8007322:	1cc4      	adds	r4, r0, #3
 8007324:	f024 0403 	bic.w	r4, r4, #3
 8007328:	42a0      	cmp	r0, r4
 800732a:	d007      	beq.n	800733c <sbrk_aligned+0x38>
 800732c:	1a21      	subs	r1, r4, r0
 800732e:	4628      	mov	r0, r5
 8007330:	f000 f87c 	bl	800742c <_sbrk_r>
 8007334:	3001      	adds	r0, #1
 8007336:	d101      	bne.n	800733c <sbrk_aligned+0x38>
 8007338:	f04f 34ff 	mov.w	r4, #4294967295
 800733c:	4620      	mov	r0, r4
 800733e:	bd70      	pop	{r4, r5, r6, pc}
 8007340:	200002c0 	.word	0x200002c0

08007344 <_malloc_r>:
 8007344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007348:	1ccd      	adds	r5, r1, #3
 800734a:	f025 0503 	bic.w	r5, r5, #3
 800734e:	3508      	adds	r5, #8
 8007350:	2d0c      	cmp	r5, #12
 8007352:	bf38      	it	cc
 8007354:	250c      	movcc	r5, #12
 8007356:	2d00      	cmp	r5, #0
 8007358:	4607      	mov	r7, r0
 800735a:	db01      	blt.n	8007360 <_malloc_r+0x1c>
 800735c:	42a9      	cmp	r1, r5
 800735e:	d905      	bls.n	800736c <_malloc_r+0x28>
 8007360:	230c      	movs	r3, #12
 8007362:	603b      	str	r3, [r7, #0]
 8007364:	2600      	movs	r6, #0
 8007366:	4630      	mov	r0, r6
 8007368:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800736c:	4e2e      	ldr	r6, [pc, #184]	; (8007428 <_malloc_r+0xe4>)
 800736e:	f000 f8af 	bl	80074d0 <__malloc_lock>
 8007372:	6833      	ldr	r3, [r6, #0]
 8007374:	461c      	mov	r4, r3
 8007376:	bb34      	cbnz	r4, 80073c6 <_malloc_r+0x82>
 8007378:	4629      	mov	r1, r5
 800737a:	4638      	mov	r0, r7
 800737c:	f7ff ffc2 	bl	8007304 <sbrk_aligned>
 8007380:	1c43      	adds	r3, r0, #1
 8007382:	4604      	mov	r4, r0
 8007384:	d14d      	bne.n	8007422 <_malloc_r+0xde>
 8007386:	6834      	ldr	r4, [r6, #0]
 8007388:	4626      	mov	r6, r4
 800738a:	2e00      	cmp	r6, #0
 800738c:	d140      	bne.n	8007410 <_malloc_r+0xcc>
 800738e:	6823      	ldr	r3, [r4, #0]
 8007390:	4631      	mov	r1, r6
 8007392:	4638      	mov	r0, r7
 8007394:	eb04 0803 	add.w	r8, r4, r3
 8007398:	f000 f848 	bl	800742c <_sbrk_r>
 800739c:	4580      	cmp	r8, r0
 800739e:	d13a      	bne.n	8007416 <_malloc_r+0xd2>
 80073a0:	6821      	ldr	r1, [r4, #0]
 80073a2:	3503      	adds	r5, #3
 80073a4:	1a6d      	subs	r5, r5, r1
 80073a6:	f025 0503 	bic.w	r5, r5, #3
 80073aa:	3508      	adds	r5, #8
 80073ac:	2d0c      	cmp	r5, #12
 80073ae:	bf38      	it	cc
 80073b0:	250c      	movcc	r5, #12
 80073b2:	4629      	mov	r1, r5
 80073b4:	4638      	mov	r0, r7
 80073b6:	f7ff ffa5 	bl	8007304 <sbrk_aligned>
 80073ba:	3001      	adds	r0, #1
 80073bc:	d02b      	beq.n	8007416 <_malloc_r+0xd2>
 80073be:	6823      	ldr	r3, [r4, #0]
 80073c0:	442b      	add	r3, r5
 80073c2:	6023      	str	r3, [r4, #0]
 80073c4:	e00e      	b.n	80073e4 <_malloc_r+0xa0>
 80073c6:	6822      	ldr	r2, [r4, #0]
 80073c8:	1b52      	subs	r2, r2, r5
 80073ca:	d41e      	bmi.n	800740a <_malloc_r+0xc6>
 80073cc:	2a0b      	cmp	r2, #11
 80073ce:	d916      	bls.n	80073fe <_malloc_r+0xba>
 80073d0:	1961      	adds	r1, r4, r5
 80073d2:	42a3      	cmp	r3, r4
 80073d4:	6025      	str	r5, [r4, #0]
 80073d6:	bf18      	it	ne
 80073d8:	6059      	strne	r1, [r3, #4]
 80073da:	6863      	ldr	r3, [r4, #4]
 80073dc:	bf08      	it	eq
 80073de:	6031      	streq	r1, [r6, #0]
 80073e0:	5162      	str	r2, [r4, r5]
 80073e2:	604b      	str	r3, [r1, #4]
 80073e4:	4638      	mov	r0, r7
 80073e6:	f104 060b 	add.w	r6, r4, #11
 80073ea:	f000 f877 	bl	80074dc <__malloc_unlock>
 80073ee:	f026 0607 	bic.w	r6, r6, #7
 80073f2:	1d23      	adds	r3, r4, #4
 80073f4:	1af2      	subs	r2, r6, r3
 80073f6:	d0b6      	beq.n	8007366 <_malloc_r+0x22>
 80073f8:	1b9b      	subs	r3, r3, r6
 80073fa:	50a3      	str	r3, [r4, r2]
 80073fc:	e7b3      	b.n	8007366 <_malloc_r+0x22>
 80073fe:	6862      	ldr	r2, [r4, #4]
 8007400:	42a3      	cmp	r3, r4
 8007402:	bf0c      	ite	eq
 8007404:	6032      	streq	r2, [r6, #0]
 8007406:	605a      	strne	r2, [r3, #4]
 8007408:	e7ec      	b.n	80073e4 <_malloc_r+0xa0>
 800740a:	4623      	mov	r3, r4
 800740c:	6864      	ldr	r4, [r4, #4]
 800740e:	e7b2      	b.n	8007376 <_malloc_r+0x32>
 8007410:	4634      	mov	r4, r6
 8007412:	6876      	ldr	r6, [r6, #4]
 8007414:	e7b9      	b.n	800738a <_malloc_r+0x46>
 8007416:	230c      	movs	r3, #12
 8007418:	603b      	str	r3, [r7, #0]
 800741a:	4638      	mov	r0, r7
 800741c:	f000 f85e 	bl	80074dc <__malloc_unlock>
 8007420:	e7a1      	b.n	8007366 <_malloc_r+0x22>
 8007422:	6025      	str	r5, [r4, #0]
 8007424:	e7de      	b.n	80073e4 <_malloc_r+0xa0>
 8007426:	bf00      	nop
 8007428:	200002bc 	.word	0x200002bc

0800742c <_sbrk_r>:
 800742c:	b538      	push	{r3, r4, r5, lr}
 800742e:	4d06      	ldr	r5, [pc, #24]	; (8007448 <_sbrk_r+0x1c>)
 8007430:	2300      	movs	r3, #0
 8007432:	4604      	mov	r4, r0
 8007434:	4608      	mov	r0, r1
 8007436:	602b      	str	r3, [r5, #0]
 8007438:	f7fa fda0 	bl	8001f7c <_sbrk>
 800743c:	1c43      	adds	r3, r0, #1
 800743e:	d102      	bne.n	8007446 <_sbrk_r+0x1a>
 8007440:	682b      	ldr	r3, [r5, #0]
 8007442:	b103      	cbz	r3, 8007446 <_sbrk_r+0x1a>
 8007444:	6023      	str	r3, [r4, #0]
 8007446:	bd38      	pop	{r3, r4, r5, pc}
 8007448:	200002c4 	.word	0x200002c4

0800744c <__assert_func>:
 800744c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800744e:	4614      	mov	r4, r2
 8007450:	461a      	mov	r2, r3
 8007452:	4b09      	ldr	r3, [pc, #36]	; (8007478 <__assert_func+0x2c>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	4605      	mov	r5, r0
 8007458:	68d8      	ldr	r0, [r3, #12]
 800745a:	b14c      	cbz	r4, 8007470 <__assert_func+0x24>
 800745c:	4b07      	ldr	r3, [pc, #28]	; (800747c <__assert_func+0x30>)
 800745e:	9100      	str	r1, [sp, #0]
 8007460:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007464:	4906      	ldr	r1, [pc, #24]	; (8007480 <__assert_func+0x34>)
 8007466:	462b      	mov	r3, r5
 8007468:	f000 f80e 	bl	8007488 <fiprintf>
 800746c:	f000 fa64 	bl	8007938 <abort>
 8007470:	4b04      	ldr	r3, [pc, #16]	; (8007484 <__assert_func+0x38>)
 8007472:	461c      	mov	r4, r3
 8007474:	e7f3      	b.n	800745e <__assert_func+0x12>
 8007476:	bf00      	nop
 8007478:	2000000c 	.word	0x2000000c
 800747c:	0800821c 	.word	0x0800821c
 8007480:	08008229 	.word	0x08008229
 8007484:	08008257 	.word	0x08008257

08007488 <fiprintf>:
 8007488:	b40e      	push	{r1, r2, r3}
 800748a:	b503      	push	{r0, r1, lr}
 800748c:	4601      	mov	r1, r0
 800748e:	ab03      	add	r3, sp, #12
 8007490:	4805      	ldr	r0, [pc, #20]	; (80074a8 <fiprintf+0x20>)
 8007492:	f853 2b04 	ldr.w	r2, [r3], #4
 8007496:	6800      	ldr	r0, [r0, #0]
 8007498:	9301      	str	r3, [sp, #4]
 800749a:	f000 f84f 	bl	800753c <_vfiprintf_r>
 800749e:	b002      	add	sp, #8
 80074a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80074a4:	b003      	add	sp, #12
 80074a6:	4770      	bx	lr
 80074a8:	2000000c 	.word	0x2000000c

080074ac <__ascii_mbtowc>:
 80074ac:	b082      	sub	sp, #8
 80074ae:	b901      	cbnz	r1, 80074b2 <__ascii_mbtowc+0x6>
 80074b0:	a901      	add	r1, sp, #4
 80074b2:	b142      	cbz	r2, 80074c6 <__ascii_mbtowc+0x1a>
 80074b4:	b14b      	cbz	r3, 80074ca <__ascii_mbtowc+0x1e>
 80074b6:	7813      	ldrb	r3, [r2, #0]
 80074b8:	600b      	str	r3, [r1, #0]
 80074ba:	7812      	ldrb	r2, [r2, #0]
 80074bc:	1e10      	subs	r0, r2, #0
 80074be:	bf18      	it	ne
 80074c0:	2001      	movne	r0, #1
 80074c2:	b002      	add	sp, #8
 80074c4:	4770      	bx	lr
 80074c6:	4610      	mov	r0, r2
 80074c8:	e7fb      	b.n	80074c2 <__ascii_mbtowc+0x16>
 80074ca:	f06f 0001 	mvn.w	r0, #1
 80074ce:	e7f8      	b.n	80074c2 <__ascii_mbtowc+0x16>

080074d0 <__malloc_lock>:
 80074d0:	4801      	ldr	r0, [pc, #4]	; (80074d8 <__malloc_lock+0x8>)
 80074d2:	f000 bbf1 	b.w	8007cb8 <__retarget_lock_acquire_recursive>
 80074d6:	bf00      	nop
 80074d8:	200002c8 	.word	0x200002c8

080074dc <__malloc_unlock>:
 80074dc:	4801      	ldr	r0, [pc, #4]	; (80074e4 <__malloc_unlock+0x8>)
 80074de:	f000 bbec 	b.w	8007cba <__retarget_lock_release_recursive>
 80074e2:	bf00      	nop
 80074e4:	200002c8 	.word	0x200002c8

080074e8 <__sfputc_r>:
 80074e8:	6893      	ldr	r3, [r2, #8]
 80074ea:	3b01      	subs	r3, #1
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	b410      	push	{r4}
 80074f0:	6093      	str	r3, [r2, #8]
 80074f2:	da08      	bge.n	8007506 <__sfputc_r+0x1e>
 80074f4:	6994      	ldr	r4, [r2, #24]
 80074f6:	42a3      	cmp	r3, r4
 80074f8:	db01      	blt.n	80074fe <__sfputc_r+0x16>
 80074fa:	290a      	cmp	r1, #10
 80074fc:	d103      	bne.n	8007506 <__sfputc_r+0x1e>
 80074fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007502:	f000 b94b 	b.w	800779c <__swbuf_r>
 8007506:	6813      	ldr	r3, [r2, #0]
 8007508:	1c58      	adds	r0, r3, #1
 800750a:	6010      	str	r0, [r2, #0]
 800750c:	7019      	strb	r1, [r3, #0]
 800750e:	4608      	mov	r0, r1
 8007510:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007514:	4770      	bx	lr

08007516 <__sfputs_r>:
 8007516:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007518:	4606      	mov	r6, r0
 800751a:	460f      	mov	r7, r1
 800751c:	4614      	mov	r4, r2
 800751e:	18d5      	adds	r5, r2, r3
 8007520:	42ac      	cmp	r4, r5
 8007522:	d101      	bne.n	8007528 <__sfputs_r+0x12>
 8007524:	2000      	movs	r0, #0
 8007526:	e007      	b.n	8007538 <__sfputs_r+0x22>
 8007528:	f814 1b01 	ldrb.w	r1, [r4], #1
 800752c:	463a      	mov	r2, r7
 800752e:	4630      	mov	r0, r6
 8007530:	f7ff ffda 	bl	80074e8 <__sfputc_r>
 8007534:	1c43      	adds	r3, r0, #1
 8007536:	d1f3      	bne.n	8007520 <__sfputs_r+0xa>
 8007538:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800753c <_vfiprintf_r>:
 800753c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007540:	460d      	mov	r5, r1
 8007542:	b09d      	sub	sp, #116	; 0x74
 8007544:	4614      	mov	r4, r2
 8007546:	4698      	mov	r8, r3
 8007548:	4606      	mov	r6, r0
 800754a:	b118      	cbz	r0, 8007554 <_vfiprintf_r+0x18>
 800754c:	6983      	ldr	r3, [r0, #24]
 800754e:	b90b      	cbnz	r3, 8007554 <_vfiprintf_r+0x18>
 8007550:	f000 fb14 	bl	8007b7c <__sinit>
 8007554:	4b89      	ldr	r3, [pc, #548]	; (800777c <_vfiprintf_r+0x240>)
 8007556:	429d      	cmp	r5, r3
 8007558:	d11b      	bne.n	8007592 <_vfiprintf_r+0x56>
 800755a:	6875      	ldr	r5, [r6, #4]
 800755c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800755e:	07d9      	lsls	r1, r3, #31
 8007560:	d405      	bmi.n	800756e <_vfiprintf_r+0x32>
 8007562:	89ab      	ldrh	r3, [r5, #12]
 8007564:	059a      	lsls	r2, r3, #22
 8007566:	d402      	bmi.n	800756e <_vfiprintf_r+0x32>
 8007568:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800756a:	f000 fba5 	bl	8007cb8 <__retarget_lock_acquire_recursive>
 800756e:	89ab      	ldrh	r3, [r5, #12]
 8007570:	071b      	lsls	r3, r3, #28
 8007572:	d501      	bpl.n	8007578 <_vfiprintf_r+0x3c>
 8007574:	692b      	ldr	r3, [r5, #16]
 8007576:	b9eb      	cbnz	r3, 80075b4 <_vfiprintf_r+0x78>
 8007578:	4629      	mov	r1, r5
 800757a:	4630      	mov	r0, r6
 800757c:	f000 f96e 	bl	800785c <__swsetup_r>
 8007580:	b1c0      	cbz	r0, 80075b4 <_vfiprintf_r+0x78>
 8007582:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007584:	07dc      	lsls	r4, r3, #31
 8007586:	d50e      	bpl.n	80075a6 <_vfiprintf_r+0x6a>
 8007588:	f04f 30ff 	mov.w	r0, #4294967295
 800758c:	b01d      	add	sp, #116	; 0x74
 800758e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007592:	4b7b      	ldr	r3, [pc, #492]	; (8007780 <_vfiprintf_r+0x244>)
 8007594:	429d      	cmp	r5, r3
 8007596:	d101      	bne.n	800759c <_vfiprintf_r+0x60>
 8007598:	68b5      	ldr	r5, [r6, #8]
 800759a:	e7df      	b.n	800755c <_vfiprintf_r+0x20>
 800759c:	4b79      	ldr	r3, [pc, #484]	; (8007784 <_vfiprintf_r+0x248>)
 800759e:	429d      	cmp	r5, r3
 80075a0:	bf08      	it	eq
 80075a2:	68f5      	ldreq	r5, [r6, #12]
 80075a4:	e7da      	b.n	800755c <_vfiprintf_r+0x20>
 80075a6:	89ab      	ldrh	r3, [r5, #12]
 80075a8:	0598      	lsls	r0, r3, #22
 80075aa:	d4ed      	bmi.n	8007588 <_vfiprintf_r+0x4c>
 80075ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80075ae:	f000 fb84 	bl	8007cba <__retarget_lock_release_recursive>
 80075b2:	e7e9      	b.n	8007588 <_vfiprintf_r+0x4c>
 80075b4:	2300      	movs	r3, #0
 80075b6:	9309      	str	r3, [sp, #36]	; 0x24
 80075b8:	2320      	movs	r3, #32
 80075ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80075be:	f8cd 800c 	str.w	r8, [sp, #12]
 80075c2:	2330      	movs	r3, #48	; 0x30
 80075c4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007788 <_vfiprintf_r+0x24c>
 80075c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80075cc:	f04f 0901 	mov.w	r9, #1
 80075d0:	4623      	mov	r3, r4
 80075d2:	469a      	mov	sl, r3
 80075d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80075d8:	b10a      	cbz	r2, 80075de <_vfiprintf_r+0xa2>
 80075da:	2a25      	cmp	r2, #37	; 0x25
 80075dc:	d1f9      	bne.n	80075d2 <_vfiprintf_r+0x96>
 80075de:	ebba 0b04 	subs.w	fp, sl, r4
 80075e2:	d00b      	beq.n	80075fc <_vfiprintf_r+0xc0>
 80075e4:	465b      	mov	r3, fp
 80075e6:	4622      	mov	r2, r4
 80075e8:	4629      	mov	r1, r5
 80075ea:	4630      	mov	r0, r6
 80075ec:	f7ff ff93 	bl	8007516 <__sfputs_r>
 80075f0:	3001      	adds	r0, #1
 80075f2:	f000 80aa 	beq.w	800774a <_vfiprintf_r+0x20e>
 80075f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80075f8:	445a      	add	r2, fp
 80075fa:	9209      	str	r2, [sp, #36]	; 0x24
 80075fc:	f89a 3000 	ldrb.w	r3, [sl]
 8007600:	2b00      	cmp	r3, #0
 8007602:	f000 80a2 	beq.w	800774a <_vfiprintf_r+0x20e>
 8007606:	2300      	movs	r3, #0
 8007608:	f04f 32ff 	mov.w	r2, #4294967295
 800760c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007610:	f10a 0a01 	add.w	sl, sl, #1
 8007614:	9304      	str	r3, [sp, #16]
 8007616:	9307      	str	r3, [sp, #28]
 8007618:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800761c:	931a      	str	r3, [sp, #104]	; 0x68
 800761e:	4654      	mov	r4, sl
 8007620:	2205      	movs	r2, #5
 8007622:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007626:	4858      	ldr	r0, [pc, #352]	; (8007788 <_vfiprintf_r+0x24c>)
 8007628:	f7f8 fdda 	bl	80001e0 <memchr>
 800762c:	9a04      	ldr	r2, [sp, #16]
 800762e:	b9d8      	cbnz	r0, 8007668 <_vfiprintf_r+0x12c>
 8007630:	06d1      	lsls	r1, r2, #27
 8007632:	bf44      	itt	mi
 8007634:	2320      	movmi	r3, #32
 8007636:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800763a:	0713      	lsls	r3, r2, #28
 800763c:	bf44      	itt	mi
 800763e:	232b      	movmi	r3, #43	; 0x2b
 8007640:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007644:	f89a 3000 	ldrb.w	r3, [sl]
 8007648:	2b2a      	cmp	r3, #42	; 0x2a
 800764a:	d015      	beq.n	8007678 <_vfiprintf_r+0x13c>
 800764c:	9a07      	ldr	r2, [sp, #28]
 800764e:	4654      	mov	r4, sl
 8007650:	2000      	movs	r0, #0
 8007652:	f04f 0c0a 	mov.w	ip, #10
 8007656:	4621      	mov	r1, r4
 8007658:	f811 3b01 	ldrb.w	r3, [r1], #1
 800765c:	3b30      	subs	r3, #48	; 0x30
 800765e:	2b09      	cmp	r3, #9
 8007660:	d94e      	bls.n	8007700 <_vfiprintf_r+0x1c4>
 8007662:	b1b0      	cbz	r0, 8007692 <_vfiprintf_r+0x156>
 8007664:	9207      	str	r2, [sp, #28]
 8007666:	e014      	b.n	8007692 <_vfiprintf_r+0x156>
 8007668:	eba0 0308 	sub.w	r3, r0, r8
 800766c:	fa09 f303 	lsl.w	r3, r9, r3
 8007670:	4313      	orrs	r3, r2
 8007672:	9304      	str	r3, [sp, #16]
 8007674:	46a2      	mov	sl, r4
 8007676:	e7d2      	b.n	800761e <_vfiprintf_r+0xe2>
 8007678:	9b03      	ldr	r3, [sp, #12]
 800767a:	1d19      	adds	r1, r3, #4
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	9103      	str	r1, [sp, #12]
 8007680:	2b00      	cmp	r3, #0
 8007682:	bfbb      	ittet	lt
 8007684:	425b      	neglt	r3, r3
 8007686:	f042 0202 	orrlt.w	r2, r2, #2
 800768a:	9307      	strge	r3, [sp, #28]
 800768c:	9307      	strlt	r3, [sp, #28]
 800768e:	bfb8      	it	lt
 8007690:	9204      	strlt	r2, [sp, #16]
 8007692:	7823      	ldrb	r3, [r4, #0]
 8007694:	2b2e      	cmp	r3, #46	; 0x2e
 8007696:	d10c      	bne.n	80076b2 <_vfiprintf_r+0x176>
 8007698:	7863      	ldrb	r3, [r4, #1]
 800769a:	2b2a      	cmp	r3, #42	; 0x2a
 800769c:	d135      	bne.n	800770a <_vfiprintf_r+0x1ce>
 800769e:	9b03      	ldr	r3, [sp, #12]
 80076a0:	1d1a      	adds	r2, r3, #4
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	9203      	str	r2, [sp, #12]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	bfb8      	it	lt
 80076aa:	f04f 33ff 	movlt.w	r3, #4294967295
 80076ae:	3402      	adds	r4, #2
 80076b0:	9305      	str	r3, [sp, #20]
 80076b2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007798 <_vfiprintf_r+0x25c>
 80076b6:	7821      	ldrb	r1, [r4, #0]
 80076b8:	2203      	movs	r2, #3
 80076ba:	4650      	mov	r0, sl
 80076bc:	f7f8 fd90 	bl	80001e0 <memchr>
 80076c0:	b140      	cbz	r0, 80076d4 <_vfiprintf_r+0x198>
 80076c2:	2340      	movs	r3, #64	; 0x40
 80076c4:	eba0 000a 	sub.w	r0, r0, sl
 80076c8:	fa03 f000 	lsl.w	r0, r3, r0
 80076cc:	9b04      	ldr	r3, [sp, #16]
 80076ce:	4303      	orrs	r3, r0
 80076d0:	3401      	adds	r4, #1
 80076d2:	9304      	str	r3, [sp, #16]
 80076d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076d8:	482c      	ldr	r0, [pc, #176]	; (800778c <_vfiprintf_r+0x250>)
 80076da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80076de:	2206      	movs	r2, #6
 80076e0:	f7f8 fd7e 	bl	80001e0 <memchr>
 80076e4:	2800      	cmp	r0, #0
 80076e6:	d03f      	beq.n	8007768 <_vfiprintf_r+0x22c>
 80076e8:	4b29      	ldr	r3, [pc, #164]	; (8007790 <_vfiprintf_r+0x254>)
 80076ea:	bb1b      	cbnz	r3, 8007734 <_vfiprintf_r+0x1f8>
 80076ec:	9b03      	ldr	r3, [sp, #12]
 80076ee:	3307      	adds	r3, #7
 80076f0:	f023 0307 	bic.w	r3, r3, #7
 80076f4:	3308      	adds	r3, #8
 80076f6:	9303      	str	r3, [sp, #12]
 80076f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076fa:	443b      	add	r3, r7
 80076fc:	9309      	str	r3, [sp, #36]	; 0x24
 80076fe:	e767      	b.n	80075d0 <_vfiprintf_r+0x94>
 8007700:	fb0c 3202 	mla	r2, ip, r2, r3
 8007704:	460c      	mov	r4, r1
 8007706:	2001      	movs	r0, #1
 8007708:	e7a5      	b.n	8007656 <_vfiprintf_r+0x11a>
 800770a:	2300      	movs	r3, #0
 800770c:	3401      	adds	r4, #1
 800770e:	9305      	str	r3, [sp, #20]
 8007710:	4619      	mov	r1, r3
 8007712:	f04f 0c0a 	mov.w	ip, #10
 8007716:	4620      	mov	r0, r4
 8007718:	f810 2b01 	ldrb.w	r2, [r0], #1
 800771c:	3a30      	subs	r2, #48	; 0x30
 800771e:	2a09      	cmp	r2, #9
 8007720:	d903      	bls.n	800772a <_vfiprintf_r+0x1ee>
 8007722:	2b00      	cmp	r3, #0
 8007724:	d0c5      	beq.n	80076b2 <_vfiprintf_r+0x176>
 8007726:	9105      	str	r1, [sp, #20]
 8007728:	e7c3      	b.n	80076b2 <_vfiprintf_r+0x176>
 800772a:	fb0c 2101 	mla	r1, ip, r1, r2
 800772e:	4604      	mov	r4, r0
 8007730:	2301      	movs	r3, #1
 8007732:	e7f0      	b.n	8007716 <_vfiprintf_r+0x1da>
 8007734:	ab03      	add	r3, sp, #12
 8007736:	9300      	str	r3, [sp, #0]
 8007738:	462a      	mov	r2, r5
 800773a:	4b16      	ldr	r3, [pc, #88]	; (8007794 <_vfiprintf_r+0x258>)
 800773c:	a904      	add	r1, sp, #16
 800773e:	4630      	mov	r0, r6
 8007740:	f7fd ff9a 	bl	8005678 <_printf_float>
 8007744:	4607      	mov	r7, r0
 8007746:	1c78      	adds	r0, r7, #1
 8007748:	d1d6      	bne.n	80076f8 <_vfiprintf_r+0x1bc>
 800774a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800774c:	07d9      	lsls	r1, r3, #31
 800774e:	d405      	bmi.n	800775c <_vfiprintf_r+0x220>
 8007750:	89ab      	ldrh	r3, [r5, #12]
 8007752:	059a      	lsls	r2, r3, #22
 8007754:	d402      	bmi.n	800775c <_vfiprintf_r+0x220>
 8007756:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007758:	f000 faaf 	bl	8007cba <__retarget_lock_release_recursive>
 800775c:	89ab      	ldrh	r3, [r5, #12]
 800775e:	065b      	lsls	r3, r3, #25
 8007760:	f53f af12 	bmi.w	8007588 <_vfiprintf_r+0x4c>
 8007764:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007766:	e711      	b.n	800758c <_vfiprintf_r+0x50>
 8007768:	ab03      	add	r3, sp, #12
 800776a:	9300      	str	r3, [sp, #0]
 800776c:	462a      	mov	r2, r5
 800776e:	4b09      	ldr	r3, [pc, #36]	; (8007794 <_vfiprintf_r+0x258>)
 8007770:	a904      	add	r1, sp, #16
 8007772:	4630      	mov	r0, r6
 8007774:	f7fe fa24 	bl	8005bc0 <_printf_i>
 8007778:	e7e4      	b.n	8007744 <_vfiprintf_r+0x208>
 800777a:	bf00      	nop
 800777c:	08008394 	.word	0x08008394
 8007780:	080083b4 	.word	0x080083b4
 8007784:	08008374 	.word	0x08008374
 8007788:	08008262 	.word	0x08008262
 800778c:	0800826c 	.word	0x0800826c
 8007790:	08005679 	.word	0x08005679
 8007794:	08007517 	.word	0x08007517
 8007798:	08008268 	.word	0x08008268

0800779c <__swbuf_r>:
 800779c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800779e:	460e      	mov	r6, r1
 80077a0:	4614      	mov	r4, r2
 80077a2:	4605      	mov	r5, r0
 80077a4:	b118      	cbz	r0, 80077ae <__swbuf_r+0x12>
 80077a6:	6983      	ldr	r3, [r0, #24]
 80077a8:	b90b      	cbnz	r3, 80077ae <__swbuf_r+0x12>
 80077aa:	f000 f9e7 	bl	8007b7c <__sinit>
 80077ae:	4b21      	ldr	r3, [pc, #132]	; (8007834 <__swbuf_r+0x98>)
 80077b0:	429c      	cmp	r4, r3
 80077b2:	d12b      	bne.n	800780c <__swbuf_r+0x70>
 80077b4:	686c      	ldr	r4, [r5, #4]
 80077b6:	69a3      	ldr	r3, [r4, #24]
 80077b8:	60a3      	str	r3, [r4, #8]
 80077ba:	89a3      	ldrh	r3, [r4, #12]
 80077bc:	071a      	lsls	r2, r3, #28
 80077be:	d52f      	bpl.n	8007820 <__swbuf_r+0x84>
 80077c0:	6923      	ldr	r3, [r4, #16]
 80077c2:	b36b      	cbz	r3, 8007820 <__swbuf_r+0x84>
 80077c4:	6923      	ldr	r3, [r4, #16]
 80077c6:	6820      	ldr	r0, [r4, #0]
 80077c8:	1ac0      	subs	r0, r0, r3
 80077ca:	6963      	ldr	r3, [r4, #20]
 80077cc:	b2f6      	uxtb	r6, r6
 80077ce:	4283      	cmp	r3, r0
 80077d0:	4637      	mov	r7, r6
 80077d2:	dc04      	bgt.n	80077de <__swbuf_r+0x42>
 80077d4:	4621      	mov	r1, r4
 80077d6:	4628      	mov	r0, r5
 80077d8:	f000 f93c 	bl	8007a54 <_fflush_r>
 80077dc:	bb30      	cbnz	r0, 800782c <__swbuf_r+0x90>
 80077de:	68a3      	ldr	r3, [r4, #8]
 80077e0:	3b01      	subs	r3, #1
 80077e2:	60a3      	str	r3, [r4, #8]
 80077e4:	6823      	ldr	r3, [r4, #0]
 80077e6:	1c5a      	adds	r2, r3, #1
 80077e8:	6022      	str	r2, [r4, #0]
 80077ea:	701e      	strb	r6, [r3, #0]
 80077ec:	6963      	ldr	r3, [r4, #20]
 80077ee:	3001      	adds	r0, #1
 80077f0:	4283      	cmp	r3, r0
 80077f2:	d004      	beq.n	80077fe <__swbuf_r+0x62>
 80077f4:	89a3      	ldrh	r3, [r4, #12]
 80077f6:	07db      	lsls	r3, r3, #31
 80077f8:	d506      	bpl.n	8007808 <__swbuf_r+0x6c>
 80077fa:	2e0a      	cmp	r6, #10
 80077fc:	d104      	bne.n	8007808 <__swbuf_r+0x6c>
 80077fe:	4621      	mov	r1, r4
 8007800:	4628      	mov	r0, r5
 8007802:	f000 f927 	bl	8007a54 <_fflush_r>
 8007806:	b988      	cbnz	r0, 800782c <__swbuf_r+0x90>
 8007808:	4638      	mov	r0, r7
 800780a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800780c:	4b0a      	ldr	r3, [pc, #40]	; (8007838 <__swbuf_r+0x9c>)
 800780e:	429c      	cmp	r4, r3
 8007810:	d101      	bne.n	8007816 <__swbuf_r+0x7a>
 8007812:	68ac      	ldr	r4, [r5, #8]
 8007814:	e7cf      	b.n	80077b6 <__swbuf_r+0x1a>
 8007816:	4b09      	ldr	r3, [pc, #36]	; (800783c <__swbuf_r+0xa0>)
 8007818:	429c      	cmp	r4, r3
 800781a:	bf08      	it	eq
 800781c:	68ec      	ldreq	r4, [r5, #12]
 800781e:	e7ca      	b.n	80077b6 <__swbuf_r+0x1a>
 8007820:	4621      	mov	r1, r4
 8007822:	4628      	mov	r0, r5
 8007824:	f000 f81a 	bl	800785c <__swsetup_r>
 8007828:	2800      	cmp	r0, #0
 800782a:	d0cb      	beq.n	80077c4 <__swbuf_r+0x28>
 800782c:	f04f 37ff 	mov.w	r7, #4294967295
 8007830:	e7ea      	b.n	8007808 <__swbuf_r+0x6c>
 8007832:	bf00      	nop
 8007834:	08008394 	.word	0x08008394
 8007838:	080083b4 	.word	0x080083b4
 800783c:	08008374 	.word	0x08008374

08007840 <__ascii_wctomb>:
 8007840:	b149      	cbz	r1, 8007856 <__ascii_wctomb+0x16>
 8007842:	2aff      	cmp	r2, #255	; 0xff
 8007844:	bf85      	ittet	hi
 8007846:	238a      	movhi	r3, #138	; 0x8a
 8007848:	6003      	strhi	r3, [r0, #0]
 800784a:	700a      	strbls	r2, [r1, #0]
 800784c:	f04f 30ff 	movhi.w	r0, #4294967295
 8007850:	bf98      	it	ls
 8007852:	2001      	movls	r0, #1
 8007854:	4770      	bx	lr
 8007856:	4608      	mov	r0, r1
 8007858:	4770      	bx	lr
	...

0800785c <__swsetup_r>:
 800785c:	4b32      	ldr	r3, [pc, #200]	; (8007928 <__swsetup_r+0xcc>)
 800785e:	b570      	push	{r4, r5, r6, lr}
 8007860:	681d      	ldr	r5, [r3, #0]
 8007862:	4606      	mov	r6, r0
 8007864:	460c      	mov	r4, r1
 8007866:	b125      	cbz	r5, 8007872 <__swsetup_r+0x16>
 8007868:	69ab      	ldr	r3, [r5, #24]
 800786a:	b913      	cbnz	r3, 8007872 <__swsetup_r+0x16>
 800786c:	4628      	mov	r0, r5
 800786e:	f000 f985 	bl	8007b7c <__sinit>
 8007872:	4b2e      	ldr	r3, [pc, #184]	; (800792c <__swsetup_r+0xd0>)
 8007874:	429c      	cmp	r4, r3
 8007876:	d10f      	bne.n	8007898 <__swsetup_r+0x3c>
 8007878:	686c      	ldr	r4, [r5, #4]
 800787a:	89a3      	ldrh	r3, [r4, #12]
 800787c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007880:	0719      	lsls	r1, r3, #28
 8007882:	d42c      	bmi.n	80078de <__swsetup_r+0x82>
 8007884:	06dd      	lsls	r5, r3, #27
 8007886:	d411      	bmi.n	80078ac <__swsetup_r+0x50>
 8007888:	2309      	movs	r3, #9
 800788a:	6033      	str	r3, [r6, #0]
 800788c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007890:	81a3      	strh	r3, [r4, #12]
 8007892:	f04f 30ff 	mov.w	r0, #4294967295
 8007896:	e03e      	b.n	8007916 <__swsetup_r+0xba>
 8007898:	4b25      	ldr	r3, [pc, #148]	; (8007930 <__swsetup_r+0xd4>)
 800789a:	429c      	cmp	r4, r3
 800789c:	d101      	bne.n	80078a2 <__swsetup_r+0x46>
 800789e:	68ac      	ldr	r4, [r5, #8]
 80078a0:	e7eb      	b.n	800787a <__swsetup_r+0x1e>
 80078a2:	4b24      	ldr	r3, [pc, #144]	; (8007934 <__swsetup_r+0xd8>)
 80078a4:	429c      	cmp	r4, r3
 80078a6:	bf08      	it	eq
 80078a8:	68ec      	ldreq	r4, [r5, #12]
 80078aa:	e7e6      	b.n	800787a <__swsetup_r+0x1e>
 80078ac:	0758      	lsls	r0, r3, #29
 80078ae:	d512      	bpl.n	80078d6 <__swsetup_r+0x7a>
 80078b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80078b2:	b141      	cbz	r1, 80078c6 <__swsetup_r+0x6a>
 80078b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80078b8:	4299      	cmp	r1, r3
 80078ba:	d002      	beq.n	80078c2 <__swsetup_r+0x66>
 80078bc:	4630      	mov	r0, r6
 80078be:	f7ff fcd5 	bl	800726c <_free_r>
 80078c2:	2300      	movs	r3, #0
 80078c4:	6363      	str	r3, [r4, #52]	; 0x34
 80078c6:	89a3      	ldrh	r3, [r4, #12]
 80078c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80078cc:	81a3      	strh	r3, [r4, #12]
 80078ce:	2300      	movs	r3, #0
 80078d0:	6063      	str	r3, [r4, #4]
 80078d2:	6923      	ldr	r3, [r4, #16]
 80078d4:	6023      	str	r3, [r4, #0]
 80078d6:	89a3      	ldrh	r3, [r4, #12]
 80078d8:	f043 0308 	orr.w	r3, r3, #8
 80078dc:	81a3      	strh	r3, [r4, #12]
 80078de:	6923      	ldr	r3, [r4, #16]
 80078e0:	b94b      	cbnz	r3, 80078f6 <__swsetup_r+0x9a>
 80078e2:	89a3      	ldrh	r3, [r4, #12]
 80078e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80078e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078ec:	d003      	beq.n	80078f6 <__swsetup_r+0x9a>
 80078ee:	4621      	mov	r1, r4
 80078f0:	4630      	mov	r0, r6
 80078f2:	f000 fa09 	bl	8007d08 <__smakebuf_r>
 80078f6:	89a0      	ldrh	r0, [r4, #12]
 80078f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80078fc:	f010 0301 	ands.w	r3, r0, #1
 8007900:	d00a      	beq.n	8007918 <__swsetup_r+0xbc>
 8007902:	2300      	movs	r3, #0
 8007904:	60a3      	str	r3, [r4, #8]
 8007906:	6963      	ldr	r3, [r4, #20]
 8007908:	425b      	negs	r3, r3
 800790a:	61a3      	str	r3, [r4, #24]
 800790c:	6923      	ldr	r3, [r4, #16]
 800790e:	b943      	cbnz	r3, 8007922 <__swsetup_r+0xc6>
 8007910:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007914:	d1ba      	bne.n	800788c <__swsetup_r+0x30>
 8007916:	bd70      	pop	{r4, r5, r6, pc}
 8007918:	0781      	lsls	r1, r0, #30
 800791a:	bf58      	it	pl
 800791c:	6963      	ldrpl	r3, [r4, #20]
 800791e:	60a3      	str	r3, [r4, #8]
 8007920:	e7f4      	b.n	800790c <__swsetup_r+0xb0>
 8007922:	2000      	movs	r0, #0
 8007924:	e7f7      	b.n	8007916 <__swsetup_r+0xba>
 8007926:	bf00      	nop
 8007928:	2000000c 	.word	0x2000000c
 800792c:	08008394 	.word	0x08008394
 8007930:	080083b4 	.word	0x080083b4
 8007934:	08008374 	.word	0x08008374

08007938 <abort>:
 8007938:	b508      	push	{r3, lr}
 800793a:	2006      	movs	r0, #6
 800793c:	f000 fa4c 	bl	8007dd8 <raise>
 8007940:	2001      	movs	r0, #1
 8007942:	f7fa fabf 	bl	8001ec4 <_exit>
	...

08007948 <__sflush_r>:
 8007948:	898a      	ldrh	r2, [r1, #12]
 800794a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800794e:	4605      	mov	r5, r0
 8007950:	0710      	lsls	r0, r2, #28
 8007952:	460c      	mov	r4, r1
 8007954:	d458      	bmi.n	8007a08 <__sflush_r+0xc0>
 8007956:	684b      	ldr	r3, [r1, #4]
 8007958:	2b00      	cmp	r3, #0
 800795a:	dc05      	bgt.n	8007968 <__sflush_r+0x20>
 800795c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800795e:	2b00      	cmp	r3, #0
 8007960:	dc02      	bgt.n	8007968 <__sflush_r+0x20>
 8007962:	2000      	movs	r0, #0
 8007964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007968:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800796a:	2e00      	cmp	r6, #0
 800796c:	d0f9      	beq.n	8007962 <__sflush_r+0x1a>
 800796e:	2300      	movs	r3, #0
 8007970:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007974:	682f      	ldr	r7, [r5, #0]
 8007976:	602b      	str	r3, [r5, #0]
 8007978:	d032      	beq.n	80079e0 <__sflush_r+0x98>
 800797a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800797c:	89a3      	ldrh	r3, [r4, #12]
 800797e:	075a      	lsls	r2, r3, #29
 8007980:	d505      	bpl.n	800798e <__sflush_r+0x46>
 8007982:	6863      	ldr	r3, [r4, #4]
 8007984:	1ac0      	subs	r0, r0, r3
 8007986:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007988:	b10b      	cbz	r3, 800798e <__sflush_r+0x46>
 800798a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800798c:	1ac0      	subs	r0, r0, r3
 800798e:	2300      	movs	r3, #0
 8007990:	4602      	mov	r2, r0
 8007992:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007994:	6a21      	ldr	r1, [r4, #32]
 8007996:	4628      	mov	r0, r5
 8007998:	47b0      	blx	r6
 800799a:	1c43      	adds	r3, r0, #1
 800799c:	89a3      	ldrh	r3, [r4, #12]
 800799e:	d106      	bne.n	80079ae <__sflush_r+0x66>
 80079a0:	6829      	ldr	r1, [r5, #0]
 80079a2:	291d      	cmp	r1, #29
 80079a4:	d82c      	bhi.n	8007a00 <__sflush_r+0xb8>
 80079a6:	4a2a      	ldr	r2, [pc, #168]	; (8007a50 <__sflush_r+0x108>)
 80079a8:	40ca      	lsrs	r2, r1
 80079aa:	07d6      	lsls	r6, r2, #31
 80079ac:	d528      	bpl.n	8007a00 <__sflush_r+0xb8>
 80079ae:	2200      	movs	r2, #0
 80079b0:	6062      	str	r2, [r4, #4]
 80079b2:	04d9      	lsls	r1, r3, #19
 80079b4:	6922      	ldr	r2, [r4, #16]
 80079b6:	6022      	str	r2, [r4, #0]
 80079b8:	d504      	bpl.n	80079c4 <__sflush_r+0x7c>
 80079ba:	1c42      	adds	r2, r0, #1
 80079bc:	d101      	bne.n	80079c2 <__sflush_r+0x7a>
 80079be:	682b      	ldr	r3, [r5, #0]
 80079c0:	b903      	cbnz	r3, 80079c4 <__sflush_r+0x7c>
 80079c2:	6560      	str	r0, [r4, #84]	; 0x54
 80079c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80079c6:	602f      	str	r7, [r5, #0]
 80079c8:	2900      	cmp	r1, #0
 80079ca:	d0ca      	beq.n	8007962 <__sflush_r+0x1a>
 80079cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80079d0:	4299      	cmp	r1, r3
 80079d2:	d002      	beq.n	80079da <__sflush_r+0x92>
 80079d4:	4628      	mov	r0, r5
 80079d6:	f7ff fc49 	bl	800726c <_free_r>
 80079da:	2000      	movs	r0, #0
 80079dc:	6360      	str	r0, [r4, #52]	; 0x34
 80079de:	e7c1      	b.n	8007964 <__sflush_r+0x1c>
 80079e0:	6a21      	ldr	r1, [r4, #32]
 80079e2:	2301      	movs	r3, #1
 80079e4:	4628      	mov	r0, r5
 80079e6:	47b0      	blx	r6
 80079e8:	1c41      	adds	r1, r0, #1
 80079ea:	d1c7      	bne.n	800797c <__sflush_r+0x34>
 80079ec:	682b      	ldr	r3, [r5, #0]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d0c4      	beq.n	800797c <__sflush_r+0x34>
 80079f2:	2b1d      	cmp	r3, #29
 80079f4:	d001      	beq.n	80079fa <__sflush_r+0xb2>
 80079f6:	2b16      	cmp	r3, #22
 80079f8:	d101      	bne.n	80079fe <__sflush_r+0xb6>
 80079fa:	602f      	str	r7, [r5, #0]
 80079fc:	e7b1      	b.n	8007962 <__sflush_r+0x1a>
 80079fe:	89a3      	ldrh	r3, [r4, #12]
 8007a00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a04:	81a3      	strh	r3, [r4, #12]
 8007a06:	e7ad      	b.n	8007964 <__sflush_r+0x1c>
 8007a08:	690f      	ldr	r7, [r1, #16]
 8007a0a:	2f00      	cmp	r7, #0
 8007a0c:	d0a9      	beq.n	8007962 <__sflush_r+0x1a>
 8007a0e:	0793      	lsls	r3, r2, #30
 8007a10:	680e      	ldr	r6, [r1, #0]
 8007a12:	bf08      	it	eq
 8007a14:	694b      	ldreq	r3, [r1, #20]
 8007a16:	600f      	str	r7, [r1, #0]
 8007a18:	bf18      	it	ne
 8007a1a:	2300      	movne	r3, #0
 8007a1c:	eba6 0807 	sub.w	r8, r6, r7
 8007a20:	608b      	str	r3, [r1, #8]
 8007a22:	f1b8 0f00 	cmp.w	r8, #0
 8007a26:	dd9c      	ble.n	8007962 <__sflush_r+0x1a>
 8007a28:	6a21      	ldr	r1, [r4, #32]
 8007a2a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007a2c:	4643      	mov	r3, r8
 8007a2e:	463a      	mov	r2, r7
 8007a30:	4628      	mov	r0, r5
 8007a32:	47b0      	blx	r6
 8007a34:	2800      	cmp	r0, #0
 8007a36:	dc06      	bgt.n	8007a46 <__sflush_r+0xfe>
 8007a38:	89a3      	ldrh	r3, [r4, #12]
 8007a3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a3e:	81a3      	strh	r3, [r4, #12]
 8007a40:	f04f 30ff 	mov.w	r0, #4294967295
 8007a44:	e78e      	b.n	8007964 <__sflush_r+0x1c>
 8007a46:	4407      	add	r7, r0
 8007a48:	eba8 0800 	sub.w	r8, r8, r0
 8007a4c:	e7e9      	b.n	8007a22 <__sflush_r+0xda>
 8007a4e:	bf00      	nop
 8007a50:	20400001 	.word	0x20400001

08007a54 <_fflush_r>:
 8007a54:	b538      	push	{r3, r4, r5, lr}
 8007a56:	690b      	ldr	r3, [r1, #16]
 8007a58:	4605      	mov	r5, r0
 8007a5a:	460c      	mov	r4, r1
 8007a5c:	b913      	cbnz	r3, 8007a64 <_fflush_r+0x10>
 8007a5e:	2500      	movs	r5, #0
 8007a60:	4628      	mov	r0, r5
 8007a62:	bd38      	pop	{r3, r4, r5, pc}
 8007a64:	b118      	cbz	r0, 8007a6e <_fflush_r+0x1a>
 8007a66:	6983      	ldr	r3, [r0, #24]
 8007a68:	b90b      	cbnz	r3, 8007a6e <_fflush_r+0x1a>
 8007a6a:	f000 f887 	bl	8007b7c <__sinit>
 8007a6e:	4b14      	ldr	r3, [pc, #80]	; (8007ac0 <_fflush_r+0x6c>)
 8007a70:	429c      	cmp	r4, r3
 8007a72:	d11b      	bne.n	8007aac <_fflush_r+0x58>
 8007a74:	686c      	ldr	r4, [r5, #4]
 8007a76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d0ef      	beq.n	8007a5e <_fflush_r+0xa>
 8007a7e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007a80:	07d0      	lsls	r0, r2, #31
 8007a82:	d404      	bmi.n	8007a8e <_fflush_r+0x3a>
 8007a84:	0599      	lsls	r1, r3, #22
 8007a86:	d402      	bmi.n	8007a8e <_fflush_r+0x3a>
 8007a88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007a8a:	f000 f915 	bl	8007cb8 <__retarget_lock_acquire_recursive>
 8007a8e:	4628      	mov	r0, r5
 8007a90:	4621      	mov	r1, r4
 8007a92:	f7ff ff59 	bl	8007948 <__sflush_r>
 8007a96:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007a98:	07da      	lsls	r2, r3, #31
 8007a9a:	4605      	mov	r5, r0
 8007a9c:	d4e0      	bmi.n	8007a60 <_fflush_r+0xc>
 8007a9e:	89a3      	ldrh	r3, [r4, #12]
 8007aa0:	059b      	lsls	r3, r3, #22
 8007aa2:	d4dd      	bmi.n	8007a60 <_fflush_r+0xc>
 8007aa4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007aa6:	f000 f908 	bl	8007cba <__retarget_lock_release_recursive>
 8007aaa:	e7d9      	b.n	8007a60 <_fflush_r+0xc>
 8007aac:	4b05      	ldr	r3, [pc, #20]	; (8007ac4 <_fflush_r+0x70>)
 8007aae:	429c      	cmp	r4, r3
 8007ab0:	d101      	bne.n	8007ab6 <_fflush_r+0x62>
 8007ab2:	68ac      	ldr	r4, [r5, #8]
 8007ab4:	e7df      	b.n	8007a76 <_fflush_r+0x22>
 8007ab6:	4b04      	ldr	r3, [pc, #16]	; (8007ac8 <_fflush_r+0x74>)
 8007ab8:	429c      	cmp	r4, r3
 8007aba:	bf08      	it	eq
 8007abc:	68ec      	ldreq	r4, [r5, #12]
 8007abe:	e7da      	b.n	8007a76 <_fflush_r+0x22>
 8007ac0:	08008394 	.word	0x08008394
 8007ac4:	080083b4 	.word	0x080083b4
 8007ac8:	08008374 	.word	0x08008374

08007acc <std>:
 8007acc:	2300      	movs	r3, #0
 8007ace:	b510      	push	{r4, lr}
 8007ad0:	4604      	mov	r4, r0
 8007ad2:	e9c0 3300 	strd	r3, r3, [r0]
 8007ad6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007ada:	6083      	str	r3, [r0, #8]
 8007adc:	8181      	strh	r1, [r0, #12]
 8007ade:	6643      	str	r3, [r0, #100]	; 0x64
 8007ae0:	81c2      	strh	r2, [r0, #14]
 8007ae2:	6183      	str	r3, [r0, #24]
 8007ae4:	4619      	mov	r1, r3
 8007ae6:	2208      	movs	r2, #8
 8007ae8:	305c      	adds	r0, #92	; 0x5c
 8007aea:	f7fd fd1d 	bl	8005528 <memset>
 8007aee:	4b05      	ldr	r3, [pc, #20]	; (8007b04 <std+0x38>)
 8007af0:	6263      	str	r3, [r4, #36]	; 0x24
 8007af2:	4b05      	ldr	r3, [pc, #20]	; (8007b08 <std+0x3c>)
 8007af4:	62a3      	str	r3, [r4, #40]	; 0x28
 8007af6:	4b05      	ldr	r3, [pc, #20]	; (8007b0c <std+0x40>)
 8007af8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007afa:	4b05      	ldr	r3, [pc, #20]	; (8007b10 <std+0x44>)
 8007afc:	6224      	str	r4, [r4, #32]
 8007afe:	6323      	str	r3, [r4, #48]	; 0x30
 8007b00:	bd10      	pop	{r4, pc}
 8007b02:	bf00      	nop
 8007b04:	08007e11 	.word	0x08007e11
 8007b08:	08007e33 	.word	0x08007e33
 8007b0c:	08007e6b 	.word	0x08007e6b
 8007b10:	08007e8f 	.word	0x08007e8f

08007b14 <_cleanup_r>:
 8007b14:	4901      	ldr	r1, [pc, #4]	; (8007b1c <_cleanup_r+0x8>)
 8007b16:	f000 b8af 	b.w	8007c78 <_fwalk_reent>
 8007b1a:	bf00      	nop
 8007b1c:	08007a55 	.word	0x08007a55

08007b20 <__sfmoreglue>:
 8007b20:	b570      	push	{r4, r5, r6, lr}
 8007b22:	2268      	movs	r2, #104	; 0x68
 8007b24:	1e4d      	subs	r5, r1, #1
 8007b26:	4355      	muls	r5, r2
 8007b28:	460e      	mov	r6, r1
 8007b2a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007b2e:	f7ff fc09 	bl	8007344 <_malloc_r>
 8007b32:	4604      	mov	r4, r0
 8007b34:	b140      	cbz	r0, 8007b48 <__sfmoreglue+0x28>
 8007b36:	2100      	movs	r1, #0
 8007b38:	e9c0 1600 	strd	r1, r6, [r0]
 8007b3c:	300c      	adds	r0, #12
 8007b3e:	60a0      	str	r0, [r4, #8]
 8007b40:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007b44:	f7fd fcf0 	bl	8005528 <memset>
 8007b48:	4620      	mov	r0, r4
 8007b4a:	bd70      	pop	{r4, r5, r6, pc}

08007b4c <__sfp_lock_acquire>:
 8007b4c:	4801      	ldr	r0, [pc, #4]	; (8007b54 <__sfp_lock_acquire+0x8>)
 8007b4e:	f000 b8b3 	b.w	8007cb8 <__retarget_lock_acquire_recursive>
 8007b52:	bf00      	nop
 8007b54:	200002c9 	.word	0x200002c9

08007b58 <__sfp_lock_release>:
 8007b58:	4801      	ldr	r0, [pc, #4]	; (8007b60 <__sfp_lock_release+0x8>)
 8007b5a:	f000 b8ae 	b.w	8007cba <__retarget_lock_release_recursive>
 8007b5e:	bf00      	nop
 8007b60:	200002c9 	.word	0x200002c9

08007b64 <__sinit_lock_acquire>:
 8007b64:	4801      	ldr	r0, [pc, #4]	; (8007b6c <__sinit_lock_acquire+0x8>)
 8007b66:	f000 b8a7 	b.w	8007cb8 <__retarget_lock_acquire_recursive>
 8007b6a:	bf00      	nop
 8007b6c:	200002ca 	.word	0x200002ca

08007b70 <__sinit_lock_release>:
 8007b70:	4801      	ldr	r0, [pc, #4]	; (8007b78 <__sinit_lock_release+0x8>)
 8007b72:	f000 b8a2 	b.w	8007cba <__retarget_lock_release_recursive>
 8007b76:	bf00      	nop
 8007b78:	200002ca 	.word	0x200002ca

08007b7c <__sinit>:
 8007b7c:	b510      	push	{r4, lr}
 8007b7e:	4604      	mov	r4, r0
 8007b80:	f7ff fff0 	bl	8007b64 <__sinit_lock_acquire>
 8007b84:	69a3      	ldr	r3, [r4, #24]
 8007b86:	b11b      	cbz	r3, 8007b90 <__sinit+0x14>
 8007b88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b8c:	f7ff bff0 	b.w	8007b70 <__sinit_lock_release>
 8007b90:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007b94:	6523      	str	r3, [r4, #80]	; 0x50
 8007b96:	4b13      	ldr	r3, [pc, #76]	; (8007be4 <__sinit+0x68>)
 8007b98:	4a13      	ldr	r2, [pc, #76]	; (8007be8 <__sinit+0x6c>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	62a2      	str	r2, [r4, #40]	; 0x28
 8007b9e:	42a3      	cmp	r3, r4
 8007ba0:	bf04      	itt	eq
 8007ba2:	2301      	moveq	r3, #1
 8007ba4:	61a3      	streq	r3, [r4, #24]
 8007ba6:	4620      	mov	r0, r4
 8007ba8:	f000 f820 	bl	8007bec <__sfp>
 8007bac:	6060      	str	r0, [r4, #4]
 8007bae:	4620      	mov	r0, r4
 8007bb0:	f000 f81c 	bl	8007bec <__sfp>
 8007bb4:	60a0      	str	r0, [r4, #8]
 8007bb6:	4620      	mov	r0, r4
 8007bb8:	f000 f818 	bl	8007bec <__sfp>
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	60e0      	str	r0, [r4, #12]
 8007bc0:	2104      	movs	r1, #4
 8007bc2:	6860      	ldr	r0, [r4, #4]
 8007bc4:	f7ff ff82 	bl	8007acc <std>
 8007bc8:	68a0      	ldr	r0, [r4, #8]
 8007bca:	2201      	movs	r2, #1
 8007bcc:	2109      	movs	r1, #9
 8007bce:	f7ff ff7d 	bl	8007acc <std>
 8007bd2:	68e0      	ldr	r0, [r4, #12]
 8007bd4:	2202      	movs	r2, #2
 8007bd6:	2112      	movs	r1, #18
 8007bd8:	f7ff ff78 	bl	8007acc <std>
 8007bdc:	2301      	movs	r3, #1
 8007bde:	61a3      	str	r3, [r4, #24]
 8007be0:	e7d2      	b.n	8007b88 <__sinit+0xc>
 8007be2:	bf00      	nop
 8007be4:	08007ffc 	.word	0x08007ffc
 8007be8:	08007b15 	.word	0x08007b15

08007bec <__sfp>:
 8007bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bee:	4607      	mov	r7, r0
 8007bf0:	f7ff ffac 	bl	8007b4c <__sfp_lock_acquire>
 8007bf4:	4b1e      	ldr	r3, [pc, #120]	; (8007c70 <__sfp+0x84>)
 8007bf6:	681e      	ldr	r6, [r3, #0]
 8007bf8:	69b3      	ldr	r3, [r6, #24]
 8007bfa:	b913      	cbnz	r3, 8007c02 <__sfp+0x16>
 8007bfc:	4630      	mov	r0, r6
 8007bfe:	f7ff ffbd 	bl	8007b7c <__sinit>
 8007c02:	3648      	adds	r6, #72	; 0x48
 8007c04:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007c08:	3b01      	subs	r3, #1
 8007c0a:	d503      	bpl.n	8007c14 <__sfp+0x28>
 8007c0c:	6833      	ldr	r3, [r6, #0]
 8007c0e:	b30b      	cbz	r3, 8007c54 <__sfp+0x68>
 8007c10:	6836      	ldr	r6, [r6, #0]
 8007c12:	e7f7      	b.n	8007c04 <__sfp+0x18>
 8007c14:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007c18:	b9d5      	cbnz	r5, 8007c50 <__sfp+0x64>
 8007c1a:	4b16      	ldr	r3, [pc, #88]	; (8007c74 <__sfp+0x88>)
 8007c1c:	60e3      	str	r3, [r4, #12]
 8007c1e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007c22:	6665      	str	r5, [r4, #100]	; 0x64
 8007c24:	f000 f847 	bl	8007cb6 <__retarget_lock_init_recursive>
 8007c28:	f7ff ff96 	bl	8007b58 <__sfp_lock_release>
 8007c2c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007c30:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007c34:	6025      	str	r5, [r4, #0]
 8007c36:	61a5      	str	r5, [r4, #24]
 8007c38:	2208      	movs	r2, #8
 8007c3a:	4629      	mov	r1, r5
 8007c3c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007c40:	f7fd fc72 	bl	8005528 <memset>
 8007c44:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007c48:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007c4c:	4620      	mov	r0, r4
 8007c4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c50:	3468      	adds	r4, #104	; 0x68
 8007c52:	e7d9      	b.n	8007c08 <__sfp+0x1c>
 8007c54:	2104      	movs	r1, #4
 8007c56:	4638      	mov	r0, r7
 8007c58:	f7ff ff62 	bl	8007b20 <__sfmoreglue>
 8007c5c:	4604      	mov	r4, r0
 8007c5e:	6030      	str	r0, [r6, #0]
 8007c60:	2800      	cmp	r0, #0
 8007c62:	d1d5      	bne.n	8007c10 <__sfp+0x24>
 8007c64:	f7ff ff78 	bl	8007b58 <__sfp_lock_release>
 8007c68:	230c      	movs	r3, #12
 8007c6a:	603b      	str	r3, [r7, #0]
 8007c6c:	e7ee      	b.n	8007c4c <__sfp+0x60>
 8007c6e:	bf00      	nop
 8007c70:	08007ffc 	.word	0x08007ffc
 8007c74:	ffff0001 	.word	0xffff0001

08007c78 <_fwalk_reent>:
 8007c78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c7c:	4606      	mov	r6, r0
 8007c7e:	4688      	mov	r8, r1
 8007c80:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007c84:	2700      	movs	r7, #0
 8007c86:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007c8a:	f1b9 0901 	subs.w	r9, r9, #1
 8007c8e:	d505      	bpl.n	8007c9c <_fwalk_reent+0x24>
 8007c90:	6824      	ldr	r4, [r4, #0]
 8007c92:	2c00      	cmp	r4, #0
 8007c94:	d1f7      	bne.n	8007c86 <_fwalk_reent+0xe>
 8007c96:	4638      	mov	r0, r7
 8007c98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c9c:	89ab      	ldrh	r3, [r5, #12]
 8007c9e:	2b01      	cmp	r3, #1
 8007ca0:	d907      	bls.n	8007cb2 <_fwalk_reent+0x3a>
 8007ca2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007ca6:	3301      	adds	r3, #1
 8007ca8:	d003      	beq.n	8007cb2 <_fwalk_reent+0x3a>
 8007caa:	4629      	mov	r1, r5
 8007cac:	4630      	mov	r0, r6
 8007cae:	47c0      	blx	r8
 8007cb0:	4307      	orrs	r7, r0
 8007cb2:	3568      	adds	r5, #104	; 0x68
 8007cb4:	e7e9      	b.n	8007c8a <_fwalk_reent+0x12>

08007cb6 <__retarget_lock_init_recursive>:
 8007cb6:	4770      	bx	lr

08007cb8 <__retarget_lock_acquire_recursive>:
 8007cb8:	4770      	bx	lr

08007cba <__retarget_lock_release_recursive>:
 8007cba:	4770      	bx	lr

08007cbc <__swhatbuf_r>:
 8007cbc:	b570      	push	{r4, r5, r6, lr}
 8007cbe:	460e      	mov	r6, r1
 8007cc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cc4:	2900      	cmp	r1, #0
 8007cc6:	b096      	sub	sp, #88	; 0x58
 8007cc8:	4614      	mov	r4, r2
 8007cca:	461d      	mov	r5, r3
 8007ccc:	da08      	bge.n	8007ce0 <__swhatbuf_r+0x24>
 8007cce:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	602a      	str	r2, [r5, #0]
 8007cd6:	061a      	lsls	r2, r3, #24
 8007cd8:	d410      	bmi.n	8007cfc <__swhatbuf_r+0x40>
 8007cda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007cde:	e00e      	b.n	8007cfe <__swhatbuf_r+0x42>
 8007ce0:	466a      	mov	r2, sp
 8007ce2:	f000 f8fb 	bl	8007edc <_fstat_r>
 8007ce6:	2800      	cmp	r0, #0
 8007ce8:	dbf1      	blt.n	8007cce <__swhatbuf_r+0x12>
 8007cea:	9a01      	ldr	r2, [sp, #4]
 8007cec:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007cf0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007cf4:	425a      	negs	r2, r3
 8007cf6:	415a      	adcs	r2, r3
 8007cf8:	602a      	str	r2, [r5, #0]
 8007cfa:	e7ee      	b.n	8007cda <__swhatbuf_r+0x1e>
 8007cfc:	2340      	movs	r3, #64	; 0x40
 8007cfe:	2000      	movs	r0, #0
 8007d00:	6023      	str	r3, [r4, #0]
 8007d02:	b016      	add	sp, #88	; 0x58
 8007d04:	bd70      	pop	{r4, r5, r6, pc}
	...

08007d08 <__smakebuf_r>:
 8007d08:	898b      	ldrh	r3, [r1, #12]
 8007d0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007d0c:	079d      	lsls	r5, r3, #30
 8007d0e:	4606      	mov	r6, r0
 8007d10:	460c      	mov	r4, r1
 8007d12:	d507      	bpl.n	8007d24 <__smakebuf_r+0x1c>
 8007d14:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007d18:	6023      	str	r3, [r4, #0]
 8007d1a:	6123      	str	r3, [r4, #16]
 8007d1c:	2301      	movs	r3, #1
 8007d1e:	6163      	str	r3, [r4, #20]
 8007d20:	b002      	add	sp, #8
 8007d22:	bd70      	pop	{r4, r5, r6, pc}
 8007d24:	ab01      	add	r3, sp, #4
 8007d26:	466a      	mov	r2, sp
 8007d28:	f7ff ffc8 	bl	8007cbc <__swhatbuf_r>
 8007d2c:	9900      	ldr	r1, [sp, #0]
 8007d2e:	4605      	mov	r5, r0
 8007d30:	4630      	mov	r0, r6
 8007d32:	f7ff fb07 	bl	8007344 <_malloc_r>
 8007d36:	b948      	cbnz	r0, 8007d4c <__smakebuf_r+0x44>
 8007d38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d3c:	059a      	lsls	r2, r3, #22
 8007d3e:	d4ef      	bmi.n	8007d20 <__smakebuf_r+0x18>
 8007d40:	f023 0303 	bic.w	r3, r3, #3
 8007d44:	f043 0302 	orr.w	r3, r3, #2
 8007d48:	81a3      	strh	r3, [r4, #12]
 8007d4a:	e7e3      	b.n	8007d14 <__smakebuf_r+0xc>
 8007d4c:	4b0d      	ldr	r3, [pc, #52]	; (8007d84 <__smakebuf_r+0x7c>)
 8007d4e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007d50:	89a3      	ldrh	r3, [r4, #12]
 8007d52:	6020      	str	r0, [r4, #0]
 8007d54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d58:	81a3      	strh	r3, [r4, #12]
 8007d5a:	9b00      	ldr	r3, [sp, #0]
 8007d5c:	6163      	str	r3, [r4, #20]
 8007d5e:	9b01      	ldr	r3, [sp, #4]
 8007d60:	6120      	str	r0, [r4, #16]
 8007d62:	b15b      	cbz	r3, 8007d7c <__smakebuf_r+0x74>
 8007d64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007d68:	4630      	mov	r0, r6
 8007d6a:	f000 f8c9 	bl	8007f00 <_isatty_r>
 8007d6e:	b128      	cbz	r0, 8007d7c <__smakebuf_r+0x74>
 8007d70:	89a3      	ldrh	r3, [r4, #12]
 8007d72:	f023 0303 	bic.w	r3, r3, #3
 8007d76:	f043 0301 	orr.w	r3, r3, #1
 8007d7a:	81a3      	strh	r3, [r4, #12]
 8007d7c:	89a0      	ldrh	r0, [r4, #12]
 8007d7e:	4305      	orrs	r5, r0
 8007d80:	81a5      	strh	r5, [r4, #12]
 8007d82:	e7cd      	b.n	8007d20 <__smakebuf_r+0x18>
 8007d84:	08007b15 	.word	0x08007b15

08007d88 <_raise_r>:
 8007d88:	291f      	cmp	r1, #31
 8007d8a:	b538      	push	{r3, r4, r5, lr}
 8007d8c:	4604      	mov	r4, r0
 8007d8e:	460d      	mov	r5, r1
 8007d90:	d904      	bls.n	8007d9c <_raise_r+0x14>
 8007d92:	2316      	movs	r3, #22
 8007d94:	6003      	str	r3, [r0, #0]
 8007d96:	f04f 30ff 	mov.w	r0, #4294967295
 8007d9a:	bd38      	pop	{r3, r4, r5, pc}
 8007d9c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007d9e:	b112      	cbz	r2, 8007da6 <_raise_r+0x1e>
 8007da0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007da4:	b94b      	cbnz	r3, 8007dba <_raise_r+0x32>
 8007da6:	4620      	mov	r0, r4
 8007da8:	f000 f830 	bl	8007e0c <_getpid_r>
 8007dac:	462a      	mov	r2, r5
 8007dae:	4601      	mov	r1, r0
 8007db0:	4620      	mov	r0, r4
 8007db2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007db6:	f000 b817 	b.w	8007de8 <_kill_r>
 8007dba:	2b01      	cmp	r3, #1
 8007dbc:	d00a      	beq.n	8007dd4 <_raise_r+0x4c>
 8007dbe:	1c59      	adds	r1, r3, #1
 8007dc0:	d103      	bne.n	8007dca <_raise_r+0x42>
 8007dc2:	2316      	movs	r3, #22
 8007dc4:	6003      	str	r3, [r0, #0]
 8007dc6:	2001      	movs	r0, #1
 8007dc8:	e7e7      	b.n	8007d9a <_raise_r+0x12>
 8007dca:	2400      	movs	r4, #0
 8007dcc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007dd0:	4628      	mov	r0, r5
 8007dd2:	4798      	blx	r3
 8007dd4:	2000      	movs	r0, #0
 8007dd6:	e7e0      	b.n	8007d9a <_raise_r+0x12>

08007dd8 <raise>:
 8007dd8:	4b02      	ldr	r3, [pc, #8]	; (8007de4 <raise+0xc>)
 8007dda:	4601      	mov	r1, r0
 8007ddc:	6818      	ldr	r0, [r3, #0]
 8007dde:	f7ff bfd3 	b.w	8007d88 <_raise_r>
 8007de2:	bf00      	nop
 8007de4:	2000000c 	.word	0x2000000c

08007de8 <_kill_r>:
 8007de8:	b538      	push	{r3, r4, r5, lr}
 8007dea:	4d07      	ldr	r5, [pc, #28]	; (8007e08 <_kill_r+0x20>)
 8007dec:	2300      	movs	r3, #0
 8007dee:	4604      	mov	r4, r0
 8007df0:	4608      	mov	r0, r1
 8007df2:	4611      	mov	r1, r2
 8007df4:	602b      	str	r3, [r5, #0]
 8007df6:	f7fa f855 	bl	8001ea4 <_kill>
 8007dfa:	1c43      	adds	r3, r0, #1
 8007dfc:	d102      	bne.n	8007e04 <_kill_r+0x1c>
 8007dfe:	682b      	ldr	r3, [r5, #0]
 8007e00:	b103      	cbz	r3, 8007e04 <_kill_r+0x1c>
 8007e02:	6023      	str	r3, [r4, #0]
 8007e04:	bd38      	pop	{r3, r4, r5, pc}
 8007e06:	bf00      	nop
 8007e08:	200002c4 	.word	0x200002c4

08007e0c <_getpid_r>:
 8007e0c:	f7fa b842 	b.w	8001e94 <_getpid>

08007e10 <__sread>:
 8007e10:	b510      	push	{r4, lr}
 8007e12:	460c      	mov	r4, r1
 8007e14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e18:	f000 f894 	bl	8007f44 <_read_r>
 8007e1c:	2800      	cmp	r0, #0
 8007e1e:	bfab      	itete	ge
 8007e20:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007e22:	89a3      	ldrhlt	r3, [r4, #12]
 8007e24:	181b      	addge	r3, r3, r0
 8007e26:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007e2a:	bfac      	ite	ge
 8007e2c:	6563      	strge	r3, [r4, #84]	; 0x54
 8007e2e:	81a3      	strhlt	r3, [r4, #12]
 8007e30:	bd10      	pop	{r4, pc}

08007e32 <__swrite>:
 8007e32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e36:	461f      	mov	r7, r3
 8007e38:	898b      	ldrh	r3, [r1, #12]
 8007e3a:	05db      	lsls	r3, r3, #23
 8007e3c:	4605      	mov	r5, r0
 8007e3e:	460c      	mov	r4, r1
 8007e40:	4616      	mov	r6, r2
 8007e42:	d505      	bpl.n	8007e50 <__swrite+0x1e>
 8007e44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e48:	2302      	movs	r3, #2
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	f000 f868 	bl	8007f20 <_lseek_r>
 8007e50:	89a3      	ldrh	r3, [r4, #12]
 8007e52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007e56:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007e5a:	81a3      	strh	r3, [r4, #12]
 8007e5c:	4632      	mov	r2, r6
 8007e5e:	463b      	mov	r3, r7
 8007e60:	4628      	mov	r0, r5
 8007e62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e66:	f000 b817 	b.w	8007e98 <_write_r>

08007e6a <__sseek>:
 8007e6a:	b510      	push	{r4, lr}
 8007e6c:	460c      	mov	r4, r1
 8007e6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e72:	f000 f855 	bl	8007f20 <_lseek_r>
 8007e76:	1c43      	adds	r3, r0, #1
 8007e78:	89a3      	ldrh	r3, [r4, #12]
 8007e7a:	bf15      	itete	ne
 8007e7c:	6560      	strne	r0, [r4, #84]	; 0x54
 8007e7e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007e82:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007e86:	81a3      	strheq	r3, [r4, #12]
 8007e88:	bf18      	it	ne
 8007e8a:	81a3      	strhne	r3, [r4, #12]
 8007e8c:	bd10      	pop	{r4, pc}

08007e8e <__sclose>:
 8007e8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e92:	f000 b813 	b.w	8007ebc <_close_r>
	...

08007e98 <_write_r>:
 8007e98:	b538      	push	{r3, r4, r5, lr}
 8007e9a:	4d07      	ldr	r5, [pc, #28]	; (8007eb8 <_write_r+0x20>)
 8007e9c:	4604      	mov	r4, r0
 8007e9e:	4608      	mov	r0, r1
 8007ea0:	4611      	mov	r1, r2
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	602a      	str	r2, [r5, #0]
 8007ea6:	461a      	mov	r2, r3
 8007ea8:	f7f9 fbcc 	bl	8001644 <_write>
 8007eac:	1c43      	adds	r3, r0, #1
 8007eae:	d102      	bne.n	8007eb6 <_write_r+0x1e>
 8007eb0:	682b      	ldr	r3, [r5, #0]
 8007eb2:	b103      	cbz	r3, 8007eb6 <_write_r+0x1e>
 8007eb4:	6023      	str	r3, [r4, #0]
 8007eb6:	bd38      	pop	{r3, r4, r5, pc}
 8007eb8:	200002c4 	.word	0x200002c4

08007ebc <_close_r>:
 8007ebc:	b538      	push	{r3, r4, r5, lr}
 8007ebe:	4d06      	ldr	r5, [pc, #24]	; (8007ed8 <_close_r+0x1c>)
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	4604      	mov	r4, r0
 8007ec4:	4608      	mov	r0, r1
 8007ec6:	602b      	str	r3, [r5, #0]
 8007ec8:	f7fa f823 	bl	8001f12 <_close>
 8007ecc:	1c43      	adds	r3, r0, #1
 8007ece:	d102      	bne.n	8007ed6 <_close_r+0x1a>
 8007ed0:	682b      	ldr	r3, [r5, #0]
 8007ed2:	b103      	cbz	r3, 8007ed6 <_close_r+0x1a>
 8007ed4:	6023      	str	r3, [r4, #0]
 8007ed6:	bd38      	pop	{r3, r4, r5, pc}
 8007ed8:	200002c4 	.word	0x200002c4

08007edc <_fstat_r>:
 8007edc:	b538      	push	{r3, r4, r5, lr}
 8007ede:	4d07      	ldr	r5, [pc, #28]	; (8007efc <_fstat_r+0x20>)
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	4604      	mov	r4, r0
 8007ee4:	4608      	mov	r0, r1
 8007ee6:	4611      	mov	r1, r2
 8007ee8:	602b      	str	r3, [r5, #0]
 8007eea:	f7fa f81e 	bl	8001f2a <_fstat>
 8007eee:	1c43      	adds	r3, r0, #1
 8007ef0:	d102      	bne.n	8007ef8 <_fstat_r+0x1c>
 8007ef2:	682b      	ldr	r3, [r5, #0]
 8007ef4:	b103      	cbz	r3, 8007ef8 <_fstat_r+0x1c>
 8007ef6:	6023      	str	r3, [r4, #0]
 8007ef8:	bd38      	pop	{r3, r4, r5, pc}
 8007efa:	bf00      	nop
 8007efc:	200002c4 	.word	0x200002c4

08007f00 <_isatty_r>:
 8007f00:	b538      	push	{r3, r4, r5, lr}
 8007f02:	4d06      	ldr	r5, [pc, #24]	; (8007f1c <_isatty_r+0x1c>)
 8007f04:	2300      	movs	r3, #0
 8007f06:	4604      	mov	r4, r0
 8007f08:	4608      	mov	r0, r1
 8007f0a:	602b      	str	r3, [r5, #0]
 8007f0c:	f7fa f81d 	bl	8001f4a <_isatty>
 8007f10:	1c43      	adds	r3, r0, #1
 8007f12:	d102      	bne.n	8007f1a <_isatty_r+0x1a>
 8007f14:	682b      	ldr	r3, [r5, #0]
 8007f16:	b103      	cbz	r3, 8007f1a <_isatty_r+0x1a>
 8007f18:	6023      	str	r3, [r4, #0]
 8007f1a:	bd38      	pop	{r3, r4, r5, pc}
 8007f1c:	200002c4 	.word	0x200002c4

08007f20 <_lseek_r>:
 8007f20:	b538      	push	{r3, r4, r5, lr}
 8007f22:	4d07      	ldr	r5, [pc, #28]	; (8007f40 <_lseek_r+0x20>)
 8007f24:	4604      	mov	r4, r0
 8007f26:	4608      	mov	r0, r1
 8007f28:	4611      	mov	r1, r2
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	602a      	str	r2, [r5, #0]
 8007f2e:	461a      	mov	r2, r3
 8007f30:	f7fa f816 	bl	8001f60 <_lseek>
 8007f34:	1c43      	adds	r3, r0, #1
 8007f36:	d102      	bne.n	8007f3e <_lseek_r+0x1e>
 8007f38:	682b      	ldr	r3, [r5, #0]
 8007f3a:	b103      	cbz	r3, 8007f3e <_lseek_r+0x1e>
 8007f3c:	6023      	str	r3, [r4, #0]
 8007f3e:	bd38      	pop	{r3, r4, r5, pc}
 8007f40:	200002c4 	.word	0x200002c4

08007f44 <_read_r>:
 8007f44:	b538      	push	{r3, r4, r5, lr}
 8007f46:	4d07      	ldr	r5, [pc, #28]	; (8007f64 <_read_r+0x20>)
 8007f48:	4604      	mov	r4, r0
 8007f4a:	4608      	mov	r0, r1
 8007f4c:	4611      	mov	r1, r2
 8007f4e:	2200      	movs	r2, #0
 8007f50:	602a      	str	r2, [r5, #0]
 8007f52:	461a      	mov	r2, r3
 8007f54:	f7f9 ffc0 	bl	8001ed8 <_read>
 8007f58:	1c43      	adds	r3, r0, #1
 8007f5a:	d102      	bne.n	8007f62 <_read_r+0x1e>
 8007f5c:	682b      	ldr	r3, [r5, #0]
 8007f5e:	b103      	cbz	r3, 8007f62 <_read_r+0x1e>
 8007f60:	6023      	str	r3, [r4, #0]
 8007f62:	bd38      	pop	{r3, r4, r5, pc}
 8007f64:	200002c4 	.word	0x200002c4

08007f68 <_init>:
 8007f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f6a:	bf00      	nop
 8007f6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f6e:	bc08      	pop	{r3}
 8007f70:	469e      	mov	lr, r3
 8007f72:	4770      	bx	lr

08007f74 <_fini>:
 8007f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f76:	bf00      	nop
 8007f78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f7a:	bc08      	pop	{r3}
 8007f7c:	469e      	mov	lr, r3
 8007f7e:	4770      	bx	lr
