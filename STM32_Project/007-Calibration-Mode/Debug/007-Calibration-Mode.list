
007-Calibration-Mode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007cd0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000454  08007e60  08007e60  00017e60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080082b4  080082b4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  080082b4  080082b4  000182b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080082bc  080082bc  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080082bc  080082bc  000182bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080082c0  080082c0  000182c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080082c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f0  200001dc  080084a0  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002cc  080084a0  000202cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f428  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b3f  00000000  00000000  0002f634  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fd8  00000000  00000000  00032178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e80  00000000  00000000  00033150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025211  00000000  00000000  00033fd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010bec  00000000  00000000  000591e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d8f8c  00000000  00000000  00069dcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00142d59  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000051b8  00000000  00000000  00142dac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007e48 	.word	0x08007e48

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08007e48 	.word	0x08007e48

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <iBus_Check_CHKSUM>:
#include"FS-iA10B.h"

FSiA10B_iBus iBus;

unsigned char iBus_Check_CHKSUM(unsigned char* data, unsigned char len)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b085      	sub	sp, #20
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
 8000eb4:	460b      	mov	r3, r1
 8000eb6:	70fb      	strb	r3, [r7, #3]
	unsigned short chksum = 0xffff;
 8000eb8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ebc:	81fb      	strh	r3, [r7, #14]
	for (int i=0; i<len-2;i++)
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	60bb      	str	r3, [r7, #8]
 8000ec2:	e00a      	b.n	8000eda <iBus_Check_CHKSUM+0x2e>
	{
		chksum = chksum - data[i];
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	687a      	ldr	r2, [r7, #4]
 8000ec8:	4413      	add	r3, r2
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	b29b      	uxth	r3, r3
 8000ece:	89fa      	ldrh	r2, [r7, #14]
 8000ed0:	1ad3      	subs	r3, r2, r3
 8000ed2:	81fb      	strh	r3, [r7, #14]
	for (int i=0; i<len-2;i++)
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	3301      	adds	r3, #1
 8000ed8:	60bb      	str	r3, [r7, #8]
 8000eda:	78fb      	ldrb	r3, [r7, #3]
 8000edc:	3b02      	subs	r3, #2
 8000ede:	68ba      	ldr	r2, [r7, #8]
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	dbef      	blt.n	8000ec4 <iBus_Check_CHKSUM+0x18>
	}

	return ((chksum&0x00ff)==data[30]) && ((chksum>>8) == data[31]);
 8000ee4:	89fb      	ldrh	r3, [r7, #14]
 8000ee6:	b2db      	uxtb	r3, r3
 8000ee8:	687a      	ldr	r2, [r7, #4]
 8000eea:	321e      	adds	r2, #30
 8000eec:	7812      	ldrb	r2, [r2, #0]
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d10a      	bne.n	8000f08 <iBus_Check_CHKSUM+0x5c>
 8000ef2:	89fb      	ldrh	r3, [r7, #14]
 8000ef4:	0a1b      	lsrs	r3, r3, #8
 8000ef6:	b29a      	uxth	r2, r3
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	331f      	adds	r3, #31
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	b29b      	uxth	r3, r3
 8000f00:	429a      	cmp	r2, r3
 8000f02:	d101      	bne.n	8000f08 <iBus_Check_CHKSUM+0x5c>
 8000f04:	2301      	movs	r3, #1
 8000f06:	e000      	b.n	8000f0a <iBus_Check_CHKSUM+0x5e>
 8000f08:	2300      	movs	r3, #0
 8000f0a:	b2db      	uxtb	r3, r3

};
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	3714      	adds	r7, #20
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr

08000f18 <iBus_Parsing>:

void iBus_Parsing(unsigned char* data, FSiA10B_iBus* iBus)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
 8000f20:	6039      	str	r1, [r7, #0]
	iBus->RH =(data[2] | data[3] << 8) & 0x0fff;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	3302      	adds	r3, #2
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	b21a      	sxth	r2, r3
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	3303      	adds	r3, #3
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	021b      	lsls	r3, r3, #8
 8000f32:	b21b      	sxth	r3, r3
 8000f34:	4313      	orrs	r3, r2
 8000f36:	b21b      	sxth	r3, r3
 8000f38:	b29b      	uxth	r3, r3
 8000f3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f3e:	b29a      	uxth	r2, r3
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	801a      	strh	r2, [r3, #0]
	iBus->RV =(data[4] | data[5] << 8) & 0x0fff;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	3304      	adds	r3, #4
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	b21a      	sxth	r2, r3
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	3305      	adds	r3, #5
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	021b      	lsls	r3, r3, #8
 8000f54:	b21b      	sxth	r3, r3
 8000f56:	4313      	orrs	r3, r2
 8000f58:	b21b      	sxth	r3, r3
 8000f5a:	b29b      	uxth	r3, r3
 8000f5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f60:	b29a      	uxth	r2, r3
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	805a      	strh	r2, [r3, #2]
	iBus->LV =(data[6] | data[7] << 8) & 0x0fff;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	3306      	adds	r3, #6
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	b21a      	sxth	r2, r3
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	3307      	adds	r3, #7
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	021b      	lsls	r3, r3, #8
 8000f76:	b21b      	sxth	r3, r3
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	b21b      	sxth	r3, r3
 8000f7c:	b29b      	uxth	r3, r3
 8000f7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f82:	b29a      	uxth	r2, r3
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	809a      	strh	r2, [r3, #4]
	iBus->LH =(data[8] | data[9] << 8) & 0x0fff;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	3308      	adds	r3, #8
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	b21a      	sxth	r2, r3
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	3309      	adds	r3, #9
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	021b      	lsls	r3, r3, #8
 8000f98:	b21b      	sxth	r3, r3
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	b21b      	sxth	r3, r3
 8000f9e:	b29b      	uxth	r3, r3
 8000fa0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000fa4:	b29a      	uxth	r2, r3
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	80da      	strh	r2, [r3, #6]
	iBus->SwA =(data[10] | data[11] << 8) & 0x0fff;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	330a      	adds	r3, #10
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	b21a      	sxth	r2, r3
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	330b      	adds	r3, #11
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	021b      	lsls	r3, r3, #8
 8000fba:	b21b      	sxth	r3, r3
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	b21b      	sxth	r3, r3
 8000fc0:	b29b      	uxth	r3, r3
 8000fc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000fc6:	b29a      	uxth	r2, r3
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	811a      	strh	r2, [r3, #8]
	iBus->SwC =(data[12] | data[13] << 8) & 0x0fff;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	330c      	adds	r3, #12
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	b21a      	sxth	r2, r3
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	330d      	adds	r3, #13
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	021b      	lsls	r3, r3, #8
 8000fdc:	b21b      	sxth	r3, r3
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	b21b      	sxth	r3, r3
 8000fe2:	b29b      	uxth	r3, r3
 8000fe4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000fe8:	b29a      	uxth	r2, r3
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	819a      	strh	r2, [r3, #12]

	iBus->SwD =(data[14] | data[15] << 8) & 0x0fff;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	330e      	adds	r3, #14
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	b21a      	sxth	r2, r3
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	330f      	adds	r3, #15
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	021b      	lsls	r3, r3, #8
 8000ffe:	b21b      	sxth	r3, r3
 8001000:	4313      	orrs	r3, r2
 8001002:	b21b      	sxth	r3, r3
 8001004:	b29b      	uxth	r3, r3
 8001006:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800100a:	b29a      	uxth	r2, r3
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	81da      	strh	r2, [r3, #14]
	iBus->SwB =(data[16] | data[17] << 8) & 0x0fff;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	3310      	adds	r3, #16
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	b21a      	sxth	r2, r3
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	3311      	adds	r3, #17
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	021b      	lsls	r3, r3, #8
 8001020:	b21b      	sxth	r3, r3
 8001022:	4313      	orrs	r3, r2
 8001024:	b21b      	sxth	r3, r3
 8001026:	b29b      	uxth	r3, r3
 8001028:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800102c:	b29a      	uxth	r2, r3
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	815a      	strh	r2, [r3, #10]
	iBus->VrA =(data[18] | data[19] << 8) & 0x0fff;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	3312      	adds	r3, #18
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	b21a      	sxth	r2, r3
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	3313      	adds	r3, #19
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	021b      	lsls	r3, r3, #8
 8001042:	b21b      	sxth	r3, r3
 8001044:	4313      	orrs	r3, r2
 8001046:	b21b      	sxth	r3, r3
 8001048:	b29b      	uxth	r3, r3
 800104a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800104e:	b29a      	uxth	r2, r3
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	821a      	strh	r2, [r3, #16]
	iBus->VrB =(data[20] | data[21] << 8) & 0x0fff;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	3314      	adds	r3, #20
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	b21a      	sxth	r2, r3
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	3315      	adds	r3, #21
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	021b      	lsls	r3, r3, #8
 8001064:	b21b      	sxth	r3, r3
 8001066:	4313      	orrs	r3, r2
 8001068:	b21b      	sxth	r3, r3
 800106a:	b29b      	uxth	r3, r3
 800106c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001070:	b29a      	uxth	r2, r3
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	825a      	strh	r2, [r3, #18]


	iBus->FailSafe =iBus->SwD == 1500;
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	89db      	ldrh	r3, [r3, #14]
 800107a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800107e:	4293      	cmp	r3, r2
 8001080:	bf0c      	ite	eq
 8001082:	2301      	moveq	r3, #1
 8001084:	2300      	movne	r3, #0
 8001086:	b2db      	uxtb	r3, r3
 8001088:	461a      	mov	r2, r3
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	f883 2020 	strb.w	r2, [r3, #32]





}
 8001090:	bf00      	nop
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr

0800109c <iBus_isActiveFailSafe>:

unsigned char iBus_isActiveFailSafe(FSiA10B_iBus* iBus)
{
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
	return iBus->FailSafe !=0;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	bf14      	ite	ne
 80010ae:	2301      	movne	r3, #1
 80010b0:	2300      	moveq	r3, #0
 80010b2:	b2db      	uxtb	r3, r3

}
 80010b4:	4618      	mov	r0, r3
 80010b6:	370c      	adds	r7, #12
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr

080010c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010c4:	4b04      	ldr	r3, [pc, #16]	; (80010d8 <__NVIC_GetPriorityGrouping+0x18>)
 80010c6:	68db      	ldr	r3, [r3, #12]
 80010c8:	0a1b      	lsrs	r3, r3, #8
 80010ca:	f003 0307 	and.w	r3, r3, #7
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr
 80010d8:	e000ed00 	.word	0xe000ed00

080010dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4603      	mov	r3, r0
 80010e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	db0b      	blt.n	8001106 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010ee:	79fb      	ldrb	r3, [r7, #7]
 80010f0:	f003 021f 	and.w	r2, r3, #31
 80010f4:	4907      	ldr	r1, [pc, #28]	; (8001114 <__NVIC_EnableIRQ+0x38>)
 80010f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fa:	095b      	lsrs	r3, r3, #5
 80010fc:	2001      	movs	r0, #1
 80010fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001102:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001106:	bf00      	nop
 8001108:	370c      	adds	r7, #12
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	e000e100 	.word	0xe000e100

08001118 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	6039      	str	r1, [r7, #0]
 8001122:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001124:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001128:	2b00      	cmp	r3, #0
 800112a:	db0a      	blt.n	8001142 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	b2da      	uxtb	r2, r3
 8001130:	490c      	ldr	r1, [pc, #48]	; (8001164 <__NVIC_SetPriority+0x4c>)
 8001132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001136:	0112      	lsls	r2, r2, #4
 8001138:	b2d2      	uxtb	r2, r2
 800113a:	440b      	add	r3, r1
 800113c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001140:	e00a      	b.n	8001158 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	b2da      	uxtb	r2, r3
 8001146:	4908      	ldr	r1, [pc, #32]	; (8001168 <__NVIC_SetPriority+0x50>)
 8001148:	79fb      	ldrb	r3, [r7, #7]
 800114a:	f003 030f 	and.w	r3, r3, #15
 800114e:	3b04      	subs	r3, #4
 8001150:	0112      	lsls	r2, r2, #4
 8001152:	b2d2      	uxtb	r2, r2
 8001154:	440b      	add	r3, r1
 8001156:	761a      	strb	r2, [r3, #24]
}
 8001158:	bf00      	nop
 800115a:	370c      	adds	r7, #12
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr
 8001164:	e000e100 	.word	0xe000e100
 8001168:	e000ed00 	.word	0xe000ed00

0800116c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800116c:	b480      	push	{r7}
 800116e:	b089      	sub	sp, #36	; 0x24
 8001170:	af00      	add	r7, sp, #0
 8001172:	60f8      	str	r0, [r7, #12]
 8001174:	60b9      	str	r1, [r7, #8]
 8001176:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	f003 0307 	and.w	r3, r3, #7
 800117e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	f1c3 0307 	rsb	r3, r3, #7
 8001186:	2b04      	cmp	r3, #4
 8001188:	bf28      	it	cs
 800118a:	2304      	movcs	r3, #4
 800118c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	3304      	adds	r3, #4
 8001192:	2b06      	cmp	r3, #6
 8001194:	d902      	bls.n	800119c <NVIC_EncodePriority+0x30>
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	3b03      	subs	r3, #3
 800119a:	e000      	b.n	800119e <NVIC_EncodePriority+0x32>
 800119c:	2300      	movs	r3, #0
 800119e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a0:	f04f 32ff 	mov.w	r2, #4294967295
 80011a4:	69bb      	ldr	r3, [r7, #24]
 80011a6:	fa02 f303 	lsl.w	r3, r2, r3
 80011aa:	43da      	mvns	r2, r3
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	401a      	ands	r2, r3
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011b4:	f04f 31ff 	mov.w	r1, #4294967295
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	fa01 f303 	lsl.w	r3, r1, r3
 80011be:	43d9      	mvns	r1, r3
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c4:	4313      	orrs	r3, r2
         );
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3724      	adds	r7, #36	; 0x24
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr

080011d2 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 80011d2:	b480      	push	{r7}
 80011d4:	b083      	sub	sp, #12
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	68db      	ldr	r3, [r3, #12]
 80011de:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	60da      	str	r2, [r3, #12]
}
 80011e6:	bf00      	nop
 80011e8:	370c      	adds	r7, #12
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr

080011f2 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 80011f2:	b480      	push	{r7}
 80011f4:	b083      	sub	sp, #12
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	691b      	ldr	r3, [r3, #16]
 80011fe:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	695b      	ldr	r3, [r3, #20]
 800120a:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	615a      	str	r2, [r3, #20]
}
 8001212:	bf00      	nop
 8001214:	370c      	adds	r7, #12
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr

0800121e <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 800121e:	b480      	push	{r7}
 8001220:	b083      	sub	sp, #12
 8001222:	af00      	add	r7, sp, #0
 8001224:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800122e:	2b80      	cmp	r3, #128	; 0x80
 8001230:	bf0c      	ite	eq
 8001232:	2301      	moveq	r3, #1
 8001234:	2300      	movne	r3, #0
 8001236:	b2db      	uxtb	r3, r3
}
 8001238:	4618      	mov	r0, r3
 800123a:	370c      	adds	r7, #12
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr

08001244 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	460b      	mov	r3, r1
 800124e:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8001250:	78fa      	ldrb	r2, [r7, #3]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	605a      	str	r2, [r3, #4]
}
 8001256:	bf00      	nop
 8001258:	370c      	adds	r7, #12
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
	...

08001264 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001264:	b480      	push	{r7}
 8001266:	b085      	sub	sp, #20
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 800126c:	4b08      	ldr	r3, [pc, #32]	; (8001290 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800126e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001270:	4907      	ldr	r1, [pc, #28]	; (8001290 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4313      	orrs	r3, r2
 8001276:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001278:	4b05      	ldr	r3, [pc, #20]	; (8001290 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800127a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	4013      	ands	r3, r2
 8001280:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001282:	68fb      	ldr	r3, [r7, #12]
}
 8001284:	bf00      	nop
 8001286:	3714      	adds	r7, #20
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr
 8001290:	40023800 	.word	0x40023800

08001294 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001294:	b480      	push	{r7}
 8001296:	b085      	sub	sp, #20
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 800129c:	4b08      	ldr	r3, [pc, #32]	; (80012c0 <LL_APB1_GRP1_EnableClock+0x2c>)
 800129e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012a0:	4907      	ldr	r1, [pc, #28]	; (80012c0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80012a8:	4b05      	ldr	r3, [pc, #20]	; (80012c0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80012aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	4013      	ands	r3, r2
 80012b0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80012b2:	68fb      	ldr	r3, [r7, #12]
}
 80012b4:	bf00      	nop
 80012b6:	3714      	adds	r7, #20
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr
 80012c0:	40023800 	.word	0x40023800

080012c4 <M8N_TransimiData>:
0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x17,0x31,
0xBF
};

void M8N_TransimiData(unsigned char* data, unsigned char len)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	460b      	mov	r3, r1
 80012ce:	70fb      	strb	r3, [r7, #3]
for(int i=0;i<len;i++)
 80012d0:	2300      	movs	r3, #0
 80012d2:	60fb      	str	r3, [r7, #12]
 80012d4:	e011      	b.n	80012fa <M8N_TransimiData+0x36>
{
while(!LL_USART_IsActiveFlag_TXE(UART4));
 80012d6:	bf00      	nop
 80012d8:	480c      	ldr	r0, [pc, #48]	; (800130c <M8N_TransimiData+0x48>)
 80012da:	f7ff ffa0 	bl	800121e <LL_USART_IsActiveFlag_TXE>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d0f9      	beq.n	80012d8 <M8N_TransimiData+0x14>
LL_USART_TransmitData8(UART4, *(data+i));
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	687a      	ldr	r2, [r7, #4]
 80012e8:	4413      	add	r3, r2
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	4619      	mov	r1, r3
 80012ee:	4807      	ldr	r0, [pc, #28]	; (800130c <M8N_TransimiData+0x48>)
 80012f0:	f7ff ffa8 	bl	8001244 <LL_USART_TransmitData8>
for(int i=0;i<len;i++)
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	3301      	adds	r3, #1
 80012f8:	60fb      	str	r3, [r7, #12]
 80012fa:	78fb      	ldrb	r3, [r7, #3]
 80012fc:	68fa      	ldr	r2, [r7, #12]
 80012fe:	429a      	cmp	r2, r3
 8001300:	dbe9      	blt.n	80012d6 <M8N_TransimiData+0x12>
}
}
 8001302:	bf00      	nop
 8001304:	bf00      	nop
 8001306:	3710      	adds	r7, #16
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	40004c00 	.word	0x40004c00

08001310 <M8N_UART4_Initialization>:

void M8N_UART4_Initialization(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b08e      	sub	sp, #56	; 0x38
 8001314:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001316:	f107 031c 	add.w	r3, r7, #28
 800131a:	2200      	movs	r2, #0
 800131c:	601a      	str	r2, [r3, #0]
 800131e:	605a      	str	r2, [r3, #4]
 8001320:	609a      	str	r2, [r3, #8]
 8001322:	60da      	str	r2, [r3, #12]
 8001324:	611a      	str	r2, [r3, #16]
 8001326:	615a      	str	r2, [r3, #20]
 8001328:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800132a:	1d3b      	adds	r3, r7, #4
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	605a      	str	r2, [r3, #4]
 8001332:	609a      	str	r2, [r3, #8]
 8001334:	60da      	str	r2, [r3, #12]
 8001336:	611a      	str	r2, [r3, #16]
 8001338:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART4);
 800133a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800133e:	f7ff ffa9 	bl	8001294 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001342:	2004      	movs	r0, #4
 8001344:	f7ff ff8e 	bl	8001264 <LL_AHB1_GRP1_EnableClock>
  /**UART4 GPIO Configuration
  PC10   ------> UART4_TX
  PC11   ------> UART4_RX
  */
  GPIO_InitStruct.Pin = GPS_UART4_TX_Pin|GPS_UART4_RX_Pin;
 8001348:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800134c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800134e:	2302      	movs	r3, #2
 8001350:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001352:	2303      	movs	r3, #3
 8001354:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001356:	2300      	movs	r3, #0
 8001358:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800135a:	2301      	movs	r3, #1
 800135c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 800135e:	2308      	movs	r3, #8
 8001360:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001362:	1d3b      	adds	r3, r7, #4
 8001364:	4619      	mov	r1, r3
 8001366:	4819      	ldr	r0, [pc, #100]	; (80013cc <M8N_UART4_Initialization+0xbc>)
 8001368:	f003 f89f 	bl	80044aa <LL_GPIO_Init>

  /* UART4 interrupt Init */
  NVIC_SetPriority(UART4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800136c:	f7ff fea8 	bl	80010c0 <__NVIC_GetPriorityGrouping>
 8001370:	4603      	mov	r3, r0
 8001372:	2200      	movs	r2, #0
 8001374:	2100      	movs	r1, #0
 8001376:	4618      	mov	r0, r3
 8001378:	f7ff fef8 	bl	800116c <NVIC_EncodePriority>
 800137c:	4603      	mov	r3, r0
 800137e:	4619      	mov	r1, r3
 8001380:	2034      	movs	r0, #52	; 0x34
 8001382:	f7ff fec9 	bl	8001118 <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART4_IRQn);
 8001386:	2034      	movs	r0, #52	; 0x34
 8001388:	f7ff fea8 	bl	80010dc <__NVIC_EnableIRQ>

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  USART_InitStruct.BaudRate = 9600;
 800138c:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8001390:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001392:	2300      	movs	r3, #0
 8001394:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001396:	2300      	movs	r3, #0
 8001398:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800139a:	2300      	movs	r3, #0
 800139c:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800139e:	230c      	movs	r3, #12
 80013a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80013a2:	2300      	movs	r3, #0
 80013a4:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80013a6:	2300      	movs	r3, #0
 80013a8:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(UART4, &USART_InitStruct);
 80013aa:	f107 031c 	add.w	r3, r7, #28
 80013ae:	4619      	mov	r1, r3
 80013b0:	4807      	ldr	r0, [pc, #28]	; (80013d0 <M8N_UART4_Initialization+0xc0>)
 80013b2:	f003 ff7f 	bl	80052b4 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART4);
 80013b6:	4806      	ldr	r0, [pc, #24]	; (80013d0 <M8N_UART4_Initialization+0xc0>)
 80013b8:	f7ff ff1b 	bl	80011f2 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART4);
 80013bc:	4804      	ldr	r0, [pc, #16]	; (80013d0 <M8N_UART4_Initialization+0xc0>)
 80013be:	f7ff ff08 	bl	80011d2 <LL_USART_Enable>
}
 80013c2:	bf00      	nop
 80013c4:	3738      	adds	r7, #56	; 0x38
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	40020800 	.word	0x40020800
 80013d0:	40004c00 	.word	0x40004c00

080013d4 <M8N_Initialization>:

void M8N_Initialization(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
M8N_UART4_Initialization();
 80013d8:	f7ff ff9a 	bl	8001310 <M8N_UART4_Initialization>

M8N_TransimiData(&UBX_CFG_PRT[0],sizeof(UBX_CFG_PRT));
 80013dc:	211c      	movs	r1, #28
 80013de:	480d      	ldr	r0, [pc, #52]	; (8001414 <M8N_Initialization+0x40>)
 80013e0:	f7ff ff70 	bl	80012c4 <M8N_TransimiData>
HAL_Delay(100);
 80013e4:	2064      	movs	r0, #100	; 0x64
 80013e6:	f001 fab9 	bl	800295c <HAL_Delay>
M8N_TransimiData(&UBX_CFG_MSG[0],sizeof(UBX_CFG_MSG));
 80013ea:	2110      	movs	r1, #16
 80013ec:	480a      	ldr	r0, [pc, #40]	; (8001418 <M8N_Initialization+0x44>)
 80013ee:	f7ff ff69 	bl	80012c4 <M8N_TransimiData>
HAL_Delay(100);
 80013f2:	2064      	movs	r0, #100	; 0x64
 80013f4:	f001 fab2 	bl	800295c <HAL_Delay>
M8N_TransimiData(&UBX_CFG_RATE[0],sizeof(UBX_CFG_RATE));
 80013f8:	210e      	movs	r1, #14
 80013fa:	4808      	ldr	r0, [pc, #32]	; (800141c <M8N_Initialization+0x48>)
 80013fc:	f7ff ff62 	bl	80012c4 <M8N_TransimiData>
HAL_Delay(100);
 8001400:	2064      	movs	r0, #100	; 0x64
 8001402:	f001 faab 	bl	800295c <HAL_Delay>
M8N_TransimiData(&UBX_CFG_CFG[0],sizeof(UBX_CFG_CFG));
 8001406:	2115      	movs	r1, #21
 8001408:	4805      	ldr	r0, [pc, #20]	; (8001420 <M8N_Initialization+0x4c>)
 800140a:	f7ff ff5b 	bl	80012c4 <M8N_TransimiData>
}
 800140e:	bf00      	nop
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	08007e60 	.word	0x08007e60
 8001418:	08007e7c 	.word	0x08007e7c
 800141c:	08007e8c 	.word	0x08007e8c
 8001420:	08007e9c 	.word	0x08007e9c

08001424 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	041a      	lsls	r2, r3, #16
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	619a      	str	r2, [r3, #24]
}
 8001436:	bf00      	nop
 8001438:	370c      	adds	r7, #12
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
	...

08001444 <LL_AHB1_GRP1_EnableClock>:
{
 8001444:	b480      	push	{r7}
 8001446:	b085      	sub	sp, #20
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800144c:	4b08      	ldr	r3, [pc, #32]	; (8001470 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800144e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001450:	4907      	ldr	r1, [pc, #28]	; (8001470 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4313      	orrs	r3, r2
 8001456:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001458:	4b05      	ldr	r3, [pc, #20]	; (8001470 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800145a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	4013      	ands	r3, r2
 8001460:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001462:	68fb      	ldr	r3, [r7, #12]
}
 8001464:	bf00      	nop
 8001466:	3714      	adds	r7, #20
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr
 8001470:	40023800 	.word	0x40023800

08001474 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b086      	sub	sp, #24
 8001478:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800147a:	463b      	mov	r3, r7
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	605a      	str	r2, [r3, #4]
 8001482:	609a      	str	r2, [r3, #8]
 8001484:	60da      	str	r2, [r3, #12]
 8001486:	611a      	str	r2, [r3, #16]
 8001488:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 800148a:	2080      	movs	r0, #128	; 0x80
 800148c:	f7ff ffda 	bl	8001444 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001490:	2001      	movs	r0, #1
 8001492:	f7ff ffd7 	bl	8001444 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001496:	2002      	movs	r0, #2
 8001498:	f7ff ffd4 	bl	8001444 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 800149c:	2008      	movs	r0, #8
 800149e:	f7ff ffd1 	bl	8001444 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80014a2:	2004      	movs	r0, #4
 80014a4:	f7ff ffce 	bl	8001444 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOD, LL_GPIO_PIN_14);
 80014a8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014ac:	480b      	ldr	r0, [pc, #44]	; (80014dc <MX_GPIO_Init+0x68>)
 80014ae:	f7ff ffb9 	bl	8001424 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_14;
 80014b2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80014b6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80014b8:	2301      	movs	r3, #1
 80014ba:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80014bc:	2300      	movs	r3, #0
 80014be:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80014c0:	2300      	movs	r3, #0
 80014c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80014c4:	2300      	movs	r3, #0
 80014c6:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014c8:	463b      	mov	r3, r7
 80014ca:	4619      	mov	r1, r3
 80014cc:	4803      	ldr	r0, [pc, #12]	; (80014dc <MX_GPIO_Init+0x68>)
 80014ce:	f002 ffec 	bl	80044aa <LL_GPIO_Init>

}
 80014d2:	bf00      	nop
 80014d4:	3718      	adds	r7, #24
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	40020c00 	.word	0x40020c00

080014e0 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f043 0201 	orr.w	r2, r3, #1
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	601a      	str	r2, [r3, #0]
}
 80014f4:	bf00      	nop
 80014f6:	370c      	adds	r7, #12
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr

08001500 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
 8001508:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6a1a      	ldr	r2, [r3, #32]
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	431a      	orrs	r2, r3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	621a      	str	r2, [r3, #32]
}
 8001516:	bf00      	nop
 8001518:	370c      	adds	r7, #12
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr

08001522 <LL_TIM_CC_DisableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_DisableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8001522:	b480      	push	{r7}
 8001524:	b083      	sub	sp, #12
 8001526:	af00      	add	r7, sp, #0
 8001528:	6078      	str	r0, [r7, #4]
 800152a:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6a1a      	ldr	r2, [r3, #32]
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	43db      	mvns	r3, r3
 8001534:	401a      	ands	r2, r3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	621a      	str	r2, [r3, #32]
}
 800153a:	bf00      	nop
 800153c:	370c      	adds	r7, #12
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr

08001546 <LL_USART_IsActiveFlag_TXE>:
{
 8001546:	b480      	push	{r7}
 8001548:	b083      	sub	sp, #12
 800154a:	af00      	add	r7, sp, #0
 800154c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001556:	2b80      	cmp	r3, #128	; 0x80
 8001558:	bf0c      	ite	eq
 800155a:	2301      	moveq	r3, #1
 800155c:	2300      	movne	r3, #0
 800155e:	b2db      	uxtb	r3, r3
}
 8001560:	4618      	mov	r0, r3
 8001562:	370c      	adds	r7, #12
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr

0800156c <LL_USART_EnableIT_RXNE>:
{
 800156c:	b480      	push	{r7}
 800156e:	b089      	sub	sp, #36	; 0x24
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	330c      	adds	r3, #12
 8001578:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	e853 3f00 	ldrex	r3, [r3]
 8001580:	60bb      	str	r3, [r7, #8]
   return(result);
 8001582:	68bb      	ldr	r3, [r7, #8]
 8001584:	f043 0320 	orr.w	r3, r3, #32
 8001588:	61fb      	str	r3, [r7, #28]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	330c      	adds	r3, #12
 800158e:	69fa      	ldr	r2, [r7, #28]
 8001590:	61ba      	str	r2, [r7, #24]
 8001592:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001594:	6979      	ldr	r1, [r7, #20]
 8001596:	69ba      	ldr	r2, [r7, #24]
 8001598:	e841 2300 	strex	r3, r2, [r1]
 800159c:	613b      	str	r3, [r7, #16]
   return(result);
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d1e7      	bne.n	8001574 <LL_USART_EnableIT_RXNE+0x8>
}
 80015a4:	bf00      	nop
 80015a6:	bf00      	nop
 80015a8:	3724      	adds	r7, #36	; 0x24
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr

080015b2 <LL_USART_TransmitData8>:
{
 80015b2:	b480      	push	{r7}
 80015b4:	b083      	sub	sp, #12
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]
 80015ba:	460b      	mov	r3, r1
 80015bc:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 80015be:	78fa      	ldrb	r2, [r7, #3]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	605a      	str	r2, [r3, #4]
}
 80015c4:	bf00      	nop
 80015c6:	370c      	adds	r7, #12
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr

080015d0 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b085      	sub	sp, #20
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	695b      	ldr	r3, [r3, #20]
 80015de:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 80015e0:	68fa      	ldr	r2, [r7, #12]
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	4013      	ands	r3, r2
 80015e6:	041a      	lsls	r2, r3, #16
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	43d9      	mvns	r1, r3
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	400b      	ands	r3, r1
 80015f0:	431a      	orrs	r2, r3
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	619a      	str	r2, [r3, #24]
}
 80015f6:	bf00      	nop
 80015f8:	3714      	adds	r7, #20
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
	...

08001604 <_write>:
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
int _write(int file, char* p,int len)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b086      	sub	sp, #24
 8001608:	af00      	add	r7, sp, #0
 800160a:	60f8      	str	r0, [r7, #12]
 800160c:	60b9      	str	r1, [r7, #8]
 800160e:	607a      	str	r2, [r7, #4]
	for(int i=0;i<len;i++)
 8001610:	2300      	movs	r3, #0
 8001612:	617b      	str	r3, [r7, #20]
 8001614:	e011      	b.n	800163a <_write+0x36>
	{
		while(!LL_USART_IsActiveFlag_TXE(USART6));
 8001616:	bf00      	nop
 8001618:	480c      	ldr	r0, [pc, #48]	; (800164c <_write+0x48>)
 800161a:	f7ff ff94 	bl	8001546 <LL_USART_IsActiveFlag_TXE>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d0f9      	beq.n	8001618 <_write+0x14>
		LL_USART_TransmitData8(USART6, *(p+i));
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	68ba      	ldr	r2, [r7, #8]
 8001628:	4413      	add	r3, r2
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	4619      	mov	r1, r3
 800162e:	4807      	ldr	r0, [pc, #28]	; (800164c <_write+0x48>)
 8001630:	f7ff ffbf 	bl	80015b2 <LL_USART_TransmitData8>
	for(int i=0;i<len;i++)
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	3301      	adds	r3, #1
 8001638:	617b      	str	r3, [r7, #20]
 800163a:	697a      	ldr	r2, [r7, #20]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	429a      	cmp	r2, r3
 8001640:	dbe9      	blt.n	8001616 <_write+0x12>
	}
}
 8001642:	bf00      	nop
 8001644:	4618      	mov	r0, r3
 8001646:	3718      	adds	r7, #24
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	40011400 	.word	0x40011400

08001650 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001654:	f001 f910 	bl	8002878 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001658:	f000 f91e 	bl	8001898 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800165c:	f7ff ff0a 	bl	8001474 <MX_GPIO_Init>
  MX_TIM3_Init();
 8001660:	f000 fd44 	bl	80020ec <MX_TIM3_Init>
  MX_USART6_UART_Init();
 8001664:	f001 f87e 	bl	8002764 <MX_USART6_UART_Init>
  MX_UART4_Init();
 8001668:	f000 ffa2 	bl	80025b0 <MX_UART4_Init>
  MX_UART5_Init();
 800166c:	f001 f802 	bl	8002674 <MX_UART5_Init>
  MX_TIM5_Init();
 8001670:	f000 fdae 	bl	80021d0 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  LL_TIM_EnableCounter(TIM3);
 8001674:	487f      	ldr	r0, [pc, #508]	; (8001874 <main+0x224>)
 8001676:	f7ff ff33 	bl	80014e0 <LL_TIM_EnableCounter>
//  TIM3->PSC = 1000;
//  HAL_Delay(100);
//
//  LL_TIM_CC_DisableChannel(TIM3,LL_TIM_CHANNEL_CH4);  // buzzer disable

  LL_USART_EnableIT_RXNE(USART6); //interrupt olarak cagiracagiz
 800167a:	487f      	ldr	r0, [pc, #508]	; (8001878 <main+0x228>)
 800167c:	f7ff ff76 	bl	800156c <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_RXNE(UART4); //interrupt olarak cagiracagiz
 8001680:	487e      	ldr	r0, [pc, #504]	; (800187c <main+0x22c>)
 8001682:	f7ff ff73 	bl	800156c <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_RXNE(UART5); //interrupt olarak cagiracagiz
 8001686:	487e      	ldr	r0, [pc, #504]	; (8001880 <main+0x230>)
 8001688:	f7ff ff70 	bl	800156c <LL_USART_EnableIT_RXNE>

  M8N_Initialization();
 800168c:	f7ff fea2 	bl	80013d4 <M8N_Initialization>

  LL_TIM_EnableCounter(TIM5);
 8001690:	487c      	ldr	r0, [pc, #496]	; (8001884 <main+0x234>)
 8001692:	f7ff ff25 	bl	80014e0 <LL_TIM_EnableCounter>
  LL_TIM_CC_EnableChannel(TIM5,LL_TIM_CHANNEL_CH1);
 8001696:	2101      	movs	r1, #1
 8001698:	487a      	ldr	r0, [pc, #488]	; (8001884 <main+0x234>)
 800169a:	f7ff ff31 	bl	8001500 <LL_TIM_CC_EnableChannel>
  LL_TIM_CC_EnableChannel(TIM5,LL_TIM_CHANNEL_CH2);
 800169e:	2110      	movs	r1, #16
 80016a0:	4878      	ldr	r0, [pc, #480]	; (8001884 <main+0x234>)
 80016a2:	f7ff ff2d 	bl	8001500 <LL_TIM_CC_EnableChannel>
  LL_TIM_CC_EnableChannel(TIM5,LL_TIM_CHANNEL_CH3);
 80016a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016aa:	4876      	ldr	r0, [pc, #472]	; (8001884 <main+0x234>)
 80016ac:	f7ff ff28 	bl	8001500 <LL_TIM_CC_EnableChannel>
  LL_TIM_CC_EnableChannel(TIM5,LL_TIM_CHANNEL_CH4);
 80016b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016b4:	4873      	ldr	r0, [pc, #460]	; (8001884 <main+0x234>)
 80016b6:	f7ff ff23 	bl	8001500 <LL_TIM_CC_EnableChannel>

  while(Is_iBus_Received() == 0){
 80016ba:	e013      	b.n	80016e4 <main+0x94>
	  LL_TIM_CC_EnableChannel(TIM3,LL_TIM_CHANNEL_CH4); // buzzer enable
 80016bc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016c0:	486c      	ldr	r0, [pc, #432]	; (8001874 <main+0x224>)
 80016c2:	f7ff ff1d 	bl	8001500 <LL_TIM_CC_EnableChannel>
	     TIM3->PSC = 3000;
 80016c6:	4b6b      	ldr	r3, [pc, #428]	; (8001874 <main+0x224>)
 80016c8:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80016cc:	629a      	str	r2, [r3, #40]	; 0x28
	     HAL_Delay(200);
 80016ce:	20c8      	movs	r0, #200	; 0xc8
 80016d0:	f001 f944 	bl	800295c <HAL_Delay>
	     LL_TIM_CC_DisableChannel(TIM3,LL_TIM_CHANNEL_CH4);  // b
 80016d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016d8:	4866      	ldr	r0, [pc, #408]	; (8001874 <main+0x224>)
 80016da:	f7ff ff22 	bl	8001522 <LL_TIM_CC_DisableChannel>
	     HAL_Delay(200);
 80016de:	20c8      	movs	r0, #200	; 0xc8
 80016e0:	f001 f93c 	bl	800295c <HAL_Delay>
  while(Is_iBus_Received() == 0){
 80016e4:	f000 f996 	bl	8001a14 <Is_iBus_Received>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d0e6      	beq.n	80016bc <main+0x6c>
  }

  if(iBus.SwC == 2000){
 80016ee:	4b66      	ldr	r3, [pc, #408]	; (8001888 <main+0x238>)
 80016f0:	899b      	ldrh	r3, [r3, #12]
 80016f2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80016f6:	d15f      	bne.n	80017b8 <main+0x168>
	 LL_TIM_CC_EnableChannel(TIM3,LL_TIM_CHANNEL_CH4); // buzzer enable
 80016f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016fc:	485d      	ldr	r0, [pc, #372]	; (8001874 <main+0x224>)
 80016fe:	f7ff feff 	bl	8001500 <LL_TIM_CC_EnableChannel>
	 TIM3->PSC = 1500;
 8001702:	4b5c      	ldr	r3, [pc, #368]	; (8001874 <main+0x224>)
 8001704:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001708:	629a      	str	r2, [r3, #40]	; 0x28
	 HAL_Delay(200);
 800170a:	20c8      	movs	r0, #200	; 0xc8
 800170c:	f001 f926 	bl	800295c <HAL_Delay>
	 TIM3->PSC = 2000;
 8001710:	4b58      	ldr	r3, [pc, #352]	; (8001874 <main+0x224>)
 8001712:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001716:	629a      	str	r2, [r3, #40]	; 0x28
	 HAL_Delay(200);
 8001718:	20c8      	movs	r0, #200	; 0xc8
 800171a:	f001 f91f 	bl	800295c <HAL_Delay>
	 TIM3->PSC = 1500;
 800171e:	4b55      	ldr	r3, [pc, #340]	; (8001874 <main+0x224>)
 8001720:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001724:	629a      	str	r2, [r3, #40]	; 0x28
	 HAL_Delay(200);
 8001726:	20c8      	movs	r0, #200	; 0xc8
 8001728:	f001 f918 	bl	800295c <HAL_Delay>
	 TIM3->PSC = 2000;
 800172c:	4b51      	ldr	r3, [pc, #324]	; (8001874 <main+0x224>)
 800172e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001732:	629a      	str	r2, [r3, #40]	; 0x28
	 HAL_Delay(200);
 8001734:	20c8      	movs	r0, #200	; 0xc8
 8001736:	f001 f911 	bl	800295c <HAL_Delay>
	 LL_TIM_CC_DisableChannel(TIM3,LL_TIM_CHANNEL_CH4);  // b
 800173a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800173e:	484d      	ldr	r0, [pc, #308]	; (8001874 <main+0x224>)
 8001740:	f7ff feef 	bl	8001522 <LL_TIM_CC_DisableChannel>
	 HAL_Delay(200);
 8001744:	20c8      	movs	r0, #200	; 0xc8
 8001746:	f001 f909 	bl	800295c <HAL_Delay>

  ESC_Calibration();
 800174a:	f000 f935 	bl	80019b8 <ESC_Calibration>
  while(iBus.SwC != 1000){
 800174e:	e019      	b.n	8001784 <main+0x134>
	  Is_iBus_Received();
 8001750:	f000 f960 	bl	8001a14 <Is_iBus_Received>

	  LL_TIM_CC_EnableChannel(TIM3,LL_TIM_CHANNEL_CH4); // buzzer enable
 8001754:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001758:	4846      	ldr	r0, [pc, #280]	; (8001874 <main+0x224>)
 800175a:	f7ff fed1 	bl	8001500 <LL_TIM_CC_EnableChannel>

	 	 TIM3->PSC = 1500;
 800175e:	4b45      	ldr	r3, [pc, #276]	; (8001874 <main+0x224>)
 8001760:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001764:	629a      	str	r2, [r3, #40]	; 0x28
	 	 HAL_Delay(200);
 8001766:	20c8      	movs	r0, #200	; 0xc8
 8001768:	f001 f8f8 	bl	800295c <HAL_Delay>
	 	 TIM3->PSC = 2000;
 800176c:	4b41      	ldr	r3, [pc, #260]	; (8001874 <main+0x224>)
 800176e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001772:	629a      	str	r2, [r3, #40]	; 0x28
	 	 HAL_Delay(200);
 8001774:	20c8      	movs	r0, #200	; 0xc8
 8001776:	f001 f8f1 	bl	800295c <HAL_Delay>

	 	 LL_TIM_CC_DisableChannel(TIM3,LL_TIM_CHANNEL_CH4);  // b
 800177a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800177e:	483d      	ldr	r0, [pc, #244]	; (8001874 <main+0x224>)
 8001780:	f7ff fecf 	bl	8001522 <LL_TIM_CC_DisableChannel>
  while(iBus.SwC != 1000){
 8001784:	4b40      	ldr	r3, [pc, #256]	; (8001888 <main+0x238>)
 8001786:	899b      	ldrh	r3, [r3, #12]
 8001788:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800178c:	d1e0      	bne.n	8001750 <main+0x100>

  	  }
  }
   while(Is_iBus_Throttle_Min() == 0){
 800178e:	e013      	b.n	80017b8 <main+0x168>
	   LL_TIM_CC_EnableChannel(TIM3,LL_TIM_CHANNEL_CH4); // buzzer enable
 8001790:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001794:	4837      	ldr	r0, [pc, #220]	; (8001874 <main+0x224>)
 8001796:	f7ff feb3 	bl	8001500 <LL_TIM_CC_EnableChannel>
	 	     TIM3->PSC = 1000;
 800179a:	4b36      	ldr	r3, [pc, #216]	; (8001874 <main+0x224>)
 800179c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80017a0:	629a      	str	r2, [r3, #40]	; 0x28
	 	     HAL_Delay(70);
 80017a2:	2046      	movs	r0, #70	; 0x46
 80017a4:	f001 f8da 	bl	800295c <HAL_Delay>
	 	     LL_TIM_CC_DisableChannel(TIM3,LL_TIM_CHANNEL_CH4);  // b
 80017a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017ac:	4831      	ldr	r0, [pc, #196]	; (8001874 <main+0x224>)
 80017ae:	f7ff feb8 	bl	8001522 <LL_TIM_CC_DisableChannel>
	 	     HAL_Delay(70);
 80017b2:	2046      	movs	r0, #70	; 0x46
 80017b4:	f001 f8d2 	bl	800295c <HAL_Delay>
   while(Is_iBus_Throttle_Min() == 0){
 80017b8:	f000 f8d8 	bl	800196c <Is_iBus_Throttle_Min>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d0e6      	beq.n	8001790 <main+0x140>





   LL_TIM_CC_EnableChannel(TIM3,LL_TIM_CHANNEL_CH4); // buzzer enable
 80017c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017c6:	482b      	ldr	r0, [pc, #172]	; (8001874 <main+0x224>)
 80017c8:	f7ff fe9a 	bl	8001500 <LL_TIM_CC_EnableChannel>
   TIM3->PSC = 2000;
 80017cc:	4b29      	ldr	r3, [pc, #164]	; (8001874 <main+0x224>)
 80017ce:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80017d2:	629a      	str	r2, [r3, #40]	; 0x28
   HAL_Delay(100);
 80017d4:	2064      	movs	r0, #100	; 0x64
 80017d6:	f001 f8c1 	bl	800295c <HAL_Delay>
   TIM3->PSC = 1500; 							//burayı kopyaladı nedenini anlamadım
 80017da:	4b26      	ldr	r3, [pc, #152]	; (8001874 <main+0x224>)
 80017dc:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80017e0:	629a      	str	r2, [r3, #40]	; 0x28
   HAL_Delay(100);
 80017e2:	2064      	movs	r0, #100	; 0x64
 80017e4:	f001 f8ba 	bl	800295c <HAL_Delay>
   TIM3->PSC = 1000;
 80017e8:	4b22      	ldr	r3, [pc, #136]	; (8001874 <main+0x224>)
 80017ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80017ee:	629a      	str	r2, [r3, #40]	; 0x28
   HAL_Delay(100);
 80017f0:	2064      	movs	r0, #100	; 0x64
 80017f2:	f001 f8b3 	bl	800295c <HAL_Delay>

   LL_TIM_CC_DisableChannel(TIM3,LL_TIM_CHANNEL_CH4);  // buzzer disable
 80017f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017fa:	481e      	ldr	r0, [pc, #120]	; (8001874 <main+0x224>)
 80017fc:	f7ff fe91 	bl	8001522 <LL_TIM_CC_DisableChannel>

	  }

	  */

	  if(ibus_rx_cplt_flag == 1)
 8001800:	4b22      	ldr	r3, [pc, #136]	; (800188c <main+0x23c>)
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	2b01      	cmp	r3, #1
 8001806:	d123      	bne.n	8001850 <main+0x200>
	  	  {
	  		  ibus_rx_cplt_flag = 0;
 8001808:	4b20      	ldr	r3, [pc, #128]	; (800188c <main+0x23c>)
 800180a:	2200      	movs	r2, #0
 800180c:	701a      	strb	r2, [r3, #0]
	  		  if(iBus_Check_CHKSUM(&ibus_rxbuff[0],32)==1)
 800180e:	2120      	movs	r1, #32
 8001810:	481f      	ldr	r0, [pc, #124]	; (8001890 <main+0x240>)
 8001812:	f7ff fb4b 	bl	8000eac <iBus_Check_CHKSUM>
 8001816:	4603      	mov	r3, r0
 8001818:	2b01      	cmp	r3, #1
 800181a:	d119      	bne.n	8001850 <main+0x200>
	  		  {
	  			LL_GPIO_TogglePin(GPIOD, LL_GPIO_PIN_14);
 800181c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001820:	481c      	ldr	r0, [pc, #112]	; (8001894 <main+0x244>)
 8001822:	f7ff fed5 	bl	80015d0 <LL_GPIO_TogglePin>
	  			iBus_Parsing(&ibus_rxbuff[0], &iBus);
 8001826:	4918      	ldr	r1, [pc, #96]	; (8001888 <main+0x238>)
 8001828:	4819      	ldr	r0, [pc, #100]	; (8001890 <main+0x240>)
 800182a:	f7ff fb75 	bl	8000f18 <iBus_Parsing>
	  			if(iBus_isActiveFailSafe(&iBus) ==1)
 800182e:	4816      	ldr	r0, [pc, #88]	; (8001888 <main+0x238>)
 8001830:	f7ff fc34 	bl	800109c <iBus_isActiveFailSafe>
 8001834:	4603      	mov	r3, r0
 8001836:	2b01      	cmp	r3, #1
 8001838:	d105      	bne.n	8001846 <main+0x1f6>
	  			{
	  				LL_TIM_CC_EnableChannel(TIM3,LL_TIM_CHANNEL_CH4);
 800183a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800183e:	480d      	ldr	r0, [pc, #52]	; (8001874 <main+0x224>)
 8001840:	f7ff fe5e 	bl	8001500 <LL_TIM_CC_EnableChannel>
 8001844:	e004      	b.n	8001850 <main+0x200>
	  			}
	  			else
	  			{
	  				LL_TIM_CC_DisableChannel(TIM3,LL_TIM_CHANNEL_CH4);
 8001846:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800184a:	480a      	ldr	r0, [pc, #40]	; (8001874 <main+0x224>)
 800184c:	f7ff fe69 	bl	8001522 <LL_TIM_CC_DisableChannel>
//	  			HAL_Delay(100);
	  		  }

	  	  }

	  TIM5->CCR1 = 1000 ;
 8001850:	4b0c      	ldr	r3, [pc, #48]	; (8001884 <main+0x234>)
 8001852:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001856:	635a      	str	r2, [r3, #52]	; 0x34
	  TIM5->CCR2 = 1000 ;
 8001858:	4b0a      	ldr	r3, [pc, #40]	; (8001884 <main+0x234>)
 800185a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800185e:	639a      	str	r2, [r3, #56]	; 0x38
	  TIM5->CCR3 = 1000 ;
 8001860:	4b08      	ldr	r3, [pc, #32]	; (8001884 <main+0x234>)
 8001862:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001866:	63da      	str	r2, [r3, #60]	; 0x3c
	  TIM5->CCR4 = 1000 ;
 8001868:	4b06      	ldr	r3, [pc, #24]	; (8001884 <main+0x234>)
 800186a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800186e:	641a      	str	r2, [r3, #64]	; 0x40
	  if(ibus_rx_cplt_flag == 1)
 8001870:	e7c6      	b.n	8001800 <main+0x1b0>
 8001872:	bf00      	nop
 8001874:	40000400 	.word	0x40000400
 8001878:	40011400 	.word	0x40011400
 800187c:	40004c00 	.word	0x40004c00
 8001880:	40005000 	.word	0x40005000
 8001884:	40000c00 	.word	0x40000c00
 8001888:	200001f8 	.word	0x200001f8
 800188c:	20000240 	.word	0x20000240
 8001890:	20000220 	.word	0x20000220
 8001894:	40020c00 	.word	0x40020c00

08001898 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b094      	sub	sp, #80	; 0x50
 800189c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800189e:	f107 0320 	add.w	r3, r7, #32
 80018a2:	2230      	movs	r2, #48	; 0x30
 80018a4:	2100      	movs	r1, #0
 80018a6:	4618      	mov	r0, r3
 80018a8:	f003 fdae 	bl	8005408 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018ac:	f107 030c 	add.w	r3, r7, #12
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	605a      	str	r2, [r3, #4]
 80018b6:	609a      	str	r2, [r3, #8]
 80018b8:	60da      	str	r2, [r3, #12]
 80018ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018bc:	2300      	movs	r3, #0
 80018be:	60bb      	str	r3, [r7, #8]
 80018c0:	4b28      	ldr	r3, [pc, #160]	; (8001964 <SystemClock_Config+0xcc>)
 80018c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c4:	4a27      	ldr	r2, [pc, #156]	; (8001964 <SystemClock_Config+0xcc>)
 80018c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018ca:	6413      	str	r3, [r2, #64]	; 0x40
 80018cc:	4b25      	ldr	r3, [pc, #148]	; (8001964 <SystemClock_Config+0xcc>)
 80018ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018d4:	60bb      	str	r3, [r7, #8]
 80018d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018d8:	2300      	movs	r3, #0
 80018da:	607b      	str	r3, [r7, #4]
 80018dc:	4b22      	ldr	r3, [pc, #136]	; (8001968 <SystemClock_Config+0xd0>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a21      	ldr	r2, [pc, #132]	; (8001968 <SystemClock_Config+0xd0>)
 80018e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018e6:	6013      	str	r3, [r2, #0]
 80018e8:	4b1f      	ldr	r3, [pc, #124]	; (8001968 <SystemClock_Config+0xd0>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018f0:	607b      	str	r3, [r7, #4]
 80018f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018f4:	2301      	movs	r3, #1
 80018f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018fc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018fe:	2302      	movs	r3, #2
 8001900:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001902:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001906:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001908:	2304      	movs	r3, #4
 800190a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800190c:	23a8      	movs	r3, #168	; 0xa8
 800190e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001910:	2302      	movs	r3, #2
 8001912:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001914:	2304      	movs	r3, #4
 8001916:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001918:	f107 0320 	add.w	r3, r7, #32
 800191c:	4618      	mov	r0, r3
 800191e:	f001 fac3 	bl	8002ea8 <HAL_RCC_OscConfig>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d001      	beq.n	800192c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001928:	f000 f894 	bl	8001a54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800192c:	230f      	movs	r3, #15
 800192e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001930:	2302      	movs	r3, #2
 8001932:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001934:	2300      	movs	r3, #0
 8001936:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001938:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800193c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800193e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001942:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001944:	f107 030c 	add.w	r3, r7, #12
 8001948:	2105      	movs	r1, #5
 800194a:	4618      	mov	r0, r3
 800194c:	f001 fd24 	bl	8003398 <HAL_RCC_ClockConfig>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001956:	f000 f87d 	bl	8001a54 <Error_Handler>
  }
}
 800195a:	bf00      	nop
 800195c:	3750      	adds	r7, #80	; 0x50
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	40023800 	.word	0x40023800
 8001968:	40007000 	.word	0x40007000

0800196c <Is_iBus_Throttle_Min>:

/* USER CODE BEGIN 4 */
int Is_iBus_Throttle_Min(void){
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0

	  if(ibus_rx_cplt_flag == 1)
 8001970:	4b0e      	ldr	r3, [pc, #56]	; (80019ac <Is_iBus_Throttle_Min+0x40>)
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	2b01      	cmp	r3, #1
 8001976:	d115      	bne.n	80019a4 <Is_iBus_Throttle_Min+0x38>
		  	  {
		  		  ibus_rx_cplt_flag = 0;
 8001978:	4b0c      	ldr	r3, [pc, #48]	; (80019ac <Is_iBus_Throttle_Min+0x40>)
 800197a:	2200      	movs	r2, #0
 800197c:	701a      	strb	r2, [r3, #0]
		  		  if(iBus_Check_CHKSUM(&ibus_rxbuff[0],32)==1)
 800197e:	2120      	movs	r1, #32
 8001980:	480b      	ldr	r0, [pc, #44]	; (80019b0 <Is_iBus_Throttle_Min+0x44>)
 8001982:	f7ff fa93 	bl	8000eac <iBus_Check_CHKSUM>
 8001986:	4603      	mov	r3, r0
 8001988:	2b01      	cmp	r3, #1
 800198a:	d10b      	bne.n	80019a4 <Is_iBus_Throttle_Min+0x38>
		  		  {
		  				iBus_Parsing(&ibus_rxbuff[0], &iBus);
 800198c:	4909      	ldr	r1, [pc, #36]	; (80019b4 <Is_iBus_Throttle_Min+0x48>)
 800198e:	4808      	ldr	r0, [pc, #32]	; (80019b0 <Is_iBus_Throttle_Min+0x44>)
 8001990:	f7ff fac2 	bl	8000f18 <iBus_Parsing>
		  				if(iBus.LV < 1010) return 1;
 8001994:	4b07      	ldr	r3, [pc, #28]	; (80019b4 <Is_iBus_Throttle_Min+0x48>)
 8001996:	889b      	ldrh	r3, [r3, #4]
 8001998:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800199c:	4293      	cmp	r3, r2
 800199e:	d801      	bhi.n	80019a4 <Is_iBus_Throttle_Min+0x38>
 80019a0:	2301      	movs	r3, #1
 80019a2:	e000      	b.n	80019a6 <Is_iBus_Throttle_Min+0x3a>

		  		  }

		  	  }
	  return 0;
 80019a4:	2300      	movs	r3, #0
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	20000240 	.word	0x20000240
 80019b0:	20000220 	.word	0x20000220
 80019b4:	200001f8 	.word	0x200001f8

080019b8 <ESC_Calibration>:

void ESC_Calibration(void){
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0

	  TIM5->CCR1 = 2000;
 80019bc:	4b14      	ldr	r3, [pc, #80]	; (8001a10 <ESC_Calibration+0x58>)
 80019be:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80019c2:	635a      	str	r2, [r3, #52]	; 0x34
	  TIM5->CCR2 = 2000;
 80019c4:	4b12      	ldr	r3, [pc, #72]	; (8001a10 <ESC_Calibration+0x58>)
 80019c6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80019ca:	639a      	str	r2, [r3, #56]	; 0x38
	  TIM5->CCR3 = 2000;
 80019cc:	4b10      	ldr	r3, [pc, #64]	; (8001a10 <ESC_Calibration+0x58>)
 80019ce:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80019d2:	63da      	str	r2, [r3, #60]	; 0x3c
	  TIM5->CCR4 = 2000;
 80019d4:	4b0e      	ldr	r3, [pc, #56]	; (8001a10 <ESC_Calibration+0x58>)
 80019d6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80019da:	641a      	str	r2, [r3, #64]	; 0x40
	  HAL_Delay(7000);
 80019dc:	f641 3058 	movw	r0, #7000	; 0x1b58
 80019e0:	f000 ffbc 	bl	800295c <HAL_Delay>

	  TIM5->CCR1 = 1000;
 80019e4:	4b0a      	ldr	r3, [pc, #40]	; (8001a10 <ESC_Calibration+0x58>)
 80019e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80019ea:	635a      	str	r2, [r3, #52]	; 0x34
	  TIM5->CCR2 = 1000;
 80019ec:	4b08      	ldr	r3, [pc, #32]	; (8001a10 <ESC_Calibration+0x58>)
 80019ee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80019f2:	639a      	str	r2, [r3, #56]	; 0x38
	  TIM5->CCR3 = 1000;
 80019f4:	4b06      	ldr	r3, [pc, #24]	; (8001a10 <ESC_Calibration+0x58>)
 80019f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80019fa:	63da      	str	r2, [r3, #60]	; 0x3c
	  TIM5->CCR4 = 1000;
 80019fc:	4b04      	ldr	r3, [pc, #16]	; (8001a10 <ESC_Calibration+0x58>)
 80019fe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a02:	641a      	str	r2, [r3, #64]	; 0x40
	   HAL_Delay(8000);
 8001a04:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8001a08:	f000 ffa8 	bl	800295c <HAL_Delay>
}
 8001a0c:	bf00      	nop
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	40000c00 	.word	0x40000c00

08001a14 <Is_iBus_Received>:

int Is_iBus_Received(void){
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
	if(ibus_rx_cplt_flag == 1)
 8001a18:	4b0b      	ldr	r3, [pc, #44]	; (8001a48 <Is_iBus_Received+0x34>)
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d10f      	bne.n	8001a40 <Is_iBus_Received+0x2c>
			  	  {
			  		  ibus_rx_cplt_flag = 0;
 8001a20:	4b09      	ldr	r3, [pc, #36]	; (8001a48 <Is_iBus_Received+0x34>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	701a      	strb	r2, [r3, #0]
			  		  if(iBus_Check_CHKSUM(&ibus_rxbuff[0],32)==1)
 8001a26:	2120      	movs	r1, #32
 8001a28:	4808      	ldr	r0, [pc, #32]	; (8001a4c <Is_iBus_Received+0x38>)
 8001a2a:	f7ff fa3f 	bl	8000eac <iBus_Check_CHKSUM>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d105      	bne.n	8001a40 <Is_iBus_Received+0x2c>
			  		  {
			  				iBus_Parsing(&ibus_rxbuff[0], &iBus);
 8001a34:	4906      	ldr	r1, [pc, #24]	; (8001a50 <Is_iBus_Received+0x3c>)
 8001a36:	4805      	ldr	r0, [pc, #20]	; (8001a4c <Is_iBus_Received+0x38>)
 8001a38:	f7ff fa6e 	bl	8000f18 <iBus_Parsing>
			  				return 1;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e000      	b.n	8001a42 <Is_iBus_Received+0x2e>
			  		  }

			  	  }
		  return 0;
 8001a40:	2300      	movs	r3, #0
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	20000240 	.word	0x20000240
 8001a4c:	20000220 	.word	0x20000220
 8001a50:	200001f8 	.word	0x200001f8

08001a54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001a58:	b672      	cpsid	i
}
 8001a5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a5c:	e7fe      	b.n	8001a5c <Error_Handler+0x8>
	...

08001a60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a66:	2300      	movs	r3, #0
 8001a68:	607b      	str	r3, [r7, #4]
 8001a6a:	4b10      	ldr	r3, [pc, #64]	; (8001aac <HAL_MspInit+0x4c>)
 8001a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a6e:	4a0f      	ldr	r2, [pc, #60]	; (8001aac <HAL_MspInit+0x4c>)
 8001a70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a74:	6453      	str	r3, [r2, #68]	; 0x44
 8001a76:	4b0d      	ldr	r3, [pc, #52]	; (8001aac <HAL_MspInit+0x4c>)
 8001a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a7e:	607b      	str	r3, [r7, #4]
 8001a80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a82:	2300      	movs	r3, #0
 8001a84:	603b      	str	r3, [r7, #0]
 8001a86:	4b09      	ldr	r3, [pc, #36]	; (8001aac <HAL_MspInit+0x4c>)
 8001a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8a:	4a08      	ldr	r2, [pc, #32]	; (8001aac <HAL_MspInit+0x4c>)
 8001a8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a90:	6413      	str	r3, [r2, #64]	; 0x40
 8001a92:	4b06      	ldr	r3, [pc, #24]	; (8001aac <HAL_MspInit+0x4c>)
 8001a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a9a:	603b      	str	r3, [r7, #0]
 8001a9c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a9e:	bf00      	nop
 8001aa0:	370c      	adds	r7, #12
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	40023800 	.word	0x40023800

08001ab0 <LL_USART_IsActiveFlag_RXNE>:
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 0320 	and.w	r3, r3, #32
 8001ac0:	2b20      	cmp	r3, #32
 8001ac2:	bf0c      	ite	eq
 8001ac4:	2301      	moveq	r3, #1
 8001ac6:	2300      	movne	r3, #0
 8001ac8:	b2db      	uxtb	r3, r3
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	370c      	adds	r7, #12
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr

08001ad6 <LL_USART_ClearFlag_RXNE>:
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	b083      	sub	sp, #12
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_RXNE));
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	f06f 0220 	mvn.w	r2, #32
 8001ae4:	601a      	str	r2, [r3, #0]
}
 8001ae6:	bf00      	nop
 8001ae8:	370c      	adds	r7, #12
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr

08001af2 <LL_USART_ReceiveData8>:
{
 8001af2:	b480      	push	{r7}
 8001af4:	b083      	sub	sp, #12
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	b2db      	uxtb	r3, r3
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	370c      	adds	r7, #12
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b10:	e7fe      	b.n	8001b10 <NMI_Handler+0x4>

08001b12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b12:	b480      	push	{r7}
 8001b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b16:	e7fe      	b.n	8001b16 <HardFault_Handler+0x4>

08001b18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b1c:	e7fe      	b.n	8001b1c <MemManage_Handler+0x4>

08001b1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b22:	e7fe      	b.n	8001b22 <BusFault_Handler+0x4>

08001b24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b28:	e7fe      	b.n	8001b28 <UsageFault_Handler+0x4>

08001b2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b2a:	b480      	push	{r7}
 8001b2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b2e:	bf00      	nop
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr

08001b38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b3c:	bf00      	nop
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr

08001b46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b46:	b480      	push	{r7}
 8001b48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b4a:	bf00      	nop
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr

08001b54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b58:	f000 fee0 	bl	800291c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b5c:	bf00      	nop
 8001b5e:	bd80      	pop	{r7, pc}

08001b60 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */
	static unsigned char cnt = 0;
	if(LL_USART_IsActiveFlag_RXNE(UART4)) // bu bir receive işlemi mi?
 8001b64:	4833      	ldr	r0, [pc, #204]	; (8001c34 <UART4_IRQHandler+0xd4>)
 8001b66:	f7ff ffa3 	bl	8001ab0 <LL_USART_IsActiveFlag_RXNE>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d05b      	beq.n	8001c28 <UART4_IRQHandler+0xc8>
		{
			LL_USART_ClearFlag_RXNE(UART4); // bayragı temizle
 8001b70:	4830      	ldr	r0, [pc, #192]	; (8001c34 <UART4_IRQHandler+0xd4>)
 8001b72:	f7ff ffb0 	bl	8001ad6 <LL_USART_ClearFlag_RXNE>
			uart4_rx_data = LL_USART_ReceiveData8(UART4); // veriyi alalım
 8001b76:	482f      	ldr	r0, [pc, #188]	; (8001c34 <UART4_IRQHandler+0xd4>)
 8001b78:	f7ff ffbb 	bl	8001af2 <LL_USART_ReceiveData8>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	461a      	mov	r2, r3
 8001b80:	4b2d      	ldr	r3, [pc, #180]	; (8001c38 <UART4_IRQHandler+0xd8>)
 8001b82:	701a      	strb	r2, [r3, #0]
			uart4_rx_flag = 1; // once main icerisindeki while kodu okunacak
 8001b84:	4b2d      	ldr	r3, [pc, #180]	; (8001c3c <UART4_IRQHandler+0xdc>)
 8001b86:	2201      	movs	r2, #1
 8001b88:	701a      	strb	r2, [r3, #0]

			//LL_USART_TransmitData8(USART6, uart4_rx_data);

			switch(cnt)
 8001b8a:	4b2d      	ldr	r3, [pc, #180]	; (8001c40 <UART4_IRQHandler+0xe0>)
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	2b23      	cmp	r3, #35	; 0x23
 8001b90:	d02e      	beq.n	8001bf0 <UART4_IRQHandler+0x90>
 8001b92:	2b23      	cmp	r3, #35	; 0x23
 8001b94:	dc3a      	bgt.n	8001c0c <UART4_IRQHandler+0xac>
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d002      	beq.n	8001ba0 <UART4_IRQHandler+0x40>
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d012      	beq.n	8001bc4 <UART4_IRQHandler+0x64>
 8001b9e:	e035      	b.n	8001c0c <UART4_IRQHandler+0xac>
			{
			case 0:
				if(uart4_rx_data == 0xb5)
 8001ba0:	4b25      	ldr	r3, [pc, #148]	; (8001c38 <UART4_IRQHandler+0xd8>)
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	2bb5      	cmp	r3, #181	; 0xb5
 8001ba6:	d141      	bne.n	8001c2c <UART4_IRQHandler+0xcc>
				{
					m8n_rxbuff[cnt] = uart4_rx_data;
 8001ba8:	4b25      	ldr	r3, [pc, #148]	; (8001c40 <UART4_IRQHandler+0xe0>)
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	461a      	mov	r2, r3
 8001bae:	4b22      	ldr	r3, [pc, #136]	; (8001c38 <UART4_IRQHandler+0xd8>)
 8001bb0:	7819      	ldrb	r1, [r3, #0]
 8001bb2:	4b24      	ldr	r3, [pc, #144]	; (8001c44 <UART4_IRQHandler+0xe4>)
 8001bb4:	5499      	strb	r1, [r3, r2]
					cnt++;
 8001bb6:	4b22      	ldr	r3, [pc, #136]	; (8001c40 <UART4_IRQHandler+0xe0>)
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	3301      	adds	r3, #1
 8001bbc:	b2da      	uxtb	r2, r3
 8001bbe:	4b20      	ldr	r3, [pc, #128]	; (8001c40 <UART4_IRQHandler+0xe0>)
 8001bc0:	701a      	strb	r2, [r3, #0]
				}
				break;
 8001bc2:	e033      	b.n	8001c2c <UART4_IRQHandler+0xcc>
			case 1:
				if(uart4_rx_data == 0x62)
 8001bc4:	4b1c      	ldr	r3, [pc, #112]	; (8001c38 <UART4_IRQHandler+0xd8>)
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	2b62      	cmp	r3, #98	; 0x62
 8001bca:	d10d      	bne.n	8001be8 <UART4_IRQHandler+0x88>
				{
					m8n_rxbuff[cnt] = uart4_rx_data;
 8001bcc:	4b1c      	ldr	r3, [pc, #112]	; (8001c40 <UART4_IRQHandler+0xe0>)
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	4b19      	ldr	r3, [pc, #100]	; (8001c38 <UART4_IRQHandler+0xd8>)
 8001bd4:	7819      	ldrb	r1, [r3, #0]
 8001bd6:	4b1b      	ldr	r3, [pc, #108]	; (8001c44 <UART4_IRQHandler+0xe4>)
 8001bd8:	5499      	strb	r1, [r3, r2]
					cnt++;
 8001bda:	4b19      	ldr	r3, [pc, #100]	; (8001c40 <UART4_IRQHandler+0xe0>)
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	3301      	adds	r3, #1
 8001be0:	b2da      	uxtb	r2, r3
 8001be2:	4b17      	ldr	r3, [pc, #92]	; (8001c40 <UART4_IRQHandler+0xe0>)
 8001be4:	701a      	strb	r2, [r3, #0]
				}
				else
					cnt = 0;
				break;
 8001be6:	e022      	b.n	8001c2e <UART4_IRQHandler+0xce>
					cnt = 0;
 8001be8:	4b15      	ldr	r3, [pc, #84]	; (8001c40 <UART4_IRQHandler+0xe0>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	701a      	strb	r2, [r3, #0]
				break;
 8001bee:	e01e      	b.n	8001c2e <UART4_IRQHandler+0xce>
			case 35:
				m8n_rxbuff[cnt] = uart4_rx_data;
 8001bf0:	4b13      	ldr	r3, [pc, #76]	; (8001c40 <UART4_IRQHandler+0xe0>)
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	4b10      	ldr	r3, [pc, #64]	; (8001c38 <UART4_IRQHandler+0xd8>)
 8001bf8:	7819      	ldrb	r1, [r3, #0]
 8001bfa:	4b12      	ldr	r3, [pc, #72]	; (8001c44 <UART4_IRQHandler+0xe4>)
 8001bfc:	5499      	strb	r1, [r3, r2]
				cnt=0;
 8001bfe:	4b10      	ldr	r3, [pc, #64]	; (8001c40 <UART4_IRQHandler+0xe0>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	701a      	strb	r2, [r3, #0]
				m8n_rx_cplt_flag = 1;
 8001c04:	4b10      	ldr	r3, [pc, #64]	; (8001c48 <UART4_IRQHandler+0xe8>)
 8001c06:	2201      	movs	r2, #1
 8001c08:	701a      	strb	r2, [r3, #0]
				break;
 8001c0a:	e010      	b.n	8001c2e <UART4_IRQHandler+0xce>
			default:
				m8n_rxbuff[cnt] = uart4_rx_data;
 8001c0c:	4b0c      	ldr	r3, [pc, #48]	; (8001c40 <UART4_IRQHandler+0xe0>)
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	461a      	mov	r2, r3
 8001c12:	4b09      	ldr	r3, [pc, #36]	; (8001c38 <UART4_IRQHandler+0xd8>)
 8001c14:	7819      	ldrb	r1, [r3, #0]
 8001c16:	4b0b      	ldr	r3, [pc, #44]	; (8001c44 <UART4_IRQHandler+0xe4>)
 8001c18:	5499      	strb	r1, [r3, r2]
				cnt++;
 8001c1a:	4b09      	ldr	r3, [pc, #36]	; (8001c40 <UART4_IRQHandler+0xe0>)
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	3301      	adds	r3, #1
 8001c20:	b2da      	uxtb	r2, r3
 8001c22:	4b07      	ldr	r3, [pc, #28]	; (8001c40 <UART4_IRQHandler+0xe0>)
 8001c24:	701a      	strb	r2, [r3, #0]
				break;
 8001c26:	e002      	b.n	8001c2e <UART4_IRQHandler+0xce>
			}
		}
 8001c28:	bf00      	nop
 8001c2a:	e000      	b.n	8001c2e <UART4_IRQHandler+0xce>
				break;
 8001c2c:	bf00      	nop
  /* USER CODE END UART4_IRQn 0 */
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001c2e:	bf00      	nop
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	40004c00 	.word	0x40004c00
 8001c38:	2000021d 	.word	0x2000021d
 8001c3c:	2000021c 	.word	0x2000021c
 8001c40:	20000269 	.word	0x20000269
 8001c44:	20000244 	.word	0x20000244
 8001c48:	20000268 	.word	0x20000268

08001c4c <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */
	static unsigned char cnt2 = 0;
		if(LL_USART_IsActiveFlag_RXNE(UART5)) // bu bir receive işlemi mi?
 8001c50:	4833      	ldr	r0, [pc, #204]	; (8001d20 <UART5_IRQHandler+0xd4>)
 8001c52:	f7ff ff2d 	bl	8001ab0 <LL_USART_IsActiveFlag_RXNE>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d05b      	beq.n	8001d14 <UART5_IRQHandler+0xc8>
			{
				LL_USART_ClearFlag_RXNE(UART5); // bayragı temizle
 8001c5c:	4830      	ldr	r0, [pc, #192]	; (8001d20 <UART5_IRQHandler+0xd4>)
 8001c5e:	f7ff ff3a 	bl	8001ad6 <LL_USART_ClearFlag_RXNE>
				uart5_rx_data = LL_USART_ReceiveData8(UART5); // veriyi alalım
 8001c62:	482f      	ldr	r0, [pc, #188]	; (8001d20 <UART5_IRQHandler+0xd4>)
 8001c64:	f7ff ff45 	bl	8001af2 <LL_USART_ReceiveData8>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	4b2d      	ldr	r3, [pc, #180]	; (8001d24 <UART5_IRQHandler+0xd8>)
 8001c6e:	701a      	strb	r2, [r3, #0]
				uart5_rx_flag = 1; // once main icerisindeki while kodu okunacak
 8001c70:	4b2d      	ldr	r3, [pc, #180]	; (8001d28 <UART5_IRQHandler+0xdc>)
 8001c72:	2201      	movs	r2, #1
 8001c74:	701a      	strb	r2, [r3, #0]

				switch(cnt2)
 8001c76:	4b2d      	ldr	r3, [pc, #180]	; (8001d2c <UART5_IRQHandler+0xe0>)
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	2b1f      	cmp	r3, #31
 8001c7c:	d02e      	beq.n	8001cdc <UART5_IRQHandler+0x90>
 8001c7e:	2b1f      	cmp	r3, #31
 8001c80:	dc3a      	bgt.n	8001cf8 <UART5_IRQHandler+0xac>
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d002      	beq.n	8001c8c <UART5_IRQHandler+0x40>
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d012      	beq.n	8001cb0 <UART5_IRQHandler+0x64>
 8001c8a:	e035      	b.n	8001cf8 <UART5_IRQHandler+0xac>
				{
				case 0:
					if(uart5_rx_data == 0x20)
 8001c8c:	4b25      	ldr	r3, [pc, #148]	; (8001d24 <UART5_IRQHandler+0xd8>)
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	2b20      	cmp	r3, #32
 8001c92:	d141      	bne.n	8001d18 <UART5_IRQHandler+0xcc>
					{
						ibus_rxbuff[cnt2] = uart5_rx_data;
 8001c94:	4b25      	ldr	r3, [pc, #148]	; (8001d2c <UART5_IRQHandler+0xe0>)
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	461a      	mov	r2, r3
 8001c9a:	4b22      	ldr	r3, [pc, #136]	; (8001d24 <UART5_IRQHandler+0xd8>)
 8001c9c:	7819      	ldrb	r1, [r3, #0]
 8001c9e:	4b24      	ldr	r3, [pc, #144]	; (8001d30 <UART5_IRQHandler+0xe4>)
 8001ca0:	5499      	strb	r1, [r3, r2]
						cnt2++;
 8001ca2:	4b22      	ldr	r3, [pc, #136]	; (8001d2c <UART5_IRQHandler+0xe0>)
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	b2da      	uxtb	r2, r3
 8001caa:	4b20      	ldr	r3, [pc, #128]	; (8001d2c <UART5_IRQHandler+0xe0>)
 8001cac:	701a      	strb	r2, [r3, #0]

					}
					break;
 8001cae:	e033      	b.n	8001d18 <UART5_IRQHandler+0xcc>
				case 1:
					if(uart5_rx_data == 0x40)
 8001cb0:	4b1c      	ldr	r3, [pc, #112]	; (8001d24 <UART5_IRQHandler+0xd8>)
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	2b40      	cmp	r3, #64	; 0x40
 8001cb6:	d10d      	bne.n	8001cd4 <UART5_IRQHandler+0x88>
					{
						ibus_rxbuff[cnt2] = uart5_rx_data;
 8001cb8:	4b1c      	ldr	r3, [pc, #112]	; (8001d2c <UART5_IRQHandler+0xe0>)
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	4b19      	ldr	r3, [pc, #100]	; (8001d24 <UART5_IRQHandler+0xd8>)
 8001cc0:	7819      	ldrb	r1, [r3, #0]
 8001cc2:	4b1b      	ldr	r3, [pc, #108]	; (8001d30 <UART5_IRQHandler+0xe4>)
 8001cc4:	5499      	strb	r1, [r3, r2]
						cnt2++;
 8001cc6:	4b19      	ldr	r3, [pc, #100]	; (8001d2c <UART5_IRQHandler+0xe0>)
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	3301      	adds	r3, #1
 8001ccc:	b2da      	uxtb	r2, r3
 8001cce:	4b17      	ldr	r3, [pc, #92]	; (8001d2c <UART5_IRQHandler+0xe0>)
 8001cd0:	701a      	strb	r2, [r3, #0]
					}
					else
						cnt2 = 0;
					break;
 8001cd2:	e022      	b.n	8001d1a <UART5_IRQHandler+0xce>
						cnt2 = 0;
 8001cd4:	4b15      	ldr	r3, [pc, #84]	; (8001d2c <UART5_IRQHandler+0xe0>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	701a      	strb	r2, [r3, #0]
					break;
 8001cda:	e01e      	b.n	8001d1a <UART5_IRQHandler+0xce>
					ibus_rxbuff[cnt2] = uart5_rx_data;
					cnt2++;
					break;
					*/
				case 31:
					ibus_rxbuff[cnt2] = uart5_rx_data;
 8001cdc:	4b13      	ldr	r3, [pc, #76]	; (8001d2c <UART5_IRQHandler+0xe0>)
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	4b10      	ldr	r3, [pc, #64]	; (8001d24 <UART5_IRQHandler+0xd8>)
 8001ce4:	7819      	ldrb	r1, [r3, #0]
 8001ce6:	4b12      	ldr	r3, [pc, #72]	; (8001d30 <UART5_IRQHandler+0xe4>)
 8001ce8:	5499      	strb	r1, [r3, r2]
					cnt2=0;
 8001cea:	4b10      	ldr	r3, [pc, #64]	; (8001d2c <UART5_IRQHandler+0xe0>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	701a      	strb	r2, [r3, #0]
					ibus_rx_cplt_flag = 1;
 8001cf0:	4b10      	ldr	r3, [pc, #64]	; (8001d34 <UART5_IRQHandler+0xe8>)
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	701a      	strb	r2, [r3, #0]
					break;
 8001cf6:	e010      	b.n	8001d1a <UART5_IRQHandler+0xce>
				default:
					ibus_rxbuff[cnt2] = uart5_rx_data;
 8001cf8:	4b0c      	ldr	r3, [pc, #48]	; (8001d2c <UART5_IRQHandler+0xe0>)
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	4b09      	ldr	r3, [pc, #36]	; (8001d24 <UART5_IRQHandler+0xd8>)
 8001d00:	7819      	ldrb	r1, [r3, #0]
 8001d02:	4b0b      	ldr	r3, [pc, #44]	; (8001d30 <UART5_IRQHandler+0xe4>)
 8001d04:	5499      	strb	r1, [r3, r2]
					cnt2++;
 8001d06:	4b09      	ldr	r3, [pc, #36]	; (8001d2c <UART5_IRQHandler+0xe0>)
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	b2da      	uxtb	r2, r3
 8001d0e:	4b07      	ldr	r3, [pc, #28]	; (8001d2c <UART5_IRQHandler+0xe0>)
 8001d10:	701a      	strb	r2, [r3, #0]
					break;
 8001d12:	e002      	b.n	8001d1a <UART5_IRQHandler+0xce>

				}
			}
 8001d14:	bf00      	nop
 8001d16:	e000      	b.n	8001d1a <UART5_IRQHandler+0xce>
					break;
 8001d18:	bf00      	nop

  /* USER CODE END UART5_IRQn 0 */
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8001d1a:	bf00      	nop
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	40005000 	.word	0x40005000
 8001d24:	2000021f 	.word	0x2000021f
 8001d28:	2000021e 	.word	0x2000021e
 8001d2c:	2000026a 	.word	0x2000026a
 8001d30:	20000220 	.word	0x20000220
 8001d34:	20000240 	.word	0x20000240

08001d38 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	if(LL_USART_IsActiveFlag_RXNE(USART6)) // bu bir receive işlemi mi?
 8001d3c:	480a      	ldr	r0, [pc, #40]	; (8001d68 <USART6_IRQHandler+0x30>)
 8001d3e:	f7ff feb7 	bl	8001ab0 <LL_USART_IsActiveFlag_RXNE>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d00c      	beq.n	8001d62 <USART6_IRQHandler+0x2a>
	{
		LL_USART_ClearFlag_RXNE(USART6); // bayragı temizle
 8001d48:	4807      	ldr	r0, [pc, #28]	; (8001d68 <USART6_IRQHandler+0x30>)
 8001d4a:	f7ff fec4 	bl	8001ad6 <LL_USART_ClearFlag_RXNE>
		uart6_rx_data = LL_USART_ReceiveData8(USART6); // veriyi alalım
 8001d4e:	4806      	ldr	r0, [pc, #24]	; (8001d68 <USART6_IRQHandler+0x30>)
 8001d50:	f7ff fecf 	bl	8001af2 <LL_USART_ReceiveData8>
 8001d54:	4603      	mov	r3, r0
 8001d56:	461a      	mov	r2, r3
 8001d58:	4b04      	ldr	r3, [pc, #16]	; (8001d6c <USART6_IRQHandler+0x34>)
 8001d5a:	701a      	strb	r2, [r3, #0]
		uart6_rx_flag = 1; // once main icerisindeki while kodu okunacak
 8001d5c:	4b04      	ldr	r3, [pc, #16]	; (8001d70 <USART6_IRQHandler+0x38>)
 8001d5e:	2201      	movs	r2, #1
 8001d60:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END USART6_IRQn 0 */
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001d62:	bf00      	nop
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	40011400 	.word	0x40011400
 8001d6c:	2000021b 	.word	0x2000021b
 8001d70:	2000021a 	.word	0x2000021a

08001d74 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
	return 1;
 8001d78:	2301      	movs	r3, #1
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <_kill>:

int _kill(int pid, int sig)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001d8e:	f003 fb11 	bl	80053b4 <__errno>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2216      	movs	r2, #22
 8001d96:	601a      	str	r2, [r3, #0]
	return -1;
 8001d98:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3708      	adds	r7, #8
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}

08001da4 <_exit>:

void _exit (int status)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001dac:	f04f 31ff 	mov.w	r1, #4294967295
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f7ff ffe7 	bl	8001d84 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001db6:	e7fe      	b.n	8001db6 <_exit+0x12>

08001db8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b086      	sub	sp, #24
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	60f8      	str	r0, [r7, #12]
 8001dc0:	60b9      	str	r1, [r7, #8]
 8001dc2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	617b      	str	r3, [r7, #20]
 8001dc8:	e00a      	b.n	8001de0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001dca:	f3af 8000 	nop.w
 8001dce:	4601      	mov	r1, r0
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	1c5a      	adds	r2, r3, #1
 8001dd4:	60ba      	str	r2, [r7, #8]
 8001dd6:	b2ca      	uxtb	r2, r1
 8001dd8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	3301      	adds	r3, #1
 8001dde:	617b      	str	r3, [r7, #20]
 8001de0:	697a      	ldr	r2, [r7, #20]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	429a      	cmp	r2, r3
 8001de6:	dbf0      	blt.n	8001dca <_read+0x12>
	}

return len;
 8001de8:	687b      	ldr	r3, [r7, #4]
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3718      	adds	r7, #24
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001df2:	b480      	push	{r7}
 8001df4:	b083      	sub	sp, #12
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]
	return -1;
 8001dfa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	370c      	adds	r7, #12
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr

08001e0a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e0a:	b480      	push	{r7}
 8001e0c:	b083      	sub	sp, #12
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	6078      	str	r0, [r7, #4]
 8001e12:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e1a:	605a      	str	r2, [r3, #4]
	return 0;
 8001e1c:	2300      	movs	r3, #0
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	370c      	adds	r7, #12
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr

08001e2a <_isatty>:

int _isatty(int file)
{
 8001e2a:	b480      	push	{r7}
 8001e2c:	b083      	sub	sp, #12
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	6078      	str	r0, [r7, #4]
	return 1;
 8001e32:	2301      	movs	r3, #1
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	370c      	adds	r7, #12
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr

08001e40 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b085      	sub	sp, #20
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	60f8      	str	r0, [r7, #12]
 8001e48:	60b9      	str	r1, [r7, #8]
 8001e4a:	607a      	str	r2, [r7, #4]
	return 0;
 8001e4c:	2300      	movs	r3, #0
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3714      	adds	r7, #20
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
	...

08001e5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b086      	sub	sp, #24
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e64:	4a14      	ldr	r2, [pc, #80]	; (8001eb8 <_sbrk+0x5c>)
 8001e66:	4b15      	ldr	r3, [pc, #84]	; (8001ebc <_sbrk+0x60>)
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e70:	4b13      	ldr	r3, [pc, #76]	; (8001ec0 <_sbrk+0x64>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d102      	bne.n	8001e7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e78:	4b11      	ldr	r3, [pc, #68]	; (8001ec0 <_sbrk+0x64>)
 8001e7a:	4a12      	ldr	r2, [pc, #72]	; (8001ec4 <_sbrk+0x68>)
 8001e7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e7e:	4b10      	ldr	r3, [pc, #64]	; (8001ec0 <_sbrk+0x64>)
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4413      	add	r3, r2
 8001e86:	693a      	ldr	r2, [r7, #16]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d207      	bcs.n	8001e9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e8c:	f003 fa92 	bl	80053b4 <__errno>
 8001e90:	4603      	mov	r3, r0
 8001e92:	220c      	movs	r2, #12
 8001e94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e96:	f04f 33ff 	mov.w	r3, #4294967295
 8001e9a:	e009      	b.n	8001eb0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e9c:	4b08      	ldr	r3, [pc, #32]	; (8001ec0 <_sbrk+0x64>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ea2:	4b07      	ldr	r3, [pc, #28]	; (8001ec0 <_sbrk+0x64>)
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4413      	add	r3, r2
 8001eaa:	4a05      	ldr	r2, [pc, #20]	; (8001ec0 <_sbrk+0x64>)
 8001eac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001eae:	68fb      	ldr	r3, [r7, #12]
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3718      	adds	r7, #24
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	20020000 	.word	0x20020000
 8001ebc:	00000400 	.word	0x00000400
 8001ec0:	2000026c 	.word	0x2000026c
 8001ec4:	200002d0 	.word	0x200002d0

08001ec8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ecc:	4b06      	ldr	r3, [pc, #24]	; (8001ee8 <SystemInit+0x20>)
 8001ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ed2:	4a05      	ldr	r2, [pc, #20]	; (8001ee8 <SystemInit+0x20>)
 8001ed4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ed8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001edc:	bf00      	nop
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	e000ed00 	.word	0xe000ed00

08001eec <LL_TIM_EnableARRPreload>:
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	601a      	str	r2, [r3, #0]
}
 8001f00:	bf00      	nop
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <LL_TIM_OC_EnableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b085      	sub	sp, #20
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d01c      	beq.n	8001f56 <LL_TIM_OC_EnableFast+0x4a>
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	2b04      	cmp	r3, #4
 8001f20:	d017      	beq.n	8001f52 <LL_TIM_OC_EnableFast+0x46>
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	2b10      	cmp	r3, #16
 8001f26:	d012      	beq.n	8001f4e <LL_TIM_OC_EnableFast+0x42>
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	2b40      	cmp	r3, #64	; 0x40
 8001f2c:	d00d      	beq.n	8001f4a <LL_TIM_OC_EnableFast+0x3e>
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f34:	d007      	beq.n	8001f46 <LL_TIM_OC_EnableFast+0x3a>
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f3c:	d101      	bne.n	8001f42 <LL_TIM_OC_EnableFast+0x36>
 8001f3e:	2305      	movs	r3, #5
 8001f40:	e00a      	b.n	8001f58 <LL_TIM_OC_EnableFast+0x4c>
 8001f42:	2306      	movs	r3, #6
 8001f44:	e008      	b.n	8001f58 <LL_TIM_OC_EnableFast+0x4c>
 8001f46:	2304      	movs	r3, #4
 8001f48:	e006      	b.n	8001f58 <LL_TIM_OC_EnableFast+0x4c>
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e004      	b.n	8001f58 <LL_TIM_OC_EnableFast+0x4c>
 8001f4e:	2302      	movs	r3, #2
 8001f50:	e002      	b.n	8001f58 <LL_TIM_OC_EnableFast+0x4c>
 8001f52:	2301      	movs	r3, #1
 8001f54:	e000      	b.n	8001f58 <LL_TIM_OC_EnableFast+0x4c>
 8001f56:	2300      	movs	r3, #0
 8001f58:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	3318      	adds	r3, #24
 8001f5e:	4619      	mov	r1, r3
 8001f60:	7bfb      	ldrb	r3, [r7, #15]
 8001f62:	4a0a      	ldr	r2, [pc, #40]	; (8001f8c <LL_TIM_OC_EnableFast+0x80>)
 8001f64:	5cd3      	ldrb	r3, [r2, r3]
 8001f66:	440b      	add	r3, r1
 8001f68:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	7bfb      	ldrb	r3, [r7, #15]
 8001f70:	4907      	ldr	r1, [pc, #28]	; (8001f90 <LL_TIM_OC_EnableFast+0x84>)
 8001f72:	5ccb      	ldrb	r3, [r1, r3]
 8001f74:	4619      	mov	r1, r3
 8001f76:	2304      	movs	r3, #4
 8001f78:	408b      	lsls	r3, r1
 8001f7a:	431a      	orrs	r2, r3
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	601a      	str	r2, [r3, #0]

}
 8001f80:	bf00      	nop
 8001f82:	3714      	adds	r7, #20
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr
 8001f8c:	08007ecc 	.word	0x08007ecc
 8001f90:	08007ed4 	.word	0x08007ed4

08001f94 <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b085      	sub	sp, #20
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d01c      	beq.n	8001fde <LL_TIM_OC_EnablePreload+0x4a>
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	2b04      	cmp	r3, #4
 8001fa8:	d017      	beq.n	8001fda <LL_TIM_OC_EnablePreload+0x46>
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	2b10      	cmp	r3, #16
 8001fae:	d012      	beq.n	8001fd6 <LL_TIM_OC_EnablePreload+0x42>
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	2b40      	cmp	r3, #64	; 0x40
 8001fb4:	d00d      	beq.n	8001fd2 <LL_TIM_OC_EnablePreload+0x3e>
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fbc:	d007      	beq.n	8001fce <LL_TIM_OC_EnablePreload+0x3a>
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fc4:	d101      	bne.n	8001fca <LL_TIM_OC_EnablePreload+0x36>
 8001fc6:	2305      	movs	r3, #5
 8001fc8:	e00a      	b.n	8001fe0 <LL_TIM_OC_EnablePreload+0x4c>
 8001fca:	2306      	movs	r3, #6
 8001fcc:	e008      	b.n	8001fe0 <LL_TIM_OC_EnablePreload+0x4c>
 8001fce:	2304      	movs	r3, #4
 8001fd0:	e006      	b.n	8001fe0 <LL_TIM_OC_EnablePreload+0x4c>
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e004      	b.n	8001fe0 <LL_TIM_OC_EnablePreload+0x4c>
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	e002      	b.n	8001fe0 <LL_TIM_OC_EnablePreload+0x4c>
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e000      	b.n	8001fe0 <LL_TIM_OC_EnablePreload+0x4c>
 8001fde:	2300      	movs	r3, #0
 8001fe0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	3318      	adds	r3, #24
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	7bfb      	ldrb	r3, [r7, #15]
 8001fea:	4a0a      	ldr	r2, [pc, #40]	; (8002014 <LL_TIM_OC_EnablePreload+0x80>)
 8001fec:	5cd3      	ldrb	r3, [r2, r3]
 8001fee:	440b      	add	r3, r1
 8001ff0:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	7bfb      	ldrb	r3, [r7, #15]
 8001ff8:	4907      	ldr	r1, [pc, #28]	; (8002018 <LL_TIM_OC_EnablePreload+0x84>)
 8001ffa:	5ccb      	ldrb	r3, [r1, r3]
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	2308      	movs	r3, #8
 8002000:	408b      	lsls	r3, r1
 8002002:	431a      	orrs	r2, r3
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	601a      	str	r2, [r3, #0]
}
 8002008:	bf00      	nop
 800200a:	3714      	adds	r7, #20
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr
 8002014:	08007ecc 	.word	0x08007ecc
 8002018:	08007ed4 	.word	0x08007ed4

0800201c <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800202e:	f023 0307 	bic.w	r3, r3, #7
 8002032:	683a      	ldr	r2, [r7, #0]
 8002034:	431a      	orrs	r2, r3
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	609a      	str	r2, [r3, #8]
}
 800203a:	bf00      	nop
 800203c:	370c      	adds	r7, #12
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr

08002046 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8002046:	b480      	push	{r7}
 8002048:	b083      	sub	sp, #12
 800204a:	af00      	add	r7, sp, #0
 800204c:	6078      	str	r0, [r7, #4]
 800204e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	431a      	orrs	r2, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	605a      	str	r2, [r3, #4]
}
 8002060:	bf00      	nop
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	609a      	str	r2, [r3, #8]
}
 8002080:	bf00      	nop
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <LL_AHB1_GRP1_EnableClock>:
{
 800208c:	b480      	push	{r7}
 800208e:	b085      	sub	sp, #20
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002094:	4b08      	ldr	r3, [pc, #32]	; (80020b8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002096:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002098:	4907      	ldr	r1, [pc, #28]	; (80020b8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4313      	orrs	r3, r2
 800209e:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80020a0:	4b05      	ldr	r3, [pc, #20]	; (80020b8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80020a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	4013      	ands	r3, r2
 80020a8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80020aa:	68fb      	ldr	r3, [r7, #12]
}
 80020ac:	bf00      	nop
 80020ae:	3714      	adds	r7, #20
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr
 80020b8:	40023800 	.word	0x40023800

080020bc <LL_APB1_GRP1_EnableClock>:
{
 80020bc:	b480      	push	{r7}
 80020be:	b085      	sub	sp, #20
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80020c4:	4b08      	ldr	r3, [pc, #32]	; (80020e8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80020c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020c8:	4907      	ldr	r1, [pc, #28]	; (80020e8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80020d0:	4b05      	ldr	r3, [pc, #20]	; (80020e8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80020d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	4013      	ands	r3, r2
 80020d8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80020da:	68fb      	ldr	r3, [r7, #12]
}
 80020dc:	bf00      	nop
 80020de:	3714      	adds	r7, #20
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr
 80020e8:	40023800 	.word	0x40023800

080020ec <MX_TIM3_Init>:

TIM_HandleTypeDef htim5;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b094      	sub	sp, #80	; 0x50
 80020f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80020f2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80020f6:	2200      	movs	r2, #0
 80020f8:	601a      	str	r2, [r3, #0]
 80020fa:	605a      	str	r2, [r3, #4]
 80020fc:	609a      	str	r2, [r3, #8]
 80020fe:	60da      	str	r2, [r3, #12]
 8002100:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8002102:	f107 031c 	add.w	r3, r7, #28
 8002106:	2220      	movs	r2, #32
 8002108:	2100      	movs	r1, #0
 800210a:	4618      	mov	r0, r3
 800210c:	f003 f97c 	bl	8005408 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002110:	1d3b      	adds	r3, r7, #4
 8002112:	2200      	movs	r2, #0
 8002114:	601a      	str	r2, [r3, #0]
 8002116:	605a      	str	r2, [r3, #4]
 8002118:	609a      	str	r2, [r3, #8]
 800211a:	60da      	str	r2, [r3, #12]
 800211c:	611a      	str	r2, [r3, #16]
 800211e:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8002120:	2002      	movs	r0, #2
 8002122:	f7ff ffcb 	bl	80020bc <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 999;
 8002126:	f240 33e7 	movw	r3, #999	; 0x3e7
 800212a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800212c:	2300      	movs	r3, #0
 800212e:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 20;
 8002130:	2314      	movs	r3, #20
 8002132:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002134:	2300      	movs	r3, #0
 8002136:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8002138:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800213c:	4619      	mov	r1, r3
 800213e:	4822      	ldr	r0, [pc, #136]	; (80021c8 <MX_TIM3_Init+0xdc>)
 8002140:	f002 fbd2 	bl	80048e8 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM3);
 8002144:	4820      	ldr	r0, [pc, #128]	; (80021c8 <MX_TIM3_Init+0xdc>)
 8002146:	f7ff fed1 	bl	8001eec <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 800214a:	2100      	movs	r1, #0
 800214c:	481e      	ldr	r0, [pc, #120]	; (80021c8 <MX_TIM3_Init+0xdc>)
 800214e:	f7ff ff65 	bl	800201c <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH4);
 8002152:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002156:	481c      	ldr	r0, [pc, #112]	; (80021c8 <MX_TIM3_Init+0xdc>)
 8002158:	f7ff ff1c 	bl	8001f94 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 800215c:	2360      	movs	r3, #96	; 0x60
 800215e:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8002160:	2300      	movs	r3, #0
 8002162:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8002164:	2300      	movs	r3, #0
 8002166:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 10;
 8002168:	230a      	movs	r3, #10
 800216a:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 800216c:	2300      	movs	r3, #0
 800216e:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 8002170:	f107 031c 	add.w	r3, r7, #28
 8002174:	461a      	mov	r2, r3
 8002176:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800217a:	4813      	ldr	r0, [pc, #76]	; (80021c8 <MX_TIM3_Init+0xdc>)
 800217c:	f002 fc4e 	bl	8004a1c <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM3, LL_TIM_CHANNEL_CH4);
 8002180:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002184:	4810      	ldr	r0, [pc, #64]	; (80021c8 <MX_TIM3_Init+0xdc>)
 8002186:	f7ff fec1 	bl	8001f0c <LL_TIM_OC_EnableFast>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 800218a:	2100      	movs	r1, #0
 800218c:	480e      	ldr	r0, [pc, #56]	; (80021c8 <MX_TIM3_Init+0xdc>)
 800218e:	f7ff ff5a 	bl	8002046 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8002192:	480d      	ldr	r0, [pc, #52]	; (80021c8 <MX_TIM3_Init+0xdc>)
 8002194:	f7ff ff6a 	bl	800206c <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8002198:	2002      	movs	r0, #2
 800219a:	f7ff ff77 	bl	800208c <LL_AHB1_GRP1_EnableClock>
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
  GPIO_InitStruct.Pin = BUZZER_TIM3_CH4_Pin;
 800219e:	2302      	movs	r3, #2
 80021a0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80021a2:	2302      	movs	r3, #2
 80021a4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80021a6:	2300      	movs	r3, #0
 80021a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80021aa:	2300      	movs	r3, #0
 80021ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80021ae:	2300      	movs	r3, #0
 80021b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 80021b2:	2302      	movs	r3, #2
 80021b4:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(BUZZER_TIM3_CH4_GPIO_Port, &GPIO_InitStruct);
 80021b6:	1d3b      	adds	r3, r7, #4
 80021b8:	4619      	mov	r1, r3
 80021ba:	4804      	ldr	r0, [pc, #16]	; (80021cc <MX_TIM3_Init+0xe0>)
 80021bc:	f002 f975 	bl	80044aa <LL_GPIO_Init>

}
 80021c0:	bf00      	nop
 80021c2:	3750      	adds	r7, #80	; 0x50
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	40000400 	.word	0x40000400
 80021cc:	40020400 	.word	0x40020400

080021d0 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b08e      	sub	sp, #56	; 0x38
 80021d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021da:	2200      	movs	r2, #0
 80021dc:	601a      	str	r2, [r3, #0]
 80021de:	605a      	str	r2, [r3, #4]
 80021e0:	609a      	str	r2, [r3, #8]
 80021e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021e4:	f107 0320 	add.w	r3, r7, #32
 80021e8:	2200      	movs	r2, #0
 80021ea:	601a      	str	r2, [r3, #0]
 80021ec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021ee:	1d3b      	adds	r3, r7, #4
 80021f0:	2200      	movs	r2, #0
 80021f2:	601a      	str	r2, [r3, #0]
 80021f4:	605a      	str	r2, [r3, #4]
 80021f6:	609a      	str	r2, [r3, #8]
 80021f8:	60da      	str	r2, [r3, #12]
 80021fa:	611a      	str	r2, [r3, #16]
 80021fc:	615a      	str	r2, [r3, #20]
 80021fe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002200:	4b3f      	ldr	r3, [pc, #252]	; (8002300 <MX_TIM5_Init+0x130>)
 8002202:	4a40      	ldr	r2, [pc, #256]	; (8002304 <MX_TIM5_Init+0x134>)
 8002204:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 41;
 8002206:	4b3e      	ldr	r3, [pc, #248]	; (8002300 <MX_TIM5_Init+0x130>)
 8002208:	2229      	movs	r2, #41	; 0x29
 800220a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800220c:	4b3c      	ldr	r3, [pc, #240]	; (8002300 <MX_TIM5_Init+0x130>)
 800220e:	2200      	movs	r2, #0
 8002210:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 19999;
 8002212:	4b3b      	ldr	r3, [pc, #236]	; (8002300 <MX_TIM5_Init+0x130>)
 8002214:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8002218:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800221a:	4b39      	ldr	r3, [pc, #228]	; (8002300 <MX_TIM5_Init+0x130>)
 800221c:	2200      	movs	r2, #0
 800221e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002220:	4b37      	ldr	r3, [pc, #220]	; (8002300 <MX_TIM5_Init+0x130>)
 8002222:	2280      	movs	r2, #128	; 0x80
 8002224:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002226:	4836      	ldr	r0, [pc, #216]	; (8002300 <MX_TIM5_Init+0x130>)
 8002228:	f001 faa2 	bl	8003770 <HAL_TIM_Base_Init>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d001      	beq.n	8002236 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 8002232:	f7ff fc0f 	bl	8001a54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002236:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800223a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800223c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002240:	4619      	mov	r1, r3
 8002242:	482f      	ldr	r0, [pc, #188]	; (8002300 <MX_TIM5_Init+0x130>)
 8002244:	f001 fbfe 	bl	8003a44 <HAL_TIM_ConfigClockSource>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d001      	beq.n	8002252 <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 800224e:	f7ff fc01 	bl	8001a54 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002252:	482b      	ldr	r0, [pc, #172]	; (8002300 <MX_TIM5_Init+0x130>)
 8002254:	f001 fadb 	bl	800380e <HAL_TIM_PWM_Init>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d001      	beq.n	8002262 <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 800225e:	f7ff fbf9 	bl	8001a54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002262:	2300      	movs	r3, #0
 8002264:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002266:	2300      	movs	r3, #0
 8002268:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800226a:	f107 0320 	add.w	r3, r7, #32
 800226e:	4619      	mov	r1, r3
 8002270:	4823      	ldr	r0, [pc, #140]	; (8002300 <MX_TIM5_Init+0x130>)
 8002272:	f001 ff99 	bl	80041a8 <HAL_TIMEx_MasterConfigSynchronization>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d001      	beq.n	8002280 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 800227c:	f7ff fbea 	bl	8001a54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002280:	2360      	movs	r3, #96	; 0x60
 8002282:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002284:	2300      	movs	r3, #0
 8002286:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002288:	2300      	movs	r3, #0
 800228a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 800228c:	2304      	movs	r3, #4
 800228e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002290:	1d3b      	adds	r3, r7, #4
 8002292:	2200      	movs	r2, #0
 8002294:	4619      	mov	r1, r3
 8002296:	481a      	ldr	r0, [pc, #104]	; (8002300 <MX_TIM5_Init+0x130>)
 8002298:	f001 fb12 	bl	80038c0 <HAL_TIM_PWM_ConfigChannel>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 80022a2:	f7ff fbd7 	bl	8001a54 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80022a6:	1d3b      	adds	r3, r7, #4
 80022a8:	2204      	movs	r2, #4
 80022aa:	4619      	mov	r1, r3
 80022ac:	4814      	ldr	r0, [pc, #80]	; (8002300 <MX_TIM5_Init+0x130>)
 80022ae:	f001 fb07 	bl	80038c0 <HAL_TIM_PWM_ConfigChannel>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d001      	beq.n	80022bc <MX_TIM5_Init+0xec>
  {
    Error_Handler();
 80022b8:	f7ff fbcc 	bl	8001a54 <Error_Handler>
  }
  sConfigOC.Pulse = 31500;
 80022bc:	f647 330c 	movw	r3, #31500	; 0x7b0c
 80022c0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80022c2:	1d3b      	adds	r3, r7, #4
 80022c4:	2208      	movs	r2, #8
 80022c6:	4619      	mov	r1, r3
 80022c8:	480d      	ldr	r0, [pc, #52]	; (8002300 <MX_TIM5_Init+0x130>)
 80022ca:	f001 faf9 	bl	80038c0 <HAL_TIM_PWM_ConfigChannel>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d001      	beq.n	80022d8 <MX_TIM5_Init+0x108>
  {
    Error_Handler();
 80022d4:	f7ff fbbe 	bl	8001a54 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 80022d8:	2300      	movs	r3, #0
 80022da:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80022dc:	1d3b      	adds	r3, r7, #4
 80022de:	220c      	movs	r2, #12
 80022e0:	4619      	mov	r1, r3
 80022e2:	4807      	ldr	r0, [pc, #28]	; (8002300 <MX_TIM5_Init+0x130>)
 80022e4:	f001 faec 	bl	80038c0 <HAL_TIM_PWM_ConfigChannel>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d001      	beq.n	80022f2 <MX_TIM5_Init+0x122>
  {
    Error_Handler();
 80022ee:	f7ff fbb1 	bl	8001a54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80022f2:	4803      	ldr	r0, [pc, #12]	; (8002300 <MX_TIM5_Init+0x130>)
 80022f4:	f000 f82a 	bl	800234c <HAL_TIM_MspPostInit>

}
 80022f8:	bf00      	nop
 80022fa:	3738      	adds	r7, #56	; 0x38
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	20000270 	.word	0x20000270
 8002304:	40000c00 	.word	0x40000c00

08002308 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002308:	b480      	push	{r7}
 800230a:	b085      	sub	sp, #20
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM5)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a0b      	ldr	r2, [pc, #44]	; (8002344 <HAL_TIM_Base_MspInit+0x3c>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d10d      	bne.n	8002336 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800231a:	2300      	movs	r3, #0
 800231c:	60fb      	str	r3, [r7, #12]
 800231e:	4b0a      	ldr	r3, [pc, #40]	; (8002348 <HAL_TIM_Base_MspInit+0x40>)
 8002320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002322:	4a09      	ldr	r2, [pc, #36]	; (8002348 <HAL_TIM_Base_MspInit+0x40>)
 8002324:	f043 0308 	orr.w	r3, r3, #8
 8002328:	6413      	str	r3, [r2, #64]	; 0x40
 800232a:	4b07      	ldr	r3, [pc, #28]	; (8002348 <HAL_TIM_Base_MspInit+0x40>)
 800232c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232e:	f003 0308 	and.w	r3, r3, #8
 8002332:	60fb      	str	r3, [r7, #12]
 8002334:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8002336:	bf00      	nop
 8002338:	3714      	adds	r7, #20
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	40000c00 	.word	0x40000c00
 8002348:	40023800 	.word	0x40023800

0800234c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b088      	sub	sp, #32
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002354:	f107 030c 	add.w	r3, r7, #12
 8002358:	2200      	movs	r2, #0
 800235a:	601a      	str	r2, [r3, #0]
 800235c:	605a      	str	r2, [r3, #4]
 800235e:	609a      	str	r2, [r3, #8]
 8002360:	60da      	str	r2, [r3, #12]
 8002362:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM5)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a12      	ldr	r2, [pc, #72]	; (80023b4 <HAL_TIM_MspPostInit+0x68>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d11d      	bne.n	80023aa <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800236e:	2300      	movs	r3, #0
 8002370:	60bb      	str	r3, [r7, #8]
 8002372:	4b11      	ldr	r3, [pc, #68]	; (80023b8 <HAL_TIM_MspPostInit+0x6c>)
 8002374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002376:	4a10      	ldr	r2, [pc, #64]	; (80023b8 <HAL_TIM_MspPostInit+0x6c>)
 8002378:	f043 0301 	orr.w	r3, r3, #1
 800237c:	6313      	str	r3, [r2, #48]	; 0x30
 800237e:	4b0e      	ldr	r3, [pc, #56]	; (80023b8 <HAL_TIM_MspPostInit+0x6c>)
 8002380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002382:	f003 0301 	and.w	r3, r3, #1
 8002386:	60bb      	str	r3, [r7, #8]
 8002388:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    PA2     ------> TIM5_CH3
    PA3     ------> TIM5_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800238a:	230f      	movs	r3, #15
 800238c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800238e:	2302      	movs	r3, #2
 8002390:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002392:	2300      	movs	r3, #0
 8002394:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002396:	2300      	movs	r3, #0
 8002398:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800239a:	2302      	movs	r3, #2
 800239c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800239e:	f107 030c 	add.w	r3, r7, #12
 80023a2:	4619      	mov	r1, r3
 80023a4:	4805      	ldr	r0, [pc, #20]	; (80023bc <HAL_TIM_MspPostInit+0x70>)
 80023a6:	f000 fbe3 	bl	8002b70 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80023aa:	bf00      	nop
 80023ac:	3720      	adds	r7, #32
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	40000c00 	.word	0x40000c00
 80023b8:	40023800 	.word	0x40023800
 80023bc:	40020000 	.word	0x40020000

080023c0 <__NVIC_GetPriorityGrouping>:
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023c4:	4b04      	ldr	r3, [pc, #16]	; (80023d8 <__NVIC_GetPriorityGrouping+0x18>)
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	0a1b      	lsrs	r3, r3, #8
 80023ca:	f003 0307 	and.w	r3, r3, #7
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr
 80023d8:	e000ed00 	.word	0xe000ed00

080023dc <__NVIC_EnableIRQ>:
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	4603      	mov	r3, r0
 80023e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	db0b      	blt.n	8002406 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023ee:	79fb      	ldrb	r3, [r7, #7]
 80023f0:	f003 021f 	and.w	r2, r3, #31
 80023f4:	4907      	ldr	r1, [pc, #28]	; (8002414 <__NVIC_EnableIRQ+0x38>)
 80023f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023fa:	095b      	lsrs	r3, r3, #5
 80023fc:	2001      	movs	r0, #1
 80023fe:	fa00 f202 	lsl.w	r2, r0, r2
 8002402:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002406:	bf00      	nop
 8002408:	370c      	adds	r7, #12
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	e000e100 	.word	0xe000e100

08002418 <__NVIC_SetPriority>:
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	4603      	mov	r3, r0
 8002420:	6039      	str	r1, [r7, #0]
 8002422:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002424:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002428:	2b00      	cmp	r3, #0
 800242a:	db0a      	blt.n	8002442 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	b2da      	uxtb	r2, r3
 8002430:	490c      	ldr	r1, [pc, #48]	; (8002464 <__NVIC_SetPriority+0x4c>)
 8002432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002436:	0112      	lsls	r2, r2, #4
 8002438:	b2d2      	uxtb	r2, r2
 800243a:	440b      	add	r3, r1
 800243c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002440:	e00a      	b.n	8002458 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	b2da      	uxtb	r2, r3
 8002446:	4908      	ldr	r1, [pc, #32]	; (8002468 <__NVIC_SetPriority+0x50>)
 8002448:	79fb      	ldrb	r3, [r7, #7]
 800244a:	f003 030f 	and.w	r3, r3, #15
 800244e:	3b04      	subs	r3, #4
 8002450:	0112      	lsls	r2, r2, #4
 8002452:	b2d2      	uxtb	r2, r2
 8002454:	440b      	add	r3, r1
 8002456:	761a      	strb	r2, [r3, #24]
}
 8002458:	bf00      	nop
 800245a:	370c      	adds	r7, #12
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr
 8002464:	e000e100 	.word	0xe000e100
 8002468:	e000ed00 	.word	0xe000ed00

0800246c <NVIC_EncodePriority>:
{
 800246c:	b480      	push	{r7}
 800246e:	b089      	sub	sp, #36	; 0x24
 8002470:	af00      	add	r7, sp, #0
 8002472:	60f8      	str	r0, [r7, #12]
 8002474:	60b9      	str	r1, [r7, #8]
 8002476:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	f003 0307 	and.w	r3, r3, #7
 800247e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	f1c3 0307 	rsb	r3, r3, #7
 8002486:	2b04      	cmp	r3, #4
 8002488:	bf28      	it	cs
 800248a:	2304      	movcs	r3, #4
 800248c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	3304      	adds	r3, #4
 8002492:	2b06      	cmp	r3, #6
 8002494:	d902      	bls.n	800249c <NVIC_EncodePriority+0x30>
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	3b03      	subs	r3, #3
 800249a:	e000      	b.n	800249e <NVIC_EncodePriority+0x32>
 800249c:	2300      	movs	r3, #0
 800249e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024a0:	f04f 32ff 	mov.w	r2, #4294967295
 80024a4:	69bb      	ldr	r3, [r7, #24]
 80024a6:	fa02 f303 	lsl.w	r3, r2, r3
 80024aa:	43da      	mvns	r2, r3
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	401a      	ands	r2, r3
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024b4:	f04f 31ff 	mov.w	r1, #4294967295
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	fa01 f303 	lsl.w	r3, r1, r3
 80024be:	43d9      	mvns	r1, r3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024c4:	4313      	orrs	r3, r2
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3724      	adds	r7, #36	; 0x24
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr

080024d2 <LL_USART_Enable>:
{
 80024d2:	b480      	push	{r7}
 80024d4:	b083      	sub	sp, #12
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	68db      	ldr	r3, [r3, #12]
 80024de:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	60da      	str	r2, [r3, #12]
}
 80024e6:	bf00      	nop
 80024e8:	370c      	adds	r7, #12
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr

080024f2 <LL_USART_ConfigAsyncMode>:
{
 80024f2:	b480      	push	{r7}
 80024f4:	b083      	sub	sp, #12
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	691b      	ldr	r3, [r3, #16]
 80024fe:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	695b      	ldr	r3, [r3, #20]
 800250a:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	615a      	str	r2, [r3, #20]
}
 8002512:	bf00      	nop
 8002514:	370c      	adds	r7, #12
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
	...

08002520 <LL_AHB1_GRP1_EnableClock>:
{
 8002520:	b480      	push	{r7}
 8002522:	b085      	sub	sp, #20
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002528:	4b08      	ldr	r3, [pc, #32]	; (800254c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800252a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800252c:	4907      	ldr	r1, [pc, #28]	; (800254c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4313      	orrs	r3, r2
 8002532:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002534:	4b05      	ldr	r3, [pc, #20]	; (800254c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002536:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	4013      	ands	r3, r2
 800253c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800253e:	68fb      	ldr	r3, [r7, #12]
}
 8002540:	bf00      	nop
 8002542:	3714      	adds	r7, #20
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr
 800254c:	40023800 	.word	0x40023800

08002550 <LL_APB1_GRP1_EnableClock>:
{
 8002550:	b480      	push	{r7}
 8002552:	b085      	sub	sp, #20
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002558:	4b08      	ldr	r3, [pc, #32]	; (800257c <LL_APB1_GRP1_EnableClock+0x2c>)
 800255a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800255c:	4907      	ldr	r1, [pc, #28]	; (800257c <LL_APB1_GRP1_EnableClock+0x2c>)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4313      	orrs	r3, r2
 8002562:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002564:	4b05      	ldr	r3, [pc, #20]	; (800257c <LL_APB1_GRP1_EnableClock+0x2c>)
 8002566:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	4013      	ands	r3, r2
 800256c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800256e:	68fb      	ldr	r3, [r7, #12]
}
 8002570:	bf00      	nop
 8002572:	3714      	adds	r7, #20
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr
 800257c:	40023800 	.word	0x40023800

08002580 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8002580:	b480      	push	{r7}
 8002582:	b085      	sub	sp, #20
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002588:	4b08      	ldr	r3, [pc, #32]	; (80025ac <LL_APB2_GRP1_EnableClock+0x2c>)
 800258a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800258c:	4907      	ldr	r1, [pc, #28]	; (80025ac <LL_APB2_GRP1_EnableClock+0x2c>)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4313      	orrs	r3, r2
 8002592:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002594:	4b05      	ldr	r3, [pc, #20]	; (80025ac <LL_APB2_GRP1_EnableClock+0x2c>)
 8002596:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	4013      	ands	r3, r2
 800259c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800259e:	68fb      	ldr	r3, [r7, #12]
}
 80025a0:	bf00      	nop
 80025a2:	3714      	adds	r7, #20
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr
 80025ac:	40023800 	.word	0x40023800

080025b0 <MX_UART4_Init>:

/* USER CODE END 0 */

/* UART4 init function */
void MX_UART4_Init(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b08e      	sub	sp, #56	; 0x38
 80025b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART4_Init 0 */

  /* USER CODE END UART4_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80025b6:	f107 031c 	add.w	r3, r7, #28
 80025ba:	2200      	movs	r2, #0
 80025bc:	601a      	str	r2, [r3, #0]
 80025be:	605a      	str	r2, [r3, #4]
 80025c0:	609a      	str	r2, [r3, #8]
 80025c2:	60da      	str	r2, [r3, #12]
 80025c4:	611a      	str	r2, [r3, #16]
 80025c6:	615a      	str	r2, [r3, #20]
 80025c8:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025ca:	1d3b      	adds	r3, r7, #4
 80025cc:	2200      	movs	r2, #0
 80025ce:	601a      	str	r2, [r3, #0]
 80025d0:	605a      	str	r2, [r3, #4]
 80025d2:	609a      	str	r2, [r3, #8]
 80025d4:	60da      	str	r2, [r3, #12]
 80025d6:	611a      	str	r2, [r3, #16]
 80025d8:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART4);
 80025da:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80025de:	f7ff ffb7 	bl	8002550 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80025e2:	2004      	movs	r0, #4
 80025e4:	f7ff ff9c 	bl	8002520 <LL_AHB1_GRP1_EnableClock>
  /**UART4 GPIO Configuration
  PC10   ------> UART4_TX
  PC11   ------> UART4_RX
  */
  GPIO_InitStruct.Pin = GPS_UART4_TX_Pin|GPS_UART4_RX_Pin;
 80025e8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80025ec:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80025ee:	2302      	movs	r3, #2
 80025f0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80025f2:	2303      	movs	r3, #3
 80025f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80025f6:	2300      	movs	r3, #0
 80025f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80025fa:	2300      	movs	r3, #0
 80025fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 80025fe:	2308      	movs	r3, #8
 8002600:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002602:	1d3b      	adds	r3, r7, #4
 8002604:	4619      	mov	r1, r3
 8002606:	4819      	ldr	r0, [pc, #100]	; (800266c <MX_UART4_Init+0xbc>)
 8002608:	f001 ff4f 	bl	80044aa <LL_GPIO_Init>

  /* UART4 interrupt Init */
  NVIC_SetPriority(UART4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800260c:	f7ff fed8 	bl	80023c0 <__NVIC_GetPriorityGrouping>
 8002610:	4603      	mov	r3, r0
 8002612:	2200      	movs	r2, #0
 8002614:	2100      	movs	r1, #0
 8002616:	4618      	mov	r0, r3
 8002618:	f7ff ff28 	bl	800246c <NVIC_EncodePriority>
 800261c:	4603      	mov	r3, r0
 800261e:	4619      	mov	r1, r3
 8002620:	2034      	movs	r0, #52	; 0x34
 8002622:	f7ff fef9 	bl	8002418 <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART4_IRQn);
 8002626:	2034      	movs	r0, #52	; 0x34
 8002628:	f7ff fed8 	bl	80023dc <__NVIC_EnableIRQ>

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  USART_InitStruct.BaudRate = 9600;
 800262c:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8002630:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002632:	2300      	movs	r3, #0
 8002634:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002636:	2300      	movs	r3, #0
 8002638:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800263a:	2300      	movs	r3, #0
 800263c:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800263e:	230c      	movs	r3, #12
 8002640:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002642:	2300      	movs	r3, #0
 8002644:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002646:	2300      	movs	r3, #0
 8002648:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(UART4, &USART_InitStruct);
 800264a:	f107 031c 	add.w	r3, r7, #28
 800264e:	4619      	mov	r1, r3
 8002650:	4807      	ldr	r0, [pc, #28]	; (8002670 <MX_UART4_Init+0xc0>)
 8002652:	f002 fe2f 	bl	80052b4 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART4);
 8002656:	4806      	ldr	r0, [pc, #24]	; (8002670 <MX_UART4_Init+0xc0>)
 8002658:	f7ff ff4b 	bl	80024f2 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART4);
 800265c:	4804      	ldr	r0, [pc, #16]	; (8002670 <MX_UART4_Init+0xc0>)
 800265e:	f7ff ff38 	bl	80024d2 <LL_USART_Enable>
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002662:	bf00      	nop
 8002664:	3738      	adds	r7, #56	; 0x38
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	40020800 	.word	0x40020800
 8002670:	40004c00 	.word	0x40004c00

08002674 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b08e      	sub	sp, #56	; 0x38
 8002678:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART5_Init 0 */

  /* USER CODE END UART5_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800267a:	f107 031c 	add.w	r3, r7, #28
 800267e:	2200      	movs	r2, #0
 8002680:	601a      	str	r2, [r3, #0]
 8002682:	605a      	str	r2, [r3, #4]
 8002684:	609a      	str	r2, [r3, #8]
 8002686:	60da      	str	r2, [r3, #12]
 8002688:	611a      	str	r2, [r3, #16]
 800268a:	615a      	str	r2, [r3, #20]
 800268c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800268e:	1d3b      	adds	r3, r7, #4
 8002690:	2200      	movs	r2, #0
 8002692:	601a      	str	r2, [r3, #0]
 8002694:	605a      	str	r2, [r3, #4]
 8002696:	609a      	str	r2, [r3, #8]
 8002698:	60da      	str	r2, [r3, #12]
 800269a:	611a      	str	r2, [r3, #16]
 800269c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART5);
 800269e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80026a2:	f7ff ff55 	bl	8002550 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80026a6:	2004      	movs	r0, #4
 80026a8:	f7ff ff3a 	bl	8002520 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 80026ac:	2008      	movs	r0, #8
 80026ae:	f7ff ff37 	bl	8002520 <LL_AHB1_GRP1_EnableClock>
  /**UART5 GPIO Configuration
  PC12   ------> UART5_TX
  PD2   ------> UART5_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12;
 80026b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026b6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80026b8:	2302      	movs	r3, #2
 80026ba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80026bc:	2303      	movs	r3, #3
 80026be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80026c0:	2300      	movs	r3, #0
 80026c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80026c4:	2300      	movs	r3, #0
 80026c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 80026c8:	2308      	movs	r3, #8
 80026ca:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026cc:	1d3b      	adds	r3, r7, #4
 80026ce:	4619      	mov	r1, r3
 80026d0:	4821      	ldr	r0, [pc, #132]	; (8002758 <MX_UART5_Init+0xe4>)
 80026d2:	f001 feea 	bl	80044aa <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 80026d6:	2304      	movs	r3, #4
 80026d8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80026da:	2302      	movs	r3, #2
 80026dc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80026de:	2303      	movs	r3, #3
 80026e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80026e2:	2300      	movs	r3, #0
 80026e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80026e6:	2300      	movs	r3, #0
 80026e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 80026ea:	2308      	movs	r3, #8
 80026ec:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026ee:	1d3b      	adds	r3, r7, #4
 80026f0:	4619      	mov	r1, r3
 80026f2:	481a      	ldr	r0, [pc, #104]	; (800275c <MX_UART5_Init+0xe8>)
 80026f4:	f001 fed9 	bl	80044aa <LL_GPIO_Init>

  /* UART5 interrupt Init */
  NVIC_SetPriority(UART5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80026f8:	f7ff fe62 	bl	80023c0 <__NVIC_GetPriorityGrouping>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2200      	movs	r2, #0
 8002700:	2100      	movs	r1, #0
 8002702:	4618      	mov	r0, r3
 8002704:	f7ff feb2 	bl	800246c <NVIC_EncodePriority>
 8002708:	4603      	mov	r3, r0
 800270a:	4619      	mov	r1, r3
 800270c:	2035      	movs	r0, #53	; 0x35
 800270e:	f7ff fe83 	bl	8002418 <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART5_IRQn);
 8002712:	2035      	movs	r0, #53	; 0x35
 8002714:	f7ff fe62 	bl	80023dc <__NVIC_EnableIRQ>

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8002718:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800271c:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800271e:	2300      	movs	r3, #0
 8002720:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002722:	2300      	movs	r3, #0
 8002724:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002726:	2300      	movs	r3, #0
 8002728:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_RX;
 800272a:	2304      	movs	r3, #4
 800272c:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800272e:	2300      	movs	r3, #0
 8002730:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002732:	2300      	movs	r3, #0
 8002734:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(UART5, &USART_InitStruct);
 8002736:	f107 031c 	add.w	r3, r7, #28
 800273a:	4619      	mov	r1, r3
 800273c:	4808      	ldr	r0, [pc, #32]	; (8002760 <MX_UART5_Init+0xec>)
 800273e:	f002 fdb9 	bl	80052b4 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART5);
 8002742:	4807      	ldr	r0, [pc, #28]	; (8002760 <MX_UART5_Init+0xec>)
 8002744:	f7ff fed5 	bl	80024f2 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART5);
 8002748:	4805      	ldr	r0, [pc, #20]	; (8002760 <MX_UART5_Init+0xec>)
 800274a:	f7ff fec2 	bl	80024d2 <LL_USART_Enable>
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800274e:	bf00      	nop
 8002750:	3738      	adds	r7, #56	; 0x38
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	40020800 	.word	0x40020800
 800275c:	40020c00 	.word	0x40020c00
 8002760:	40005000 	.word	0x40005000

08002764 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b08e      	sub	sp, #56	; 0x38
 8002768:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART6_Init 0 */

  /* USER CODE END USART6_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800276a:	f107 031c 	add.w	r3, r7, #28
 800276e:	2200      	movs	r2, #0
 8002770:	601a      	str	r2, [r3, #0]
 8002772:	605a      	str	r2, [r3, #4]
 8002774:	609a      	str	r2, [r3, #8]
 8002776:	60da      	str	r2, [r3, #12]
 8002778:	611a      	str	r2, [r3, #16]
 800277a:	615a      	str	r2, [r3, #20]
 800277c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800277e:	1d3b      	adds	r3, r7, #4
 8002780:	2200      	movs	r2, #0
 8002782:	601a      	str	r2, [r3, #0]
 8002784:	605a      	str	r2, [r3, #4]
 8002786:	609a      	str	r2, [r3, #8]
 8002788:	60da      	str	r2, [r3, #12]
 800278a:	611a      	str	r2, [r3, #16]
 800278c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART6);
 800278e:	2020      	movs	r0, #32
 8002790:	f7ff fef6 	bl	8002580 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8002794:	2004      	movs	r0, #4
 8002796:	f7ff fec3 	bl	8002520 <LL_AHB1_GRP1_EnableClock>
  /**USART6 GPIO Configuration
  PC6   ------> USART6_TX
  PC7   ------> USART6_RX
  */
  GPIO_InitStruct.Pin = TELEMETRI_USART6_TX_Pin|TELEMETRI_USART6_RX_Pin;
 800279a:	23c0      	movs	r3, #192	; 0xc0
 800279c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800279e:	2302      	movs	r3, #2
 80027a0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80027a2:	2303      	movs	r3, #3
 80027a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80027a6:	2300      	movs	r3, #0
 80027a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80027aa:	2300      	movs	r3, #0
 80027ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 80027ae:	2308      	movs	r3, #8
 80027b0:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027b2:	1d3b      	adds	r3, r7, #4
 80027b4:	4619      	mov	r1, r3
 80027b6:	4819      	ldr	r0, [pc, #100]	; (800281c <MX_USART6_UART_Init+0xb8>)
 80027b8:	f001 fe77 	bl	80044aa <LL_GPIO_Init>

  /* USART6 interrupt Init */
  NVIC_SetPriority(USART6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80027bc:	f7ff fe00 	bl	80023c0 <__NVIC_GetPriorityGrouping>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2200      	movs	r2, #0
 80027c4:	2100      	movs	r1, #0
 80027c6:	4618      	mov	r0, r3
 80027c8:	f7ff fe50 	bl	800246c <NVIC_EncodePriority>
 80027cc:	4603      	mov	r3, r0
 80027ce:	4619      	mov	r1, r3
 80027d0:	2047      	movs	r0, #71	; 0x47
 80027d2:	f7ff fe21 	bl	8002418 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART6_IRQn);
 80027d6:	2047      	movs	r0, #71	; 0x47
 80027d8:	f7ff fe00 	bl	80023dc <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  USART_InitStruct.BaudRate = 57600;
 80027dc:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 80027e0:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80027e2:	2300      	movs	r3, #0
 80027e4:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80027e6:	2300      	movs	r3, #0
 80027e8:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80027ea:	2300      	movs	r3, #0
 80027ec:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80027ee:	230c      	movs	r3, #12
 80027f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80027f2:	2300      	movs	r3, #0
 80027f4:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80027f6:	2300      	movs	r3, #0
 80027f8:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART6, &USART_InitStruct);
 80027fa:	f107 031c 	add.w	r3, r7, #28
 80027fe:	4619      	mov	r1, r3
 8002800:	4807      	ldr	r0, [pc, #28]	; (8002820 <MX_USART6_UART_Init+0xbc>)
 8002802:	f002 fd57 	bl	80052b4 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART6);
 8002806:	4806      	ldr	r0, [pc, #24]	; (8002820 <MX_USART6_UART_Init+0xbc>)
 8002808:	f7ff fe73 	bl	80024f2 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART6);
 800280c:	4804      	ldr	r0, [pc, #16]	; (8002820 <MX_USART6_UART_Init+0xbc>)
 800280e:	f7ff fe60 	bl	80024d2 <LL_USART_Enable>
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002812:	bf00      	nop
 8002814:	3738      	adds	r7, #56	; 0x38
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	40020800 	.word	0x40020800
 8002820:	40011400 	.word	0x40011400

08002824 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002824:	f8df d034 	ldr.w	sp, [pc, #52]	; 800285c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002828:	480d      	ldr	r0, [pc, #52]	; (8002860 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800282a:	490e      	ldr	r1, [pc, #56]	; (8002864 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800282c:	4a0e      	ldr	r2, [pc, #56]	; (8002868 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800282e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002830:	e002      	b.n	8002838 <LoopCopyDataInit>

08002832 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002832:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002834:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002836:	3304      	adds	r3, #4

08002838 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002838:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800283a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800283c:	d3f9      	bcc.n	8002832 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800283e:	4a0b      	ldr	r2, [pc, #44]	; (800286c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002840:	4c0b      	ldr	r4, [pc, #44]	; (8002870 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002842:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002844:	e001      	b.n	800284a <LoopFillZerobss>

08002846 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002846:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002848:	3204      	adds	r2, #4

0800284a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800284a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800284c:	d3fb      	bcc.n	8002846 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800284e:	f7ff fb3b 	bl	8001ec8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002852:	f002 fdb5 	bl	80053c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002856:	f7fe fefb 	bl	8001650 <main>
  bx  lr    
 800285a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800285c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002860:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002864:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002868:	080082c4 	.word	0x080082c4
  ldr r2, =_sbss
 800286c:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002870:	200002cc 	.word	0x200002cc

08002874 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002874:	e7fe      	b.n	8002874 <ADC_IRQHandler>
	...

08002878 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800287c:	4b0e      	ldr	r3, [pc, #56]	; (80028b8 <HAL_Init+0x40>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a0d      	ldr	r2, [pc, #52]	; (80028b8 <HAL_Init+0x40>)
 8002882:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002886:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002888:	4b0b      	ldr	r3, [pc, #44]	; (80028b8 <HAL_Init+0x40>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a0a      	ldr	r2, [pc, #40]	; (80028b8 <HAL_Init+0x40>)
 800288e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002892:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002894:	4b08      	ldr	r3, [pc, #32]	; (80028b8 <HAL_Init+0x40>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a07      	ldr	r2, [pc, #28]	; (80028b8 <HAL_Init+0x40>)
 800289a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800289e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028a0:	2003      	movs	r0, #3
 80028a2:	f000 f931 	bl	8002b08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80028a6:	2000      	movs	r0, #0
 80028a8:	f000 f808 	bl	80028bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80028ac:	f7ff f8d8 	bl	8001a60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028b0:	2300      	movs	r3, #0
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	40023c00 	.word	0x40023c00

080028bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b082      	sub	sp, #8
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80028c4:	4b12      	ldr	r3, [pc, #72]	; (8002910 <HAL_InitTick+0x54>)
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	4b12      	ldr	r3, [pc, #72]	; (8002914 <HAL_InitTick+0x58>)
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	4619      	mov	r1, r3
 80028ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80028d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80028da:	4618      	mov	r0, r3
 80028dc:	f000 f93b 	bl	8002b56 <HAL_SYSTICK_Config>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d001      	beq.n	80028ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e00e      	b.n	8002908 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2b0f      	cmp	r3, #15
 80028ee:	d80a      	bhi.n	8002906 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028f0:	2200      	movs	r2, #0
 80028f2:	6879      	ldr	r1, [r7, #4]
 80028f4:	f04f 30ff 	mov.w	r0, #4294967295
 80028f8:	f000 f911 	bl	8002b1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028fc:	4a06      	ldr	r2, [pc, #24]	; (8002918 <HAL_InitTick+0x5c>)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002902:	2300      	movs	r3, #0
 8002904:	e000      	b.n	8002908 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
}
 8002908:	4618      	mov	r0, r3
 800290a:	3708      	adds	r7, #8
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	20000000 	.word	0x20000000
 8002914:	20000008 	.word	0x20000008
 8002918:	20000004 	.word	0x20000004

0800291c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002920:	4b06      	ldr	r3, [pc, #24]	; (800293c <HAL_IncTick+0x20>)
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	461a      	mov	r2, r3
 8002926:	4b06      	ldr	r3, [pc, #24]	; (8002940 <HAL_IncTick+0x24>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4413      	add	r3, r2
 800292c:	4a04      	ldr	r2, [pc, #16]	; (8002940 <HAL_IncTick+0x24>)
 800292e:	6013      	str	r3, [r2, #0]
}
 8002930:	bf00      	nop
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop
 800293c:	20000008 	.word	0x20000008
 8002940:	200002b8 	.word	0x200002b8

08002944 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002944:	b480      	push	{r7}
 8002946:	af00      	add	r7, sp, #0
  return uwTick;
 8002948:	4b03      	ldr	r3, [pc, #12]	; (8002958 <HAL_GetTick+0x14>)
 800294a:	681b      	ldr	r3, [r3, #0]
}
 800294c:	4618      	mov	r0, r3
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop
 8002958:	200002b8 	.word	0x200002b8

0800295c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b084      	sub	sp, #16
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002964:	f7ff ffee 	bl	8002944 <HAL_GetTick>
 8002968:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002974:	d005      	beq.n	8002982 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002976:	4b0a      	ldr	r3, [pc, #40]	; (80029a0 <HAL_Delay+0x44>)
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	461a      	mov	r2, r3
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	4413      	add	r3, r2
 8002980:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002982:	bf00      	nop
 8002984:	f7ff ffde 	bl	8002944 <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	68fa      	ldr	r2, [r7, #12]
 8002990:	429a      	cmp	r2, r3
 8002992:	d8f7      	bhi.n	8002984 <HAL_Delay+0x28>
  {
  }
}
 8002994:	bf00      	nop
 8002996:	bf00      	nop
 8002998:	3710      	adds	r7, #16
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	20000008 	.word	0x20000008

080029a4 <__NVIC_SetPriorityGrouping>:
{
 80029a4:	b480      	push	{r7}
 80029a6:	b085      	sub	sp, #20
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f003 0307 	and.w	r3, r3, #7
 80029b2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029b4:	4b0c      	ldr	r3, [pc, #48]	; (80029e8 <__NVIC_SetPriorityGrouping+0x44>)
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029ba:	68ba      	ldr	r2, [r7, #8]
 80029bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029c0:	4013      	ands	r3, r2
 80029c2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80029d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029d6:	4a04      	ldr	r2, [pc, #16]	; (80029e8 <__NVIC_SetPriorityGrouping+0x44>)
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	60d3      	str	r3, [r2, #12]
}
 80029dc:	bf00      	nop
 80029de:	3714      	adds	r7, #20
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr
 80029e8:	e000ed00 	.word	0xe000ed00

080029ec <__NVIC_GetPriorityGrouping>:
{
 80029ec:	b480      	push	{r7}
 80029ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029f0:	4b04      	ldr	r3, [pc, #16]	; (8002a04 <__NVIC_GetPriorityGrouping+0x18>)
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	0a1b      	lsrs	r3, r3, #8
 80029f6:	f003 0307 	and.w	r3, r3, #7
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr
 8002a04:	e000ed00 	.word	0xe000ed00

08002a08 <__NVIC_SetPriority>:
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	4603      	mov	r3, r0
 8002a10:	6039      	str	r1, [r7, #0]
 8002a12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	db0a      	blt.n	8002a32 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	b2da      	uxtb	r2, r3
 8002a20:	490c      	ldr	r1, [pc, #48]	; (8002a54 <__NVIC_SetPriority+0x4c>)
 8002a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a26:	0112      	lsls	r2, r2, #4
 8002a28:	b2d2      	uxtb	r2, r2
 8002a2a:	440b      	add	r3, r1
 8002a2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002a30:	e00a      	b.n	8002a48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	b2da      	uxtb	r2, r3
 8002a36:	4908      	ldr	r1, [pc, #32]	; (8002a58 <__NVIC_SetPriority+0x50>)
 8002a38:	79fb      	ldrb	r3, [r7, #7]
 8002a3a:	f003 030f 	and.w	r3, r3, #15
 8002a3e:	3b04      	subs	r3, #4
 8002a40:	0112      	lsls	r2, r2, #4
 8002a42:	b2d2      	uxtb	r2, r2
 8002a44:	440b      	add	r3, r1
 8002a46:	761a      	strb	r2, [r3, #24]
}
 8002a48:	bf00      	nop
 8002a4a:	370c      	adds	r7, #12
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr
 8002a54:	e000e100 	.word	0xe000e100
 8002a58:	e000ed00 	.word	0xe000ed00

08002a5c <NVIC_EncodePriority>:
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b089      	sub	sp, #36	; 0x24
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	60f8      	str	r0, [r7, #12]
 8002a64:	60b9      	str	r1, [r7, #8]
 8002a66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	f003 0307 	and.w	r3, r3, #7
 8002a6e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	f1c3 0307 	rsb	r3, r3, #7
 8002a76:	2b04      	cmp	r3, #4
 8002a78:	bf28      	it	cs
 8002a7a:	2304      	movcs	r3, #4
 8002a7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	3304      	adds	r3, #4
 8002a82:	2b06      	cmp	r3, #6
 8002a84:	d902      	bls.n	8002a8c <NVIC_EncodePriority+0x30>
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	3b03      	subs	r3, #3
 8002a8a:	e000      	b.n	8002a8e <NVIC_EncodePriority+0x32>
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a90:	f04f 32ff 	mov.w	r2, #4294967295
 8002a94:	69bb      	ldr	r3, [r7, #24]
 8002a96:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9a:	43da      	mvns	r2, r3
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	401a      	ands	r2, r3
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002aa4:	f04f 31ff 	mov.w	r1, #4294967295
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8002aae:	43d9      	mvns	r1, r3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ab4:	4313      	orrs	r3, r2
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3724      	adds	r7, #36	; 0x24
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr
	...

08002ac4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b082      	sub	sp, #8
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	3b01      	subs	r3, #1
 8002ad0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ad4:	d301      	bcc.n	8002ada <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e00f      	b.n	8002afa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ada:	4a0a      	ldr	r2, [pc, #40]	; (8002b04 <SysTick_Config+0x40>)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	3b01      	subs	r3, #1
 8002ae0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ae2:	210f      	movs	r1, #15
 8002ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ae8:	f7ff ff8e 	bl	8002a08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002aec:	4b05      	ldr	r3, [pc, #20]	; (8002b04 <SysTick_Config+0x40>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002af2:	4b04      	ldr	r3, [pc, #16]	; (8002b04 <SysTick_Config+0x40>)
 8002af4:	2207      	movs	r2, #7
 8002af6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002af8:	2300      	movs	r3, #0
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3708      	adds	r7, #8
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	e000e010 	.word	0xe000e010

08002b08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b082      	sub	sp, #8
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	f7ff ff47 	bl	80029a4 <__NVIC_SetPriorityGrouping>
}
 8002b16:	bf00      	nop
 8002b18:	3708      	adds	r7, #8
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}

08002b1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b1e:	b580      	push	{r7, lr}
 8002b20:	b086      	sub	sp, #24
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	4603      	mov	r3, r0
 8002b26:	60b9      	str	r1, [r7, #8]
 8002b28:	607a      	str	r2, [r7, #4]
 8002b2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b30:	f7ff ff5c 	bl	80029ec <__NVIC_GetPriorityGrouping>
 8002b34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	68b9      	ldr	r1, [r7, #8]
 8002b3a:	6978      	ldr	r0, [r7, #20]
 8002b3c:	f7ff ff8e 	bl	8002a5c <NVIC_EncodePriority>
 8002b40:	4602      	mov	r2, r0
 8002b42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b46:	4611      	mov	r1, r2
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f7ff ff5d 	bl	8002a08 <__NVIC_SetPriority>
}
 8002b4e:	bf00      	nop
 8002b50:	3718      	adds	r7, #24
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}

08002b56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b56:	b580      	push	{r7, lr}
 8002b58:	b082      	sub	sp, #8
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f7ff ffb0 	bl	8002ac4 <SysTick_Config>
 8002b64:	4603      	mov	r3, r0
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3708      	adds	r7, #8
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
	...

08002b70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b089      	sub	sp, #36	; 0x24
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b82:	2300      	movs	r3, #0
 8002b84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b86:	2300      	movs	r3, #0
 8002b88:	61fb      	str	r3, [r7, #28]
 8002b8a:	e16b      	b.n	8002e64 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	fa02 f303 	lsl.w	r3, r2, r3
 8002b94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	697a      	ldr	r2, [r7, #20]
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ba0:	693a      	ldr	r2, [r7, #16]
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	f040 815a 	bne.w	8002e5e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	f003 0303 	and.w	r3, r3, #3
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d005      	beq.n	8002bc2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d130      	bne.n	8002c24 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	005b      	lsls	r3, r3, #1
 8002bcc:	2203      	movs	r2, #3
 8002bce:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd2:	43db      	mvns	r3, r3
 8002bd4:	69ba      	ldr	r2, [r7, #24]
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	68da      	ldr	r2, [r3, #12]
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	005b      	lsls	r3, r3, #1
 8002be2:	fa02 f303 	lsl.w	r3, r2, r3
 8002be6:	69ba      	ldr	r2, [r7, #24]
 8002be8:	4313      	orrs	r3, r2
 8002bea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	69ba      	ldr	r2, [r7, #24]
 8002bf0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002c00:	43db      	mvns	r3, r3
 8002c02:	69ba      	ldr	r2, [r7, #24]
 8002c04:	4013      	ands	r3, r2
 8002c06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	091b      	lsrs	r3, r3, #4
 8002c0e:	f003 0201 	and.w	r2, r3, #1
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	fa02 f303 	lsl.w	r3, r2, r3
 8002c18:	69ba      	ldr	r2, [r7, #24]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	69ba      	ldr	r2, [r7, #24]
 8002c22:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f003 0303 	and.w	r3, r3, #3
 8002c2c:	2b03      	cmp	r3, #3
 8002c2e:	d017      	beq.n	8002c60 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	005b      	lsls	r3, r3, #1
 8002c3a:	2203      	movs	r2, #3
 8002c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c40:	43db      	mvns	r3, r3
 8002c42:	69ba      	ldr	r2, [r7, #24]
 8002c44:	4013      	ands	r3, r2
 8002c46:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	689a      	ldr	r2, [r3, #8]
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	005b      	lsls	r3, r3, #1
 8002c50:	fa02 f303 	lsl.w	r3, r2, r3
 8002c54:	69ba      	ldr	r2, [r7, #24]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	69ba      	ldr	r2, [r7, #24]
 8002c5e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	f003 0303 	and.w	r3, r3, #3
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d123      	bne.n	8002cb4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	08da      	lsrs	r2, r3, #3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	3208      	adds	r2, #8
 8002c74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c78:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	f003 0307 	and.w	r3, r3, #7
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	220f      	movs	r2, #15
 8002c84:	fa02 f303 	lsl.w	r3, r2, r3
 8002c88:	43db      	mvns	r3, r3
 8002c8a:	69ba      	ldr	r2, [r7, #24]
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	691a      	ldr	r2, [r3, #16]
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	f003 0307 	and.w	r3, r3, #7
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca0:	69ba      	ldr	r2, [r7, #24]
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	08da      	lsrs	r2, r3, #3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	3208      	adds	r2, #8
 8002cae:	69b9      	ldr	r1, [r7, #24]
 8002cb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	005b      	lsls	r3, r3, #1
 8002cbe:	2203      	movs	r2, #3
 8002cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc4:	43db      	mvns	r3, r3
 8002cc6:	69ba      	ldr	r2, [r7, #24]
 8002cc8:	4013      	ands	r3, r2
 8002cca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f003 0203 	and.w	r2, r3, #3
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	005b      	lsls	r3, r3, #1
 8002cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cdc:	69ba      	ldr	r2, [r7, #24]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	69ba      	ldr	r2, [r7, #24]
 8002ce6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	f000 80b4 	beq.w	8002e5e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	60fb      	str	r3, [r7, #12]
 8002cfa:	4b60      	ldr	r3, [pc, #384]	; (8002e7c <HAL_GPIO_Init+0x30c>)
 8002cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cfe:	4a5f      	ldr	r2, [pc, #380]	; (8002e7c <HAL_GPIO_Init+0x30c>)
 8002d00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d04:	6453      	str	r3, [r2, #68]	; 0x44
 8002d06:	4b5d      	ldr	r3, [pc, #372]	; (8002e7c <HAL_GPIO_Init+0x30c>)
 8002d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d0e:	60fb      	str	r3, [r7, #12]
 8002d10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d12:	4a5b      	ldr	r2, [pc, #364]	; (8002e80 <HAL_GPIO_Init+0x310>)
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	089b      	lsrs	r3, r3, #2
 8002d18:	3302      	adds	r3, #2
 8002d1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	f003 0303 	and.w	r3, r3, #3
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	220f      	movs	r2, #15
 8002d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2e:	43db      	mvns	r3, r3
 8002d30:	69ba      	ldr	r2, [r7, #24]
 8002d32:	4013      	ands	r3, r2
 8002d34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4a52      	ldr	r2, [pc, #328]	; (8002e84 <HAL_GPIO_Init+0x314>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d02b      	beq.n	8002d96 <HAL_GPIO_Init+0x226>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a51      	ldr	r2, [pc, #324]	; (8002e88 <HAL_GPIO_Init+0x318>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d025      	beq.n	8002d92 <HAL_GPIO_Init+0x222>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a50      	ldr	r2, [pc, #320]	; (8002e8c <HAL_GPIO_Init+0x31c>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d01f      	beq.n	8002d8e <HAL_GPIO_Init+0x21e>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a4f      	ldr	r2, [pc, #316]	; (8002e90 <HAL_GPIO_Init+0x320>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d019      	beq.n	8002d8a <HAL_GPIO_Init+0x21a>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4a4e      	ldr	r2, [pc, #312]	; (8002e94 <HAL_GPIO_Init+0x324>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d013      	beq.n	8002d86 <HAL_GPIO_Init+0x216>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a4d      	ldr	r2, [pc, #308]	; (8002e98 <HAL_GPIO_Init+0x328>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d00d      	beq.n	8002d82 <HAL_GPIO_Init+0x212>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a4c      	ldr	r2, [pc, #304]	; (8002e9c <HAL_GPIO_Init+0x32c>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d007      	beq.n	8002d7e <HAL_GPIO_Init+0x20e>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a4b      	ldr	r2, [pc, #300]	; (8002ea0 <HAL_GPIO_Init+0x330>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d101      	bne.n	8002d7a <HAL_GPIO_Init+0x20a>
 8002d76:	2307      	movs	r3, #7
 8002d78:	e00e      	b.n	8002d98 <HAL_GPIO_Init+0x228>
 8002d7a:	2308      	movs	r3, #8
 8002d7c:	e00c      	b.n	8002d98 <HAL_GPIO_Init+0x228>
 8002d7e:	2306      	movs	r3, #6
 8002d80:	e00a      	b.n	8002d98 <HAL_GPIO_Init+0x228>
 8002d82:	2305      	movs	r3, #5
 8002d84:	e008      	b.n	8002d98 <HAL_GPIO_Init+0x228>
 8002d86:	2304      	movs	r3, #4
 8002d88:	e006      	b.n	8002d98 <HAL_GPIO_Init+0x228>
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e004      	b.n	8002d98 <HAL_GPIO_Init+0x228>
 8002d8e:	2302      	movs	r3, #2
 8002d90:	e002      	b.n	8002d98 <HAL_GPIO_Init+0x228>
 8002d92:	2301      	movs	r3, #1
 8002d94:	e000      	b.n	8002d98 <HAL_GPIO_Init+0x228>
 8002d96:	2300      	movs	r3, #0
 8002d98:	69fa      	ldr	r2, [r7, #28]
 8002d9a:	f002 0203 	and.w	r2, r2, #3
 8002d9e:	0092      	lsls	r2, r2, #2
 8002da0:	4093      	lsls	r3, r2
 8002da2:	69ba      	ldr	r2, [r7, #24]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002da8:	4935      	ldr	r1, [pc, #212]	; (8002e80 <HAL_GPIO_Init+0x310>)
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	089b      	lsrs	r3, r3, #2
 8002dae:	3302      	adds	r3, #2
 8002db0:	69ba      	ldr	r2, [r7, #24]
 8002db2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002db6:	4b3b      	ldr	r3, [pc, #236]	; (8002ea4 <HAL_GPIO_Init+0x334>)
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	43db      	mvns	r3, r3
 8002dc0:	69ba      	ldr	r2, [r7, #24]
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d003      	beq.n	8002dda <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002dd2:	69ba      	ldr	r2, [r7, #24]
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002dda:	4a32      	ldr	r2, [pc, #200]	; (8002ea4 <HAL_GPIO_Init+0x334>)
 8002ddc:	69bb      	ldr	r3, [r7, #24]
 8002dde:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002de0:	4b30      	ldr	r3, [pc, #192]	; (8002ea4 <HAL_GPIO_Init+0x334>)
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	43db      	mvns	r3, r3
 8002dea:	69ba      	ldr	r2, [r7, #24]
 8002dec:	4013      	ands	r3, r2
 8002dee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d003      	beq.n	8002e04 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002dfc:	69ba      	ldr	r2, [r7, #24]
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	4313      	orrs	r3, r2
 8002e02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e04:	4a27      	ldr	r2, [pc, #156]	; (8002ea4 <HAL_GPIO_Init+0x334>)
 8002e06:	69bb      	ldr	r3, [r7, #24]
 8002e08:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e0a:	4b26      	ldr	r3, [pc, #152]	; (8002ea4 <HAL_GPIO_Init+0x334>)
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	43db      	mvns	r3, r3
 8002e14:	69ba      	ldr	r2, [r7, #24]
 8002e16:	4013      	ands	r3, r2
 8002e18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d003      	beq.n	8002e2e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002e26:	69ba      	ldr	r2, [r7, #24]
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e2e:	4a1d      	ldr	r2, [pc, #116]	; (8002ea4 <HAL_GPIO_Init+0x334>)
 8002e30:	69bb      	ldr	r3, [r7, #24]
 8002e32:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e34:	4b1b      	ldr	r3, [pc, #108]	; (8002ea4 <HAL_GPIO_Init+0x334>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	43db      	mvns	r3, r3
 8002e3e:	69ba      	ldr	r2, [r7, #24]
 8002e40:	4013      	ands	r3, r2
 8002e42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d003      	beq.n	8002e58 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002e50:	69ba      	ldr	r2, [r7, #24]
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	4313      	orrs	r3, r2
 8002e56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e58:	4a12      	ldr	r2, [pc, #72]	; (8002ea4 <HAL_GPIO_Init+0x334>)
 8002e5a:	69bb      	ldr	r3, [r7, #24]
 8002e5c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	3301      	adds	r3, #1
 8002e62:	61fb      	str	r3, [r7, #28]
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	2b0f      	cmp	r3, #15
 8002e68:	f67f ae90 	bls.w	8002b8c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e6c:	bf00      	nop
 8002e6e:	bf00      	nop
 8002e70:	3724      	adds	r7, #36	; 0x24
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr
 8002e7a:	bf00      	nop
 8002e7c:	40023800 	.word	0x40023800
 8002e80:	40013800 	.word	0x40013800
 8002e84:	40020000 	.word	0x40020000
 8002e88:	40020400 	.word	0x40020400
 8002e8c:	40020800 	.word	0x40020800
 8002e90:	40020c00 	.word	0x40020c00
 8002e94:	40021000 	.word	0x40021000
 8002e98:	40021400 	.word	0x40021400
 8002e9c:	40021800 	.word	0x40021800
 8002ea0:	40021c00 	.word	0x40021c00
 8002ea4:	40013c00 	.word	0x40013c00

08002ea8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b086      	sub	sp, #24
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d101      	bne.n	8002eba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e267      	b.n	800338a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0301 	and.w	r3, r3, #1
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d075      	beq.n	8002fb2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ec6:	4b88      	ldr	r3, [pc, #544]	; (80030e8 <HAL_RCC_OscConfig+0x240>)
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	f003 030c 	and.w	r3, r3, #12
 8002ece:	2b04      	cmp	r3, #4
 8002ed0:	d00c      	beq.n	8002eec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ed2:	4b85      	ldr	r3, [pc, #532]	; (80030e8 <HAL_RCC_OscConfig+0x240>)
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002eda:	2b08      	cmp	r3, #8
 8002edc:	d112      	bne.n	8002f04 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ede:	4b82      	ldr	r3, [pc, #520]	; (80030e8 <HAL_RCC_OscConfig+0x240>)
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ee6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002eea:	d10b      	bne.n	8002f04 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eec:	4b7e      	ldr	r3, [pc, #504]	; (80030e8 <HAL_RCC_OscConfig+0x240>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d05b      	beq.n	8002fb0 <HAL_RCC_OscConfig+0x108>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d157      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e242      	b.n	800338a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f0c:	d106      	bne.n	8002f1c <HAL_RCC_OscConfig+0x74>
 8002f0e:	4b76      	ldr	r3, [pc, #472]	; (80030e8 <HAL_RCC_OscConfig+0x240>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a75      	ldr	r2, [pc, #468]	; (80030e8 <HAL_RCC_OscConfig+0x240>)
 8002f14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f18:	6013      	str	r3, [r2, #0]
 8002f1a:	e01d      	b.n	8002f58 <HAL_RCC_OscConfig+0xb0>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f24:	d10c      	bne.n	8002f40 <HAL_RCC_OscConfig+0x98>
 8002f26:	4b70      	ldr	r3, [pc, #448]	; (80030e8 <HAL_RCC_OscConfig+0x240>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a6f      	ldr	r2, [pc, #444]	; (80030e8 <HAL_RCC_OscConfig+0x240>)
 8002f2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f30:	6013      	str	r3, [r2, #0]
 8002f32:	4b6d      	ldr	r3, [pc, #436]	; (80030e8 <HAL_RCC_OscConfig+0x240>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a6c      	ldr	r2, [pc, #432]	; (80030e8 <HAL_RCC_OscConfig+0x240>)
 8002f38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f3c:	6013      	str	r3, [r2, #0]
 8002f3e:	e00b      	b.n	8002f58 <HAL_RCC_OscConfig+0xb0>
 8002f40:	4b69      	ldr	r3, [pc, #420]	; (80030e8 <HAL_RCC_OscConfig+0x240>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a68      	ldr	r2, [pc, #416]	; (80030e8 <HAL_RCC_OscConfig+0x240>)
 8002f46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f4a:	6013      	str	r3, [r2, #0]
 8002f4c:	4b66      	ldr	r3, [pc, #408]	; (80030e8 <HAL_RCC_OscConfig+0x240>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a65      	ldr	r2, [pc, #404]	; (80030e8 <HAL_RCC_OscConfig+0x240>)
 8002f52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d013      	beq.n	8002f88 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f60:	f7ff fcf0 	bl	8002944 <HAL_GetTick>
 8002f64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f66:	e008      	b.n	8002f7a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f68:	f7ff fcec 	bl	8002944 <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	2b64      	cmp	r3, #100	; 0x64
 8002f74:	d901      	bls.n	8002f7a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e207      	b.n	800338a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f7a:	4b5b      	ldr	r3, [pc, #364]	; (80030e8 <HAL_RCC_OscConfig+0x240>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d0f0      	beq.n	8002f68 <HAL_RCC_OscConfig+0xc0>
 8002f86:	e014      	b.n	8002fb2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f88:	f7ff fcdc 	bl	8002944 <HAL_GetTick>
 8002f8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f8e:	e008      	b.n	8002fa2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f90:	f7ff fcd8 	bl	8002944 <HAL_GetTick>
 8002f94:	4602      	mov	r2, r0
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	2b64      	cmp	r3, #100	; 0x64
 8002f9c:	d901      	bls.n	8002fa2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e1f3      	b.n	800338a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fa2:	4b51      	ldr	r3, [pc, #324]	; (80030e8 <HAL_RCC_OscConfig+0x240>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d1f0      	bne.n	8002f90 <HAL_RCC_OscConfig+0xe8>
 8002fae:	e000      	b.n	8002fb2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0302 	and.w	r3, r3, #2
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d063      	beq.n	8003086 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002fbe:	4b4a      	ldr	r3, [pc, #296]	; (80030e8 <HAL_RCC_OscConfig+0x240>)
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	f003 030c 	and.w	r3, r3, #12
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d00b      	beq.n	8002fe2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fca:	4b47      	ldr	r3, [pc, #284]	; (80030e8 <HAL_RCC_OscConfig+0x240>)
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002fd2:	2b08      	cmp	r3, #8
 8002fd4:	d11c      	bne.n	8003010 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fd6:	4b44      	ldr	r3, [pc, #272]	; (80030e8 <HAL_RCC_OscConfig+0x240>)
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d116      	bne.n	8003010 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fe2:	4b41      	ldr	r3, [pc, #260]	; (80030e8 <HAL_RCC_OscConfig+0x240>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0302 	and.w	r3, r3, #2
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d005      	beq.n	8002ffa <HAL_RCC_OscConfig+0x152>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	68db      	ldr	r3, [r3, #12]
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d001      	beq.n	8002ffa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e1c7      	b.n	800338a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ffa:	4b3b      	ldr	r3, [pc, #236]	; (80030e8 <HAL_RCC_OscConfig+0x240>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	691b      	ldr	r3, [r3, #16]
 8003006:	00db      	lsls	r3, r3, #3
 8003008:	4937      	ldr	r1, [pc, #220]	; (80030e8 <HAL_RCC_OscConfig+0x240>)
 800300a:	4313      	orrs	r3, r2
 800300c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800300e:	e03a      	b.n	8003086 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d020      	beq.n	800305a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003018:	4b34      	ldr	r3, [pc, #208]	; (80030ec <HAL_RCC_OscConfig+0x244>)
 800301a:	2201      	movs	r2, #1
 800301c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800301e:	f7ff fc91 	bl	8002944 <HAL_GetTick>
 8003022:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003024:	e008      	b.n	8003038 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003026:	f7ff fc8d 	bl	8002944 <HAL_GetTick>
 800302a:	4602      	mov	r2, r0
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	1ad3      	subs	r3, r2, r3
 8003030:	2b02      	cmp	r3, #2
 8003032:	d901      	bls.n	8003038 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003034:	2303      	movs	r3, #3
 8003036:	e1a8      	b.n	800338a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003038:	4b2b      	ldr	r3, [pc, #172]	; (80030e8 <HAL_RCC_OscConfig+0x240>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 0302 	and.w	r3, r3, #2
 8003040:	2b00      	cmp	r3, #0
 8003042:	d0f0      	beq.n	8003026 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003044:	4b28      	ldr	r3, [pc, #160]	; (80030e8 <HAL_RCC_OscConfig+0x240>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	691b      	ldr	r3, [r3, #16]
 8003050:	00db      	lsls	r3, r3, #3
 8003052:	4925      	ldr	r1, [pc, #148]	; (80030e8 <HAL_RCC_OscConfig+0x240>)
 8003054:	4313      	orrs	r3, r2
 8003056:	600b      	str	r3, [r1, #0]
 8003058:	e015      	b.n	8003086 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800305a:	4b24      	ldr	r3, [pc, #144]	; (80030ec <HAL_RCC_OscConfig+0x244>)
 800305c:	2200      	movs	r2, #0
 800305e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003060:	f7ff fc70 	bl	8002944 <HAL_GetTick>
 8003064:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003066:	e008      	b.n	800307a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003068:	f7ff fc6c 	bl	8002944 <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	2b02      	cmp	r3, #2
 8003074:	d901      	bls.n	800307a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003076:	2303      	movs	r3, #3
 8003078:	e187      	b.n	800338a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800307a:	4b1b      	ldr	r3, [pc, #108]	; (80030e8 <HAL_RCC_OscConfig+0x240>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0302 	and.w	r3, r3, #2
 8003082:	2b00      	cmp	r3, #0
 8003084:	d1f0      	bne.n	8003068 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 0308 	and.w	r3, r3, #8
 800308e:	2b00      	cmp	r3, #0
 8003090:	d036      	beq.n	8003100 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	695b      	ldr	r3, [r3, #20]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d016      	beq.n	80030c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800309a:	4b15      	ldr	r3, [pc, #84]	; (80030f0 <HAL_RCC_OscConfig+0x248>)
 800309c:	2201      	movs	r2, #1
 800309e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030a0:	f7ff fc50 	bl	8002944 <HAL_GetTick>
 80030a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030a6:	e008      	b.n	80030ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030a8:	f7ff fc4c 	bl	8002944 <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d901      	bls.n	80030ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	e167      	b.n	800338a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030ba:	4b0b      	ldr	r3, [pc, #44]	; (80030e8 <HAL_RCC_OscConfig+0x240>)
 80030bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030be:	f003 0302 	and.w	r3, r3, #2
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d0f0      	beq.n	80030a8 <HAL_RCC_OscConfig+0x200>
 80030c6:	e01b      	b.n	8003100 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030c8:	4b09      	ldr	r3, [pc, #36]	; (80030f0 <HAL_RCC_OscConfig+0x248>)
 80030ca:	2200      	movs	r2, #0
 80030cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030ce:	f7ff fc39 	bl	8002944 <HAL_GetTick>
 80030d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030d4:	e00e      	b.n	80030f4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030d6:	f7ff fc35 	bl	8002944 <HAL_GetTick>
 80030da:	4602      	mov	r2, r0
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	1ad3      	subs	r3, r2, r3
 80030e0:	2b02      	cmp	r3, #2
 80030e2:	d907      	bls.n	80030f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80030e4:	2303      	movs	r3, #3
 80030e6:	e150      	b.n	800338a <HAL_RCC_OscConfig+0x4e2>
 80030e8:	40023800 	.word	0x40023800
 80030ec:	42470000 	.word	0x42470000
 80030f0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030f4:	4b88      	ldr	r3, [pc, #544]	; (8003318 <HAL_RCC_OscConfig+0x470>)
 80030f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030f8:	f003 0302 	and.w	r3, r3, #2
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d1ea      	bne.n	80030d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0304 	and.w	r3, r3, #4
 8003108:	2b00      	cmp	r3, #0
 800310a:	f000 8097 	beq.w	800323c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800310e:	2300      	movs	r3, #0
 8003110:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003112:	4b81      	ldr	r3, [pc, #516]	; (8003318 <HAL_RCC_OscConfig+0x470>)
 8003114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003116:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d10f      	bne.n	800313e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800311e:	2300      	movs	r3, #0
 8003120:	60bb      	str	r3, [r7, #8]
 8003122:	4b7d      	ldr	r3, [pc, #500]	; (8003318 <HAL_RCC_OscConfig+0x470>)
 8003124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003126:	4a7c      	ldr	r2, [pc, #496]	; (8003318 <HAL_RCC_OscConfig+0x470>)
 8003128:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800312c:	6413      	str	r3, [r2, #64]	; 0x40
 800312e:	4b7a      	ldr	r3, [pc, #488]	; (8003318 <HAL_RCC_OscConfig+0x470>)
 8003130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003132:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003136:	60bb      	str	r3, [r7, #8]
 8003138:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800313a:	2301      	movs	r3, #1
 800313c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800313e:	4b77      	ldr	r3, [pc, #476]	; (800331c <HAL_RCC_OscConfig+0x474>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003146:	2b00      	cmp	r3, #0
 8003148:	d118      	bne.n	800317c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800314a:	4b74      	ldr	r3, [pc, #464]	; (800331c <HAL_RCC_OscConfig+0x474>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a73      	ldr	r2, [pc, #460]	; (800331c <HAL_RCC_OscConfig+0x474>)
 8003150:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003154:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003156:	f7ff fbf5 	bl	8002944 <HAL_GetTick>
 800315a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800315c:	e008      	b.n	8003170 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800315e:	f7ff fbf1 	bl	8002944 <HAL_GetTick>
 8003162:	4602      	mov	r2, r0
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	2b02      	cmp	r3, #2
 800316a:	d901      	bls.n	8003170 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800316c:	2303      	movs	r3, #3
 800316e:	e10c      	b.n	800338a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003170:	4b6a      	ldr	r3, [pc, #424]	; (800331c <HAL_RCC_OscConfig+0x474>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003178:	2b00      	cmp	r3, #0
 800317a:	d0f0      	beq.n	800315e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	2b01      	cmp	r3, #1
 8003182:	d106      	bne.n	8003192 <HAL_RCC_OscConfig+0x2ea>
 8003184:	4b64      	ldr	r3, [pc, #400]	; (8003318 <HAL_RCC_OscConfig+0x470>)
 8003186:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003188:	4a63      	ldr	r2, [pc, #396]	; (8003318 <HAL_RCC_OscConfig+0x470>)
 800318a:	f043 0301 	orr.w	r3, r3, #1
 800318e:	6713      	str	r3, [r2, #112]	; 0x70
 8003190:	e01c      	b.n	80031cc <HAL_RCC_OscConfig+0x324>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	2b05      	cmp	r3, #5
 8003198:	d10c      	bne.n	80031b4 <HAL_RCC_OscConfig+0x30c>
 800319a:	4b5f      	ldr	r3, [pc, #380]	; (8003318 <HAL_RCC_OscConfig+0x470>)
 800319c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800319e:	4a5e      	ldr	r2, [pc, #376]	; (8003318 <HAL_RCC_OscConfig+0x470>)
 80031a0:	f043 0304 	orr.w	r3, r3, #4
 80031a4:	6713      	str	r3, [r2, #112]	; 0x70
 80031a6:	4b5c      	ldr	r3, [pc, #368]	; (8003318 <HAL_RCC_OscConfig+0x470>)
 80031a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031aa:	4a5b      	ldr	r2, [pc, #364]	; (8003318 <HAL_RCC_OscConfig+0x470>)
 80031ac:	f043 0301 	orr.w	r3, r3, #1
 80031b0:	6713      	str	r3, [r2, #112]	; 0x70
 80031b2:	e00b      	b.n	80031cc <HAL_RCC_OscConfig+0x324>
 80031b4:	4b58      	ldr	r3, [pc, #352]	; (8003318 <HAL_RCC_OscConfig+0x470>)
 80031b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031b8:	4a57      	ldr	r2, [pc, #348]	; (8003318 <HAL_RCC_OscConfig+0x470>)
 80031ba:	f023 0301 	bic.w	r3, r3, #1
 80031be:	6713      	str	r3, [r2, #112]	; 0x70
 80031c0:	4b55      	ldr	r3, [pc, #340]	; (8003318 <HAL_RCC_OscConfig+0x470>)
 80031c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031c4:	4a54      	ldr	r2, [pc, #336]	; (8003318 <HAL_RCC_OscConfig+0x470>)
 80031c6:	f023 0304 	bic.w	r3, r3, #4
 80031ca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d015      	beq.n	8003200 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031d4:	f7ff fbb6 	bl	8002944 <HAL_GetTick>
 80031d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031da:	e00a      	b.n	80031f2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031dc:	f7ff fbb2 	bl	8002944 <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d901      	bls.n	80031f2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80031ee:	2303      	movs	r3, #3
 80031f0:	e0cb      	b.n	800338a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031f2:	4b49      	ldr	r3, [pc, #292]	; (8003318 <HAL_RCC_OscConfig+0x470>)
 80031f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031f6:	f003 0302 	and.w	r3, r3, #2
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d0ee      	beq.n	80031dc <HAL_RCC_OscConfig+0x334>
 80031fe:	e014      	b.n	800322a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003200:	f7ff fba0 	bl	8002944 <HAL_GetTick>
 8003204:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003206:	e00a      	b.n	800321e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003208:	f7ff fb9c 	bl	8002944 <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	f241 3288 	movw	r2, #5000	; 0x1388
 8003216:	4293      	cmp	r3, r2
 8003218:	d901      	bls.n	800321e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	e0b5      	b.n	800338a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800321e:	4b3e      	ldr	r3, [pc, #248]	; (8003318 <HAL_RCC_OscConfig+0x470>)
 8003220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003222:	f003 0302 	and.w	r3, r3, #2
 8003226:	2b00      	cmp	r3, #0
 8003228:	d1ee      	bne.n	8003208 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800322a:	7dfb      	ldrb	r3, [r7, #23]
 800322c:	2b01      	cmp	r3, #1
 800322e:	d105      	bne.n	800323c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003230:	4b39      	ldr	r3, [pc, #228]	; (8003318 <HAL_RCC_OscConfig+0x470>)
 8003232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003234:	4a38      	ldr	r2, [pc, #224]	; (8003318 <HAL_RCC_OscConfig+0x470>)
 8003236:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800323a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	699b      	ldr	r3, [r3, #24]
 8003240:	2b00      	cmp	r3, #0
 8003242:	f000 80a1 	beq.w	8003388 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003246:	4b34      	ldr	r3, [pc, #208]	; (8003318 <HAL_RCC_OscConfig+0x470>)
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	f003 030c 	and.w	r3, r3, #12
 800324e:	2b08      	cmp	r3, #8
 8003250:	d05c      	beq.n	800330c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	699b      	ldr	r3, [r3, #24]
 8003256:	2b02      	cmp	r3, #2
 8003258:	d141      	bne.n	80032de <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800325a:	4b31      	ldr	r3, [pc, #196]	; (8003320 <HAL_RCC_OscConfig+0x478>)
 800325c:	2200      	movs	r2, #0
 800325e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003260:	f7ff fb70 	bl	8002944 <HAL_GetTick>
 8003264:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003266:	e008      	b.n	800327a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003268:	f7ff fb6c 	bl	8002944 <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	2b02      	cmp	r3, #2
 8003274:	d901      	bls.n	800327a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e087      	b.n	800338a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800327a:	4b27      	ldr	r3, [pc, #156]	; (8003318 <HAL_RCC_OscConfig+0x470>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d1f0      	bne.n	8003268 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	69da      	ldr	r2, [r3, #28]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6a1b      	ldr	r3, [r3, #32]
 800328e:	431a      	orrs	r2, r3
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003294:	019b      	lsls	r3, r3, #6
 8003296:	431a      	orrs	r2, r3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800329c:	085b      	lsrs	r3, r3, #1
 800329e:	3b01      	subs	r3, #1
 80032a0:	041b      	lsls	r3, r3, #16
 80032a2:	431a      	orrs	r2, r3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a8:	061b      	lsls	r3, r3, #24
 80032aa:	491b      	ldr	r1, [pc, #108]	; (8003318 <HAL_RCC_OscConfig+0x470>)
 80032ac:	4313      	orrs	r3, r2
 80032ae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032b0:	4b1b      	ldr	r3, [pc, #108]	; (8003320 <HAL_RCC_OscConfig+0x478>)
 80032b2:	2201      	movs	r2, #1
 80032b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032b6:	f7ff fb45 	bl	8002944 <HAL_GetTick>
 80032ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032bc:	e008      	b.n	80032d0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032be:	f7ff fb41 	bl	8002944 <HAL_GetTick>
 80032c2:	4602      	mov	r2, r0
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	1ad3      	subs	r3, r2, r3
 80032c8:	2b02      	cmp	r3, #2
 80032ca:	d901      	bls.n	80032d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80032cc:	2303      	movs	r3, #3
 80032ce:	e05c      	b.n	800338a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032d0:	4b11      	ldr	r3, [pc, #68]	; (8003318 <HAL_RCC_OscConfig+0x470>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d0f0      	beq.n	80032be <HAL_RCC_OscConfig+0x416>
 80032dc:	e054      	b.n	8003388 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032de:	4b10      	ldr	r3, [pc, #64]	; (8003320 <HAL_RCC_OscConfig+0x478>)
 80032e0:	2200      	movs	r2, #0
 80032e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032e4:	f7ff fb2e 	bl	8002944 <HAL_GetTick>
 80032e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032ea:	e008      	b.n	80032fe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032ec:	f7ff fb2a 	bl	8002944 <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	2b02      	cmp	r3, #2
 80032f8:	d901      	bls.n	80032fe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e045      	b.n	800338a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032fe:	4b06      	ldr	r3, [pc, #24]	; (8003318 <HAL_RCC_OscConfig+0x470>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d1f0      	bne.n	80032ec <HAL_RCC_OscConfig+0x444>
 800330a:	e03d      	b.n	8003388 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	699b      	ldr	r3, [r3, #24]
 8003310:	2b01      	cmp	r3, #1
 8003312:	d107      	bne.n	8003324 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e038      	b.n	800338a <HAL_RCC_OscConfig+0x4e2>
 8003318:	40023800 	.word	0x40023800
 800331c:	40007000 	.word	0x40007000
 8003320:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003324:	4b1b      	ldr	r3, [pc, #108]	; (8003394 <HAL_RCC_OscConfig+0x4ec>)
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	699b      	ldr	r3, [r3, #24]
 800332e:	2b01      	cmp	r3, #1
 8003330:	d028      	beq.n	8003384 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800333c:	429a      	cmp	r2, r3
 800333e:	d121      	bne.n	8003384 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800334a:	429a      	cmp	r2, r3
 800334c:	d11a      	bne.n	8003384 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800334e:	68fa      	ldr	r2, [r7, #12]
 8003350:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003354:	4013      	ands	r3, r2
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800335a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800335c:	4293      	cmp	r3, r2
 800335e:	d111      	bne.n	8003384 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800336a:	085b      	lsrs	r3, r3, #1
 800336c:	3b01      	subs	r3, #1
 800336e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003370:	429a      	cmp	r2, r3
 8003372:	d107      	bne.n	8003384 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800337e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003380:	429a      	cmp	r2, r3
 8003382:	d001      	beq.n	8003388 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e000      	b.n	800338a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003388:	2300      	movs	r3, #0
}
 800338a:	4618      	mov	r0, r3
 800338c:	3718      	adds	r7, #24
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	40023800 	.word	0x40023800

08003398 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b084      	sub	sp, #16
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d101      	bne.n	80033ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	e0cc      	b.n	8003546 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033ac:	4b68      	ldr	r3, [pc, #416]	; (8003550 <HAL_RCC_ClockConfig+0x1b8>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 0307 	and.w	r3, r3, #7
 80033b4:	683a      	ldr	r2, [r7, #0]
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d90c      	bls.n	80033d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033ba:	4b65      	ldr	r3, [pc, #404]	; (8003550 <HAL_RCC_ClockConfig+0x1b8>)
 80033bc:	683a      	ldr	r2, [r7, #0]
 80033be:	b2d2      	uxtb	r2, r2
 80033c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033c2:	4b63      	ldr	r3, [pc, #396]	; (8003550 <HAL_RCC_ClockConfig+0x1b8>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0307 	and.w	r3, r3, #7
 80033ca:	683a      	ldr	r2, [r7, #0]
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d001      	beq.n	80033d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e0b8      	b.n	8003546 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 0302 	and.w	r3, r3, #2
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d020      	beq.n	8003422 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 0304 	and.w	r3, r3, #4
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d005      	beq.n	80033f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033ec:	4b59      	ldr	r3, [pc, #356]	; (8003554 <HAL_RCC_ClockConfig+0x1bc>)
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	4a58      	ldr	r2, [pc, #352]	; (8003554 <HAL_RCC_ClockConfig+0x1bc>)
 80033f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80033f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0308 	and.w	r3, r3, #8
 8003400:	2b00      	cmp	r3, #0
 8003402:	d005      	beq.n	8003410 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003404:	4b53      	ldr	r3, [pc, #332]	; (8003554 <HAL_RCC_ClockConfig+0x1bc>)
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	4a52      	ldr	r2, [pc, #328]	; (8003554 <HAL_RCC_ClockConfig+0x1bc>)
 800340a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800340e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003410:	4b50      	ldr	r3, [pc, #320]	; (8003554 <HAL_RCC_ClockConfig+0x1bc>)
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	494d      	ldr	r1, [pc, #308]	; (8003554 <HAL_RCC_ClockConfig+0x1bc>)
 800341e:	4313      	orrs	r3, r2
 8003420:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 0301 	and.w	r3, r3, #1
 800342a:	2b00      	cmp	r3, #0
 800342c:	d044      	beq.n	80034b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	2b01      	cmp	r3, #1
 8003434:	d107      	bne.n	8003446 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003436:	4b47      	ldr	r3, [pc, #284]	; (8003554 <HAL_RCC_ClockConfig+0x1bc>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d119      	bne.n	8003476 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e07f      	b.n	8003546 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	2b02      	cmp	r3, #2
 800344c:	d003      	beq.n	8003456 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003452:	2b03      	cmp	r3, #3
 8003454:	d107      	bne.n	8003466 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003456:	4b3f      	ldr	r3, [pc, #252]	; (8003554 <HAL_RCC_ClockConfig+0x1bc>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d109      	bne.n	8003476 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e06f      	b.n	8003546 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003466:	4b3b      	ldr	r3, [pc, #236]	; (8003554 <HAL_RCC_ClockConfig+0x1bc>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 0302 	and.w	r3, r3, #2
 800346e:	2b00      	cmp	r3, #0
 8003470:	d101      	bne.n	8003476 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e067      	b.n	8003546 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003476:	4b37      	ldr	r3, [pc, #220]	; (8003554 <HAL_RCC_ClockConfig+0x1bc>)
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	f023 0203 	bic.w	r2, r3, #3
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	4934      	ldr	r1, [pc, #208]	; (8003554 <HAL_RCC_ClockConfig+0x1bc>)
 8003484:	4313      	orrs	r3, r2
 8003486:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003488:	f7ff fa5c 	bl	8002944 <HAL_GetTick>
 800348c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800348e:	e00a      	b.n	80034a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003490:	f7ff fa58 	bl	8002944 <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	f241 3288 	movw	r2, #5000	; 0x1388
 800349e:	4293      	cmp	r3, r2
 80034a0:	d901      	bls.n	80034a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034a2:	2303      	movs	r3, #3
 80034a4:	e04f      	b.n	8003546 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034a6:	4b2b      	ldr	r3, [pc, #172]	; (8003554 <HAL_RCC_ClockConfig+0x1bc>)
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	f003 020c 	and.w	r2, r3, #12
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d1eb      	bne.n	8003490 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034b8:	4b25      	ldr	r3, [pc, #148]	; (8003550 <HAL_RCC_ClockConfig+0x1b8>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0307 	and.w	r3, r3, #7
 80034c0:	683a      	ldr	r2, [r7, #0]
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d20c      	bcs.n	80034e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034c6:	4b22      	ldr	r3, [pc, #136]	; (8003550 <HAL_RCC_ClockConfig+0x1b8>)
 80034c8:	683a      	ldr	r2, [r7, #0]
 80034ca:	b2d2      	uxtb	r2, r2
 80034cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ce:	4b20      	ldr	r3, [pc, #128]	; (8003550 <HAL_RCC_ClockConfig+0x1b8>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0307 	and.w	r3, r3, #7
 80034d6:	683a      	ldr	r2, [r7, #0]
 80034d8:	429a      	cmp	r2, r3
 80034da:	d001      	beq.n	80034e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	e032      	b.n	8003546 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 0304 	and.w	r3, r3, #4
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d008      	beq.n	80034fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034ec:	4b19      	ldr	r3, [pc, #100]	; (8003554 <HAL_RCC_ClockConfig+0x1bc>)
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	4916      	ldr	r1, [pc, #88]	; (8003554 <HAL_RCC_ClockConfig+0x1bc>)
 80034fa:	4313      	orrs	r3, r2
 80034fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0308 	and.w	r3, r3, #8
 8003506:	2b00      	cmp	r3, #0
 8003508:	d009      	beq.n	800351e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800350a:	4b12      	ldr	r3, [pc, #72]	; (8003554 <HAL_RCC_ClockConfig+0x1bc>)
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	691b      	ldr	r3, [r3, #16]
 8003516:	00db      	lsls	r3, r3, #3
 8003518:	490e      	ldr	r1, [pc, #56]	; (8003554 <HAL_RCC_ClockConfig+0x1bc>)
 800351a:	4313      	orrs	r3, r2
 800351c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800351e:	f000 f821 	bl	8003564 <HAL_RCC_GetSysClockFreq>
 8003522:	4602      	mov	r2, r0
 8003524:	4b0b      	ldr	r3, [pc, #44]	; (8003554 <HAL_RCC_ClockConfig+0x1bc>)
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	091b      	lsrs	r3, r3, #4
 800352a:	f003 030f 	and.w	r3, r3, #15
 800352e:	490a      	ldr	r1, [pc, #40]	; (8003558 <HAL_RCC_ClockConfig+0x1c0>)
 8003530:	5ccb      	ldrb	r3, [r1, r3]
 8003532:	fa22 f303 	lsr.w	r3, r2, r3
 8003536:	4a09      	ldr	r2, [pc, #36]	; (800355c <HAL_RCC_ClockConfig+0x1c4>)
 8003538:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800353a:	4b09      	ldr	r3, [pc, #36]	; (8003560 <HAL_RCC_ClockConfig+0x1c8>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4618      	mov	r0, r3
 8003540:	f7ff f9bc 	bl	80028bc <HAL_InitTick>

  return HAL_OK;
 8003544:	2300      	movs	r3, #0
}
 8003546:	4618      	mov	r0, r3
 8003548:	3710      	adds	r7, #16
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	40023c00 	.word	0x40023c00
 8003554:	40023800 	.word	0x40023800
 8003558:	08007eb4 	.word	0x08007eb4
 800355c:	20000000 	.word	0x20000000
 8003560:	20000004 	.word	0x20000004

08003564 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003564:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003568:	b094      	sub	sp, #80	; 0x50
 800356a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800356c:	2300      	movs	r3, #0
 800356e:	647b      	str	r3, [r7, #68]	; 0x44
 8003570:	2300      	movs	r3, #0
 8003572:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003574:	2300      	movs	r3, #0
 8003576:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003578:	2300      	movs	r3, #0
 800357a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800357c:	4b79      	ldr	r3, [pc, #484]	; (8003764 <HAL_RCC_GetSysClockFreq+0x200>)
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	f003 030c 	and.w	r3, r3, #12
 8003584:	2b08      	cmp	r3, #8
 8003586:	d00d      	beq.n	80035a4 <HAL_RCC_GetSysClockFreq+0x40>
 8003588:	2b08      	cmp	r3, #8
 800358a:	f200 80e1 	bhi.w	8003750 <HAL_RCC_GetSysClockFreq+0x1ec>
 800358e:	2b00      	cmp	r3, #0
 8003590:	d002      	beq.n	8003598 <HAL_RCC_GetSysClockFreq+0x34>
 8003592:	2b04      	cmp	r3, #4
 8003594:	d003      	beq.n	800359e <HAL_RCC_GetSysClockFreq+0x3a>
 8003596:	e0db      	b.n	8003750 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003598:	4b73      	ldr	r3, [pc, #460]	; (8003768 <HAL_RCC_GetSysClockFreq+0x204>)
 800359a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800359c:	e0db      	b.n	8003756 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800359e:	4b73      	ldr	r3, [pc, #460]	; (800376c <HAL_RCC_GetSysClockFreq+0x208>)
 80035a0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80035a2:	e0d8      	b.n	8003756 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035a4:	4b6f      	ldr	r3, [pc, #444]	; (8003764 <HAL_RCC_GetSysClockFreq+0x200>)
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035ac:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035ae:	4b6d      	ldr	r3, [pc, #436]	; (8003764 <HAL_RCC_GetSysClockFreq+0x200>)
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d063      	beq.n	8003682 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035ba:	4b6a      	ldr	r3, [pc, #424]	; (8003764 <HAL_RCC_GetSysClockFreq+0x200>)
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	099b      	lsrs	r3, r3, #6
 80035c0:	2200      	movs	r2, #0
 80035c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80035c4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80035c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035cc:	633b      	str	r3, [r7, #48]	; 0x30
 80035ce:	2300      	movs	r3, #0
 80035d0:	637b      	str	r3, [r7, #52]	; 0x34
 80035d2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80035d6:	4622      	mov	r2, r4
 80035d8:	462b      	mov	r3, r5
 80035da:	f04f 0000 	mov.w	r0, #0
 80035de:	f04f 0100 	mov.w	r1, #0
 80035e2:	0159      	lsls	r1, r3, #5
 80035e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035e8:	0150      	lsls	r0, r2, #5
 80035ea:	4602      	mov	r2, r0
 80035ec:	460b      	mov	r3, r1
 80035ee:	4621      	mov	r1, r4
 80035f0:	1a51      	subs	r1, r2, r1
 80035f2:	6139      	str	r1, [r7, #16]
 80035f4:	4629      	mov	r1, r5
 80035f6:	eb63 0301 	sbc.w	r3, r3, r1
 80035fa:	617b      	str	r3, [r7, #20]
 80035fc:	f04f 0200 	mov.w	r2, #0
 8003600:	f04f 0300 	mov.w	r3, #0
 8003604:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003608:	4659      	mov	r1, fp
 800360a:	018b      	lsls	r3, r1, #6
 800360c:	4651      	mov	r1, sl
 800360e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003612:	4651      	mov	r1, sl
 8003614:	018a      	lsls	r2, r1, #6
 8003616:	4651      	mov	r1, sl
 8003618:	ebb2 0801 	subs.w	r8, r2, r1
 800361c:	4659      	mov	r1, fp
 800361e:	eb63 0901 	sbc.w	r9, r3, r1
 8003622:	f04f 0200 	mov.w	r2, #0
 8003626:	f04f 0300 	mov.w	r3, #0
 800362a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800362e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003632:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003636:	4690      	mov	r8, r2
 8003638:	4699      	mov	r9, r3
 800363a:	4623      	mov	r3, r4
 800363c:	eb18 0303 	adds.w	r3, r8, r3
 8003640:	60bb      	str	r3, [r7, #8]
 8003642:	462b      	mov	r3, r5
 8003644:	eb49 0303 	adc.w	r3, r9, r3
 8003648:	60fb      	str	r3, [r7, #12]
 800364a:	f04f 0200 	mov.w	r2, #0
 800364e:	f04f 0300 	mov.w	r3, #0
 8003652:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003656:	4629      	mov	r1, r5
 8003658:	024b      	lsls	r3, r1, #9
 800365a:	4621      	mov	r1, r4
 800365c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003660:	4621      	mov	r1, r4
 8003662:	024a      	lsls	r2, r1, #9
 8003664:	4610      	mov	r0, r2
 8003666:	4619      	mov	r1, r3
 8003668:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800366a:	2200      	movs	r2, #0
 800366c:	62bb      	str	r3, [r7, #40]	; 0x28
 800366e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003670:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003674:	f7fd fa98 	bl	8000ba8 <__aeabi_uldivmod>
 8003678:	4602      	mov	r2, r0
 800367a:	460b      	mov	r3, r1
 800367c:	4613      	mov	r3, r2
 800367e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003680:	e058      	b.n	8003734 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003682:	4b38      	ldr	r3, [pc, #224]	; (8003764 <HAL_RCC_GetSysClockFreq+0x200>)
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	099b      	lsrs	r3, r3, #6
 8003688:	2200      	movs	r2, #0
 800368a:	4618      	mov	r0, r3
 800368c:	4611      	mov	r1, r2
 800368e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003692:	623b      	str	r3, [r7, #32]
 8003694:	2300      	movs	r3, #0
 8003696:	627b      	str	r3, [r7, #36]	; 0x24
 8003698:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800369c:	4642      	mov	r2, r8
 800369e:	464b      	mov	r3, r9
 80036a0:	f04f 0000 	mov.w	r0, #0
 80036a4:	f04f 0100 	mov.w	r1, #0
 80036a8:	0159      	lsls	r1, r3, #5
 80036aa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036ae:	0150      	lsls	r0, r2, #5
 80036b0:	4602      	mov	r2, r0
 80036b2:	460b      	mov	r3, r1
 80036b4:	4641      	mov	r1, r8
 80036b6:	ebb2 0a01 	subs.w	sl, r2, r1
 80036ba:	4649      	mov	r1, r9
 80036bc:	eb63 0b01 	sbc.w	fp, r3, r1
 80036c0:	f04f 0200 	mov.w	r2, #0
 80036c4:	f04f 0300 	mov.w	r3, #0
 80036c8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80036cc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80036d0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80036d4:	ebb2 040a 	subs.w	r4, r2, sl
 80036d8:	eb63 050b 	sbc.w	r5, r3, fp
 80036dc:	f04f 0200 	mov.w	r2, #0
 80036e0:	f04f 0300 	mov.w	r3, #0
 80036e4:	00eb      	lsls	r3, r5, #3
 80036e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036ea:	00e2      	lsls	r2, r4, #3
 80036ec:	4614      	mov	r4, r2
 80036ee:	461d      	mov	r5, r3
 80036f0:	4643      	mov	r3, r8
 80036f2:	18e3      	adds	r3, r4, r3
 80036f4:	603b      	str	r3, [r7, #0]
 80036f6:	464b      	mov	r3, r9
 80036f8:	eb45 0303 	adc.w	r3, r5, r3
 80036fc:	607b      	str	r3, [r7, #4]
 80036fe:	f04f 0200 	mov.w	r2, #0
 8003702:	f04f 0300 	mov.w	r3, #0
 8003706:	e9d7 4500 	ldrd	r4, r5, [r7]
 800370a:	4629      	mov	r1, r5
 800370c:	028b      	lsls	r3, r1, #10
 800370e:	4621      	mov	r1, r4
 8003710:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003714:	4621      	mov	r1, r4
 8003716:	028a      	lsls	r2, r1, #10
 8003718:	4610      	mov	r0, r2
 800371a:	4619      	mov	r1, r3
 800371c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800371e:	2200      	movs	r2, #0
 8003720:	61bb      	str	r3, [r7, #24]
 8003722:	61fa      	str	r2, [r7, #28]
 8003724:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003728:	f7fd fa3e 	bl	8000ba8 <__aeabi_uldivmod>
 800372c:	4602      	mov	r2, r0
 800372e:	460b      	mov	r3, r1
 8003730:	4613      	mov	r3, r2
 8003732:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003734:	4b0b      	ldr	r3, [pc, #44]	; (8003764 <HAL_RCC_GetSysClockFreq+0x200>)
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	0c1b      	lsrs	r3, r3, #16
 800373a:	f003 0303 	and.w	r3, r3, #3
 800373e:	3301      	adds	r3, #1
 8003740:	005b      	lsls	r3, r3, #1
 8003742:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003744:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003746:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003748:	fbb2 f3f3 	udiv	r3, r2, r3
 800374c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800374e:	e002      	b.n	8003756 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003750:	4b05      	ldr	r3, [pc, #20]	; (8003768 <HAL_RCC_GetSysClockFreq+0x204>)
 8003752:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003754:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003756:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003758:	4618      	mov	r0, r3
 800375a:	3750      	adds	r7, #80	; 0x50
 800375c:	46bd      	mov	sp, r7
 800375e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003762:	bf00      	nop
 8003764:	40023800 	.word	0x40023800
 8003768:	00f42400 	.word	0x00f42400
 800376c:	007a1200 	.word	0x007a1200

08003770 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b082      	sub	sp, #8
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d101      	bne.n	8003782 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e041      	b.n	8003806 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003788:	b2db      	uxtb	r3, r3
 800378a:	2b00      	cmp	r3, #0
 800378c:	d106      	bne.n	800379c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f7fe fdb6 	bl	8002308 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2202      	movs	r2, #2
 80037a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	3304      	adds	r3, #4
 80037ac:	4619      	mov	r1, r3
 80037ae:	4610      	mov	r0, r2
 80037b0:	f000 fa10 	bl	8003bd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2201      	movs	r2, #1
 80037b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2201      	movs	r2, #1
 80037c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2201      	movs	r2, #1
 80037c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2201      	movs	r2, #1
 80037d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2201      	movs	r2, #1
 80037d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2201      	movs	r2, #1
 80037e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2201      	movs	r2, #1
 80037e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2201      	movs	r2, #1
 80037f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2201      	movs	r2, #1
 80037f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2201      	movs	r2, #1
 8003800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003804:	2300      	movs	r3, #0
}
 8003806:	4618      	mov	r0, r3
 8003808:	3708      	adds	r7, #8
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}

0800380e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800380e:	b580      	push	{r7, lr}
 8003810:	b082      	sub	sp, #8
 8003812:	af00      	add	r7, sp, #0
 8003814:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d101      	bne.n	8003820 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	e041      	b.n	80038a4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003826:	b2db      	uxtb	r3, r3
 8003828:	2b00      	cmp	r3, #0
 800382a:	d106      	bne.n	800383a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2200      	movs	r2, #0
 8003830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f000 f839 	bl	80038ac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2202      	movs	r2, #2
 800383e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	3304      	adds	r3, #4
 800384a:	4619      	mov	r1, r3
 800384c:	4610      	mov	r0, r2
 800384e:	f000 f9c1 	bl	8003bd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2201      	movs	r2, #1
 8003856:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2201      	movs	r2, #1
 800385e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2201      	movs	r2, #1
 8003866:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2201      	movs	r2, #1
 800386e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2201      	movs	r2, #1
 8003876:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2201      	movs	r2, #1
 800387e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2201      	movs	r2, #1
 8003886:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2201      	movs	r2, #1
 800388e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2201      	movs	r2, #1
 8003896:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2201      	movs	r2, #1
 800389e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038a2:	2300      	movs	r3, #0
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3708      	adds	r7, #8
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}

080038ac <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b083      	sub	sp, #12
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80038b4:	bf00      	nop
 80038b6:	370c      	adds	r7, #12
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr

080038c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b086      	sub	sp, #24
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	60f8      	str	r0, [r7, #12]
 80038c8:	60b9      	str	r1, [r7, #8]
 80038ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038cc:	2300      	movs	r3, #0
 80038ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d101      	bne.n	80038de <HAL_TIM_PWM_ConfigChannel+0x1e>
 80038da:	2302      	movs	r3, #2
 80038dc:	e0ae      	b.n	8003a3c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2201      	movs	r2, #1
 80038e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2b0c      	cmp	r3, #12
 80038ea:	f200 809f 	bhi.w	8003a2c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80038ee:	a201      	add	r2, pc, #4	; (adr r2, 80038f4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80038f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038f4:	08003929 	.word	0x08003929
 80038f8:	08003a2d 	.word	0x08003a2d
 80038fc:	08003a2d 	.word	0x08003a2d
 8003900:	08003a2d 	.word	0x08003a2d
 8003904:	08003969 	.word	0x08003969
 8003908:	08003a2d 	.word	0x08003a2d
 800390c:	08003a2d 	.word	0x08003a2d
 8003910:	08003a2d 	.word	0x08003a2d
 8003914:	080039ab 	.word	0x080039ab
 8003918:	08003a2d 	.word	0x08003a2d
 800391c:	08003a2d 	.word	0x08003a2d
 8003920:	08003a2d 	.word	0x08003a2d
 8003924:	080039eb 	.word	0x080039eb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	68b9      	ldr	r1, [r7, #8]
 800392e:	4618      	mov	r0, r3
 8003930:	f000 f9f0 	bl	8003d14 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	699a      	ldr	r2, [r3, #24]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f042 0208 	orr.w	r2, r2, #8
 8003942:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	699a      	ldr	r2, [r3, #24]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f022 0204 	bic.w	r2, r2, #4
 8003952:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	6999      	ldr	r1, [r3, #24]
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	691a      	ldr	r2, [r3, #16]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	430a      	orrs	r2, r1
 8003964:	619a      	str	r2, [r3, #24]
      break;
 8003966:	e064      	b.n	8003a32 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	68b9      	ldr	r1, [r7, #8]
 800396e:	4618      	mov	r0, r3
 8003970:	f000 fa40 	bl	8003df4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	699a      	ldr	r2, [r3, #24]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003982:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	699a      	ldr	r2, [r3, #24]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003992:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	6999      	ldr	r1, [r3, #24]
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	691b      	ldr	r3, [r3, #16]
 800399e:	021a      	lsls	r2, r3, #8
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	430a      	orrs	r2, r1
 80039a6:	619a      	str	r2, [r3, #24]
      break;
 80039a8:	e043      	b.n	8003a32 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	68b9      	ldr	r1, [r7, #8]
 80039b0:	4618      	mov	r0, r3
 80039b2:	f000 fa95 	bl	8003ee0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	69da      	ldr	r2, [r3, #28]
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f042 0208 	orr.w	r2, r2, #8
 80039c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	69da      	ldr	r2, [r3, #28]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f022 0204 	bic.w	r2, r2, #4
 80039d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	69d9      	ldr	r1, [r3, #28]
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	691a      	ldr	r2, [r3, #16]
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	430a      	orrs	r2, r1
 80039e6:	61da      	str	r2, [r3, #28]
      break;
 80039e8:	e023      	b.n	8003a32 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	68b9      	ldr	r1, [r7, #8]
 80039f0:	4618      	mov	r0, r3
 80039f2:	f000 fae9 	bl	8003fc8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	69da      	ldr	r2, [r3, #28]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	69da      	ldr	r2, [r3, #28]
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	69d9      	ldr	r1, [r3, #28]
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	691b      	ldr	r3, [r3, #16]
 8003a20:	021a      	lsls	r2, r3, #8
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	430a      	orrs	r2, r1
 8003a28:	61da      	str	r2, [r3, #28]
      break;
 8003a2a:	e002      	b.n	8003a32 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	75fb      	strb	r3, [r7, #23]
      break;
 8003a30:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2200      	movs	r2, #0
 8003a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003a3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3718      	adds	r7, #24
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}

08003a44 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b084      	sub	sp, #16
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d101      	bne.n	8003a60 <HAL_TIM_ConfigClockSource+0x1c>
 8003a5c:	2302      	movs	r3, #2
 8003a5e:	e0b4      	b.n	8003bca <HAL_TIM_ConfigClockSource+0x186>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2202      	movs	r2, #2
 8003a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003a7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a86:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	68ba      	ldr	r2, [r7, #8]
 8003a8e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a98:	d03e      	beq.n	8003b18 <HAL_TIM_ConfigClockSource+0xd4>
 8003a9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a9e:	f200 8087 	bhi.w	8003bb0 <HAL_TIM_ConfigClockSource+0x16c>
 8003aa2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003aa6:	f000 8086 	beq.w	8003bb6 <HAL_TIM_ConfigClockSource+0x172>
 8003aaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003aae:	d87f      	bhi.n	8003bb0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ab0:	2b70      	cmp	r3, #112	; 0x70
 8003ab2:	d01a      	beq.n	8003aea <HAL_TIM_ConfigClockSource+0xa6>
 8003ab4:	2b70      	cmp	r3, #112	; 0x70
 8003ab6:	d87b      	bhi.n	8003bb0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ab8:	2b60      	cmp	r3, #96	; 0x60
 8003aba:	d050      	beq.n	8003b5e <HAL_TIM_ConfigClockSource+0x11a>
 8003abc:	2b60      	cmp	r3, #96	; 0x60
 8003abe:	d877      	bhi.n	8003bb0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ac0:	2b50      	cmp	r3, #80	; 0x50
 8003ac2:	d03c      	beq.n	8003b3e <HAL_TIM_ConfigClockSource+0xfa>
 8003ac4:	2b50      	cmp	r3, #80	; 0x50
 8003ac6:	d873      	bhi.n	8003bb0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ac8:	2b40      	cmp	r3, #64	; 0x40
 8003aca:	d058      	beq.n	8003b7e <HAL_TIM_ConfigClockSource+0x13a>
 8003acc:	2b40      	cmp	r3, #64	; 0x40
 8003ace:	d86f      	bhi.n	8003bb0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ad0:	2b30      	cmp	r3, #48	; 0x30
 8003ad2:	d064      	beq.n	8003b9e <HAL_TIM_ConfigClockSource+0x15a>
 8003ad4:	2b30      	cmp	r3, #48	; 0x30
 8003ad6:	d86b      	bhi.n	8003bb0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ad8:	2b20      	cmp	r3, #32
 8003ada:	d060      	beq.n	8003b9e <HAL_TIM_ConfigClockSource+0x15a>
 8003adc:	2b20      	cmp	r3, #32
 8003ade:	d867      	bhi.n	8003bb0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d05c      	beq.n	8003b9e <HAL_TIM_ConfigClockSource+0x15a>
 8003ae4:	2b10      	cmp	r3, #16
 8003ae6:	d05a      	beq.n	8003b9e <HAL_TIM_ConfigClockSource+0x15a>
 8003ae8:	e062      	b.n	8003bb0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6818      	ldr	r0, [r3, #0]
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	6899      	ldr	r1, [r3, #8]
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	685a      	ldr	r2, [r3, #4]
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	68db      	ldr	r3, [r3, #12]
 8003afa:	f000 fb35 	bl	8004168 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003b0c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	68ba      	ldr	r2, [r7, #8]
 8003b14:	609a      	str	r2, [r3, #8]
      break;
 8003b16:	e04f      	b.n	8003bb8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6818      	ldr	r0, [r3, #0]
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	6899      	ldr	r1, [r3, #8]
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	685a      	ldr	r2, [r3, #4]
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	68db      	ldr	r3, [r3, #12]
 8003b28:	f000 fb1e 	bl	8004168 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	689a      	ldr	r2, [r3, #8]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b3a:	609a      	str	r2, [r3, #8]
      break;
 8003b3c:	e03c      	b.n	8003bb8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6818      	ldr	r0, [r3, #0]
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	6859      	ldr	r1, [r3, #4]
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	68db      	ldr	r3, [r3, #12]
 8003b4a:	461a      	mov	r2, r3
 8003b4c:	f000 fa92 	bl	8004074 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	2150      	movs	r1, #80	; 0x50
 8003b56:	4618      	mov	r0, r3
 8003b58:	f000 faeb 	bl	8004132 <TIM_ITRx_SetConfig>
      break;
 8003b5c:	e02c      	b.n	8003bb8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6818      	ldr	r0, [r3, #0]
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	6859      	ldr	r1, [r3, #4]
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	68db      	ldr	r3, [r3, #12]
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	f000 fab1 	bl	80040d2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	2160      	movs	r1, #96	; 0x60
 8003b76:	4618      	mov	r0, r3
 8003b78:	f000 fadb 	bl	8004132 <TIM_ITRx_SetConfig>
      break;
 8003b7c:	e01c      	b.n	8003bb8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6818      	ldr	r0, [r3, #0]
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	6859      	ldr	r1, [r3, #4]
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	68db      	ldr	r3, [r3, #12]
 8003b8a:	461a      	mov	r2, r3
 8003b8c:	f000 fa72 	bl	8004074 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	2140      	movs	r1, #64	; 0x40
 8003b96:	4618      	mov	r0, r3
 8003b98:	f000 facb 	bl	8004132 <TIM_ITRx_SetConfig>
      break;
 8003b9c:	e00c      	b.n	8003bb8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4619      	mov	r1, r3
 8003ba8:	4610      	mov	r0, r2
 8003baa:	f000 fac2 	bl	8004132 <TIM_ITRx_SetConfig>
      break;
 8003bae:	e003      	b.n	8003bb8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	73fb      	strb	r3, [r7, #15]
      break;
 8003bb4:	e000      	b.n	8003bb8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003bb6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003bc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3710      	adds	r7, #16
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
	...

08003bd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b085      	sub	sp, #20
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	4a40      	ldr	r2, [pc, #256]	; (8003ce8 <TIM_Base_SetConfig+0x114>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d013      	beq.n	8003c14 <TIM_Base_SetConfig+0x40>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bf2:	d00f      	beq.n	8003c14 <TIM_Base_SetConfig+0x40>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	4a3d      	ldr	r2, [pc, #244]	; (8003cec <TIM_Base_SetConfig+0x118>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d00b      	beq.n	8003c14 <TIM_Base_SetConfig+0x40>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	4a3c      	ldr	r2, [pc, #240]	; (8003cf0 <TIM_Base_SetConfig+0x11c>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d007      	beq.n	8003c14 <TIM_Base_SetConfig+0x40>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	4a3b      	ldr	r2, [pc, #236]	; (8003cf4 <TIM_Base_SetConfig+0x120>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d003      	beq.n	8003c14 <TIM_Base_SetConfig+0x40>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	4a3a      	ldr	r2, [pc, #232]	; (8003cf8 <TIM_Base_SetConfig+0x124>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d108      	bne.n	8003c26 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	68fa      	ldr	r2, [r7, #12]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	4a2f      	ldr	r2, [pc, #188]	; (8003ce8 <TIM_Base_SetConfig+0x114>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d02b      	beq.n	8003c86 <TIM_Base_SetConfig+0xb2>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c34:	d027      	beq.n	8003c86 <TIM_Base_SetConfig+0xb2>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	4a2c      	ldr	r2, [pc, #176]	; (8003cec <TIM_Base_SetConfig+0x118>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d023      	beq.n	8003c86 <TIM_Base_SetConfig+0xb2>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	4a2b      	ldr	r2, [pc, #172]	; (8003cf0 <TIM_Base_SetConfig+0x11c>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d01f      	beq.n	8003c86 <TIM_Base_SetConfig+0xb2>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	4a2a      	ldr	r2, [pc, #168]	; (8003cf4 <TIM_Base_SetConfig+0x120>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d01b      	beq.n	8003c86 <TIM_Base_SetConfig+0xb2>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	4a29      	ldr	r2, [pc, #164]	; (8003cf8 <TIM_Base_SetConfig+0x124>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d017      	beq.n	8003c86 <TIM_Base_SetConfig+0xb2>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	4a28      	ldr	r2, [pc, #160]	; (8003cfc <TIM_Base_SetConfig+0x128>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d013      	beq.n	8003c86 <TIM_Base_SetConfig+0xb2>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	4a27      	ldr	r2, [pc, #156]	; (8003d00 <TIM_Base_SetConfig+0x12c>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d00f      	beq.n	8003c86 <TIM_Base_SetConfig+0xb2>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4a26      	ldr	r2, [pc, #152]	; (8003d04 <TIM_Base_SetConfig+0x130>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d00b      	beq.n	8003c86 <TIM_Base_SetConfig+0xb2>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	4a25      	ldr	r2, [pc, #148]	; (8003d08 <TIM_Base_SetConfig+0x134>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d007      	beq.n	8003c86 <TIM_Base_SetConfig+0xb2>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4a24      	ldr	r2, [pc, #144]	; (8003d0c <TIM_Base_SetConfig+0x138>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d003      	beq.n	8003c86 <TIM_Base_SetConfig+0xb2>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	4a23      	ldr	r2, [pc, #140]	; (8003d10 <TIM_Base_SetConfig+0x13c>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d108      	bne.n	8003c98 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	68db      	ldr	r3, [r3, #12]
 8003c92:	68fa      	ldr	r2, [r7, #12]
 8003c94:	4313      	orrs	r3, r2
 8003c96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	695b      	ldr	r3, [r3, #20]
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	68fa      	ldr	r2, [r7, #12]
 8003caa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	689a      	ldr	r2, [r3, #8]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	4a0a      	ldr	r2, [pc, #40]	; (8003ce8 <TIM_Base_SetConfig+0x114>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d003      	beq.n	8003ccc <TIM_Base_SetConfig+0xf8>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	4a0c      	ldr	r2, [pc, #48]	; (8003cf8 <TIM_Base_SetConfig+0x124>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d103      	bne.n	8003cd4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	691a      	ldr	r2, [r3, #16]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	615a      	str	r2, [r3, #20]
}
 8003cda:	bf00      	nop
 8003cdc:	3714      	adds	r7, #20
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr
 8003ce6:	bf00      	nop
 8003ce8:	40010000 	.word	0x40010000
 8003cec:	40000400 	.word	0x40000400
 8003cf0:	40000800 	.word	0x40000800
 8003cf4:	40000c00 	.word	0x40000c00
 8003cf8:	40010400 	.word	0x40010400
 8003cfc:	40014000 	.word	0x40014000
 8003d00:	40014400 	.word	0x40014400
 8003d04:	40014800 	.word	0x40014800
 8003d08:	40001800 	.word	0x40001800
 8003d0c:	40001c00 	.word	0x40001c00
 8003d10:	40002000 	.word	0x40002000

08003d14 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b087      	sub	sp, #28
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
 8003d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6a1b      	ldr	r3, [r3, #32]
 8003d22:	f023 0201 	bic.w	r2, r3, #1
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6a1b      	ldr	r3, [r3, #32]
 8003d2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	699b      	ldr	r3, [r3, #24]
 8003d3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	f023 0303 	bic.w	r3, r3, #3
 8003d4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	68fa      	ldr	r2, [r7, #12]
 8003d52:	4313      	orrs	r3, r2
 8003d54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	f023 0302 	bic.w	r3, r3, #2
 8003d5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	697a      	ldr	r2, [r7, #20]
 8003d64:	4313      	orrs	r3, r2
 8003d66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	4a20      	ldr	r2, [pc, #128]	; (8003dec <TIM_OC1_SetConfig+0xd8>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d003      	beq.n	8003d78 <TIM_OC1_SetConfig+0x64>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	4a1f      	ldr	r2, [pc, #124]	; (8003df0 <TIM_OC1_SetConfig+0xdc>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d10c      	bne.n	8003d92 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	f023 0308 	bic.w	r3, r3, #8
 8003d7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	697a      	ldr	r2, [r7, #20]
 8003d86:	4313      	orrs	r3, r2
 8003d88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	f023 0304 	bic.w	r3, r3, #4
 8003d90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4a15      	ldr	r2, [pc, #84]	; (8003dec <TIM_OC1_SetConfig+0xd8>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d003      	beq.n	8003da2 <TIM_OC1_SetConfig+0x8e>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a14      	ldr	r2, [pc, #80]	; (8003df0 <TIM_OC1_SetConfig+0xdc>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d111      	bne.n	8003dc6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003da8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003db0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	695b      	ldr	r3, [r3, #20]
 8003db6:	693a      	ldr	r2, [r7, #16]
 8003db8:	4313      	orrs	r3, r2
 8003dba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	699b      	ldr	r3, [r3, #24]
 8003dc0:	693a      	ldr	r2, [r7, #16]
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	693a      	ldr	r2, [r7, #16]
 8003dca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	68fa      	ldr	r2, [r7, #12]
 8003dd0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	685a      	ldr	r2, [r3, #4]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	697a      	ldr	r2, [r7, #20]
 8003dde:	621a      	str	r2, [r3, #32]
}
 8003de0:	bf00      	nop
 8003de2:	371c      	adds	r7, #28
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr
 8003dec:	40010000 	.word	0x40010000
 8003df0:	40010400 	.word	0x40010400

08003df4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b087      	sub	sp, #28
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6a1b      	ldr	r3, [r3, #32]
 8003e02:	f023 0210 	bic.w	r2, r3, #16
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6a1b      	ldr	r3, [r3, #32]
 8003e0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	699b      	ldr	r3, [r3, #24]
 8003e1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	021b      	lsls	r3, r3, #8
 8003e32:	68fa      	ldr	r2, [r7, #12]
 8003e34:	4313      	orrs	r3, r2
 8003e36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	f023 0320 	bic.w	r3, r3, #32
 8003e3e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	011b      	lsls	r3, r3, #4
 8003e46:	697a      	ldr	r2, [r7, #20]
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	4a22      	ldr	r2, [pc, #136]	; (8003ed8 <TIM_OC2_SetConfig+0xe4>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d003      	beq.n	8003e5c <TIM_OC2_SetConfig+0x68>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	4a21      	ldr	r2, [pc, #132]	; (8003edc <TIM_OC2_SetConfig+0xe8>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d10d      	bne.n	8003e78 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	011b      	lsls	r3, r3, #4
 8003e6a:	697a      	ldr	r2, [r7, #20]
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e76:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	4a17      	ldr	r2, [pc, #92]	; (8003ed8 <TIM_OC2_SetConfig+0xe4>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d003      	beq.n	8003e88 <TIM_OC2_SetConfig+0x94>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	4a16      	ldr	r2, [pc, #88]	; (8003edc <TIM_OC2_SetConfig+0xe8>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d113      	bne.n	8003eb0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e8e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e96:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	695b      	ldr	r3, [r3, #20]
 8003e9c:	009b      	lsls	r3, r3, #2
 8003e9e:	693a      	ldr	r2, [r7, #16]
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	699b      	ldr	r3, [r3, #24]
 8003ea8:	009b      	lsls	r3, r3, #2
 8003eaa:	693a      	ldr	r2, [r7, #16]
 8003eac:	4313      	orrs	r3, r2
 8003eae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	693a      	ldr	r2, [r7, #16]
 8003eb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	68fa      	ldr	r2, [r7, #12]
 8003eba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	685a      	ldr	r2, [r3, #4]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	697a      	ldr	r2, [r7, #20]
 8003ec8:	621a      	str	r2, [r3, #32]
}
 8003eca:	bf00      	nop
 8003ecc:	371c      	adds	r7, #28
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed4:	4770      	bx	lr
 8003ed6:	bf00      	nop
 8003ed8:	40010000 	.word	0x40010000
 8003edc:	40010400 	.word	0x40010400

08003ee0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b087      	sub	sp, #28
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
 8003ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6a1b      	ldr	r3, [r3, #32]
 8003eee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6a1b      	ldr	r3, [r3, #32]
 8003efa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	69db      	ldr	r3, [r3, #28]
 8003f06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f023 0303 	bic.w	r3, r3, #3
 8003f16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	68fa      	ldr	r2, [r7, #12]
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	021b      	lsls	r3, r3, #8
 8003f30:	697a      	ldr	r2, [r7, #20]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	4a21      	ldr	r2, [pc, #132]	; (8003fc0 <TIM_OC3_SetConfig+0xe0>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d003      	beq.n	8003f46 <TIM_OC3_SetConfig+0x66>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	4a20      	ldr	r2, [pc, #128]	; (8003fc4 <TIM_OC3_SetConfig+0xe4>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d10d      	bne.n	8003f62 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f4c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	68db      	ldr	r3, [r3, #12]
 8003f52:	021b      	lsls	r3, r3, #8
 8003f54:	697a      	ldr	r2, [r7, #20]
 8003f56:	4313      	orrs	r3, r2
 8003f58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	4a16      	ldr	r2, [pc, #88]	; (8003fc0 <TIM_OC3_SetConfig+0xe0>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d003      	beq.n	8003f72 <TIM_OC3_SetConfig+0x92>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4a15      	ldr	r2, [pc, #84]	; (8003fc4 <TIM_OC3_SetConfig+0xe4>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d113      	bne.n	8003f9a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	695b      	ldr	r3, [r3, #20]
 8003f86:	011b      	lsls	r3, r3, #4
 8003f88:	693a      	ldr	r2, [r7, #16]
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	699b      	ldr	r3, [r3, #24]
 8003f92:	011b      	lsls	r3, r3, #4
 8003f94:	693a      	ldr	r2, [r7, #16]
 8003f96:	4313      	orrs	r3, r2
 8003f98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	693a      	ldr	r2, [r7, #16]
 8003f9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	68fa      	ldr	r2, [r7, #12]
 8003fa4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	685a      	ldr	r2, [r3, #4]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	697a      	ldr	r2, [r7, #20]
 8003fb2:	621a      	str	r2, [r3, #32]
}
 8003fb4:	bf00      	nop
 8003fb6:	371c      	adds	r7, #28
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr
 8003fc0:	40010000 	.word	0x40010000
 8003fc4:	40010400 	.word	0x40010400

08003fc8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b087      	sub	sp, #28
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6a1b      	ldr	r3, [r3, #32]
 8003fd6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a1b      	ldr	r3, [r3, #32]
 8003fe2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	69db      	ldr	r3, [r3, #28]
 8003fee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ff6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ffe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	021b      	lsls	r3, r3, #8
 8004006:	68fa      	ldr	r2, [r7, #12]
 8004008:	4313      	orrs	r3, r2
 800400a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004012:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	031b      	lsls	r3, r3, #12
 800401a:	693a      	ldr	r2, [r7, #16]
 800401c:	4313      	orrs	r3, r2
 800401e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	4a12      	ldr	r2, [pc, #72]	; (800406c <TIM_OC4_SetConfig+0xa4>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d003      	beq.n	8004030 <TIM_OC4_SetConfig+0x68>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	4a11      	ldr	r2, [pc, #68]	; (8004070 <TIM_OC4_SetConfig+0xa8>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d109      	bne.n	8004044 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004036:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	695b      	ldr	r3, [r3, #20]
 800403c:	019b      	lsls	r3, r3, #6
 800403e:	697a      	ldr	r2, [r7, #20]
 8004040:	4313      	orrs	r3, r2
 8004042:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	697a      	ldr	r2, [r7, #20]
 8004048:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	68fa      	ldr	r2, [r7, #12]
 800404e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	685a      	ldr	r2, [r3, #4]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	693a      	ldr	r2, [r7, #16]
 800405c:	621a      	str	r2, [r3, #32]
}
 800405e:	bf00      	nop
 8004060:	371c      	adds	r7, #28
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr
 800406a:	bf00      	nop
 800406c:	40010000 	.word	0x40010000
 8004070:	40010400 	.word	0x40010400

08004074 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004074:	b480      	push	{r7}
 8004076:	b087      	sub	sp, #28
 8004078:	af00      	add	r7, sp, #0
 800407a:	60f8      	str	r0, [r7, #12]
 800407c:	60b9      	str	r1, [r7, #8]
 800407e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	6a1b      	ldr	r3, [r3, #32]
 8004084:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	6a1b      	ldr	r3, [r3, #32]
 800408a:	f023 0201 	bic.w	r2, r3, #1
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	699b      	ldr	r3, [r3, #24]
 8004096:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800409e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	011b      	lsls	r3, r3, #4
 80040a4:	693a      	ldr	r2, [r7, #16]
 80040a6:	4313      	orrs	r3, r2
 80040a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	f023 030a 	bic.w	r3, r3, #10
 80040b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80040b2:	697a      	ldr	r2, [r7, #20]
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	4313      	orrs	r3, r2
 80040b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	693a      	ldr	r2, [r7, #16]
 80040be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	697a      	ldr	r2, [r7, #20]
 80040c4:	621a      	str	r2, [r3, #32]
}
 80040c6:	bf00      	nop
 80040c8:	371c      	adds	r7, #28
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr

080040d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040d2:	b480      	push	{r7}
 80040d4:	b087      	sub	sp, #28
 80040d6:	af00      	add	r7, sp, #0
 80040d8:	60f8      	str	r0, [r7, #12]
 80040da:	60b9      	str	r1, [r7, #8]
 80040dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	6a1b      	ldr	r3, [r3, #32]
 80040e2:	f023 0210 	bic.w	r2, r3, #16
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	699b      	ldr	r3, [r3, #24]
 80040ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	6a1b      	ldr	r3, [r3, #32]
 80040f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80040fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	031b      	lsls	r3, r3, #12
 8004102:	697a      	ldr	r2, [r7, #20]
 8004104:	4313      	orrs	r3, r2
 8004106:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800410e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	011b      	lsls	r3, r3, #4
 8004114:	693a      	ldr	r2, [r7, #16]
 8004116:	4313      	orrs	r3, r2
 8004118:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	697a      	ldr	r2, [r7, #20]
 800411e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	693a      	ldr	r2, [r7, #16]
 8004124:	621a      	str	r2, [r3, #32]
}
 8004126:	bf00      	nop
 8004128:	371c      	adds	r7, #28
 800412a:	46bd      	mov	sp, r7
 800412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004130:	4770      	bx	lr

08004132 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004132:	b480      	push	{r7}
 8004134:	b085      	sub	sp, #20
 8004136:	af00      	add	r7, sp, #0
 8004138:	6078      	str	r0, [r7, #4]
 800413a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004148:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800414a:	683a      	ldr	r2, [r7, #0]
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	4313      	orrs	r3, r2
 8004150:	f043 0307 	orr.w	r3, r3, #7
 8004154:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	68fa      	ldr	r2, [r7, #12]
 800415a:	609a      	str	r2, [r3, #8]
}
 800415c:	bf00      	nop
 800415e:	3714      	adds	r7, #20
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr

08004168 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004168:	b480      	push	{r7}
 800416a:	b087      	sub	sp, #28
 800416c:	af00      	add	r7, sp, #0
 800416e:	60f8      	str	r0, [r7, #12]
 8004170:	60b9      	str	r1, [r7, #8]
 8004172:	607a      	str	r2, [r7, #4]
 8004174:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004182:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	021a      	lsls	r2, r3, #8
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	431a      	orrs	r2, r3
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	4313      	orrs	r3, r2
 8004190:	697a      	ldr	r2, [r7, #20]
 8004192:	4313      	orrs	r3, r2
 8004194:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	697a      	ldr	r2, [r7, #20]
 800419a:	609a      	str	r2, [r3, #8]
}
 800419c:	bf00      	nop
 800419e:	371c      	adds	r7, #28
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr

080041a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b085      	sub	sp, #20
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
 80041b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d101      	bne.n	80041c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80041bc:	2302      	movs	r3, #2
 80041be:	e05a      	b.n	8004276 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2201      	movs	r2, #1
 80041c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2202      	movs	r2, #2
 80041cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	68fa      	ldr	r2, [r7, #12]
 80041ee:	4313      	orrs	r3, r2
 80041f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	68fa      	ldr	r2, [r7, #12]
 80041f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a21      	ldr	r2, [pc, #132]	; (8004284 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d022      	beq.n	800424a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800420c:	d01d      	beq.n	800424a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a1d      	ldr	r2, [pc, #116]	; (8004288 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d018      	beq.n	800424a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a1b      	ldr	r2, [pc, #108]	; (800428c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d013      	beq.n	800424a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a1a      	ldr	r2, [pc, #104]	; (8004290 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d00e      	beq.n	800424a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a18      	ldr	r2, [pc, #96]	; (8004294 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d009      	beq.n	800424a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a17      	ldr	r2, [pc, #92]	; (8004298 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d004      	beq.n	800424a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a15      	ldr	r2, [pc, #84]	; (800429c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d10c      	bne.n	8004264 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004250:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	68ba      	ldr	r2, [r7, #8]
 8004258:	4313      	orrs	r3, r2
 800425a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	68ba      	ldr	r2, [r7, #8]
 8004262:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2201      	movs	r2, #1
 8004268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004274:	2300      	movs	r3, #0
}
 8004276:	4618      	mov	r0, r3
 8004278:	3714      	adds	r7, #20
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr
 8004282:	bf00      	nop
 8004284:	40010000 	.word	0x40010000
 8004288:	40000400 	.word	0x40000400
 800428c:	40000800 	.word	0x40000800
 8004290:	40000c00 	.word	0x40000c00
 8004294:	40010400 	.word	0x40010400
 8004298:	40014000 	.word	0x40014000
 800429c:	40001800 	.word	0x40001800

080042a0 <LL_GPIO_SetPinMode>:
{
 80042a0:	b480      	push	{r7}
 80042a2:	b089      	sub	sp, #36	; 0x24
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	60f8      	str	r0, [r7, #12]
 80042a8:	60b9      	str	r1, [r7, #8]
 80042aa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	fa93 f3a3 	rbit	r3, r3
 80042ba:	613b      	str	r3, [r7, #16]
  return result;
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	fab3 f383 	clz	r3, r3
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	005b      	lsls	r3, r3, #1
 80042c6:	2103      	movs	r1, #3
 80042c8:	fa01 f303 	lsl.w	r3, r1, r3
 80042cc:	43db      	mvns	r3, r3
 80042ce:	401a      	ands	r2, r3
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042d4:	69fb      	ldr	r3, [r7, #28]
 80042d6:	fa93 f3a3 	rbit	r3, r3
 80042da:	61bb      	str	r3, [r7, #24]
  return result;
 80042dc:	69bb      	ldr	r3, [r7, #24]
 80042de:	fab3 f383 	clz	r3, r3
 80042e2:	b2db      	uxtb	r3, r3
 80042e4:	005b      	lsls	r3, r3, #1
 80042e6:	6879      	ldr	r1, [r7, #4]
 80042e8:	fa01 f303 	lsl.w	r3, r1, r3
 80042ec:	431a      	orrs	r2, r3
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	601a      	str	r2, [r3, #0]
}
 80042f2:	bf00      	nop
 80042f4:	3724      	adds	r7, #36	; 0x24
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr

080042fe <LL_GPIO_SetPinOutputType>:
{
 80042fe:	b480      	push	{r7}
 8004300:	b085      	sub	sp, #20
 8004302:	af00      	add	r7, sp, #0
 8004304:	60f8      	str	r0, [r7, #12]
 8004306:	60b9      	str	r1, [r7, #8]
 8004308:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	685a      	ldr	r2, [r3, #4]
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	43db      	mvns	r3, r3
 8004312:	401a      	ands	r2, r3
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	6879      	ldr	r1, [r7, #4]
 8004318:	fb01 f303 	mul.w	r3, r1, r3
 800431c:	431a      	orrs	r2, r3
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	605a      	str	r2, [r3, #4]
}
 8004322:	bf00      	nop
 8004324:	3714      	adds	r7, #20
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr

0800432e <LL_GPIO_SetPinSpeed>:
{
 800432e:	b480      	push	{r7}
 8004330:	b089      	sub	sp, #36	; 0x24
 8004332:	af00      	add	r7, sp, #0
 8004334:	60f8      	str	r0, [r7, #12]
 8004336:	60b9      	str	r1, [r7, #8]
 8004338:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	689a      	ldr	r2, [r3, #8]
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	fa93 f3a3 	rbit	r3, r3
 8004348:	613b      	str	r3, [r7, #16]
  return result;
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	fab3 f383 	clz	r3, r3
 8004350:	b2db      	uxtb	r3, r3
 8004352:	005b      	lsls	r3, r3, #1
 8004354:	2103      	movs	r1, #3
 8004356:	fa01 f303 	lsl.w	r3, r1, r3
 800435a:	43db      	mvns	r3, r3
 800435c:	401a      	ands	r2, r3
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004362:	69fb      	ldr	r3, [r7, #28]
 8004364:	fa93 f3a3 	rbit	r3, r3
 8004368:	61bb      	str	r3, [r7, #24]
  return result;
 800436a:	69bb      	ldr	r3, [r7, #24]
 800436c:	fab3 f383 	clz	r3, r3
 8004370:	b2db      	uxtb	r3, r3
 8004372:	005b      	lsls	r3, r3, #1
 8004374:	6879      	ldr	r1, [r7, #4]
 8004376:	fa01 f303 	lsl.w	r3, r1, r3
 800437a:	431a      	orrs	r2, r3
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	609a      	str	r2, [r3, #8]
}
 8004380:	bf00      	nop
 8004382:	3724      	adds	r7, #36	; 0x24
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr

0800438c <LL_GPIO_SetPinPull>:
{
 800438c:	b480      	push	{r7}
 800438e:	b089      	sub	sp, #36	; 0x24
 8004390:	af00      	add	r7, sp, #0
 8004392:	60f8      	str	r0, [r7, #12]
 8004394:	60b9      	str	r1, [r7, #8]
 8004396:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	68da      	ldr	r2, [r3, #12]
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	fa93 f3a3 	rbit	r3, r3
 80043a6:	613b      	str	r3, [r7, #16]
  return result;
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	fab3 f383 	clz	r3, r3
 80043ae:	b2db      	uxtb	r3, r3
 80043b0:	005b      	lsls	r3, r3, #1
 80043b2:	2103      	movs	r1, #3
 80043b4:	fa01 f303 	lsl.w	r3, r1, r3
 80043b8:	43db      	mvns	r3, r3
 80043ba:	401a      	ands	r2, r3
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043c0:	69fb      	ldr	r3, [r7, #28]
 80043c2:	fa93 f3a3 	rbit	r3, r3
 80043c6:	61bb      	str	r3, [r7, #24]
  return result;
 80043c8:	69bb      	ldr	r3, [r7, #24]
 80043ca:	fab3 f383 	clz	r3, r3
 80043ce:	b2db      	uxtb	r3, r3
 80043d0:	005b      	lsls	r3, r3, #1
 80043d2:	6879      	ldr	r1, [r7, #4]
 80043d4:	fa01 f303 	lsl.w	r3, r1, r3
 80043d8:	431a      	orrs	r2, r3
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	60da      	str	r2, [r3, #12]
}
 80043de:	bf00      	nop
 80043e0:	3724      	adds	r7, #36	; 0x24
 80043e2:	46bd      	mov	sp, r7
 80043e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e8:	4770      	bx	lr

080043ea <LL_GPIO_SetAFPin_0_7>:
{
 80043ea:	b480      	push	{r7}
 80043ec:	b089      	sub	sp, #36	; 0x24
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	60f8      	str	r0, [r7, #12]
 80043f2:	60b9      	str	r1, [r7, #8]
 80043f4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	6a1a      	ldr	r2, [r3, #32]
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	fa93 f3a3 	rbit	r3, r3
 8004404:	613b      	str	r3, [r7, #16]
  return result;
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	fab3 f383 	clz	r3, r3
 800440c:	b2db      	uxtb	r3, r3
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	210f      	movs	r1, #15
 8004412:	fa01 f303 	lsl.w	r3, r1, r3
 8004416:	43db      	mvns	r3, r3
 8004418:	401a      	ands	r2, r3
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800441e:	69fb      	ldr	r3, [r7, #28]
 8004420:	fa93 f3a3 	rbit	r3, r3
 8004424:	61bb      	str	r3, [r7, #24]
  return result;
 8004426:	69bb      	ldr	r3, [r7, #24]
 8004428:	fab3 f383 	clz	r3, r3
 800442c:	b2db      	uxtb	r3, r3
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	6879      	ldr	r1, [r7, #4]
 8004432:	fa01 f303 	lsl.w	r3, r1, r3
 8004436:	431a      	orrs	r2, r3
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	621a      	str	r2, [r3, #32]
}
 800443c:	bf00      	nop
 800443e:	3724      	adds	r7, #36	; 0x24
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr

08004448 <LL_GPIO_SetAFPin_8_15>:
{
 8004448:	b480      	push	{r7}
 800444a:	b089      	sub	sp, #36	; 0x24
 800444c:	af00      	add	r7, sp, #0
 800444e:	60f8      	str	r0, [r7, #12]
 8004450:	60b9      	str	r1, [r7, #8]
 8004452:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	0a1b      	lsrs	r3, r3, #8
 800445c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	fa93 f3a3 	rbit	r3, r3
 8004464:	613b      	str	r3, [r7, #16]
  return result;
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	fab3 f383 	clz	r3, r3
 800446c:	b2db      	uxtb	r3, r3
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	210f      	movs	r1, #15
 8004472:	fa01 f303 	lsl.w	r3, r1, r3
 8004476:	43db      	mvns	r3, r3
 8004478:	401a      	ands	r2, r3
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	0a1b      	lsrs	r3, r3, #8
 800447e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004480:	69fb      	ldr	r3, [r7, #28]
 8004482:	fa93 f3a3 	rbit	r3, r3
 8004486:	61bb      	str	r3, [r7, #24]
  return result;
 8004488:	69bb      	ldr	r3, [r7, #24]
 800448a:	fab3 f383 	clz	r3, r3
 800448e:	b2db      	uxtb	r3, r3
 8004490:	009b      	lsls	r3, r3, #2
 8004492:	6879      	ldr	r1, [r7, #4]
 8004494:	fa01 f303 	lsl.w	r3, r1, r3
 8004498:	431a      	orrs	r2, r3
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800449e:	bf00      	nop
 80044a0:	3724      	adds	r7, #36	; 0x24
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr

080044aa <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80044aa:	b580      	push	{r7, lr}
 80044ac:	b088      	sub	sp, #32
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	6078      	str	r0, [r7, #4]
 80044b2:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 80044b4:	2300      	movs	r3, #0
 80044b6:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 80044b8:	2300      	movs	r3, #0
 80044ba:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	fa93 f3a3 	rbit	r3, r3
 80044c8:	613b      	str	r3, [r7, #16]
  return result;
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	fab3 f383 	clz	r3, r3
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80044d4:	e050      	b.n	8004578 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	2101      	movs	r1, #1
 80044dc:	69fb      	ldr	r3, [r7, #28]
 80044de:	fa01 f303 	lsl.w	r3, r1, r3
 80044e2:	4013      	ands	r3, r2
 80044e4:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 80044e6:	69bb      	ldr	r3, [r7, #24]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d042      	beq.n	8004572 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d003      	beq.n	80044fc <LL_GPIO_Init+0x52>
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	2b02      	cmp	r3, #2
 80044fa:	d10d      	bne.n	8004518 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	461a      	mov	r2, r3
 8004502:	69b9      	ldr	r1, [r7, #24]
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f7ff ff12 	bl	800432e <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	68db      	ldr	r3, [r3, #12]
 800450e:	461a      	mov	r2, r3
 8004510:	69b9      	ldr	r1, [r7, #24]
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f7ff fef3 	bl	80042fe <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	691b      	ldr	r3, [r3, #16]
 800451c:	461a      	mov	r2, r3
 800451e:	69b9      	ldr	r1, [r7, #24]
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	f7ff ff33 	bl	800438c <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	2b02      	cmp	r3, #2
 800452c:	d11a      	bne.n	8004564 <LL_GPIO_Init+0xba>
 800452e:	69bb      	ldr	r3, [r7, #24]
 8004530:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	fa93 f3a3 	rbit	r3, r3
 8004538:	60bb      	str	r3, [r7, #8]
  return result;
 800453a:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800453c:	fab3 f383 	clz	r3, r3
 8004540:	b2db      	uxtb	r3, r3
 8004542:	2b07      	cmp	r3, #7
 8004544:	d807      	bhi.n	8004556 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	695b      	ldr	r3, [r3, #20]
 800454a:	461a      	mov	r2, r3
 800454c:	69b9      	ldr	r1, [r7, #24]
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f7ff ff4b 	bl	80043ea <LL_GPIO_SetAFPin_0_7>
 8004554:	e006      	b.n	8004564 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	695b      	ldr	r3, [r3, #20]
 800455a:	461a      	mov	r2, r3
 800455c:	69b9      	ldr	r1, [r7, #24]
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f7ff ff72 	bl	8004448 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	461a      	mov	r2, r3
 800456a:	69b9      	ldr	r1, [r7, #24]
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	f7ff fe97 	bl	80042a0 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8004572:	69fb      	ldr	r3, [r7, #28]
 8004574:	3301      	adds	r3, #1
 8004576:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	69fb      	ldr	r3, [r7, #28]
 800457e:	fa22 f303 	lsr.w	r3, r2, r3
 8004582:	2b00      	cmp	r3, #0
 8004584:	d1a7      	bne.n	80044d6 <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8004586:	2300      	movs	r3, #0
}
 8004588:	4618      	mov	r0, r3
 800458a:	3720      	adds	r7, #32
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}

08004590 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8004590:	b480      	push	{r7}
 8004592:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004594:	4b04      	ldr	r3, [pc, #16]	; (80045a8 <LL_RCC_GetSysClkSource+0x18>)
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	f003 030c 	and.w	r3, r3, #12
}
 800459c:	4618      	mov	r0, r3
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr
 80045a6:	bf00      	nop
 80045a8:	40023800 	.word	0x40023800

080045ac <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80045ac:	b480      	push	{r7}
 80045ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80045b0:	4b04      	ldr	r3, [pc, #16]	; (80045c4 <LL_RCC_GetAHBPrescaler+0x18>)
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	4770      	bx	lr
 80045c2:	bf00      	nop
 80045c4:	40023800 	.word	0x40023800

080045c8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80045c8:	b480      	push	{r7}
 80045ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80045cc:	4b04      	ldr	r3, [pc, #16]	; (80045e0 <LL_RCC_GetAPB1Prescaler+0x18>)
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr
 80045de:	bf00      	nop
 80045e0:	40023800 	.word	0x40023800

080045e4 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80045e4:	b480      	push	{r7}
 80045e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80045e8:	4b04      	ldr	r3, [pc, #16]	; (80045fc <LL_RCC_GetAPB2Prescaler+0x18>)
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr
 80045fa:	bf00      	nop
 80045fc:	40023800 	.word	0x40023800

08004600 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8004600:	b480      	push	{r7}
 8004602:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004604:	4b04      	ldr	r3, [pc, #16]	; (8004618 <LL_RCC_PLL_GetMainSource+0x18>)
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 800460c:	4618      	mov	r0, r3
 800460e:	46bd      	mov	sp, r7
 8004610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004614:	4770      	bx	lr
 8004616:	bf00      	nop
 8004618:	40023800 	.word	0x40023800

0800461c <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800461c:	b480      	push	{r7}
 800461e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004620:	4b04      	ldr	r3, [pc, #16]	; (8004634 <LL_RCC_PLL_GetN+0x18>)
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	099b      	lsrs	r3, r3, #6
 8004626:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 800462a:	4618      	mov	r0, r3
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr
 8004634:	40023800 	.word	0x40023800

08004638 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8004638:	b480      	push	{r7}
 800463a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 800463c:	4b04      	ldr	r3, [pc, #16]	; (8004650 <LL_RCC_PLL_GetP+0x18>)
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8004644:	4618      	mov	r0, r3
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr
 800464e:	bf00      	nop
 8004650:	40023800 	.word	0x40023800

08004654 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8004654:	b480      	push	{r7}
 8004656:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004658:	4b04      	ldr	r3, [pc, #16]	; (800466c <LL_RCC_PLL_GetDivider+0x18>)
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8004660:	4618      	mov	r0, r3
 8004662:	46bd      	mov	sp, r7
 8004664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004668:	4770      	bx	lr
 800466a:	bf00      	nop
 800466c:	40023800 	.word	0x40023800

08004670 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b082      	sub	sp, #8
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8004678:	f000 f820 	bl	80046bc <RCC_GetSystemClockFreq>
 800467c:	4602      	mov	r2, r0
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4618      	mov	r0, r3
 8004688:	f000 f840 	bl	800470c <RCC_GetHCLKClockFreq>
 800468c:	4602      	mov	r2, r0
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	4618      	mov	r0, r3
 8004698:	f000 f84e 	bl	8004738 <RCC_GetPCLK1ClockFreq>
 800469c:	4602      	mov	r2, r0
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	4618      	mov	r0, r3
 80046a8:	f000 f85a 	bl	8004760 <RCC_GetPCLK2ClockFreq>
 80046ac:	4602      	mov	r2, r0
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	60da      	str	r2, [r3, #12]
}
 80046b2:	bf00      	nop
 80046b4:	3708      	adds	r7, #8
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}
	...

080046bc <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b082      	sub	sp, #8
 80046c0:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80046c2:	2300      	movs	r3, #0
 80046c4:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80046c6:	f7ff ff63 	bl	8004590 <LL_RCC_GetSysClkSource>
 80046ca:	4603      	mov	r3, r0
 80046cc:	2b08      	cmp	r3, #8
 80046ce:	d00c      	beq.n	80046ea <RCC_GetSystemClockFreq+0x2e>
 80046d0:	2b08      	cmp	r3, #8
 80046d2:	d80f      	bhi.n	80046f4 <RCC_GetSystemClockFreq+0x38>
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d002      	beq.n	80046de <RCC_GetSystemClockFreq+0x22>
 80046d8:	2b04      	cmp	r3, #4
 80046da:	d003      	beq.n	80046e4 <RCC_GetSystemClockFreq+0x28>
 80046dc:	e00a      	b.n	80046f4 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80046de:	4b09      	ldr	r3, [pc, #36]	; (8004704 <RCC_GetSystemClockFreq+0x48>)
 80046e0:	607b      	str	r3, [r7, #4]
      break;
 80046e2:	e00a      	b.n	80046fa <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80046e4:	4b08      	ldr	r3, [pc, #32]	; (8004708 <RCC_GetSystemClockFreq+0x4c>)
 80046e6:	607b      	str	r3, [r7, #4]
      break;
 80046e8:	e007      	b.n	80046fa <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 80046ea:	2008      	movs	r0, #8
 80046ec:	f000 f84c 	bl	8004788 <RCC_PLL_GetFreqDomain_SYS>
 80046f0:	6078      	str	r0, [r7, #4]
      break;
 80046f2:	e002      	b.n	80046fa <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 80046f4:	4b03      	ldr	r3, [pc, #12]	; (8004704 <RCC_GetSystemClockFreq+0x48>)
 80046f6:	607b      	str	r3, [r7, #4]
      break;
 80046f8:	bf00      	nop
  }

  return frequency;
 80046fa:	687b      	ldr	r3, [r7, #4]
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	3708      	adds	r7, #8
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}
 8004704:	00f42400 	.word	0x00f42400
 8004708:	007a1200 	.word	0x007a1200

0800470c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b082      	sub	sp, #8
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8004714:	f7ff ff4a 	bl	80045ac <LL_RCC_GetAHBPrescaler>
 8004718:	4603      	mov	r3, r0
 800471a:	091b      	lsrs	r3, r3, #4
 800471c:	f003 030f 	and.w	r3, r3, #15
 8004720:	4a04      	ldr	r2, [pc, #16]	; (8004734 <RCC_GetHCLKClockFreq+0x28>)
 8004722:	5cd3      	ldrb	r3, [r2, r3]
 8004724:	461a      	mov	r2, r3
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	40d3      	lsrs	r3, r2
}
 800472a:	4618      	mov	r0, r3
 800472c:	3708      	adds	r7, #8
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}
 8004732:	bf00      	nop
 8004734:	08007eb4 	.word	0x08007eb4

08004738 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b082      	sub	sp, #8
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8004740:	f7ff ff42 	bl	80045c8 <LL_RCC_GetAPB1Prescaler>
 8004744:	4603      	mov	r3, r0
 8004746:	0a9b      	lsrs	r3, r3, #10
 8004748:	4a04      	ldr	r2, [pc, #16]	; (800475c <RCC_GetPCLK1ClockFreq+0x24>)
 800474a:	5cd3      	ldrb	r3, [r2, r3]
 800474c:	461a      	mov	r2, r3
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	40d3      	lsrs	r3, r2
}
 8004752:	4618      	mov	r0, r3
 8004754:	3708      	adds	r7, #8
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}
 800475a:	bf00      	nop
 800475c:	08007ec4 	.word	0x08007ec4

08004760 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b082      	sub	sp, #8
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8004768:	f7ff ff3c 	bl	80045e4 <LL_RCC_GetAPB2Prescaler>
 800476c:	4603      	mov	r3, r0
 800476e:	0b5b      	lsrs	r3, r3, #13
 8004770:	4a04      	ldr	r2, [pc, #16]	; (8004784 <RCC_GetPCLK2ClockFreq+0x24>)
 8004772:	5cd3      	ldrb	r3, [r2, r3]
 8004774:	461a      	mov	r2, r3
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	40d3      	lsrs	r3, r2
}
 800477a:	4618      	mov	r0, r3
 800477c:	3708      	adds	r7, #8
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}
 8004782:	bf00      	nop
 8004784:	08007ec4 	.word	0x08007ec4

08004788 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8004788:	b590      	push	{r4, r7, lr}
 800478a:	b087      	sub	sp, #28
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8004790:	2300      	movs	r3, #0
 8004792:	617b      	str	r3, [r7, #20]
 8004794:	2300      	movs	r3, #0
 8004796:	60fb      	str	r3, [r7, #12]
 8004798:	2300      	movs	r3, #0
 800479a:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 800479c:	f7ff ff30 	bl	8004600 <LL_RCC_PLL_GetMainSource>
 80047a0:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d004      	beq.n	80047b2 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047ae:	d003      	beq.n	80047b8 <RCC_PLL_GetFreqDomain_SYS+0x30>
 80047b0:	e005      	b.n	80047be <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 80047b2:	4b12      	ldr	r3, [pc, #72]	; (80047fc <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80047b4:	617b      	str	r3, [r7, #20]
      break;
 80047b6:	e005      	b.n	80047c4 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80047b8:	4b11      	ldr	r3, [pc, #68]	; (8004800 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 80047ba:	617b      	str	r3, [r7, #20]
      break;
 80047bc:	e002      	b.n	80047c4 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 80047be:	4b0f      	ldr	r3, [pc, #60]	; (80047fc <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80047c0:	617b      	str	r3, [r7, #20]
      break;
 80047c2:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2b08      	cmp	r3, #8
 80047c8:	d113      	bne.n	80047f2 <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80047ca:	f7ff ff43 	bl	8004654 <LL_RCC_PLL_GetDivider>
 80047ce:	4602      	mov	r2, r0
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	fbb3 f4f2 	udiv	r4, r3, r2
 80047d6:	f7ff ff21 	bl	800461c <LL_RCC_PLL_GetN>
 80047da:	4603      	mov	r3, r0
 80047dc:	fb03 f404 	mul.w	r4, r3, r4
 80047e0:	f7ff ff2a 	bl	8004638 <LL_RCC_PLL_GetP>
 80047e4:	4603      	mov	r3, r0
 80047e6:	0c1b      	lsrs	r3, r3, #16
 80047e8:	3301      	adds	r3, #1
 80047ea:	005b      	lsls	r3, r3, #1
 80047ec:	fbb4 f3f3 	udiv	r3, r4, r3
 80047f0:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 80047f2:	693b      	ldr	r3, [r7, #16]
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	371c      	adds	r7, #28
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd90      	pop	{r4, r7, pc}
 80047fc:	00f42400 	.word	0x00f42400
 8004800:	007a1200 	.word	0x007a1200

08004804 <LL_TIM_SetPrescaler>:
{
 8004804:	b480      	push	{r7}
 8004806:	b083      	sub	sp, #12
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	683a      	ldr	r2, [r7, #0]
 8004812:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004814:	bf00      	nop
 8004816:	370c      	adds	r7, #12
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr

08004820 <LL_TIM_SetAutoReload>:
{
 8004820:	b480      	push	{r7}
 8004822:	b083      	sub	sp, #12
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
 8004828:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	683a      	ldr	r2, [r7, #0]
 800482e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004830:	bf00      	nop
 8004832:	370c      	adds	r7, #12
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	4770      	bx	lr

0800483c <LL_TIM_SetRepetitionCounter>:
{
 800483c:	b480      	push	{r7}
 800483e:	b083      	sub	sp, #12
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
 8004844:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	683a      	ldr	r2, [r7, #0]
 800484a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800484c:	bf00      	nop
 800484e:	370c      	adds	r7, #12
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr

08004858 <LL_TIM_OC_SetCompareCH1>:
{
 8004858:	b480      	push	{r7}
 800485a:	b083      	sub	sp, #12
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	683a      	ldr	r2, [r7, #0]
 8004866:	635a      	str	r2, [r3, #52]	; 0x34
}
 8004868:	bf00      	nop
 800486a:	370c      	adds	r7, #12
 800486c:	46bd      	mov	sp, r7
 800486e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004872:	4770      	bx	lr

08004874 <LL_TIM_OC_SetCompareCH2>:
{
 8004874:	b480      	push	{r7}
 8004876:	b083      	sub	sp, #12
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
 800487c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	683a      	ldr	r2, [r7, #0]
 8004882:	639a      	str	r2, [r3, #56]	; 0x38
}
 8004884:	bf00      	nop
 8004886:	370c      	adds	r7, #12
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr

08004890 <LL_TIM_OC_SetCompareCH3>:
{
 8004890:	b480      	push	{r7}
 8004892:	b083      	sub	sp, #12
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
 8004898:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	683a      	ldr	r2, [r7, #0]
 800489e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80048a0:	bf00      	nop
 80048a2:	370c      	adds	r7, #12
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr

080048ac <LL_TIM_OC_SetCompareCH4>:
{
 80048ac:	b480      	push	{r7}
 80048ae:	b083      	sub	sp, #12
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	683a      	ldr	r2, [r7, #0]
 80048ba:	641a      	str	r2, [r3, #64]	; 0x40
}
 80048bc:	bf00      	nop
 80048be:	370c      	adds	r7, #12
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr

080048c8 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b083      	sub	sp, #12
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	695b      	ldr	r3, [r3, #20]
 80048d4:	f043 0201 	orr.w	r2, r3, #1
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	615a      	str	r2, [r3, #20]
}
 80048dc:	bf00      	nop
 80048de:	370c      	adds	r7, #12
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr

080048e8 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b084      	sub	sp, #16
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
 80048f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	4a3d      	ldr	r2, [pc, #244]	; (80049f0 <LL_TIM_Init+0x108>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d013      	beq.n	8004928 <LL_TIM_Init+0x40>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004906:	d00f      	beq.n	8004928 <LL_TIM_Init+0x40>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	4a3a      	ldr	r2, [pc, #232]	; (80049f4 <LL_TIM_Init+0x10c>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d00b      	beq.n	8004928 <LL_TIM_Init+0x40>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	4a39      	ldr	r2, [pc, #228]	; (80049f8 <LL_TIM_Init+0x110>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d007      	beq.n	8004928 <LL_TIM_Init+0x40>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	4a38      	ldr	r2, [pc, #224]	; (80049fc <LL_TIM_Init+0x114>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d003      	beq.n	8004928 <LL_TIM_Init+0x40>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	4a37      	ldr	r2, [pc, #220]	; (8004a00 <LL_TIM_Init+0x118>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d106      	bne.n	8004936 <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	4313      	orrs	r3, r2
 8004934:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4a2d      	ldr	r2, [pc, #180]	; (80049f0 <LL_TIM_Init+0x108>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d02b      	beq.n	8004996 <LL_TIM_Init+0xae>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004944:	d027      	beq.n	8004996 <LL_TIM_Init+0xae>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	4a2a      	ldr	r2, [pc, #168]	; (80049f4 <LL_TIM_Init+0x10c>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d023      	beq.n	8004996 <LL_TIM_Init+0xae>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	4a29      	ldr	r2, [pc, #164]	; (80049f8 <LL_TIM_Init+0x110>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d01f      	beq.n	8004996 <LL_TIM_Init+0xae>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	4a28      	ldr	r2, [pc, #160]	; (80049fc <LL_TIM_Init+0x114>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d01b      	beq.n	8004996 <LL_TIM_Init+0xae>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	4a27      	ldr	r2, [pc, #156]	; (8004a00 <LL_TIM_Init+0x118>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d017      	beq.n	8004996 <LL_TIM_Init+0xae>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	4a26      	ldr	r2, [pc, #152]	; (8004a04 <LL_TIM_Init+0x11c>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d013      	beq.n	8004996 <LL_TIM_Init+0xae>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	4a25      	ldr	r2, [pc, #148]	; (8004a08 <LL_TIM_Init+0x120>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d00f      	beq.n	8004996 <LL_TIM_Init+0xae>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	4a24      	ldr	r2, [pc, #144]	; (8004a0c <LL_TIM_Init+0x124>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d00b      	beq.n	8004996 <LL_TIM_Init+0xae>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	4a23      	ldr	r2, [pc, #140]	; (8004a10 <LL_TIM_Init+0x128>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d007      	beq.n	8004996 <LL_TIM_Init+0xae>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	4a22      	ldr	r2, [pc, #136]	; (8004a14 <LL_TIM_Init+0x12c>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d003      	beq.n	8004996 <LL_TIM_Init+0xae>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	4a21      	ldr	r2, [pc, #132]	; (8004a18 <LL_TIM_Init+0x130>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d106      	bne.n	80049a4 <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	68db      	ldr	r3, [r3, #12]
 80049a0:	4313      	orrs	r3, r2
 80049a2:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	68fa      	ldr	r2, [r7, #12]
 80049a8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	4619      	mov	r1, r3
 80049b0:	6878      	ldr	r0, [r7, #4]
 80049b2:	f7ff ff35 	bl	8004820 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	881b      	ldrh	r3, [r3, #0]
 80049ba:	4619      	mov	r1, r3
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	f7ff ff21 	bl	8004804 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	4a0a      	ldr	r2, [pc, #40]	; (80049f0 <LL_TIM_Init+0x108>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d003      	beq.n	80049d2 <LL_TIM_Init+0xea>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	4a0c      	ldr	r2, [pc, #48]	; (8004a00 <LL_TIM_Init+0x118>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d105      	bne.n	80049de <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	691b      	ldr	r3, [r3, #16]
 80049d6:	4619      	mov	r1, r3
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f7ff ff2f 	bl	800483c <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f7ff ff72 	bl	80048c8 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 80049e4:	2300      	movs	r3, #0
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3710      	adds	r7, #16
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}
 80049ee:	bf00      	nop
 80049f0:	40010000 	.word	0x40010000
 80049f4:	40000400 	.word	0x40000400
 80049f8:	40000800 	.word	0x40000800
 80049fc:	40000c00 	.word	0x40000c00
 8004a00:	40010400 	.word	0x40010400
 8004a04:	40014000 	.word	0x40014000
 8004a08:	40014400 	.word	0x40014400
 8004a0c:	40014800 	.word	0x40014800
 8004a10:	40001800 	.word	0x40001800
 8004a14:	40001c00 	.word	0x40001c00
 8004a18:	40002000 	.word	0x40002000

08004a1c <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b086      	sub	sp, #24
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	60f8      	str	r0, [r7, #12]
 8004a24:	60b9      	str	r1, [r7, #8]
 8004a26:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a32:	d027      	beq.n	8004a84 <LL_TIM_OC_Init+0x68>
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a3a:	d82a      	bhi.n	8004a92 <LL_TIM_OC_Init+0x76>
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a42:	d018      	beq.n	8004a76 <LL_TIM_OC_Init+0x5a>
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a4a:	d822      	bhi.n	8004a92 <LL_TIM_OC_Init+0x76>
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	d003      	beq.n	8004a5a <LL_TIM_OC_Init+0x3e>
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	2b10      	cmp	r3, #16
 8004a56:	d007      	beq.n	8004a68 <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8004a58:	e01b      	b.n	8004a92 <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8004a5a:	6879      	ldr	r1, [r7, #4]
 8004a5c:	68f8      	ldr	r0, [r7, #12]
 8004a5e:	f000 f81f 	bl	8004aa0 <OC1Config>
 8004a62:	4603      	mov	r3, r0
 8004a64:	75fb      	strb	r3, [r7, #23]
      break;
 8004a66:	e015      	b.n	8004a94 <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8004a68:	6879      	ldr	r1, [r7, #4]
 8004a6a:	68f8      	ldr	r0, [r7, #12]
 8004a6c:	f000 f884 	bl	8004b78 <OC2Config>
 8004a70:	4603      	mov	r3, r0
 8004a72:	75fb      	strb	r3, [r7, #23]
      break;
 8004a74:	e00e      	b.n	8004a94 <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8004a76:	6879      	ldr	r1, [r7, #4]
 8004a78:	68f8      	ldr	r0, [r7, #12]
 8004a7a:	f000 f8ed 	bl	8004c58 <OC3Config>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	75fb      	strb	r3, [r7, #23]
      break;
 8004a82:	e007      	b.n	8004a94 <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8004a84:	6879      	ldr	r1, [r7, #4]
 8004a86:	68f8      	ldr	r0, [r7, #12]
 8004a88:	f000 f956 	bl	8004d38 <OC4Config>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	75fb      	strb	r3, [r7, #23]
      break;
 8004a90:	e000      	b.n	8004a94 <LL_TIM_OC_Init+0x78>
      break;
 8004a92:	bf00      	nop
  }

  return result;
 8004a94:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3718      	adds	r7, #24
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}
	...

08004aa0 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b086      	sub	sp, #24
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
 8004aa8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6a1b      	ldr	r3, [r3, #32]
 8004aae:	f023 0201 	bic.w	r2, r3, #1
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6a1b      	ldr	r3, [r3, #32]
 8004aba:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	699b      	ldr	r3, [r3, #24]
 8004ac6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f023 0303 	bic.w	r3, r3, #3
 8004ace:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	f023 0202 	bic.w	r2, r3, #2
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	691b      	ldr	r3, [r3, #16]
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	f023 0201 	bic.w	r2, r3, #1
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	4313      	orrs	r3, r2
 8004af8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	4a1c      	ldr	r2, [pc, #112]	; (8004b70 <OC1Config+0xd0>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d003      	beq.n	8004b0a <OC1Config+0x6a>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	4a1b      	ldr	r2, [pc, #108]	; (8004b74 <OC1Config+0xd4>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d11e      	bne.n	8004b48 <OC1Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	f023 0208 	bic.w	r2, r3, #8
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	695b      	ldr	r3, [r3, #20]
 8004b14:	009b      	lsls	r3, r3, #2
 8004b16:	4313      	orrs	r3, r2
 8004b18:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	f023 0204 	bic.w	r2, r3, #4
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	009b      	lsls	r3, r3, #2
 8004b26:	4313      	orrs	r3, r2
 8004b28:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	699b      	ldr	r3, [r3, #24]
 8004b34:	4313      	orrs	r3, r2
 8004b36:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	69db      	ldr	r3, [r3, #28]
 8004b42:	005b      	lsls	r3, r3, #1
 8004b44:	4313      	orrs	r3, r2
 8004b46:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	693a      	ldr	r2, [r7, #16]
 8004b4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	68fa      	ldr	r2, [r7, #12]
 8004b52:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	68db      	ldr	r3, [r3, #12]
 8004b58:	4619      	mov	r1, r3
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f7ff fe7c 	bl	8004858 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	697a      	ldr	r2, [r7, #20]
 8004b64:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004b66:	2300      	movs	r3, #0
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3718      	adds	r7, #24
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}
 8004b70:	40010000 	.word	0x40010000
 8004b74:	40010400 	.word	0x40010400

08004b78 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b086      	sub	sp, #24
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
 8004b80:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6a1b      	ldr	r3, [r3, #32]
 8004b86:	f023 0210 	bic.w	r2, r3, #16
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6a1b      	ldr	r3, [r3, #32]
 8004b92:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	699b      	ldr	r3, [r3, #24]
 8004b9e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ba6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	021b      	lsls	r3, r3, #8
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	f023 0220 	bic.w	r2, r3, #32
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	691b      	ldr	r3, [r3, #16]
 8004bc2:	011b      	lsls	r3, r3, #4
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	f023 0210 	bic.w	r2, r3, #16
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	011b      	lsls	r3, r3, #4
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	4a1d      	ldr	r2, [pc, #116]	; (8004c50 <OC2Config+0xd8>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d003      	beq.n	8004be8 <OC2Config+0x70>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	4a1c      	ldr	r2, [pc, #112]	; (8004c54 <OC2Config+0xdc>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d11f      	bne.n	8004c28 <OC2Config+0xb0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	695b      	ldr	r3, [r3, #20]
 8004bf2:	019b      	lsls	r3, r3, #6
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	019b      	lsls	r3, r3, #6
 8004c04:	4313      	orrs	r3, r2
 8004c06:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	699b      	ldr	r3, [r3, #24]
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	4313      	orrs	r3, r2
 8004c16:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	69db      	ldr	r3, [r3, #28]
 8004c22:	00db      	lsls	r3, r3, #3
 8004c24:	4313      	orrs	r3, r2
 8004c26:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	693a      	ldr	r2, [r7, #16]
 8004c2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	68fa      	ldr	r2, [r7, #12]
 8004c32:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	68db      	ldr	r3, [r3, #12]
 8004c38:	4619      	mov	r1, r3
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f7ff fe1a 	bl	8004874 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	697a      	ldr	r2, [r7, #20]
 8004c44:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004c46:	2300      	movs	r3, #0
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3718      	adds	r7, #24
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}
 8004c50:	40010000 	.word	0x40010000
 8004c54:	40010400 	.word	0x40010400

08004c58 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b086      	sub	sp, #24
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
 8004c60:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6a1b      	ldr	r3, [r3, #32]
 8004c66:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6a1b      	ldr	r3, [r3, #32]
 8004c72:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	69db      	ldr	r3, [r3, #28]
 8004c7e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	f023 0303 	bic.w	r3, r3, #3
 8004c86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4313      	orrs	r3, r2
 8004c94:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	691b      	ldr	r3, [r3, #16]
 8004ca0:	021b      	lsls	r3, r3, #8
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	021b      	lsls	r3, r3, #8
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	4a1d      	ldr	r2, [pc, #116]	; (8004d30 <OC3Config+0xd8>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d003      	beq.n	8004cc6 <OC3Config+0x6e>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	4a1c      	ldr	r2, [pc, #112]	; (8004d34 <OC3Config+0xdc>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d11f      	bne.n	8004d06 <OC3Config+0xae>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	695b      	ldr	r3, [r3, #20]
 8004cd0:	029b      	lsls	r3, r3, #10
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	029b      	lsls	r3, r3, #10
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	699b      	ldr	r3, [r3, #24]
 8004cf0:	011b      	lsls	r3, r3, #4
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	69db      	ldr	r3, [r3, #28]
 8004d00:	015b      	lsls	r3, r3, #5
 8004d02:	4313      	orrs	r3, r2
 8004d04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	693a      	ldr	r2, [r7, #16]
 8004d0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	68fa      	ldr	r2, [r7, #12]
 8004d10:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	68db      	ldr	r3, [r3, #12]
 8004d16:	4619      	mov	r1, r3
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	f7ff fdb9 	bl	8004890 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	697a      	ldr	r2, [r7, #20]
 8004d22:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004d24:	2300      	movs	r3, #0
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	3718      	adds	r7, #24
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}
 8004d2e:	bf00      	nop
 8004d30:	40010000 	.word	0x40010000
 8004d34:	40010400 	.word	0x40010400

08004d38 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b086      	sub	sp, #24
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
 8004d40:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6a1b      	ldr	r3, [r3, #32]
 8004d46:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6a1b      	ldr	r3, [r3, #32]
 8004d52:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	69db      	ldr	r3, [r3, #28]
 8004d5e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	021b      	lsls	r3, r3, #8
 8004d74:	4313      	orrs	r3, r2
 8004d76:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	691b      	ldr	r3, [r3, #16]
 8004d82:	031b      	lsls	r3, r3, #12
 8004d84:	4313      	orrs	r3, r2
 8004d86:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	031b      	lsls	r3, r3, #12
 8004d94:	4313      	orrs	r3, r2
 8004d96:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	4a11      	ldr	r2, [pc, #68]	; (8004de0 <OC4Config+0xa8>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d003      	beq.n	8004da8 <OC4Config+0x70>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	4a10      	ldr	r2, [pc, #64]	; (8004de4 <OC4Config+0xac>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d107      	bne.n	8004db8 <OC4Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	699b      	ldr	r3, [r3, #24]
 8004db2:	019b      	lsls	r3, r3, #6
 8004db4:	4313      	orrs	r3, r2
 8004db6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	697a      	ldr	r2, [r7, #20]
 8004dbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	68fa      	ldr	r2, [r7, #12]
 8004dc2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	68db      	ldr	r3, [r3, #12]
 8004dc8:	4619      	mov	r1, r3
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f7ff fd6e 	bl	80048ac <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	693a      	ldr	r2, [r7, #16]
 8004dd4:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004dd6:	2300      	movs	r3, #0
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	3718      	adds	r7, #24
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}
 8004de0:	40010000 	.word	0x40010000
 8004de4:	40010400 	.word	0x40010400

08004de8 <LL_USART_IsEnabled>:
{
 8004de8:	b480      	push	{r7}
 8004dea:	b083      	sub	sp, #12
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004df8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dfc:	bf0c      	ite	eq
 8004dfe:	2301      	moveq	r3, #1
 8004e00:	2300      	movne	r3, #0
 8004e02:	b2db      	uxtb	r3, r3
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	370c      	adds	r7, #12
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0e:	4770      	bx	lr

08004e10 <LL_USART_SetStopBitsLength>:
{
 8004e10:	b480      	push	{r7}
 8004e12:	b083      	sub	sp, #12
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
 8004e18:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	691b      	ldr	r3, [r3, #16]
 8004e1e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	431a      	orrs	r2, r3
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	611a      	str	r2, [r3, #16]
}
 8004e2a:	bf00      	nop
 8004e2c:	370c      	adds	r7, #12
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e34:	4770      	bx	lr

08004e36 <LL_USART_SetHWFlowCtrl>:
{
 8004e36:	b480      	push	{r7}
 8004e38:	b083      	sub	sp, #12
 8004e3a:	af00      	add	r7, sp, #0
 8004e3c:	6078      	str	r0, [r7, #4]
 8004e3e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	695b      	ldr	r3, [r3, #20]
 8004e44:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	431a      	orrs	r2, r3
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	615a      	str	r2, [r3, #20]
}
 8004e50:	bf00      	nop
 8004e52:	370c      	adds	r7, #12
 8004e54:	46bd      	mov	sp, r7
 8004e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5a:	4770      	bx	lr

08004e5c <LL_USART_SetBaudRate>:
{
 8004e5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e60:	b0c0      	sub	sp, #256	; 0x100
 8004e62:	af00      	add	r7, sp, #0
 8004e64:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004e68:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 8004e6c:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8004e70:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8004e74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e7c:	f040 810c 	bne.w	8005098 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8004e80:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004e84:	2200      	movs	r2, #0
 8004e86:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004e8a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004e8e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004e92:	4622      	mov	r2, r4
 8004e94:	462b      	mov	r3, r5
 8004e96:	1891      	adds	r1, r2, r2
 8004e98:	6639      	str	r1, [r7, #96]	; 0x60
 8004e9a:	415b      	adcs	r3, r3
 8004e9c:	667b      	str	r3, [r7, #100]	; 0x64
 8004e9e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8004ea2:	4621      	mov	r1, r4
 8004ea4:	eb12 0801 	adds.w	r8, r2, r1
 8004ea8:	4629      	mov	r1, r5
 8004eaa:	eb43 0901 	adc.w	r9, r3, r1
 8004eae:	f04f 0200 	mov.w	r2, #0
 8004eb2:	f04f 0300 	mov.w	r3, #0
 8004eb6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004eba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ebe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ec2:	4690      	mov	r8, r2
 8004ec4:	4699      	mov	r9, r3
 8004ec6:	4623      	mov	r3, r4
 8004ec8:	eb18 0303 	adds.w	r3, r8, r3
 8004ecc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004ed0:	462b      	mov	r3, r5
 8004ed2:	eb49 0303 	adc.w	r3, r9, r3
 8004ed6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004eda:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004ede:	2200      	movs	r2, #0
 8004ee0:	469a      	mov	sl, r3
 8004ee2:	4693      	mov	fp, r2
 8004ee4:	eb1a 030a 	adds.w	r3, sl, sl
 8004ee8:	65bb      	str	r3, [r7, #88]	; 0x58
 8004eea:	eb4b 030b 	adc.w	r3, fp, fp
 8004eee:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ef0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004ef4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004ef8:	f7fb fe56 	bl	8000ba8 <__aeabi_uldivmod>
 8004efc:	4602      	mov	r2, r0
 8004efe:	460b      	mov	r3, r1
 8004f00:	4b64      	ldr	r3, [pc, #400]	; (8005094 <LL_USART_SetBaudRate+0x238>)
 8004f02:	fba3 2302 	umull	r2, r3, r3, r2
 8004f06:	095b      	lsrs	r3, r3, #5
 8004f08:	b29b      	uxth	r3, r3
 8004f0a:	011b      	lsls	r3, r3, #4
 8004f0c:	b29c      	uxth	r4, r3
 8004f0e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004f12:	2200      	movs	r2, #0
 8004f14:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004f18:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004f1c:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 8004f20:	4642      	mov	r2, r8
 8004f22:	464b      	mov	r3, r9
 8004f24:	1891      	adds	r1, r2, r2
 8004f26:	6539      	str	r1, [r7, #80]	; 0x50
 8004f28:	415b      	adcs	r3, r3
 8004f2a:	657b      	str	r3, [r7, #84]	; 0x54
 8004f2c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004f30:	4641      	mov	r1, r8
 8004f32:	1851      	adds	r1, r2, r1
 8004f34:	64b9      	str	r1, [r7, #72]	; 0x48
 8004f36:	4649      	mov	r1, r9
 8004f38:	414b      	adcs	r3, r1
 8004f3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f3c:	f04f 0200 	mov.w	r2, #0
 8004f40:	f04f 0300 	mov.w	r3, #0
 8004f44:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	; 0x48
 8004f48:	4659      	mov	r1, fp
 8004f4a:	00cb      	lsls	r3, r1, #3
 8004f4c:	4651      	mov	r1, sl
 8004f4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f52:	4651      	mov	r1, sl
 8004f54:	00ca      	lsls	r2, r1, #3
 8004f56:	4610      	mov	r0, r2
 8004f58:	4619      	mov	r1, r3
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	4642      	mov	r2, r8
 8004f5e:	189b      	adds	r3, r3, r2
 8004f60:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004f64:	464b      	mov	r3, r9
 8004f66:	460a      	mov	r2, r1
 8004f68:	eb42 0303 	adc.w	r3, r2, r3
 8004f6c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004f70:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004f74:	2200      	movs	r2, #0
 8004f76:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004f7a:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8004f7e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8004f82:	460b      	mov	r3, r1
 8004f84:	18db      	adds	r3, r3, r3
 8004f86:	643b      	str	r3, [r7, #64]	; 0x40
 8004f88:	4613      	mov	r3, r2
 8004f8a:	eb42 0303 	adc.w	r3, r2, r3
 8004f8e:	647b      	str	r3, [r7, #68]	; 0x44
 8004f90:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004f94:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8004f98:	f7fb fe06 	bl	8000ba8 <__aeabi_uldivmod>
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	460b      	mov	r3, r1
 8004fa0:	4611      	mov	r1, r2
 8004fa2:	4b3c      	ldr	r3, [pc, #240]	; (8005094 <LL_USART_SetBaudRate+0x238>)
 8004fa4:	fba3 2301 	umull	r2, r3, r3, r1
 8004fa8:	095b      	lsrs	r3, r3, #5
 8004faa:	2264      	movs	r2, #100	; 0x64
 8004fac:	fb02 f303 	mul.w	r3, r2, r3
 8004fb0:	1acb      	subs	r3, r1, r3
 8004fb2:	00db      	lsls	r3, r3, #3
 8004fb4:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004fb8:	4b36      	ldr	r3, [pc, #216]	; (8005094 <LL_USART_SetBaudRate+0x238>)
 8004fba:	fba3 2302 	umull	r2, r3, r3, r2
 8004fbe:	095b      	lsrs	r3, r3, #5
 8004fc0:	b29b      	uxth	r3, r3
 8004fc2:	005b      	lsls	r3, r3, #1
 8004fc4:	b29b      	uxth	r3, r3
 8004fc6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004fca:	b29b      	uxth	r3, r3
 8004fcc:	4423      	add	r3, r4
 8004fce:	b29c      	uxth	r4, r3
 8004fd0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004fda:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004fde:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 8004fe2:	4642      	mov	r2, r8
 8004fe4:	464b      	mov	r3, r9
 8004fe6:	1891      	adds	r1, r2, r2
 8004fe8:	63b9      	str	r1, [r7, #56]	; 0x38
 8004fea:	415b      	adcs	r3, r3
 8004fec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fee:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004ff2:	4641      	mov	r1, r8
 8004ff4:	1851      	adds	r1, r2, r1
 8004ff6:	6339      	str	r1, [r7, #48]	; 0x30
 8004ff8:	4649      	mov	r1, r9
 8004ffa:	414b      	adcs	r3, r1
 8004ffc:	637b      	str	r3, [r7, #52]	; 0x34
 8004ffe:	f04f 0200 	mov.w	r2, #0
 8005002:	f04f 0300 	mov.w	r3, #0
 8005006:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800500a:	4659      	mov	r1, fp
 800500c:	00cb      	lsls	r3, r1, #3
 800500e:	4651      	mov	r1, sl
 8005010:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005014:	4651      	mov	r1, sl
 8005016:	00ca      	lsls	r2, r1, #3
 8005018:	4610      	mov	r0, r2
 800501a:	4619      	mov	r1, r3
 800501c:	4603      	mov	r3, r0
 800501e:	4642      	mov	r2, r8
 8005020:	189b      	adds	r3, r3, r2
 8005022:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005026:	464b      	mov	r3, r9
 8005028:	460a      	mov	r2, r1
 800502a:	eb42 0303 	adc.w	r3, r2, r3
 800502e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005032:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005036:	2200      	movs	r2, #0
 8005038:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800503c:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8005040:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8005044:	460b      	mov	r3, r1
 8005046:	18db      	adds	r3, r3, r3
 8005048:	62bb      	str	r3, [r7, #40]	; 0x28
 800504a:	4613      	mov	r3, r2
 800504c:	eb42 0303 	adc.w	r3, r2, r3
 8005050:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005052:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005056:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800505a:	f7fb fda5 	bl	8000ba8 <__aeabi_uldivmod>
 800505e:	4602      	mov	r2, r0
 8005060:	460b      	mov	r3, r1
 8005062:	4b0c      	ldr	r3, [pc, #48]	; (8005094 <LL_USART_SetBaudRate+0x238>)
 8005064:	fba3 1302 	umull	r1, r3, r3, r2
 8005068:	095b      	lsrs	r3, r3, #5
 800506a:	2164      	movs	r1, #100	; 0x64
 800506c:	fb01 f303 	mul.w	r3, r1, r3
 8005070:	1ad3      	subs	r3, r2, r3
 8005072:	00db      	lsls	r3, r3, #3
 8005074:	3332      	adds	r3, #50	; 0x32
 8005076:	4a07      	ldr	r2, [pc, #28]	; (8005094 <LL_USART_SetBaudRate+0x238>)
 8005078:	fba2 2303 	umull	r2, r3, r2, r3
 800507c:	095b      	lsrs	r3, r3, #5
 800507e:	b29b      	uxth	r3, r3
 8005080:	f003 0307 	and.w	r3, r3, #7
 8005084:	b29b      	uxth	r3, r3
 8005086:	4423      	add	r3, r4
 8005088:	b29b      	uxth	r3, r3
 800508a:	461a      	mov	r2, r3
 800508c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005090:	609a      	str	r2, [r3, #8]
}
 8005092:	e107      	b.n	80052a4 <LL_USART_SetBaudRate+0x448>
 8005094:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8005098:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800509c:	2200      	movs	r2, #0
 800509e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80050a2:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80050a6:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 80050aa:	4642      	mov	r2, r8
 80050ac:	464b      	mov	r3, r9
 80050ae:	1891      	adds	r1, r2, r2
 80050b0:	6239      	str	r1, [r7, #32]
 80050b2:	415b      	adcs	r3, r3
 80050b4:	627b      	str	r3, [r7, #36]	; 0x24
 80050b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80050ba:	4641      	mov	r1, r8
 80050bc:	1854      	adds	r4, r2, r1
 80050be:	4649      	mov	r1, r9
 80050c0:	eb43 0501 	adc.w	r5, r3, r1
 80050c4:	f04f 0200 	mov.w	r2, #0
 80050c8:	f04f 0300 	mov.w	r3, #0
 80050cc:	00eb      	lsls	r3, r5, #3
 80050ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80050d2:	00e2      	lsls	r2, r4, #3
 80050d4:	4614      	mov	r4, r2
 80050d6:	461d      	mov	r5, r3
 80050d8:	4643      	mov	r3, r8
 80050da:	18e3      	adds	r3, r4, r3
 80050dc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80050e0:	464b      	mov	r3, r9
 80050e2:	eb45 0303 	adc.w	r3, r5, r3
 80050e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80050ea:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80050ee:	2200      	movs	r2, #0
 80050f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80050f4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80050f8:	f04f 0200 	mov.w	r2, #0
 80050fc:	f04f 0300 	mov.w	r3, #0
 8005100:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8005104:	4629      	mov	r1, r5
 8005106:	008b      	lsls	r3, r1, #2
 8005108:	4621      	mov	r1, r4
 800510a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800510e:	4621      	mov	r1, r4
 8005110:	008a      	lsls	r2, r1, #2
 8005112:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8005116:	f7fb fd47 	bl	8000ba8 <__aeabi_uldivmod>
 800511a:	4602      	mov	r2, r0
 800511c:	460b      	mov	r3, r1
 800511e:	4b64      	ldr	r3, [pc, #400]	; (80052b0 <LL_USART_SetBaudRate+0x454>)
 8005120:	fba3 2302 	umull	r2, r3, r3, r2
 8005124:	095b      	lsrs	r3, r3, #5
 8005126:	b29b      	uxth	r3, r3
 8005128:	011b      	lsls	r3, r3, #4
 800512a:	b29c      	uxth	r4, r3
 800512c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005130:	2200      	movs	r2, #0
 8005132:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005136:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800513a:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 800513e:	4642      	mov	r2, r8
 8005140:	464b      	mov	r3, r9
 8005142:	1891      	adds	r1, r2, r2
 8005144:	61b9      	str	r1, [r7, #24]
 8005146:	415b      	adcs	r3, r3
 8005148:	61fb      	str	r3, [r7, #28]
 800514a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800514e:	4641      	mov	r1, r8
 8005150:	1851      	adds	r1, r2, r1
 8005152:	6139      	str	r1, [r7, #16]
 8005154:	4649      	mov	r1, r9
 8005156:	414b      	adcs	r3, r1
 8005158:	617b      	str	r3, [r7, #20]
 800515a:	f04f 0200 	mov.w	r2, #0
 800515e:	f04f 0300 	mov.w	r3, #0
 8005162:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005166:	4659      	mov	r1, fp
 8005168:	00cb      	lsls	r3, r1, #3
 800516a:	4651      	mov	r1, sl
 800516c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005170:	4651      	mov	r1, sl
 8005172:	00ca      	lsls	r2, r1, #3
 8005174:	4610      	mov	r0, r2
 8005176:	4619      	mov	r1, r3
 8005178:	4603      	mov	r3, r0
 800517a:	4642      	mov	r2, r8
 800517c:	189b      	adds	r3, r3, r2
 800517e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005182:	464b      	mov	r3, r9
 8005184:	460a      	mov	r2, r1
 8005186:	eb42 0303 	adc.w	r3, r2, r3
 800518a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800518e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005192:	2200      	movs	r2, #0
 8005194:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005198:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800519c:	f04f 0200 	mov.w	r2, #0
 80051a0:	f04f 0300 	mov.w	r3, #0
 80051a4:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 80051a8:	4649      	mov	r1, r9
 80051aa:	008b      	lsls	r3, r1, #2
 80051ac:	4641      	mov	r1, r8
 80051ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80051b2:	4641      	mov	r1, r8
 80051b4:	008a      	lsls	r2, r1, #2
 80051b6:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 80051ba:	f7fb fcf5 	bl	8000ba8 <__aeabi_uldivmod>
 80051be:	4602      	mov	r2, r0
 80051c0:	460b      	mov	r3, r1
 80051c2:	4b3b      	ldr	r3, [pc, #236]	; (80052b0 <LL_USART_SetBaudRate+0x454>)
 80051c4:	fba3 1302 	umull	r1, r3, r3, r2
 80051c8:	095b      	lsrs	r3, r3, #5
 80051ca:	2164      	movs	r1, #100	; 0x64
 80051cc:	fb01 f303 	mul.w	r3, r1, r3
 80051d0:	1ad3      	subs	r3, r2, r3
 80051d2:	011b      	lsls	r3, r3, #4
 80051d4:	3332      	adds	r3, #50	; 0x32
 80051d6:	4a36      	ldr	r2, [pc, #216]	; (80052b0 <LL_USART_SetBaudRate+0x454>)
 80051d8:	fba2 2303 	umull	r2, r3, r2, r3
 80051dc:	095b      	lsrs	r3, r3, #5
 80051de:	b29b      	uxth	r3, r3
 80051e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80051e4:	b29b      	uxth	r3, r3
 80051e6:	4423      	add	r3, r4
 80051e8:	b29c      	uxth	r4, r3
 80051ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80051ee:	2200      	movs	r2, #0
 80051f0:	67bb      	str	r3, [r7, #120]	; 0x78
 80051f2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80051f4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80051f8:	4642      	mov	r2, r8
 80051fa:	464b      	mov	r3, r9
 80051fc:	1891      	adds	r1, r2, r2
 80051fe:	60b9      	str	r1, [r7, #8]
 8005200:	415b      	adcs	r3, r3
 8005202:	60fb      	str	r3, [r7, #12]
 8005204:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005208:	4641      	mov	r1, r8
 800520a:	1851      	adds	r1, r2, r1
 800520c:	6039      	str	r1, [r7, #0]
 800520e:	4649      	mov	r1, r9
 8005210:	414b      	adcs	r3, r1
 8005212:	607b      	str	r3, [r7, #4]
 8005214:	f04f 0200 	mov.w	r2, #0
 8005218:	f04f 0300 	mov.w	r3, #0
 800521c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005220:	4659      	mov	r1, fp
 8005222:	00cb      	lsls	r3, r1, #3
 8005224:	4651      	mov	r1, sl
 8005226:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800522a:	4651      	mov	r1, sl
 800522c:	00ca      	lsls	r2, r1, #3
 800522e:	4610      	mov	r0, r2
 8005230:	4619      	mov	r1, r3
 8005232:	4603      	mov	r3, r0
 8005234:	4642      	mov	r2, r8
 8005236:	189b      	adds	r3, r3, r2
 8005238:	673b      	str	r3, [r7, #112]	; 0x70
 800523a:	464b      	mov	r3, r9
 800523c:	460a      	mov	r2, r1
 800523e:	eb42 0303 	adc.w	r3, r2, r3
 8005242:	677b      	str	r3, [r7, #116]	; 0x74
 8005244:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005248:	2200      	movs	r2, #0
 800524a:	66bb      	str	r3, [r7, #104]	; 0x68
 800524c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800524e:	f04f 0200 	mov.w	r2, #0
 8005252:	f04f 0300 	mov.w	r3, #0
 8005256:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 800525a:	4649      	mov	r1, r9
 800525c:	008b      	lsls	r3, r1, #2
 800525e:	4641      	mov	r1, r8
 8005260:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005264:	4641      	mov	r1, r8
 8005266:	008a      	lsls	r2, r1, #2
 8005268:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800526c:	f7fb fc9c 	bl	8000ba8 <__aeabi_uldivmod>
 8005270:	4602      	mov	r2, r0
 8005272:	460b      	mov	r3, r1
 8005274:	4b0e      	ldr	r3, [pc, #56]	; (80052b0 <LL_USART_SetBaudRate+0x454>)
 8005276:	fba3 1302 	umull	r1, r3, r3, r2
 800527a:	095b      	lsrs	r3, r3, #5
 800527c:	2164      	movs	r1, #100	; 0x64
 800527e:	fb01 f303 	mul.w	r3, r1, r3
 8005282:	1ad3      	subs	r3, r2, r3
 8005284:	011b      	lsls	r3, r3, #4
 8005286:	3332      	adds	r3, #50	; 0x32
 8005288:	4a09      	ldr	r2, [pc, #36]	; (80052b0 <LL_USART_SetBaudRate+0x454>)
 800528a:	fba2 2303 	umull	r2, r3, r2, r3
 800528e:	095b      	lsrs	r3, r3, #5
 8005290:	b29b      	uxth	r3, r3
 8005292:	f003 030f 	and.w	r3, r3, #15
 8005296:	b29b      	uxth	r3, r3
 8005298:	4423      	add	r3, r4
 800529a:	b29b      	uxth	r3, r3
 800529c:	461a      	mov	r2, r3
 800529e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052a2:	609a      	str	r2, [r3, #8]
}
 80052a4:	bf00      	nop
 80052a6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80052aa:	46bd      	mov	sp, r7
 80052ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80052b0:	51eb851f 	.word	0x51eb851f

080052b4 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b088      	sub	sp, #32
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
 80052bc:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80052c2:	2300      	movs	r3, #0
 80052c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f7ff fd8e 	bl	8004de8 <LL_USART_IsEnabled>
 80052cc:	4603      	mov	r3, r0
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d15e      	bne.n	8005390 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	68db      	ldr	r3, [r3, #12]
 80052d6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80052da:	f023 030c 	bic.w	r3, r3, #12
 80052de:	683a      	ldr	r2, [r7, #0]
 80052e0:	6851      	ldr	r1, [r2, #4]
 80052e2:	683a      	ldr	r2, [r7, #0]
 80052e4:	68d2      	ldr	r2, [r2, #12]
 80052e6:	4311      	orrs	r1, r2
 80052e8:	683a      	ldr	r2, [r7, #0]
 80052ea:	6912      	ldr	r2, [r2, #16]
 80052ec:	4311      	orrs	r1, r2
 80052ee:	683a      	ldr	r2, [r7, #0]
 80052f0:	6992      	ldr	r2, [r2, #24]
 80052f2:	430a      	orrs	r2, r1
 80052f4:	431a      	orrs	r2, r3
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	4619      	mov	r1, r3
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f7ff fd85 	bl	8004e10 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	695b      	ldr	r3, [r3, #20]
 800530a:	4619      	mov	r1, r3
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f7ff fd92 	bl	8004e36 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8005312:	f107 0308 	add.w	r3, r7, #8
 8005316:	4618      	mov	r0, r3
 8005318:	f7ff f9aa 	bl	8004670 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	4a1f      	ldr	r2, [pc, #124]	; (800539c <LL_USART_Init+0xe8>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d102      	bne.n	800532a <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	61bb      	str	r3, [r7, #24]
 8005328:	e021      	b.n	800536e <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	4a1c      	ldr	r2, [pc, #112]	; (80053a0 <LL_USART_Init+0xec>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d102      	bne.n	8005338 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	61bb      	str	r3, [r7, #24]
 8005336:	e01a      	b.n	800536e <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	4a1a      	ldr	r2, [pc, #104]	; (80053a4 <LL_USART_Init+0xf0>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d102      	bne.n	8005346 <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	61bb      	str	r3, [r7, #24]
 8005344:	e013      	b.n	800536e <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	4a17      	ldr	r2, [pc, #92]	; (80053a8 <LL_USART_Init+0xf4>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d102      	bne.n	8005354 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	61bb      	str	r3, [r7, #24]
 8005352:	e00c      	b.n	800536e <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	4a15      	ldr	r2, [pc, #84]	; (80053ac <LL_USART_Init+0xf8>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d102      	bne.n	8005362 <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	61bb      	str	r3, [r7, #24]
 8005360:	e005      	b.n	800536e <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	4a12      	ldr	r2, [pc, #72]	; (80053b0 <LL_USART_Init+0xfc>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d101      	bne.n	800536e <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800536e:	69bb      	ldr	r3, [r7, #24]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d00d      	beq.n	8005390 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d009      	beq.n	8005390 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 800537c:	2300      	movs	r3, #0
 800537e:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	699a      	ldr	r2, [r3, #24]
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	69b9      	ldr	r1, [r7, #24]
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f7ff fd66 	bl	8004e5c <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8005390:	7ffb      	ldrb	r3, [r7, #31]
}
 8005392:	4618      	mov	r0, r3
 8005394:	3720      	adds	r7, #32
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}
 800539a:	bf00      	nop
 800539c:	40011000 	.word	0x40011000
 80053a0:	40004400 	.word	0x40004400
 80053a4:	40004800 	.word	0x40004800
 80053a8:	40011400 	.word	0x40011400
 80053ac:	40004c00 	.word	0x40004c00
 80053b0:	40005000 	.word	0x40005000

080053b4 <__errno>:
 80053b4:	4b01      	ldr	r3, [pc, #4]	; (80053bc <__errno+0x8>)
 80053b6:	6818      	ldr	r0, [r3, #0]
 80053b8:	4770      	bx	lr
 80053ba:	bf00      	nop
 80053bc:	2000000c 	.word	0x2000000c

080053c0 <__libc_init_array>:
 80053c0:	b570      	push	{r4, r5, r6, lr}
 80053c2:	4d0d      	ldr	r5, [pc, #52]	; (80053f8 <__libc_init_array+0x38>)
 80053c4:	4c0d      	ldr	r4, [pc, #52]	; (80053fc <__libc_init_array+0x3c>)
 80053c6:	1b64      	subs	r4, r4, r5
 80053c8:	10a4      	asrs	r4, r4, #2
 80053ca:	2600      	movs	r6, #0
 80053cc:	42a6      	cmp	r6, r4
 80053ce:	d109      	bne.n	80053e4 <__libc_init_array+0x24>
 80053d0:	4d0b      	ldr	r5, [pc, #44]	; (8005400 <__libc_init_array+0x40>)
 80053d2:	4c0c      	ldr	r4, [pc, #48]	; (8005404 <__libc_init_array+0x44>)
 80053d4:	f002 fd38 	bl	8007e48 <_init>
 80053d8:	1b64      	subs	r4, r4, r5
 80053da:	10a4      	asrs	r4, r4, #2
 80053dc:	2600      	movs	r6, #0
 80053de:	42a6      	cmp	r6, r4
 80053e0:	d105      	bne.n	80053ee <__libc_init_array+0x2e>
 80053e2:	bd70      	pop	{r4, r5, r6, pc}
 80053e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80053e8:	4798      	blx	r3
 80053ea:	3601      	adds	r6, #1
 80053ec:	e7ee      	b.n	80053cc <__libc_init_array+0xc>
 80053ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80053f2:	4798      	blx	r3
 80053f4:	3601      	adds	r6, #1
 80053f6:	e7f2      	b.n	80053de <__libc_init_array+0x1e>
 80053f8:	080082bc 	.word	0x080082bc
 80053fc:	080082bc 	.word	0x080082bc
 8005400:	080082bc 	.word	0x080082bc
 8005404:	080082c0 	.word	0x080082c0

08005408 <memset>:
 8005408:	4402      	add	r2, r0
 800540a:	4603      	mov	r3, r0
 800540c:	4293      	cmp	r3, r2
 800540e:	d100      	bne.n	8005412 <memset+0xa>
 8005410:	4770      	bx	lr
 8005412:	f803 1b01 	strb.w	r1, [r3], #1
 8005416:	e7f9      	b.n	800540c <memset+0x4>

08005418 <__cvt>:
 8005418:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800541c:	ec55 4b10 	vmov	r4, r5, d0
 8005420:	2d00      	cmp	r5, #0
 8005422:	460e      	mov	r6, r1
 8005424:	4619      	mov	r1, r3
 8005426:	462b      	mov	r3, r5
 8005428:	bfbb      	ittet	lt
 800542a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800542e:	461d      	movlt	r5, r3
 8005430:	2300      	movge	r3, #0
 8005432:	232d      	movlt	r3, #45	; 0x2d
 8005434:	700b      	strb	r3, [r1, #0]
 8005436:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005438:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800543c:	4691      	mov	r9, r2
 800543e:	f023 0820 	bic.w	r8, r3, #32
 8005442:	bfbc      	itt	lt
 8005444:	4622      	movlt	r2, r4
 8005446:	4614      	movlt	r4, r2
 8005448:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800544c:	d005      	beq.n	800545a <__cvt+0x42>
 800544e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005452:	d100      	bne.n	8005456 <__cvt+0x3e>
 8005454:	3601      	adds	r6, #1
 8005456:	2102      	movs	r1, #2
 8005458:	e000      	b.n	800545c <__cvt+0x44>
 800545a:	2103      	movs	r1, #3
 800545c:	ab03      	add	r3, sp, #12
 800545e:	9301      	str	r3, [sp, #4]
 8005460:	ab02      	add	r3, sp, #8
 8005462:	9300      	str	r3, [sp, #0]
 8005464:	ec45 4b10 	vmov	d0, r4, r5
 8005468:	4653      	mov	r3, sl
 800546a:	4632      	mov	r2, r6
 800546c:	f000 fccc 	bl	8005e08 <_dtoa_r>
 8005470:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005474:	4607      	mov	r7, r0
 8005476:	d102      	bne.n	800547e <__cvt+0x66>
 8005478:	f019 0f01 	tst.w	r9, #1
 800547c:	d022      	beq.n	80054c4 <__cvt+0xac>
 800547e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005482:	eb07 0906 	add.w	r9, r7, r6
 8005486:	d110      	bne.n	80054aa <__cvt+0x92>
 8005488:	783b      	ldrb	r3, [r7, #0]
 800548a:	2b30      	cmp	r3, #48	; 0x30
 800548c:	d10a      	bne.n	80054a4 <__cvt+0x8c>
 800548e:	2200      	movs	r2, #0
 8005490:	2300      	movs	r3, #0
 8005492:	4620      	mov	r0, r4
 8005494:	4629      	mov	r1, r5
 8005496:	f7fb fb17 	bl	8000ac8 <__aeabi_dcmpeq>
 800549a:	b918      	cbnz	r0, 80054a4 <__cvt+0x8c>
 800549c:	f1c6 0601 	rsb	r6, r6, #1
 80054a0:	f8ca 6000 	str.w	r6, [sl]
 80054a4:	f8da 3000 	ldr.w	r3, [sl]
 80054a8:	4499      	add	r9, r3
 80054aa:	2200      	movs	r2, #0
 80054ac:	2300      	movs	r3, #0
 80054ae:	4620      	mov	r0, r4
 80054b0:	4629      	mov	r1, r5
 80054b2:	f7fb fb09 	bl	8000ac8 <__aeabi_dcmpeq>
 80054b6:	b108      	cbz	r0, 80054bc <__cvt+0xa4>
 80054b8:	f8cd 900c 	str.w	r9, [sp, #12]
 80054bc:	2230      	movs	r2, #48	; 0x30
 80054be:	9b03      	ldr	r3, [sp, #12]
 80054c0:	454b      	cmp	r3, r9
 80054c2:	d307      	bcc.n	80054d4 <__cvt+0xbc>
 80054c4:	9b03      	ldr	r3, [sp, #12]
 80054c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80054c8:	1bdb      	subs	r3, r3, r7
 80054ca:	4638      	mov	r0, r7
 80054cc:	6013      	str	r3, [r2, #0]
 80054ce:	b004      	add	sp, #16
 80054d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054d4:	1c59      	adds	r1, r3, #1
 80054d6:	9103      	str	r1, [sp, #12]
 80054d8:	701a      	strb	r2, [r3, #0]
 80054da:	e7f0      	b.n	80054be <__cvt+0xa6>

080054dc <__exponent>:
 80054dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80054de:	4603      	mov	r3, r0
 80054e0:	2900      	cmp	r1, #0
 80054e2:	bfb8      	it	lt
 80054e4:	4249      	neglt	r1, r1
 80054e6:	f803 2b02 	strb.w	r2, [r3], #2
 80054ea:	bfb4      	ite	lt
 80054ec:	222d      	movlt	r2, #45	; 0x2d
 80054ee:	222b      	movge	r2, #43	; 0x2b
 80054f0:	2909      	cmp	r1, #9
 80054f2:	7042      	strb	r2, [r0, #1]
 80054f4:	dd2a      	ble.n	800554c <__exponent+0x70>
 80054f6:	f10d 0407 	add.w	r4, sp, #7
 80054fa:	46a4      	mov	ip, r4
 80054fc:	270a      	movs	r7, #10
 80054fe:	46a6      	mov	lr, r4
 8005500:	460a      	mov	r2, r1
 8005502:	fb91 f6f7 	sdiv	r6, r1, r7
 8005506:	fb07 1516 	mls	r5, r7, r6, r1
 800550a:	3530      	adds	r5, #48	; 0x30
 800550c:	2a63      	cmp	r2, #99	; 0x63
 800550e:	f104 34ff 	add.w	r4, r4, #4294967295
 8005512:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005516:	4631      	mov	r1, r6
 8005518:	dcf1      	bgt.n	80054fe <__exponent+0x22>
 800551a:	3130      	adds	r1, #48	; 0x30
 800551c:	f1ae 0502 	sub.w	r5, lr, #2
 8005520:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005524:	1c44      	adds	r4, r0, #1
 8005526:	4629      	mov	r1, r5
 8005528:	4561      	cmp	r1, ip
 800552a:	d30a      	bcc.n	8005542 <__exponent+0x66>
 800552c:	f10d 0209 	add.w	r2, sp, #9
 8005530:	eba2 020e 	sub.w	r2, r2, lr
 8005534:	4565      	cmp	r5, ip
 8005536:	bf88      	it	hi
 8005538:	2200      	movhi	r2, #0
 800553a:	4413      	add	r3, r2
 800553c:	1a18      	subs	r0, r3, r0
 800553e:	b003      	add	sp, #12
 8005540:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005542:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005546:	f804 2f01 	strb.w	r2, [r4, #1]!
 800554a:	e7ed      	b.n	8005528 <__exponent+0x4c>
 800554c:	2330      	movs	r3, #48	; 0x30
 800554e:	3130      	adds	r1, #48	; 0x30
 8005550:	7083      	strb	r3, [r0, #2]
 8005552:	70c1      	strb	r1, [r0, #3]
 8005554:	1d03      	adds	r3, r0, #4
 8005556:	e7f1      	b.n	800553c <__exponent+0x60>

08005558 <_printf_float>:
 8005558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800555c:	ed2d 8b02 	vpush	{d8}
 8005560:	b08d      	sub	sp, #52	; 0x34
 8005562:	460c      	mov	r4, r1
 8005564:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005568:	4616      	mov	r6, r2
 800556a:	461f      	mov	r7, r3
 800556c:	4605      	mov	r5, r0
 800556e:	f001 fa39 	bl	80069e4 <_localeconv_r>
 8005572:	f8d0 a000 	ldr.w	sl, [r0]
 8005576:	4650      	mov	r0, sl
 8005578:	f7fa fe2a 	bl	80001d0 <strlen>
 800557c:	2300      	movs	r3, #0
 800557e:	930a      	str	r3, [sp, #40]	; 0x28
 8005580:	6823      	ldr	r3, [r4, #0]
 8005582:	9305      	str	r3, [sp, #20]
 8005584:	f8d8 3000 	ldr.w	r3, [r8]
 8005588:	f894 b018 	ldrb.w	fp, [r4, #24]
 800558c:	3307      	adds	r3, #7
 800558e:	f023 0307 	bic.w	r3, r3, #7
 8005592:	f103 0208 	add.w	r2, r3, #8
 8005596:	f8c8 2000 	str.w	r2, [r8]
 800559a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800559e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80055a2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80055a6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80055aa:	9307      	str	r3, [sp, #28]
 80055ac:	f8cd 8018 	str.w	r8, [sp, #24]
 80055b0:	ee08 0a10 	vmov	s16, r0
 80055b4:	4b9f      	ldr	r3, [pc, #636]	; (8005834 <_printf_float+0x2dc>)
 80055b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80055ba:	f04f 32ff 	mov.w	r2, #4294967295
 80055be:	f7fb fab5 	bl	8000b2c <__aeabi_dcmpun>
 80055c2:	bb88      	cbnz	r0, 8005628 <_printf_float+0xd0>
 80055c4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80055c8:	4b9a      	ldr	r3, [pc, #616]	; (8005834 <_printf_float+0x2dc>)
 80055ca:	f04f 32ff 	mov.w	r2, #4294967295
 80055ce:	f7fb fa8f 	bl	8000af0 <__aeabi_dcmple>
 80055d2:	bb48      	cbnz	r0, 8005628 <_printf_float+0xd0>
 80055d4:	2200      	movs	r2, #0
 80055d6:	2300      	movs	r3, #0
 80055d8:	4640      	mov	r0, r8
 80055da:	4649      	mov	r1, r9
 80055dc:	f7fb fa7e 	bl	8000adc <__aeabi_dcmplt>
 80055e0:	b110      	cbz	r0, 80055e8 <_printf_float+0x90>
 80055e2:	232d      	movs	r3, #45	; 0x2d
 80055e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055e8:	4b93      	ldr	r3, [pc, #588]	; (8005838 <_printf_float+0x2e0>)
 80055ea:	4894      	ldr	r0, [pc, #592]	; (800583c <_printf_float+0x2e4>)
 80055ec:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80055f0:	bf94      	ite	ls
 80055f2:	4698      	movls	r8, r3
 80055f4:	4680      	movhi	r8, r0
 80055f6:	2303      	movs	r3, #3
 80055f8:	6123      	str	r3, [r4, #16]
 80055fa:	9b05      	ldr	r3, [sp, #20]
 80055fc:	f023 0204 	bic.w	r2, r3, #4
 8005600:	6022      	str	r2, [r4, #0]
 8005602:	f04f 0900 	mov.w	r9, #0
 8005606:	9700      	str	r7, [sp, #0]
 8005608:	4633      	mov	r3, r6
 800560a:	aa0b      	add	r2, sp, #44	; 0x2c
 800560c:	4621      	mov	r1, r4
 800560e:	4628      	mov	r0, r5
 8005610:	f000 f9d8 	bl	80059c4 <_printf_common>
 8005614:	3001      	adds	r0, #1
 8005616:	f040 8090 	bne.w	800573a <_printf_float+0x1e2>
 800561a:	f04f 30ff 	mov.w	r0, #4294967295
 800561e:	b00d      	add	sp, #52	; 0x34
 8005620:	ecbd 8b02 	vpop	{d8}
 8005624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005628:	4642      	mov	r2, r8
 800562a:	464b      	mov	r3, r9
 800562c:	4640      	mov	r0, r8
 800562e:	4649      	mov	r1, r9
 8005630:	f7fb fa7c 	bl	8000b2c <__aeabi_dcmpun>
 8005634:	b140      	cbz	r0, 8005648 <_printf_float+0xf0>
 8005636:	464b      	mov	r3, r9
 8005638:	2b00      	cmp	r3, #0
 800563a:	bfbc      	itt	lt
 800563c:	232d      	movlt	r3, #45	; 0x2d
 800563e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005642:	487f      	ldr	r0, [pc, #508]	; (8005840 <_printf_float+0x2e8>)
 8005644:	4b7f      	ldr	r3, [pc, #508]	; (8005844 <_printf_float+0x2ec>)
 8005646:	e7d1      	b.n	80055ec <_printf_float+0x94>
 8005648:	6863      	ldr	r3, [r4, #4]
 800564a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800564e:	9206      	str	r2, [sp, #24]
 8005650:	1c5a      	adds	r2, r3, #1
 8005652:	d13f      	bne.n	80056d4 <_printf_float+0x17c>
 8005654:	2306      	movs	r3, #6
 8005656:	6063      	str	r3, [r4, #4]
 8005658:	9b05      	ldr	r3, [sp, #20]
 800565a:	6861      	ldr	r1, [r4, #4]
 800565c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005660:	2300      	movs	r3, #0
 8005662:	9303      	str	r3, [sp, #12]
 8005664:	ab0a      	add	r3, sp, #40	; 0x28
 8005666:	e9cd b301 	strd	fp, r3, [sp, #4]
 800566a:	ab09      	add	r3, sp, #36	; 0x24
 800566c:	ec49 8b10 	vmov	d0, r8, r9
 8005670:	9300      	str	r3, [sp, #0]
 8005672:	6022      	str	r2, [r4, #0]
 8005674:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005678:	4628      	mov	r0, r5
 800567a:	f7ff fecd 	bl	8005418 <__cvt>
 800567e:	9b06      	ldr	r3, [sp, #24]
 8005680:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005682:	2b47      	cmp	r3, #71	; 0x47
 8005684:	4680      	mov	r8, r0
 8005686:	d108      	bne.n	800569a <_printf_float+0x142>
 8005688:	1cc8      	adds	r0, r1, #3
 800568a:	db02      	blt.n	8005692 <_printf_float+0x13a>
 800568c:	6863      	ldr	r3, [r4, #4]
 800568e:	4299      	cmp	r1, r3
 8005690:	dd41      	ble.n	8005716 <_printf_float+0x1be>
 8005692:	f1ab 0b02 	sub.w	fp, fp, #2
 8005696:	fa5f fb8b 	uxtb.w	fp, fp
 800569a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800569e:	d820      	bhi.n	80056e2 <_printf_float+0x18a>
 80056a0:	3901      	subs	r1, #1
 80056a2:	465a      	mov	r2, fp
 80056a4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80056a8:	9109      	str	r1, [sp, #36]	; 0x24
 80056aa:	f7ff ff17 	bl	80054dc <__exponent>
 80056ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80056b0:	1813      	adds	r3, r2, r0
 80056b2:	2a01      	cmp	r2, #1
 80056b4:	4681      	mov	r9, r0
 80056b6:	6123      	str	r3, [r4, #16]
 80056b8:	dc02      	bgt.n	80056c0 <_printf_float+0x168>
 80056ba:	6822      	ldr	r2, [r4, #0]
 80056bc:	07d2      	lsls	r2, r2, #31
 80056be:	d501      	bpl.n	80056c4 <_printf_float+0x16c>
 80056c0:	3301      	adds	r3, #1
 80056c2:	6123      	str	r3, [r4, #16]
 80056c4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d09c      	beq.n	8005606 <_printf_float+0xae>
 80056cc:	232d      	movs	r3, #45	; 0x2d
 80056ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056d2:	e798      	b.n	8005606 <_printf_float+0xae>
 80056d4:	9a06      	ldr	r2, [sp, #24]
 80056d6:	2a47      	cmp	r2, #71	; 0x47
 80056d8:	d1be      	bne.n	8005658 <_printf_float+0x100>
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d1bc      	bne.n	8005658 <_printf_float+0x100>
 80056de:	2301      	movs	r3, #1
 80056e0:	e7b9      	b.n	8005656 <_printf_float+0xfe>
 80056e2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80056e6:	d118      	bne.n	800571a <_printf_float+0x1c2>
 80056e8:	2900      	cmp	r1, #0
 80056ea:	6863      	ldr	r3, [r4, #4]
 80056ec:	dd0b      	ble.n	8005706 <_printf_float+0x1ae>
 80056ee:	6121      	str	r1, [r4, #16]
 80056f0:	b913      	cbnz	r3, 80056f8 <_printf_float+0x1a0>
 80056f2:	6822      	ldr	r2, [r4, #0]
 80056f4:	07d0      	lsls	r0, r2, #31
 80056f6:	d502      	bpl.n	80056fe <_printf_float+0x1a6>
 80056f8:	3301      	adds	r3, #1
 80056fa:	440b      	add	r3, r1
 80056fc:	6123      	str	r3, [r4, #16]
 80056fe:	65a1      	str	r1, [r4, #88]	; 0x58
 8005700:	f04f 0900 	mov.w	r9, #0
 8005704:	e7de      	b.n	80056c4 <_printf_float+0x16c>
 8005706:	b913      	cbnz	r3, 800570e <_printf_float+0x1b6>
 8005708:	6822      	ldr	r2, [r4, #0]
 800570a:	07d2      	lsls	r2, r2, #31
 800570c:	d501      	bpl.n	8005712 <_printf_float+0x1ba>
 800570e:	3302      	adds	r3, #2
 8005710:	e7f4      	b.n	80056fc <_printf_float+0x1a4>
 8005712:	2301      	movs	r3, #1
 8005714:	e7f2      	b.n	80056fc <_printf_float+0x1a4>
 8005716:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800571a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800571c:	4299      	cmp	r1, r3
 800571e:	db05      	blt.n	800572c <_printf_float+0x1d4>
 8005720:	6823      	ldr	r3, [r4, #0]
 8005722:	6121      	str	r1, [r4, #16]
 8005724:	07d8      	lsls	r0, r3, #31
 8005726:	d5ea      	bpl.n	80056fe <_printf_float+0x1a6>
 8005728:	1c4b      	adds	r3, r1, #1
 800572a:	e7e7      	b.n	80056fc <_printf_float+0x1a4>
 800572c:	2900      	cmp	r1, #0
 800572e:	bfd4      	ite	le
 8005730:	f1c1 0202 	rsble	r2, r1, #2
 8005734:	2201      	movgt	r2, #1
 8005736:	4413      	add	r3, r2
 8005738:	e7e0      	b.n	80056fc <_printf_float+0x1a4>
 800573a:	6823      	ldr	r3, [r4, #0]
 800573c:	055a      	lsls	r2, r3, #21
 800573e:	d407      	bmi.n	8005750 <_printf_float+0x1f8>
 8005740:	6923      	ldr	r3, [r4, #16]
 8005742:	4642      	mov	r2, r8
 8005744:	4631      	mov	r1, r6
 8005746:	4628      	mov	r0, r5
 8005748:	47b8      	blx	r7
 800574a:	3001      	adds	r0, #1
 800574c:	d12c      	bne.n	80057a8 <_printf_float+0x250>
 800574e:	e764      	b.n	800561a <_printf_float+0xc2>
 8005750:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005754:	f240 80e0 	bls.w	8005918 <_printf_float+0x3c0>
 8005758:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800575c:	2200      	movs	r2, #0
 800575e:	2300      	movs	r3, #0
 8005760:	f7fb f9b2 	bl	8000ac8 <__aeabi_dcmpeq>
 8005764:	2800      	cmp	r0, #0
 8005766:	d034      	beq.n	80057d2 <_printf_float+0x27a>
 8005768:	4a37      	ldr	r2, [pc, #220]	; (8005848 <_printf_float+0x2f0>)
 800576a:	2301      	movs	r3, #1
 800576c:	4631      	mov	r1, r6
 800576e:	4628      	mov	r0, r5
 8005770:	47b8      	blx	r7
 8005772:	3001      	adds	r0, #1
 8005774:	f43f af51 	beq.w	800561a <_printf_float+0xc2>
 8005778:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800577c:	429a      	cmp	r2, r3
 800577e:	db02      	blt.n	8005786 <_printf_float+0x22e>
 8005780:	6823      	ldr	r3, [r4, #0]
 8005782:	07d8      	lsls	r0, r3, #31
 8005784:	d510      	bpl.n	80057a8 <_printf_float+0x250>
 8005786:	ee18 3a10 	vmov	r3, s16
 800578a:	4652      	mov	r2, sl
 800578c:	4631      	mov	r1, r6
 800578e:	4628      	mov	r0, r5
 8005790:	47b8      	blx	r7
 8005792:	3001      	adds	r0, #1
 8005794:	f43f af41 	beq.w	800561a <_printf_float+0xc2>
 8005798:	f04f 0800 	mov.w	r8, #0
 800579c:	f104 091a 	add.w	r9, r4, #26
 80057a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057a2:	3b01      	subs	r3, #1
 80057a4:	4543      	cmp	r3, r8
 80057a6:	dc09      	bgt.n	80057bc <_printf_float+0x264>
 80057a8:	6823      	ldr	r3, [r4, #0]
 80057aa:	079b      	lsls	r3, r3, #30
 80057ac:	f100 8105 	bmi.w	80059ba <_printf_float+0x462>
 80057b0:	68e0      	ldr	r0, [r4, #12]
 80057b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80057b4:	4298      	cmp	r0, r3
 80057b6:	bfb8      	it	lt
 80057b8:	4618      	movlt	r0, r3
 80057ba:	e730      	b.n	800561e <_printf_float+0xc6>
 80057bc:	2301      	movs	r3, #1
 80057be:	464a      	mov	r2, r9
 80057c0:	4631      	mov	r1, r6
 80057c2:	4628      	mov	r0, r5
 80057c4:	47b8      	blx	r7
 80057c6:	3001      	adds	r0, #1
 80057c8:	f43f af27 	beq.w	800561a <_printf_float+0xc2>
 80057cc:	f108 0801 	add.w	r8, r8, #1
 80057d0:	e7e6      	b.n	80057a0 <_printf_float+0x248>
 80057d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	dc39      	bgt.n	800584c <_printf_float+0x2f4>
 80057d8:	4a1b      	ldr	r2, [pc, #108]	; (8005848 <_printf_float+0x2f0>)
 80057da:	2301      	movs	r3, #1
 80057dc:	4631      	mov	r1, r6
 80057de:	4628      	mov	r0, r5
 80057e0:	47b8      	blx	r7
 80057e2:	3001      	adds	r0, #1
 80057e4:	f43f af19 	beq.w	800561a <_printf_float+0xc2>
 80057e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80057ec:	4313      	orrs	r3, r2
 80057ee:	d102      	bne.n	80057f6 <_printf_float+0x29e>
 80057f0:	6823      	ldr	r3, [r4, #0]
 80057f2:	07d9      	lsls	r1, r3, #31
 80057f4:	d5d8      	bpl.n	80057a8 <_printf_float+0x250>
 80057f6:	ee18 3a10 	vmov	r3, s16
 80057fa:	4652      	mov	r2, sl
 80057fc:	4631      	mov	r1, r6
 80057fe:	4628      	mov	r0, r5
 8005800:	47b8      	blx	r7
 8005802:	3001      	adds	r0, #1
 8005804:	f43f af09 	beq.w	800561a <_printf_float+0xc2>
 8005808:	f04f 0900 	mov.w	r9, #0
 800580c:	f104 0a1a 	add.w	sl, r4, #26
 8005810:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005812:	425b      	negs	r3, r3
 8005814:	454b      	cmp	r3, r9
 8005816:	dc01      	bgt.n	800581c <_printf_float+0x2c4>
 8005818:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800581a:	e792      	b.n	8005742 <_printf_float+0x1ea>
 800581c:	2301      	movs	r3, #1
 800581e:	4652      	mov	r2, sl
 8005820:	4631      	mov	r1, r6
 8005822:	4628      	mov	r0, r5
 8005824:	47b8      	blx	r7
 8005826:	3001      	adds	r0, #1
 8005828:	f43f aef7 	beq.w	800561a <_printf_float+0xc2>
 800582c:	f109 0901 	add.w	r9, r9, #1
 8005830:	e7ee      	b.n	8005810 <_printf_float+0x2b8>
 8005832:	bf00      	nop
 8005834:	7fefffff 	.word	0x7fefffff
 8005838:	08007ee0 	.word	0x08007ee0
 800583c:	08007ee4 	.word	0x08007ee4
 8005840:	08007eec 	.word	0x08007eec
 8005844:	08007ee8 	.word	0x08007ee8
 8005848:	08007ef0 	.word	0x08007ef0
 800584c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800584e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005850:	429a      	cmp	r2, r3
 8005852:	bfa8      	it	ge
 8005854:	461a      	movge	r2, r3
 8005856:	2a00      	cmp	r2, #0
 8005858:	4691      	mov	r9, r2
 800585a:	dc37      	bgt.n	80058cc <_printf_float+0x374>
 800585c:	f04f 0b00 	mov.w	fp, #0
 8005860:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005864:	f104 021a 	add.w	r2, r4, #26
 8005868:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800586a:	9305      	str	r3, [sp, #20]
 800586c:	eba3 0309 	sub.w	r3, r3, r9
 8005870:	455b      	cmp	r3, fp
 8005872:	dc33      	bgt.n	80058dc <_printf_float+0x384>
 8005874:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005878:	429a      	cmp	r2, r3
 800587a:	db3b      	blt.n	80058f4 <_printf_float+0x39c>
 800587c:	6823      	ldr	r3, [r4, #0]
 800587e:	07da      	lsls	r2, r3, #31
 8005880:	d438      	bmi.n	80058f4 <_printf_float+0x39c>
 8005882:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005884:	9a05      	ldr	r2, [sp, #20]
 8005886:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005888:	1a9a      	subs	r2, r3, r2
 800588a:	eba3 0901 	sub.w	r9, r3, r1
 800588e:	4591      	cmp	r9, r2
 8005890:	bfa8      	it	ge
 8005892:	4691      	movge	r9, r2
 8005894:	f1b9 0f00 	cmp.w	r9, #0
 8005898:	dc35      	bgt.n	8005906 <_printf_float+0x3ae>
 800589a:	f04f 0800 	mov.w	r8, #0
 800589e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80058a2:	f104 0a1a 	add.w	sl, r4, #26
 80058a6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80058aa:	1a9b      	subs	r3, r3, r2
 80058ac:	eba3 0309 	sub.w	r3, r3, r9
 80058b0:	4543      	cmp	r3, r8
 80058b2:	f77f af79 	ble.w	80057a8 <_printf_float+0x250>
 80058b6:	2301      	movs	r3, #1
 80058b8:	4652      	mov	r2, sl
 80058ba:	4631      	mov	r1, r6
 80058bc:	4628      	mov	r0, r5
 80058be:	47b8      	blx	r7
 80058c0:	3001      	adds	r0, #1
 80058c2:	f43f aeaa 	beq.w	800561a <_printf_float+0xc2>
 80058c6:	f108 0801 	add.w	r8, r8, #1
 80058ca:	e7ec      	b.n	80058a6 <_printf_float+0x34e>
 80058cc:	4613      	mov	r3, r2
 80058ce:	4631      	mov	r1, r6
 80058d0:	4642      	mov	r2, r8
 80058d2:	4628      	mov	r0, r5
 80058d4:	47b8      	blx	r7
 80058d6:	3001      	adds	r0, #1
 80058d8:	d1c0      	bne.n	800585c <_printf_float+0x304>
 80058da:	e69e      	b.n	800561a <_printf_float+0xc2>
 80058dc:	2301      	movs	r3, #1
 80058de:	4631      	mov	r1, r6
 80058e0:	4628      	mov	r0, r5
 80058e2:	9205      	str	r2, [sp, #20]
 80058e4:	47b8      	blx	r7
 80058e6:	3001      	adds	r0, #1
 80058e8:	f43f ae97 	beq.w	800561a <_printf_float+0xc2>
 80058ec:	9a05      	ldr	r2, [sp, #20]
 80058ee:	f10b 0b01 	add.w	fp, fp, #1
 80058f2:	e7b9      	b.n	8005868 <_printf_float+0x310>
 80058f4:	ee18 3a10 	vmov	r3, s16
 80058f8:	4652      	mov	r2, sl
 80058fa:	4631      	mov	r1, r6
 80058fc:	4628      	mov	r0, r5
 80058fe:	47b8      	blx	r7
 8005900:	3001      	adds	r0, #1
 8005902:	d1be      	bne.n	8005882 <_printf_float+0x32a>
 8005904:	e689      	b.n	800561a <_printf_float+0xc2>
 8005906:	9a05      	ldr	r2, [sp, #20]
 8005908:	464b      	mov	r3, r9
 800590a:	4442      	add	r2, r8
 800590c:	4631      	mov	r1, r6
 800590e:	4628      	mov	r0, r5
 8005910:	47b8      	blx	r7
 8005912:	3001      	adds	r0, #1
 8005914:	d1c1      	bne.n	800589a <_printf_float+0x342>
 8005916:	e680      	b.n	800561a <_printf_float+0xc2>
 8005918:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800591a:	2a01      	cmp	r2, #1
 800591c:	dc01      	bgt.n	8005922 <_printf_float+0x3ca>
 800591e:	07db      	lsls	r3, r3, #31
 8005920:	d538      	bpl.n	8005994 <_printf_float+0x43c>
 8005922:	2301      	movs	r3, #1
 8005924:	4642      	mov	r2, r8
 8005926:	4631      	mov	r1, r6
 8005928:	4628      	mov	r0, r5
 800592a:	47b8      	blx	r7
 800592c:	3001      	adds	r0, #1
 800592e:	f43f ae74 	beq.w	800561a <_printf_float+0xc2>
 8005932:	ee18 3a10 	vmov	r3, s16
 8005936:	4652      	mov	r2, sl
 8005938:	4631      	mov	r1, r6
 800593a:	4628      	mov	r0, r5
 800593c:	47b8      	blx	r7
 800593e:	3001      	adds	r0, #1
 8005940:	f43f ae6b 	beq.w	800561a <_printf_float+0xc2>
 8005944:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005948:	2200      	movs	r2, #0
 800594a:	2300      	movs	r3, #0
 800594c:	f7fb f8bc 	bl	8000ac8 <__aeabi_dcmpeq>
 8005950:	b9d8      	cbnz	r0, 800598a <_printf_float+0x432>
 8005952:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005954:	f108 0201 	add.w	r2, r8, #1
 8005958:	3b01      	subs	r3, #1
 800595a:	4631      	mov	r1, r6
 800595c:	4628      	mov	r0, r5
 800595e:	47b8      	blx	r7
 8005960:	3001      	adds	r0, #1
 8005962:	d10e      	bne.n	8005982 <_printf_float+0x42a>
 8005964:	e659      	b.n	800561a <_printf_float+0xc2>
 8005966:	2301      	movs	r3, #1
 8005968:	4652      	mov	r2, sl
 800596a:	4631      	mov	r1, r6
 800596c:	4628      	mov	r0, r5
 800596e:	47b8      	blx	r7
 8005970:	3001      	adds	r0, #1
 8005972:	f43f ae52 	beq.w	800561a <_printf_float+0xc2>
 8005976:	f108 0801 	add.w	r8, r8, #1
 800597a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800597c:	3b01      	subs	r3, #1
 800597e:	4543      	cmp	r3, r8
 8005980:	dcf1      	bgt.n	8005966 <_printf_float+0x40e>
 8005982:	464b      	mov	r3, r9
 8005984:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005988:	e6dc      	b.n	8005744 <_printf_float+0x1ec>
 800598a:	f04f 0800 	mov.w	r8, #0
 800598e:	f104 0a1a 	add.w	sl, r4, #26
 8005992:	e7f2      	b.n	800597a <_printf_float+0x422>
 8005994:	2301      	movs	r3, #1
 8005996:	4642      	mov	r2, r8
 8005998:	e7df      	b.n	800595a <_printf_float+0x402>
 800599a:	2301      	movs	r3, #1
 800599c:	464a      	mov	r2, r9
 800599e:	4631      	mov	r1, r6
 80059a0:	4628      	mov	r0, r5
 80059a2:	47b8      	blx	r7
 80059a4:	3001      	adds	r0, #1
 80059a6:	f43f ae38 	beq.w	800561a <_printf_float+0xc2>
 80059aa:	f108 0801 	add.w	r8, r8, #1
 80059ae:	68e3      	ldr	r3, [r4, #12]
 80059b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80059b2:	1a5b      	subs	r3, r3, r1
 80059b4:	4543      	cmp	r3, r8
 80059b6:	dcf0      	bgt.n	800599a <_printf_float+0x442>
 80059b8:	e6fa      	b.n	80057b0 <_printf_float+0x258>
 80059ba:	f04f 0800 	mov.w	r8, #0
 80059be:	f104 0919 	add.w	r9, r4, #25
 80059c2:	e7f4      	b.n	80059ae <_printf_float+0x456>

080059c4 <_printf_common>:
 80059c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059c8:	4616      	mov	r6, r2
 80059ca:	4699      	mov	r9, r3
 80059cc:	688a      	ldr	r2, [r1, #8]
 80059ce:	690b      	ldr	r3, [r1, #16]
 80059d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80059d4:	4293      	cmp	r3, r2
 80059d6:	bfb8      	it	lt
 80059d8:	4613      	movlt	r3, r2
 80059da:	6033      	str	r3, [r6, #0]
 80059dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80059e0:	4607      	mov	r7, r0
 80059e2:	460c      	mov	r4, r1
 80059e4:	b10a      	cbz	r2, 80059ea <_printf_common+0x26>
 80059e6:	3301      	adds	r3, #1
 80059e8:	6033      	str	r3, [r6, #0]
 80059ea:	6823      	ldr	r3, [r4, #0]
 80059ec:	0699      	lsls	r1, r3, #26
 80059ee:	bf42      	ittt	mi
 80059f0:	6833      	ldrmi	r3, [r6, #0]
 80059f2:	3302      	addmi	r3, #2
 80059f4:	6033      	strmi	r3, [r6, #0]
 80059f6:	6825      	ldr	r5, [r4, #0]
 80059f8:	f015 0506 	ands.w	r5, r5, #6
 80059fc:	d106      	bne.n	8005a0c <_printf_common+0x48>
 80059fe:	f104 0a19 	add.w	sl, r4, #25
 8005a02:	68e3      	ldr	r3, [r4, #12]
 8005a04:	6832      	ldr	r2, [r6, #0]
 8005a06:	1a9b      	subs	r3, r3, r2
 8005a08:	42ab      	cmp	r3, r5
 8005a0a:	dc26      	bgt.n	8005a5a <_printf_common+0x96>
 8005a0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005a10:	1e13      	subs	r3, r2, #0
 8005a12:	6822      	ldr	r2, [r4, #0]
 8005a14:	bf18      	it	ne
 8005a16:	2301      	movne	r3, #1
 8005a18:	0692      	lsls	r2, r2, #26
 8005a1a:	d42b      	bmi.n	8005a74 <_printf_common+0xb0>
 8005a1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005a20:	4649      	mov	r1, r9
 8005a22:	4638      	mov	r0, r7
 8005a24:	47c0      	blx	r8
 8005a26:	3001      	adds	r0, #1
 8005a28:	d01e      	beq.n	8005a68 <_printf_common+0xa4>
 8005a2a:	6823      	ldr	r3, [r4, #0]
 8005a2c:	68e5      	ldr	r5, [r4, #12]
 8005a2e:	6832      	ldr	r2, [r6, #0]
 8005a30:	f003 0306 	and.w	r3, r3, #6
 8005a34:	2b04      	cmp	r3, #4
 8005a36:	bf08      	it	eq
 8005a38:	1aad      	subeq	r5, r5, r2
 8005a3a:	68a3      	ldr	r3, [r4, #8]
 8005a3c:	6922      	ldr	r2, [r4, #16]
 8005a3e:	bf0c      	ite	eq
 8005a40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a44:	2500      	movne	r5, #0
 8005a46:	4293      	cmp	r3, r2
 8005a48:	bfc4      	itt	gt
 8005a4a:	1a9b      	subgt	r3, r3, r2
 8005a4c:	18ed      	addgt	r5, r5, r3
 8005a4e:	2600      	movs	r6, #0
 8005a50:	341a      	adds	r4, #26
 8005a52:	42b5      	cmp	r5, r6
 8005a54:	d11a      	bne.n	8005a8c <_printf_common+0xc8>
 8005a56:	2000      	movs	r0, #0
 8005a58:	e008      	b.n	8005a6c <_printf_common+0xa8>
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	4652      	mov	r2, sl
 8005a5e:	4649      	mov	r1, r9
 8005a60:	4638      	mov	r0, r7
 8005a62:	47c0      	blx	r8
 8005a64:	3001      	adds	r0, #1
 8005a66:	d103      	bne.n	8005a70 <_printf_common+0xac>
 8005a68:	f04f 30ff 	mov.w	r0, #4294967295
 8005a6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a70:	3501      	adds	r5, #1
 8005a72:	e7c6      	b.n	8005a02 <_printf_common+0x3e>
 8005a74:	18e1      	adds	r1, r4, r3
 8005a76:	1c5a      	adds	r2, r3, #1
 8005a78:	2030      	movs	r0, #48	; 0x30
 8005a7a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005a7e:	4422      	add	r2, r4
 8005a80:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005a84:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005a88:	3302      	adds	r3, #2
 8005a8a:	e7c7      	b.n	8005a1c <_printf_common+0x58>
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	4622      	mov	r2, r4
 8005a90:	4649      	mov	r1, r9
 8005a92:	4638      	mov	r0, r7
 8005a94:	47c0      	blx	r8
 8005a96:	3001      	adds	r0, #1
 8005a98:	d0e6      	beq.n	8005a68 <_printf_common+0xa4>
 8005a9a:	3601      	adds	r6, #1
 8005a9c:	e7d9      	b.n	8005a52 <_printf_common+0x8e>
	...

08005aa0 <_printf_i>:
 8005aa0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005aa4:	7e0f      	ldrb	r7, [r1, #24]
 8005aa6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005aa8:	2f78      	cmp	r7, #120	; 0x78
 8005aaa:	4691      	mov	r9, r2
 8005aac:	4680      	mov	r8, r0
 8005aae:	460c      	mov	r4, r1
 8005ab0:	469a      	mov	sl, r3
 8005ab2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005ab6:	d807      	bhi.n	8005ac8 <_printf_i+0x28>
 8005ab8:	2f62      	cmp	r7, #98	; 0x62
 8005aba:	d80a      	bhi.n	8005ad2 <_printf_i+0x32>
 8005abc:	2f00      	cmp	r7, #0
 8005abe:	f000 80d8 	beq.w	8005c72 <_printf_i+0x1d2>
 8005ac2:	2f58      	cmp	r7, #88	; 0x58
 8005ac4:	f000 80a3 	beq.w	8005c0e <_printf_i+0x16e>
 8005ac8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005acc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005ad0:	e03a      	b.n	8005b48 <_printf_i+0xa8>
 8005ad2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005ad6:	2b15      	cmp	r3, #21
 8005ad8:	d8f6      	bhi.n	8005ac8 <_printf_i+0x28>
 8005ada:	a101      	add	r1, pc, #4	; (adr r1, 8005ae0 <_printf_i+0x40>)
 8005adc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005ae0:	08005b39 	.word	0x08005b39
 8005ae4:	08005b4d 	.word	0x08005b4d
 8005ae8:	08005ac9 	.word	0x08005ac9
 8005aec:	08005ac9 	.word	0x08005ac9
 8005af0:	08005ac9 	.word	0x08005ac9
 8005af4:	08005ac9 	.word	0x08005ac9
 8005af8:	08005b4d 	.word	0x08005b4d
 8005afc:	08005ac9 	.word	0x08005ac9
 8005b00:	08005ac9 	.word	0x08005ac9
 8005b04:	08005ac9 	.word	0x08005ac9
 8005b08:	08005ac9 	.word	0x08005ac9
 8005b0c:	08005c59 	.word	0x08005c59
 8005b10:	08005b7d 	.word	0x08005b7d
 8005b14:	08005c3b 	.word	0x08005c3b
 8005b18:	08005ac9 	.word	0x08005ac9
 8005b1c:	08005ac9 	.word	0x08005ac9
 8005b20:	08005c7b 	.word	0x08005c7b
 8005b24:	08005ac9 	.word	0x08005ac9
 8005b28:	08005b7d 	.word	0x08005b7d
 8005b2c:	08005ac9 	.word	0x08005ac9
 8005b30:	08005ac9 	.word	0x08005ac9
 8005b34:	08005c43 	.word	0x08005c43
 8005b38:	682b      	ldr	r3, [r5, #0]
 8005b3a:	1d1a      	adds	r2, r3, #4
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	602a      	str	r2, [r5, #0]
 8005b40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005b48:	2301      	movs	r3, #1
 8005b4a:	e0a3      	b.n	8005c94 <_printf_i+0x1f4>
 8005b4c:	6820      	ldr	r0, [r4, #0]
 8005b4e:	6829      	ldr	r1, [r5, #0]
 8005b50:	0606      	lsls	r6, r0, #24
 8005b52:	f101 0304 	add.w	r3, r1, #4
 8005b56:	d50a      	bpl.n	8005b6e <_printf_i+0xce>
 8005b58:	680e      	ldr	r6, [r1, #0]
 8005b5a:	602b      	str	r3, [r5, #0]
 8005b5c:	2e00      	cmp	r6, #0
 8005b5e:	da03      	bge.n	8005b68 <_printf_i+0xc8>
 8005b60:	232d      	movs	r3, #45	; 0x2d
 8005b62:	4276      	negs	r6, r6
 8005b64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b68:	485e      	ldr	r0, [pc, #376]	; (8005ce4 <_printf_i+0x244>)
 8005b6a:	230a      	movs	r3, #10
 8005b6c:	e019      	b.n	8005ba2 <_printf_i+0x102>
 8005b6e:	680e      	ldr	r6, [r1, #0]
 8005b70:	602b      	str	r3, [r5, #0]
 8005b72:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005b76:	bf18      	it	ne
 8005b78:	b236      	sxthne	r6, r6
 8005b7a:	e7ef      	b.n	8005b5c <_printf_i+0xbc>
 8005b7c:	682b      	ldr	r3, [r5, #0]
 8005b7e:	6820      	ldr	r0, [r4, #0]
 8005b80:	1d19      	adds	r1, r3, #4
 8005b82:	6029      	str	r1, [r5, #0]
 8005b84:	0601      	lsls	r1, r0, #24
 8005b86:	d501      	bpl.n	8005b8c <_printf_i+0xec>
 8005b88:	681e      	ldr	r6, [r3, #0]
 8005b8a:	e002      	b.n	8005b92 <_printf_i+0xf2>
 8005b8c:	0646      	lsls	r6, r0, #25
 8005b8e:	d5fb      	bpl.n	8005b88 <_printf_i+0xe8>
 8005b90:	881e      	ldrh	r6, [r3, #0]
 8005b92:	4854      	ldr	r0, [pc, #336]	; (8005ce4 <_printf_i+0x244>)
 8005b94:	2f6f      	cmp	r7, #111	; 0x6f
 8005b96:	bf0c      	ite	eq
 8005b98:	2308      	moveq	r3, #8
 8005b9a:	230a      	movne	r3, #10
 8005b9c:	2100      	movs	r1, #0
 8005b9e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005ba2:	6865      	ldr	r5, [r4, #4]
 8005ba4:	60a5      	str	r5, [r4, #8]
 8005ba6:	2d00      	cmp	r5, #0
 8005ba8:	bfa2      	ittt	ge
 8005baa:	6821      	ldrge	r1, [r4, #0]
 8005bac:	f021 0104 	bicge.w	r1, r1, #4
 8005bb0:	6021      	strge	r1, [r4, #0]
 8005bb2:	b90e      	cbnz	r6, 8005bb8 <_printf_i+0x118>
 8005bb4:	2d00      	cmp	r5, #0
 8005bb6:	d04d      	beq.n	8005c54 <_printf_i+0x1b4>
 8005bb8:	4615      	mov	r5, r2
 8005bba:	fbb6 f1f3 	udiv	r1, r6, r3
 8005bbe:	fb03 6711 	mls	r7, r3, r1, r6
 8005bc2:	5dc7      	ldrb	r7, [r0, r7]
 8005bc4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005bc8:	4637      	mov	r7, r6
 8005bca:	42bb      	cmp	r3, r7
 8005bcc:	460e      	mov	r6, r1
 8005bce:	d9f4      	bls.n	8005bba <_printf_i+0x11a>
 8005bd0:	2b08      	cmp	r3, #8
 8005bd2:	d10b      	bne.n	8005bec <_printf_i+0x14c>
 8005bd4:	6823      	ldr	r3, [r4, #0]
 8005bd6:	07de      	lsls	r6, r3, #31
 8005bd8:	d508      	bpl.n	8005bec <_printf_i+0x14c>
 8005bda:	6923      	ldr	r3, [r4, #16]
 8005bdc:	6861      	ldr	r1, [r4, #4]
 8005bde:	4299      	cmp	r1, r3
 8005be0:	bfde      	ittt	le
 8005be2:	2330      	movle	r3, #48	; 0x30
 8005be4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005be8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005bec:	1b52      	subs	r2, r2, r5
 8005bee:	6122      	str	r2, [r4, #16]
 8005bf0:	f8cd a000 	str.w	sl, [sp]
 8005bf4:	464b      	mov	r3, r9
 8005bf6:	aa03      	add	r2, sp, #12
 8005bf8:	4621      	mov	r1, r4
 8005bfa:	4640      	mov	r0, r8
 8005bfc:	f7ff fee2 	bl	80059c4 <_printf_common>
 8005c00:	3001      	adds	r0, #1
 8005c02:	d14c      	bne.n	8005c9e <_printf_i+0x1fe>
 8005c04:	f04f 30ff 	mov.w	r0, #4294967295
 8005c08:	b004      	add	sp, #16
 8005c0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c0e:	4835      	ldr	r0, [pc, #212]	; (8005ce4 <_printf_i+0x244>)
 8005c10:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005c14:	6829      	ldr	r1, [r5, #0]
 8005c16:	6823      	ldr	r3, [r4, #0]
 8005c18:	f851 6b04 	ldr.w	r6, [r1], #4
 8005c1c:	6029      	str	r1, [r5, #0]
 8005c1e:	061d      	lsls	r5, r3, #24
 8005c20:	d514      	bpl.n	8005c4c <_printf_i+0x1ac>
 8005c22:	07df      	lsls	r7, r3, #31
 8005c24:	bf44      	itt	mi
 8005c26:	f043 0320 	orrmi.w	r3, r3, #32
 8005c2a:	6023      	strmi	r3, [r4, #0]
 8005c2c:	b91e      	cbnz	r6, 8005c36 <_printf_i+0x196>
 8005c2e:	6823      	ldr	r3, [r4, #0]
 8005c30:	f023 0320 	bic.w	r3, r3, #32
 8005c34:	6023      	str	r3, [r4, #0]
 8005c36:	2310      	movs	r3, #16
 8005c38:	e7b0      	b.n	8005b9c <_printf_i+0xfc>
 8005c3a:	6823      	ldr	r3, [r4, #0]
 8005c3c:	f043 0320 	orr.w	r3, r3, #32
 8005c40:	6023      	str	r3, [r4, #0]
 8005c42:	2378      	movs	r3, #120	; 0x78
 8005c44:	4828      	ldr	r0, [pc, #160]	; (8005ce8 <_printf_i+0x248>)
 8005c46:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005c4a:	e7e3      	b.n	8005c14 <_printf_i+0x174>
 8005c4c:	0659      	lsls	r1, r3, #25
 8005c4e:	bf48      	it	mi
 8005c50:	b2b6      	uxthmi	r6, r6
 8005c52:	e7e6      	b.n	8005c22 <_printf_i+0x182>
 8005c54:	4615      	mov	r5, r2
 8005c56:	e7bb      	b.n	8005bd0 <_printf_i+0x130>
 8005c58:	682b      	ldr	r3, [r5, #0]
 8005c5a:	6826      	ldr	r6, [r4, #0]
 8005c5c:	6961      	ldr	r1, [r4, #20]
 8005c5e:	1d18      	adds	r0, r3, #4
 8005c60:	6028      	str	r0, [r5, #0]
 8005c62:	0635      	lsls	r5, r6, #24
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	d501      	bpl.n	8005c6c <_printf_i+0x1cc>
 8005c68:	6019      	str	r1, [r3, #0]
 8005c6a:	e002      	b.n	8005c72 <_printf_i+0x1d2>
 8005c6c:	0670      	lsls	r0, r6, #25
 8005c6e:	d5fb      	bpl.n	8005c68 <_printf_i+0x1c8>
 8005c70:	8019      	strh	r1, [r3, #0]
 8005c72:	2300      	movs	r3, #0
 8005c74:	6123      	str	r3, [r4, #16]
 8005c76:	4615      	mov	r5, r2
 8005c78:	e7ba      	b.n	8005bf0 <_printf_i+0x150>
 8005c7a:	682b      	ldr	r3, [r5, #0]
 8005c7c:	1d1a      	adds	r2, r3, #4
 8005c7e:	602a      	str	r2, [r5, #0]
 8005c80:	681d      	ldr	r5, [r3, #0]
 8005c82:	6862      	ldr	r2, [r4, #4]
 8005c84:	2100      	movs	r1, #0
 8005c86:	4628      	mov	r0, r5
 8005c88:	f7fa faaa 	bl	80001e0 <memchr>
 8005c8c:	b108      	cbz	r0, 8005c92 <_printf_i+0x1f2>
 8005c8e:	1b40      	subs	r0, r0, r5
 8005c90:	6060      	str	r0, [r4, #4]
 8005c92:	6863      	ldr	r3, [r4, #4]
 8005c94:	6123      	str	r3, [r4, #16]
 8005c96:	2300      	movs	r3, #0
 8005c98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c9c:	e7a8      	b.n	8005bf0 <_printf_i+0x150>
 8005c9e:	6923      	ldr	r3, [r4, #16]
 8005ca0:	462a      	mov	r2, r5
 8005ca2:	4649      	mov	r1, r9
 8005ca4:	4640      	mov	r0, r8
 8005ca6:	47d0      	blx	sl
 8005ca8:	3001      	adds	r0, #1
 8005caa:	d0ab      	beq.n	8005c04 <_printf_i+0x164>
 8005cac:	6823      	ldr	r3, [r4, #0]
 8005cae:	079b      	lsls	r3, r3, #30
 8005cb0:	d413      	bmi.n	8005cda <_printf_i+0x23a>
 8005cb2:	68e0      	ldr	r0, [r4, #12]
 8005cb4:	9b03      	ldr	r3, [sp, #12]
 8005cb6:	4298      	cmp	r0, r3
 8005cb8:	bfb8      	it	lt
 8005cba:	4618      	movlt	r0, r3
 8005cbc:	e7a4      	b.n	8005c08 <_printf_i+0x168>
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	4632      	mov	r2, r6
 8005cc2:	4649      	mov	r1, r9
 8005cc4:	4640      	mov	r0, r8
 8005cc6:	47d0      	blx	sl
 8005cc8:	3001      	adds	r0, #1
 8005cca:	d09b      	beq.n	8005c04 <_printf_i+0x164>
 8005ccc:	3501      	adds	r5, #1
 8005cce:	68e3      	ldr	r3, [r4, #12]
 8005cd0:	9903      	ldr	r1, [sp, #12]
 8005cd2:	1a5b      	subs	r3, r3, r1
 8005cd4:	42ab      	cmp	r3, r5
 8005cd6:	dcf2      	bgt.n	8005cbe <_printf_i+0x21e>
 8005cd8:	e7eb      	b.n	8005cb2 <_printf_i+0x212>
 8005cda:	2500      	movs	r5, #0
 8005cdc:	f104 0619 	add.w	r6, r4, #25
 8005ce0:	e7f5      	b.n	8005cce <_printf_i+0x22e>
 8005ce2:	bf00      	nop
 8005ce4:	08007ef2 	.word	0x08007ef2
 8005ce8:	08007f03 	.word	0x08007f03

08005cec <quorem>:
 8005cec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cf0:	6903      	ldr	r3, [r0, #16]
 8005cf2:	690c      	ldr	r4, [r1, #16]
 8005cf4:	42a3      	cmp	r3, r4
 8005cf6:	4607      	mov	r7, r0
 8005cf8:	f2c0 8081 	blt.w	8005dfe <quorem+0x112>
 8005cfc:	3c01      	subs	r4, #1
 8005cfe:	f101 0814 	add.w	r8, r1, #20
 8005d02:	f100 0514 	add.w	r5, r0, #20
 8005d06:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005d0a:	9301      	str	r3, [sp, #4]
 8005d0c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005d10:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005d14:	3301      	adds	r3, #1
 8005d16:	429a      	cmp	r2, r3
 8005d18:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005d1c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005d20:	fbb2 f6f3 	udiv	r6, r2, r3
 8005d24:	d331      	bcc.n	8005d8a <quorem+0x9e>
 8005d26:	f04f 0e00 	mov.w	lr, #0
 8005d2a:	4640      	mov	r0, r8
 8005d2c:	46ac      	mov	ip, r5
 8005d2e:	46f2      	mov	sl, lr
 8005d30:	f850 2b04 	ldr.w	r2, [r0], #4
 8005d34:	b293      	uxth	r3, r2
 8005d36:	fb06 e303 	mla	r3, r6, r3, lr
 8005d3a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005d3e:	b29b      	uxth	r3, r3
 8005d40:	ebaa 0303 	sub.w	r3, sl, r3
 8005d44:	f8dc a000 	ldr.w	sl, [ip]
 8005d48:	0c12      	lsrs	r2, r2, #16
 8005d4a:	fa13 f38a 	uxtah	r3, r3, sl
 8005d4e:	fb06 e202 	mla	r2, r6, r2, lr
 8005d52:	9300      	str	r3, [sp, #0]
 8005d54:	9b00      	ldr	r3, [sp, #0]
 8005d56:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005d5a:	b292      	uxth	r2, r2
 8005d5c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005d60:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005d64:	f8bd 3000 	ldrh.w	r3, [sp]
 8005d68:	4581      	cmp	r9, r0
 8005d6a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005d6e:	f84c 3b04 	str.w	r3, [ip], #4
 8005d72:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005d76:	d2db      	bcs.n	8005d30 <quorem+0x44>
 8005d78:	f855 300b 	ldr.w	r3, [r5, fp]
 8005d7c:	b92b      	cbnz	r3, 8005d8a <quorem+0x9e>
 8005d7e:	9b01      	ldr	r3, [sp, #4]
 8005d80:	3b04      	subs	r3, #4
 8005d82:	429d      	cmp	r5, r3
 8005d84:	461a      	mov	r2, r3
 8005d86:	d32e      	bcc.n	8005de6 <quorem+0xfa>
 8005d88:	613c      	str	r4, [r7, #16]
 8005d8a:	4638      	mov	r0, r7
 8005d8c:	f001 f8c6 	bl	8006f1c <__mcmp>
 8005d90:	2800      	cmp	r0, #0
 8005d92:	db24      	blt.n	8005dde <quorem+0xf2>
 8005d94:	3601      	adds	r6, #1
 8005d96:	4628      	mov	r0, r5
 8005d98:	f04f 0c00 	mov.w	ip, #0
 8005d9c:	f858 2b04 	ldr.w	r2, [r8], #4
 8005da0:	f8d0 e000 	ldr.w	lr, [r0]
 8005da4:	b293      	uxth	r3, r2
 8005da6:	ebac 0303 	sub.w	r3, ip, r3
 8005daa:	0c12      	lsrs	r2, r2, #16
 8005dac:	fa13 f38e 	uxtah	r3, r3, lr
 8005db0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005db4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005db8:	b29b      	uxth	r3, r3
 8005dba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005dbe:	45c1      	cmp	r9, r8
 8005dc0:	f840 3b04 	str.w	r3, [r0], #4
 8005dc4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005dc8:	d2e8      	bcs.n	8005d9c <quorem+0xb0>
 8005dca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005dce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005dd2:	b922      	cbnz	r2, 8005dde <quorem+0xf2>
 8005dd4:	3b04      	subs	r3, #4
 8005dd6:	429d      	cmp	r5, r3
 8005dd8:	461a      	mov	r2, r3
 8005dda:	d30a      	bcc.n	8005df2 <quorem+0x106>
 8005ddc:	613c      	str	r4, [r7, #16]
 8005dde:	4630      	mov	r0, r6
 8005de0:	b003      	add	sp, #12
 8005de2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005de6:	6812      	ldr	r2, [r2, #0]
 8005de8:	3b04      	subs	r3, #4
 8005dea:	2a00      	cmp	r2, #0
 8005dec:	d1cc      	bne.n	8005d88 <quorem+0x9c>
 8005dee:	3c01      	subs	r4, #1
 8005df0:	e7c7      	b.n	8005d82 <quorem+0x96>
 8005df2:	6812      	ldr	r2, [r2, #0]
 8005df4:	3b04      	subs	r3, #4
 8005df6:	2a00      	cmp	r2, #0
 8005df8:	d1f0      	bne.n	8005ddc <quorem+0xf0>
 8005dfa:	3c01      	subs	r4, #1
 8005dfc:	e7eb      	b.n	8005dd6 <quorem+0xea>
 8005dfe:	2000      	movs	r0, #0
 8005e00:	e7ee      	b.n	8005de0 <quorem+0xf4>
 8005e02:	0000      	movs	r0, r0
 8005e04:	0000      	movs	r0, r0
	...

08005e08 <_dtoa_r>:
 8005e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e0c:	ed2d 8b04 	vpush	{d8-d9}
 8005e10:	ec57 6b10 	vmov	r6, r7, d0
 8005e14:	b093      	sub	sp, #76	; 0x4c
 8005e16:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005e18:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005e1c:	9106      	str	r1, [sp, #24]
 8005e1e:	ee10 aa10 	vmov	sl, s0
 8005e22:	4604      	mov	r4, r0
 8005e24:	9209      	str	r2, [sp, #36]	; 0x24
 8005e26:	930c      	str	r3, [sp, #48]	; 0x30
 8005e28:	46bb      	mov	fp, r7
 8005e2a:	b975      	cbnz	r5, 8005e4a <_dtoa_r+0x42>
 8005e2c:	2010      	movs	r0, #16
 8005e2e:	f000 fddd 	bl	80069ec <malloc>
 8005e32:	4602      	mov	r2, r0
 8005e34:	6260      	str	r0, [r4, #36]	; 0x24
 8005e36:	b920      	cbnz	r0, 8005e42 <_dtoa_r+0x3a>
 8005e38:	4ba7      	ldr	r3, [pc, #668]	; (80060d8 <_dtoa_r+0x2d0>)
 8005e3a:	21ea      	movs	r1, #234	; 0xea
 8005e3c:	48a7      	ldr	r0, [pc, #668]	; (80060dc <_dtoa_r+0x2d4>)
 8005e3e:	f001 fa75 	bl	800732c <__assert_func>
 8005e42:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005e46:	6005      	str	r5, [r0, #0]
 8005e48:	60c5      	str	r5, [r0, #12]
 8005e4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e4c:	6819      	ldr	r1, [r3, #0]
 8005e4e:	b151      	cbz	r1, 8005e66 <_dtoa_r+0x5e>
 8005e50:	685a      	ldr	r2, [r3, #4]
 8005e52:	604a      	str	r2, [r1, #4]
 8005e54:	2301      	movs	r3, #1
 8005e56:	4093      	lsls	r3, r2
 8005e58:	608b      	str	r3, [r1, #8]
 8005e5a:	4620      	mov	r0, r4
 8005e5c:	f000 fe1c 	bl	8006a98 <_Bfree>
 8005e60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e62:	2200      	movs	r2, #0
 8005e64:	601a      	str	r2, [r3, #0]
 8005e66:	1e3b      	subs	r3, r7, #0
 8005e68:	bfaa      	itet	ge
 8005e6a:	2300      	movge	r3, #0
 8005e6c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8005e70:	f8c8 3000 	strge.w	r3, [r8]
 8005e74:	4b9a      	ldr	r3, [pc, #616]	; (80060e0 <_dtoa_r+0x2d8>)
 8005e76:	bfbc      	itt	lt
 8005e78:	2201      	movlt	r2, #1
 8005e7a:	f8c8 2000 	strlt.w	r2, [r8]
 8005e7e:	ea33 030b 	bics.w	r3, r3, fp
 8005e82:	d11b      	bne.n	8005ebc <_dtoa_r+0xb4>
 8005e84:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005e86:	f242 730f 	movw	r3, #9999	; 0x270f
 8005e8a:	6013      	str	r3, [r2, #0]
 8005e8c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005e90:	4333      	orrs	r3, r6
 8005e92:	f000 8592 	beq.w	80069ba <_dtoa_r+0xbb2>
 8005e96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005e98:	b963      	cbnz	r3, 8005eb4 <_dtoa_r+0xac>
 8005e9a:	4b92      	ldr	r3, [pc, #584]	; (80060e4 <_dtoa_r+0x2dc>)
 8005e9c:	e022      	b.n	8005ee4 <_dtoa_r+0xdc>
 8005e9e:	4b92      	ldr	r3, [pc, #584]	; (80060e8 <_dtoa_r+0x2e0>)
 8005ea0:	9301      	str	r3, [sp, #4]
 8005ea2:	3308      	adds	r3, #8
 8005ea4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005ea6:	6013      	str	r3, [r2, #0]
 8005ea8:	9801      	ldr	r0, [sp, #4]
 8005eaa:	b013      	add	sp, #76	; 0x4c
 8005eac:	ecbd 8b04 	vpop	{d8-d9}
 8005eb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005eb4:	4b8b      	ldr	r3, [pc, #556]	; (80060e4 <_dtoa_r+0x2dc>)
 8005eb6:	9301      	str	r3, [sp, #4]
 8005eb8:	3303      	adds	r3, #3
 8005eba:	e7f3      	b.n	8005ea4 <_dtoa_r+0x9c>
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	4650      	mov	r0, sl
 8005ec2:	4659      	mov	r1, fp
 8005ec4:	f7fa fe00 	bl	8000ac8 <__aeabi_dcmpeq>
 8005ec8:	ec4b ab19 	vmov	d9, sl, fp
 8005ecc:	4680      	mov	r8, r0
 8005ece:	b158      	cbz	r0, 8005ee8 <_dtoa_r+0xe0>
 8005ed0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	6013      	str	r3, [r2, #0]
 8005ed6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	f000 856b 	beq.w	80069b4 <_dtoa_r+0xbac>
 8005ede:	4883      	ldr	r0, [pc, #524]	; (80060ec <_dtoa_r+0x2e4>)
 8005ee0:	6018      	str	r0, [r3, #0]
 8005ee2:	1e43      	subs	r3, r0, #1
 8005ee4:	9301      	str	r3, [sp, #4]
 8005ee6:	e7df      	b.n	8005ea8 <_dtoa_r+0xa0>
 8005ee8:	ec4b ab10 	vmov	d0, sl, fp
 8005eec:	aa10      	add	r2, sp, #64	; 0x40
 8005eee:	a911      	add	r1, sp, #68	; 0x44
 8005ef0:	4620      	mov	r0, r4
 8005ef2:	f001 f8b9 	bl	8007068 <__d2b>
 8005ef6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8005efa:	ee08 0a10 	vmov	s16, r0
 8005efe:	2d00      	cmp	r5, #0
 8005f00:	f000 8084 	beq.w	800600c <_dtoa_r+0x204>
 8005f04:	ee19 3a90 	vmov	r3, s19
 8005f08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005f0c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005f10:	4656      	mov	r6, sl
 8005f12:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005f16:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005f1a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8005f1e:	4b74      	ldr	r3, [pc, #464]	; (80060f0 <_dtoa_r+0x2e8>)
 8005f20:	2200      	movs	r2, #0
 8005f22:	4630      	mov	r0, r6
 8005f24:	4639      	mov	r1, r7
 8005f26:	f7fa f9af 	bl	8000288 <__aeabi_dsub>
 8005f2a:	a365      	add	r3, pc, #404	; (adr r3, 80060c0 <_dtoa_r+0x2b8>)
 8005f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f30:	f7fa fb62 	bl	80005f8 <__aeabi_dmul>
 8005f34:	a364      	add	r3, pc, #400	; (adr r3, 80060c8 <_dtoa_r+0x2c0>)
 8005f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f3a:	f7fa f9a7 	bl	800028c <__adddf3>
 8005f3e:	4606      	mov	r6, r0
 8005f40:	4628      	mov	r0, r5
 8005f42:	460f      	mov	r7, r1
 8005f44:	f7fa faee 	bl	8000524 <__aeabi_i2d>
 8005f48:	a361      	add	r3, pc, #388	; (adr r3, 80060d0 <_dtoa_r+0x2c8>)
 8005f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f4e:	f7fa fb53 	bl	80005f8 <__aeabi_dmul>
 8005f52:	4602      	mov	r2, r0
 8005f54:	460b      	mov	r3, r1
 8005f56:	4630      	mov	r0, r6
 8005f58:	4639      	mov	r1, r7
 8005f5a:	f7fa f997 	bl	800028c <__adddf3>
 8005f5e:	4606      	mov	r6, r0
 8005f60:	460f      	mov	r7, r1
 8005f62:	f7fa fdf9 	bl	8000b58 <__aeabi_d2iz>
 8005f66:	2200      	movs	r2, #0
 8005f68:	9000      	str	r0, [sp, #0]
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	4630      	mov	r0, r6
 8005f6e:	4639      	mov	r1, r7
 8005f70:	f7fa fdb4 	bl	8000adc <__aeabi_dcmplt>
 8005f74:	b150      	cbz	r0, 8005f8c <_dtoa_r+0x184>
 8005f76:	9800      	ldr	r0, [sp, #0]
 8005f78:	f7fa fad4 	bl	8000524 <__aeabi_i2d>
 8005f7c:	4632      	mov	r2, r6
 8005f7e:	463b      	mov	r3, r7
 8005f80:	f7fa fda2 	bl	8000ac8 <__aeabi_dcmpeq>
 8005f84:	b910      	cbnz	r0, 8005f8c <_dtoa_r+0x184>
 8005f86:	9b00      	ldr	r3, [sp, #0]
 8005f88:	3b01      	subs	r3, #1
 8005f8a:	9300      	str	r3, [sp, #0]
 8005f8c:	9b00      	ldr	r3, [sp, #0]
 8005f8e:	2b16      	cmp	r3, #22
 8005f90:	d85a      	bhi.n	8006048 <_dtoa_r+0x240>
 8005f92:	9a00      	ldr	r2, [sp, #0]
 8005f94:	4b57      	ldr	r3, [pc, #348]	; (80060f4 <_dtoa_r+0x2ec>)
 8005f96:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f9e:	ec51 0b19 	vmov	r0, r1, d9
 8005fa2:	f7fa fd9b 	bl	8000adc <__aeabi_dcmplt>
 8005fa6:	2800      	cmp	r0, #0
 8005fa8:	d050      	beq.n	800604c <_dtoa_r+0x244>
 8005faa:	9b00      	ldr	r3, [sp, #0]
 8005fac:	3b01      	subs	r3, #1
 8005fae:	9300      	str	r3, [sp, #0]
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	930b      	str	r3, [sp, #44]	; 0x2c
 8005fb4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005fb6:	1b5d      	subs	r5, r3, r5
 8005fb8:	1e6b      	subs	r3, r5, #1
 8005fba:	9305      	str	r3, [sp, #20]
 8005fbc:	bf45      	ittet	mi
 8005fbe:	f1c5 0301 	rsbmi	r3, r5, #1
 8005fc2:	9304      	strmi	r3, [sp, #16]
 8005fc4:	2300      	movpl	r3, #0
 8005fc6:	2300      	movmi	r3, #0
 8005fc8:	bf4c      	ite	mi
 8005fca:	9305      	strmi	r3, [sp, #20]
 8005fcc:	9304      	strpl	r3, [sp, #16]
 8005fce:	9b00      	ldr	r3, [sp, #0]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	db3d      	blt.n	8006050 <_dtoa_r+0x248>
 8005fd4:	9b05      	ldr	r3, [sp, #20]
 8005fd6:	9a00      	ldr	r2, [sp, #0]
 8005fd8:	920a      	str	r2, [sp, #40]	; 0x28
 8005fda:	4413      	add	r3, r2
 8005fdc:	9305      	str	r3, [sp, #20]
 8005fde:	2300      	movs	r3, #0
 8005fe0:	9307      	str	r3, [sp, #28]
 8005fe2:	9b06      	ldr	r3, [sp, #24]
 8005fe4:	2b09      	cmp	r3, #9
 8005fe6:	f200 8089 	bhi.w	80060fc <_dtoa_r+0x2f4>
 8005fea:	2b05      	cmp	r3, #5
 8005fec:	bfc4      	itt	gt
 8005fee:	3b04      	subgt	r3, #4
 8005ff0:	9306      	strgt	r3, [sp, #24]
 8005ff2:	9b06      	ldr	r3, [sp, #24]
 8005ff4:	f1a3 0302 	sub.w	r3, r3, #2
 8005ff8:	bfcc      	ite	gt
 8005ffa:	2500      	movgt	r5, #0
 8005ffc:	2501      	movle	r5, #1
 8005ffe:	2b03      	cmp	r3, #3
 8006000:	f200 8087 	bhi.w	8006112 <_dtoa_r+0x30a>
 8006004:	e8df f003 	tbb	[pc, r3]
 8006008:	59383a2d 	.word	0x59383a2d
 800600c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006010:	441d      	add	r5, r3
 8006012:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006016:	2b20      	cmp	r3, #32
 8006018:	bfc1      	itttt	gt
 800601a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800601e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006022:	fa0b f303 	lslgt.w	r3, fp, r3
 8006026:	fa26 f000 	lsrgt.w	r0, r6, r0
 800602a:	bfda      	itte	le
 800602c:	f1c3 0320 	rsble	r3, r3, #32
 8006030:	fa06 f003 	lslle.w	r0, r6, r3
 8006034:	4318      	orrgt	r0, r3
 8006036:	f7fa fa65 	bl	8000504 <__aeabi_ui2d>
 800603a:	2301      	movs	r3, #1
 800603c:	4606      	mov	r6, r0
 800603e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006042:	3d01      	subs	r5, #1
 8006044:	930e      	str	r3, [sp, #56]	; 0x38
 8006046:	e76a      	b.n	8005f1e <_dtoa_r+0x116>
 8006048:	2301      	movs	r3, #1
 800604a:	e7b2      	b.n	8005fb2 <_dtoa_r+0x1aa>
 800604c:	900b      	str	r0, [sp, #44]	; 0x2c
 800604e:	e7b1      	b.n	8005fb4 <_dtoa_r+0x1ac>
 8006050:	9b04      	ldr	r3, [sp, #16]
 8006052:	9a00      	ldr	r2, [sp, #0]
 8006054:	1a9b      	subs	r3, r3, r2
 8006056:	9304      	str	r3, [sp, #16]
 8006058:	4253      	negs	r3, r2
 800605a:	9307      	str	r3, [sp, #28]
 800605c:	2300      	movs	r3, #0
 800605e:	930a      	str	r3, [sp, #40]	; 0x28
 8006060:	e7bf      	b.n	8005fe2 <_dtoa_r+0x1da>
 8006062:	2300      	movs	r3, #0
 8006064:	9308      	str	r3, [sp, #32]
 8006066:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006068:	2b00      	cmp	r3, #0
 800606a:	dc55      	bgt.n	8006118 <_dtoa_r+0x310>
 800606c:	2301      	movs	r3, #1
 800606e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006072:	461a      	mov	r2, r3
 8006074:	9209      	str	r2, [sp, #36]	; 0x24
 8006076:	e00c      	b.n	8006092 <_dtoa_r+0x28a>
 8006078:	2301      	movs	r3, #1
 800607a:	e7f3      	b.n	8006064 <_dtoa_r+0x25c>
 800607c:	2300      	movs	r3, #0
 800607e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006080:	9308      	str	r3, [sp, #32]
 8006082:	9b00      	ldr	r3, [sp, #0]
 8006084:	4413      	add	r3, r2
 8006086:	9302      	str	r3, [sp, #8]
 8006088:	3301      	adds	r3, #1
 800608a:	2b01      	cmp	r3, #1
 800608c:	9303      	str	r3, [sp, #12]
 800608e:	bfb8      	it	lt
 8006090:	2301      	movlt	r3, #1
 8006092:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006094:	2200      	movs	r2, #0
 8006096:	6042      	str	r2, [r0, #4]
 8006098:	2204      	movs	r2, #4
 800609a:	f102 0614 	add.w	r6, r2, #20
 800609e:	429e      	cmp	r6, r3
 80060a0:	6841      	ldr	r1, [r0, #4]
 80060a2:	d93d      	bls.n	8006120 <_dtoa_r+0x318>
 80060a4:	4620      	mov	r0, r4
 80060a6:	f000 fcb7 	bl	8006a18 <_Balloc>
 80060aa:	9001      	str	r0, [sp, #4]
 80060ac:	2800      	cmp	r0, #0
 80060ae:	d13b      	bne.n	8006128 <_dtoa_r+0x320>
 80060b0:	4b11      	ldr	r3, [pc, #68]	; (80060f8 <_dtoa_r+0x2f0>)
 80060b2:	4602      	mov	r2, r0
 80060b4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80060b8:	e6c0      	b.n	8005e3c <_dtoa_r+0x34>
 80060ba:	2301      	movs	r3, #1
 80060bc:	e7df      	b.n	800607e <_dtoa_r+0x276>
 80060be:	bf00      	nop
 80060c0:	636f4361 	.word	0x636f4361
 80060c4:	3fd287a7 	.word	0x3fd287a7
 80060c8:	8b60c8b3 	.word	0x8b60c8b3
 80060cc:	3fc68a28 	.word	0x3fc68a28
 80060d0:	509f79fb 	.word	0x509f79fb
 80060d4:	3fd34413 	.word	0x3fd34413
 80060d8:	08007f21 	.word	0x08007f21
 80060dc:	08007f38 	.word	0x08007f38
 80060e0:	7ff00000 	.word	0x7ff00000
 80060e4:	08007f1d 	.word	0x08007f1d
 80060e8:	08007f14 	.word	0x08007f14
 80060ec:	08007ef1 	.word	0x08007ef1
 80060f0:	3ff80000 	.word	0x3ff80000
 80060f4:	08008028 	.word	0x08008028
 80060f8:	08007f93 	.word	0x08007f93
 80060fc:	2501      	movs	r5, #1
 80060fe:	2300      	movs	r3, #0
 8006100:	9306      	str	r3, [sp, #24]
 8006102:	9508      	str	r5, [sp, #32]
 8006104:	f04f 33ff 	mov.w	r3, #4294967295
 8006108:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800610c:	2200      	movs	r2, #0
 800610e:	2312      	movs	r3, #18
 8006110:	e7b0      	b.n	8006074 <_dtoa_r+0x26c>
 8006112:	2301      	movs	r3, #1
 8006114:	9308      	str	r3, [sp, #32]
 8006116:	e7f5      	b.n	8006104 <_dtoa_r+0x2fc>
 8006118:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800611a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800611e:	e7b8      	b.n	8006092 <_dtoa_r+0x28a>
 8006120:	3101      	adds	r1, #1
 8006122:	6041      	str	r1, [r0, #4]
 8006124:	0052      	lsls	r2, r2, #1
 8006126:	e7b8      	b.n	800609a <_dtoa_r+0x292>
 8006128:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800612a:	9a01      	ldr	r2, [sp, #4]
 800612c:	601a      	str	r2, [r3, #0]
 800612e:	9b03      	ldr	r3, [sp, #12]
 8006130:	2b0e      	cmp	r3, #14
 8006132:	f200 809d 	bhi.w	8006270 <_dtoa_r+0x468>
 8006136:	2d00      	cmp	r5, #0
 8006138:	f000 809a 	beq.w	8006270 <_dtoa_r+0x468>
 800613c:	9b00      	ldr	r3, [sp, #0]
 800613e:	2b00      	cmp	r3, #0
 8006140:	dd32      	ble.n	80061a8 <_dtoa_r+0x3a0>
 8006142:	4ab7      	ldr	r2, [pc, #732]	; (8006420 <_dtoa_r+0x618>)
 8006144:	f003 030f 	and.w	r3, r3, #15
 8006148:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800614c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006150:	9b00      	ldr	r3, [sp, #0]
 8006152:	05d8      	lsls	r0, r3, #23
 8006154:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006158:	d516      	bpl.n	8006188 <_dtoa_r+0x380>
 800615a:	4bb2      	ldr	r3, [pc, #712]	; (8006424 <_dtoa_r+0x61c>)
 800615c:	ec51 0b19 	vmov	r0, r1, d9
 8006160:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006164:	f7fa fb72 	bl	800084c <__aeabi_ddiv>
 8006168:	f007 070f 	and.w	r7, r7, #15
 800616c:	4682      	mov	sl, r0
 800616e:	468b      	mov	fp, r1
 8006170:	2503      	movs	r5, #3
 8006172:	4eac      	ldr	r6, [pc, #688]	; (8006424 <_dtoa_r+0x61c>)
 8006174:	b957      	cbnz	r7, 800618c <_dtoa_r+0x384>
 8006176:	4642      	mov	r2, r8
 8006178:	464b      	mov	r3, r9
 800617a:	4650      	mov	r0, sl
 800617c:	4659      	mov	r1, fp
 800617e:	f7fa fb65 	bl	800084c <__aeabi_ddiv>
 8006182:	4682      	mov	sl, r0
 8006184:	468b      	mov	fp, r1
 8006186:	e028      	b.n	80061da <_dtoa_r+0x3d2>
 8006188:	2502      	movs	r5, #2
 800618a:	e7f2      	b.n	8006172 <_dtoa_r+0x36a>
 800618c:	07f9      	lsls	r1, r7, #31
 800618e:	d508      	bpl.n	80061a2 <_dtoa_r+0x39a>
 8006190:	4640      	mov	r0, r8
 8006192:	4649      	mov	r1, r9
 8006194:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006198:	f7fa fa2e 	bl	80005f8 <__aeabi_dmul>
 800619c:	3501      	adds	r5, #1
 800619e:	4680      	mov	r8, r0
 80061a0:	4689      	mov	r9, r1
 80061a2:	107f      	asrs	r7, r7, #1
 80061a4:	3608      	adds	r6, #8
 80061a6:	e7e5      	b.n	8006174 <_dtoa_r+0x36c>
 80061a8:	f000 809b 	beq.w	80062e2 <_dtoa_r+0x4da>
 80061ac:	9b00      	ldr	r3, [sp, #0]
 80061ae:	4f9d      	ldr	r7, [pc, #628]	; (8006424 <_dtoa_r+0x61c>)
 80061b0:	425e      	negs	r6, r3
 80061b2:	4b9b      	ldr	r3, [pc, #620]	; (8006420 <_dtoa_r+0x618>)
 80061b4:	f006 020f 	and.w	r2, r6, #15
 80061b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80061bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061c0:	ec51 0b19 	vmov	r0, r1, d9
 80061c4:	f7fa fa18 	bl	80005f8 <__aeabi_dmul>
 80061c8:	1136      	asrs	r6, r6, #4
 80061ca:	4682      	mov	sl, r0
 80061cc:	468b      	mov	fp, r1
 80061ce:	2300      	movs	r3, #0
 80061d0:	2502      	movs	r5, #2
 80061d2:	2e00      	cmp	r6, #0
 80061d4:	d17a      	bne.n	80062cc <_dtoa_r+0x4c4>
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d1d3      	bne.n	8006182 <_dtoa_r+0x37a>
 80061da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80061dc:	2b00      	cmp	r3, #0
 80061de:	f000 8082 	beq.w	80062e6 <_dtoa_r+0x4de>
 80061e2:	4b91      	ldr	r3, [pc, #580]	; (8006428 <_dtoa_r+0x620>)
 80061e4:	2200      	movs	r2, #0
 80061e6:	4650      	mov	r0, sl
 80061e8:	4659      	mov	r1, fp
 80061ea:	f7fa fc77 	bl	8000adc <__aeabi_dcmplt>
 80061ee:	2800      	cmp	r0, #0
 80061f0:	d079      	beq.n	80062e6 <_dtoa_r+0x4de>
 80061f2:	9b03      	ldr	r3, [sp, #12]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d076      	beq.n	80062e6 <_dtoa_r+0x4de>
 80061f8:	9b02      	ldr	r3, [sp, #8]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	dd36      	ble.n	800626c <_dtoa_r+0x464>
 80061fe:	9b00      	ldr	r3, [sp, #0]
 8006200:	4650      	mov	r0, sl
 8006202:	4659      	mov	r1, fp
 8006204:	1e5f      	subs	r7, r3, #1
 8006206:	2200      	movs	r2, #0
 8006208:	4b88      	ldr	r3, [pc, #544]	; (800642c <_dtoa_r+0x624>)
 800620a:	f7fa f9f5 	bl	80005f8 <__aeabi_dmul>
 800620e:	9e02      	ldr	r6, [sp, #8]
 8006210:	4682      	mov	sl, r0
 8006212:	468b      	mov	fp, r1
 8006214:	3501      	adds	r5, #1
 8006216:	4628      	mov	r0, r5
 8006218:	f7fa f984 	bl	8000524 <__aeabi_i2d>
 800621c:	4652      	mov	r2, sl
 800621e:	465b      	mov	r3, fp
 8006220:	f7fa f9ea 	bl	80005f8 <__aeabi_dmul>
 8006224:	4b82      	ldr	r3, [pc, #520]	; (8006430 <_dtoa_r+0x628>)
 8006226:	2200      	movs	r2, #0
 8006228:	f7fa f830 	bl	800028c <__adddf3>
 800622c:	46d0      	mov	r8, sl
 800622e:	46d9      	mov	r9, fp
 8006230:	4682      	mov	sl, r0
 8006232:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8006236:	2e00      	cmp	r6, #0
 8006238:	d158      	bne.n	80062ec <_dtoa_r+0x4e4>
 800623a:	4b7e      	ldr	r3, [pc, #504]	; (8006434 <_dtoa_r+0x62c>)
 800623c:	2200      	movs	r2, #0
 800623e:	4640      	mov	r0, r8
 8006240:	4649      	mov	r1, r9
 8006242:	f7fa f821 	bl	8000288 <__aeabi_dsub>
 8006246:	4652      	mov	r2, sl
 8006248:	465b      	mov	r3, fp
 800624a:	4680      	mov	r8, r0
 800624c:	4689      	mov	r9, r1
 800624e:	f7fa fc63 	bl	8000b18 <__aeabi_dcmpgt>
 8006252:	2800      	cmp	r0, #0
 8006254:	f040 8295 	bne.w	8006782 <_dtoa_r+0x97a>
 8006258:	4652      	mov	r2, sl
 800625a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800625e:	4640      	mov	r0, r8
 8006260:	4649      	mov	r1, r9
 8006262:	f7fa fc3b 	bl	8000adc <__aeabi_dcmplt>
 8006266:	2800      	cmp	r0, #0
 8006268:	f040 8289 	bne.w	800677e <_dtoa_r+0x976>
 800626c:	ec5b ab19 	vmov	sl, fp, d9
 8006270:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006272:	2b00      	cmp	r3, #0
 8006274:	f2c0 8148 	blt.w	8006508 <_dtoa_r+0x700>
 8006278:	9a00      	ldr	r2, [sp, #0]
 800627a:	2a0e      	cmp	r2, #14
 800627c:	f300 8144 	bgt.w	8006508 <_dtoa_r+0x700>
 8006280:	4b67      	ldr	r3, [pc, #412]	; (8006420 <_dtoa_r+0x618>)
 8006282:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006286:	e9d3 8900 	ldrd	r8, r9, [r3]
 800628a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800628c:	2b00      	cmp	r3, #0
 800628e:	f280 80d5 	bge.w	800643c <_dtoa_r+0x634>
 8006292:	9b03      	ldr	r3, [sp, #12]
 8006294:	2b00      	cmp	r3, #0
 8006296:	f300 80d1 	bgt.w	800643c <_dtoa_r+0x634>
 800629a:	f040 826f 	bne.w	800677c <_dtoa_r+0x974>
 800629e:	4b65      	ldr	r3, [pc, #404]	; (8006434 <_dtoa_r+0x62c>)
 80062a0:	2200      	movs	r2, #0
 80062a2:	4640      	mov	r0, r8
 80062a4:	4649      	mov	r1, r9
 80062a6:	f7fa f9a7 	bl	80005f8 <__aeabi_dmul>
 80062aa:	4652      	mov	r2, sl
 80062ac:	465b      	mov	r3, fp
 80062ae:	f7fa fc29 	bl	8000b04 <__aeabi_dcmpge>
 80062b2:	9e03      	ldr	r6, [sp, #12]
 80062b4:	4637      	mov	r7, r6
 80062b6:	2800      	cmp	r0, #0
 80062b8:	f040 8245 	bne.w	8006746 <_dtoa_r+0x93e>
 80062bc:	9d01      	ldr	r5, [sp, #4]
 80062be:	2331      	movs	r3, #49	; 0x31
 80062c0:	f805 3b01 	strb.w	r3, [r5], #1
 80062c4:	9b00      	ldr	r3, [sp, #0]
 80062c6:	3301      	adds	r3, #1
 80062c8:	9300      	str	r3, [sp, #0]
 80062ca:	e240      	b.n	800674e <_dtoa_r+0x946>
 80062cc:	07f2      	lsls	r2, r6, #31
 80062ce:	d505      	bpl.n	80062dc <_dtoa_r+0x4d4>
 80062d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80062d4:	f7fa f990 	bl	80005f8 <__aeabi_dmul>
 80062d8:	3501      	adds	r5, #1
 80062da:	2301      	movs	r3, #1
 80062dc:	1076      	asrs	r6, r6, #1
 80062de:	3708      	adds	r7, #8
 80062e0:	e777      	b.n	80061d2 <_dtoa_r+0x3ca>
 80062e2:	2502      	movs	r5, #2
 80062e4:	e779      	b.n	80061da <_dtoa_r+0x3d2>
 80062e6:	9f00      	ldr	r7, [sp, #0]
 80062e8:	9e03      	ldr	r6, [sp, #12]
 80062ea:	e794      	b.n	8006216 <_dtoa_r+0x40e>
 80062ec:	9901      	ldr	r1, [sp, #4]
 80062ee:	4b4c      	ldr	r3, [pc, #304]	; (8006420 <_dtoa_r+0x618>)
 80062f0:	4431      	add	r1, r6
 80062f2:	910d      	str	r1, [sp, #52]	; 0x34
 80062f4:	9908      	ldr	r1, [sp, #32]
 80062f6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80062fa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80062fe:	2900      	cmp	r1, #0
 8006300:	d043      	beq.n	800638a <_dtoa_r+0x582>
 8006302:	494d      	ldr	r1, [pc, #308]	; (8006438 <_dtoa_r+0x630>)
 8006304:	2000      	movs	r0, #0
 8006306:	f7fa faa1 	bl	800084c <__aeabi_ddiv>
 800630a:	4652      	mov	r2, sl
 800630c:	465b      	mov	r3, fp
 800630e:	f7f9 ffbb 	bl	8000288 <__aeabi_dsub>
 8006312:	9d01      	ldr	r5, [sp, #4]
 8006314:	4682      	mov	sl, r0
 8006316:	468b      	mov	fp, r1
 8006318:	4649      	mov	r1, r9
 800631a:	4640      	mov	r0, r8
 800631c:	f7fa fc1c 	bl	8000b58 <__aeabi_d2iz>
 8006320:	4606      	mov	r6, r0
 8006322:	f7fa f8ff 	bl	8000524 <__aeabi_i2d>
 8006326:	4602      	mov	r2, r0
 8006328:	460b      	mov	r3, r1
 800632a:	4640      	mov	r0, r8
 800632c:	4649      	mov	r1, r9
 800632e:	f7f9 ffab 	bl	8000288 <__aeabi_dsub>
 8006332:	3630      	adds	r6, #48	; 0x30
 8006334:	f805 6b01 	strb.w	r6, [r5], #1
 8006338:	4652      	mov	r2, sl
 800633a:	465b      	mov	r3, fp
 800633c:	4680      	mov	r8, r0
 800633e:	4689      	mov	r9, r1
 8006340:	f7fa fbcc 	bl	8000adc <__aeabi_dcmplt>
 8006344:	2800      	cmp	r0, #0
 8006346:	d163      	bne.n	8006410 <_dtoa_r+0x608>
 8006348:	4642      	mov	r2, r8
 800634a:	464b      	mov	r3, r9
 800634c:	4936      	ldr	r1, [pc, #216]	; (8006428 <_dtoa_r+0x620>)
 800634e:	2000      	movs	r0, #0
 8006350:	f7f9 ff9a 	bl	8000288 <__aeabi_dsub>
 8006354:	4652      	mov	r2, sl
 8006356:	465b      	mov	r3, fp
 8006358:	f7fa fbc0 	bl	8000adc <__aeabi_dcmplt>
 800635c:	2800      	cmp	r0, #0
 800635e:	f040 80b5 	bne.w	80064cc <_dtoa_r+0x6c4>
 8006362:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006364:	429d      	cmp	r5, r3
 8006366:	d081      	beq.n	800626c <_dtoa_r+0x464>
 8006368:	4b30      	ldr	r3, [pc, #192]	; (800642c <_dtoa_r+0x624>)
 800636a:	2200      	movs	r2, #0
 800636c:	4650      	mov	r0, sl
 800636e:	4659      	mov	r1, fp
 8006370:	f7fa f942 	bl	80005f8 <__aeabi_dmul>
 8006374:	4b2d      	ldr	r3, [pc, #180]	; (800642c <_dtoa_r+0x624>)
 8006376:	4682      	mov	sl, r0
 8006378:	468b      	mov	fp, r1
 800637a:	4640      	mov	r0, r8
 800637c:	4649      	mov	r1, r9
 800637e:	2200      	movs	r2, #0
 8006380:	f7fa f93a 	bl	80005f8 <__aeabi_dmul>
 8006384:	4680      	mov	r8, r0
 8006386:	4689      	mov	r9, r1
 8006388:	e7c6      	b.n	8006318 <_dtoa_r+0x510>
 800638a:	4650      	mov	r0, sl
 800638c:	4659      	mov	r1, fp
 800638e:	f7fa f933 	bl	80005f8 <__aeabi_dmul>
 8006392:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006394:	9d01      	ldr	r5, [sp, #4]
 8006396:	930f      	str	r3, [sp, #60]	; 0x3c
 8006398:	4682      	mov	sl, r0
 800639a:	468b      	mov	fp, r1
 800639c:	4649      	mov	r1, r9
 800639e:	4640      	mov	r0, r8
 80063a0:	f7fa fbda 	bl	8000b58 <__aeabi_d2iz>
 80063a4:	4606      	mov	r6, r0
 80063a6:	f7fa f8bd 	bl	8000524 <__aeabi_i2d>
 80063aa:	3630      	adds	r6, #48	; 0x30
 80063ac:	4602      	mov	r2, r0
 80063ae:	460b      	mov	r3, r1
 80063b0:	4640      	mov	r0, r8
 80063b2:	4649      	mov	r1, r9
 80063b4:	f7f9 ff68 	bl	8000288 <__aeabi_dsub>
 80063b8:	f805 6b01 	strb.w	r6, [r5], #1
 80063bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80063be:	429d      	cmp	r5, r3
 80063c0:	4680      	mov	r8, r0
 80063c2:	4689      	mov	r9, r1
 80063c4:	f04f 0200 	mov.w	r2, #0
 80063c8:	d124      	bne.n	8006414 <_dtoa_r+0x60c>
 80063ca:	4b1b      	ldr	r3, [pc, #108]	; (8006438 <_dtoa_r+0x630>)
 80063cc:	4650      	mov	r0, sl
 80063ce:	4659      	mov	r1, fp
 80063d0:	f7f9 ff5c 	bl	800028c <__adddf3>
 80063d4:	4602      	mov	r2, r0
 80063d6:	460b      	mov	r3, r1
 80063d8:	4640      	mov	r0, r8
 80063da:	4649      	mov	r1, r9
 80063dc:	f7fa fb9c 	bl	8000b18 <__aeabi_dcmpgt>
 80063e0:	2800      	cmp	r0, #0
 80063e2:	d173      	bne.n	80064cc <_dtoa_r+0x6c4>
 80063e4:	4652      	mov	r2, sl
 80063e6:	465b      	mov	r3, fp
 80063e8:	4913      	ldr	r1, [pc, #76]	; (8006438 <_dtoa_r+0x630>)
 80063ea:	2000      	movs	r0, #0
 80063ec:	f7f9 ff4c 	bl	8000288 <__aeabi_dsub>
 80063f0:	4602      	mov	r2, r0
 80063f2:	460b      	mov	r3, r1
 80063f4:	4640      	mov	r0, r8
 80063f6:	4649      	mov	r1, r9
 80063f8:	f7fa fb70 	bl	8000adc <__aeabi_dcmplt>
 80063fc:	2800      	cmp	r0, #0
 80063fe:	f43f af35 	beq.w	800626c <_dtoa_r+0x464>
 8006402:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006404:	1e6b      	subs	r3, r5, #1
 8006406:	930f      	str	r3, [sp, #60]	; 0x3c
 8006408:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800640c:	2b30      	cmp	r3, #48	; 0x30
 800640e:	d0f8      	beq.n	8006402 <_dtoa_r+0x5fa>
 8006410:	9700      	str	r7, [sp, #0]
 8006412:	e049      	b.n	80064a8 <_dtoa_r+0x6a0>
 8006414:	4b05      	ldr	r3, [pc, #20]	; (800642c <_dtoa_r+0x624>)
 8006416:	f7fa f8ef 	bl	80005f8 <__aeabi_dmul>
 800641a:	4680      	mov	r8, r0
 800641c:	4689      	mov	r9, r1
 800641e:	e7bd      	b.n	800639c <_dtoa_r+0x594>
 8006420:	08008028 	.word	0x08008028
 8006424:	08008000 	.word	0x08008000
 8006428:	3ff00000 	.word	0x3ff00000
 800642c:	40240000 	.word	0x40240000
 8006430:	401c0000 	.word	0x401c0000
 8006434:	40140000 	.word	0x40140000
 8006438:	3fe00000 	.word	0x3fe00000
 800643c:	9d01      	ldr	r5, [sp, #4]
 800643e:	4656      	mov	r6, sl
 8006440:	465f      	mov	r7, fp
 8006442:	4642      	mov	r2, r8
 8006444:	464b      	mov	r3, r9
 8006446:	4630      	mov	r0, r6
 8006448:	4639      	mov	r1, r7
 800644a:	f7fa f9ff 	bl	800084c <__aeabi_ddiv>
 800644e:	f7fa fb83 	bl	8000b58 <__aeabi_d2iz>
 8006452:	4682      	mov	sl, r0
 8006454:	f7fa f866 	bl	8000524 <__aeabi_i2d>
 8006458:	4642      	mov	r2, r8
 800645a:	464b      	mov	r3, r9
 800645c:	f7fa f8cc 	bl	80005f8 <__aeabi_dmul>
 8006460:	4602      	mov	r2, r0
 8006462:	460b      	mov	r3, r1
 8006464:	4630      	mov	r0, r6
 8006466:	4639      	mov	r1, r7
 8006468:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800646c:	f7f9 ff0c 	bl	8000288 <__aeabi_dsub>
 8006470:	f805 6b01 	strb.w	r6, [r5], #1
 8006474:	9e01      	ldr	r6, [sp, #4]
 8006476:	9f03      	ldr	r7, [sp, #12]
 8006478:	1bae      	subs	r6, r5, r6
 800647a:	42b7      	cmp	r7, r6
 800647c:	4602      	mov	r2, r0
 800647e:	460b      	mov	r3, r1
 8006480:	d135      	bne.n	80064ee <_dtoa_r+0x6e6>
 8006482:	f7f9 ff03 	bl	800028c <__adddf3>
 8006486:	4642      	mov	r2, r8
 8006488:	464b      	mov	r3, r9
 800648a:	4606      	mov	r6, r0
 800648c:	460f      	mov	r7, r1
 800648e:	f7fa fb43 	bl	8000b18 <__aeabi_dcmpgt>
 8006492:	b9d0      	cbnz	r0, 80064ca <_dtoa_r+0x6c2>
 8006494:	4642      	mov	r2, r8
 8006496:	464b      	mov	r3, r9
 8006498:	4630      	mov	r0, r6
 800649a:	4639      	mov	r1, r7
 800649c:	f7fa fb14 	bl	8000ac8 <__aeabi_dcmpeq>
 80064a0:	b110      	cbz	r0, 80064a8 <_dtoa_r+0x6a0>
 80064a2:	f01a 0f01 	tst.w	sl, #1
 80064a6:	d110      	bne.n	80064ca <_dtoa_r+0x6c2>
 80064a8:	4620      	mov	r0, r4
 80064aa:	ee18 1a10 	vmov	r1, s16
 80064ae:	f000 faf3 	bl	8006a98 <_Bfree>
 80064b2:	2300      	movs	r3, #0
 80064b4:	9800      	ldr	r0, [sp, #0]
 80064b6:	702b      	strb	r3, [r5, #0]
 80064b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80064ba:	3001      	adds	r0, #1
 80064bc:	6018      	str	r0, [r3, #0]
 80064be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	f43f acf1 	beq.w	8005ea8 <_dtoa_r+0xa0>
 80064c6:	601d      	str	r5, [r3, #0]
 80064c8:	e4ee      	b.n	8005ea8 <_dtoa_r+0xa0>
 80064ca:	9f00      	ldr	r7, [sp, #0]
 80064cc:	462b      	mov	r3, r5
 80064ce:	461d      	mov	r5, r3
 80064d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80064d4:	2a39      	cmp	r2, #57	; 0x39
 80064d6:	d106      	bne.n	80064e6 <_dtoa_r+0x6de>
 80064d8:	9a01      	ldr	r2, [sp, #4]
 80064da:	429a      	cmp	r2, r3
 80064dc:	d1f7      	bne.n	80064ce <_dtoa_r+0x6c6>
 80064de:	9901      	ldr	r1, [sp, #4]
 80064e0:	2230      	movs	r2, #48	; 0x30
 80064e2:	3701      	adds	r7, #1
 80064e4:	700a      	strb	r2, [r1, #0]
 80064e6:	781a      	ldrb	r2, [r3, #0]
 80064e8:	3201      	adds	r2, #1
 80064ea:	701a      	strb	r2, [r3, #0]
 80064ec:	e790      	b.n	8006410 <_dtoa_r+0x608>
 80064ee:	4ba6      	ldr	r3, [pc, #664]	; (8006788 <_dtoa_r+0x980>)
 80064f0:	2200      	movs	r2, #0
 80064f2:	f7fa f881 	bl	80005f8 <__aeabi_dmul>
 80064f6:	2200      	movs	r2, #0
 80064f8:	2300      	movs	r3, #0
 80064fa:	4606      	mov	r6, r0
 80064fc:	460f      	mov	r7, r1
 80064fe:	f7fa fae3 	bl	8000ac8 <__aeabi_dcmpeq>
 8006502:	2800      	cmp	r0, #0
 8006504:	d09d      	beq.n	8006442 <_dtoa_r+0x63a>
 8006506:	e7cf      	b.n	80064a8 <_dtoa_r+0x6a0>
 8006508:	9a08      	ldr	r2, [sp, #32]
 800650a:	2a00      	cmp	r2, #0
 800650c:	f000 80d7 	beq.w	80066be <_dtoa_r+0x8b6>
 8006510:	9a06      	ldr	r2, [sp, #24]
 8006512:	2a01      	cmp	r2, #1
 8006514:	f300 80ba 	bgt.w	800668c <_dtoa_r+0x884>
 8006518:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800651a:	2a00      	cmp	r2, #0
 800651c:	f000 80b2 	beq.w	8006684 <_dtoa_r+0x87c>
 8006520:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006524:	9e07      	ldr	r6, [sp, #28]
 8006526:	9d04      	ldr	r5, [sp, #16]
 8006528:	9a04      	ldr	r2, [sp, #16]
 800652a:	441a      	add	r2, r3
 800652c:	9204      	str	r2, [sp, #16]
 800652e:	9a05      	ldr	r2, [sp, #20]
 8006530:	2101      	movs	r1, #1
 8006532:	441a      	add	r2, r3
 8006534:	4620      	mov	r0, r4
 8006536:	9205      	str	r2, [sp, #20]
 8006538:	f000 fb66 	bl	8006c08 <__i2b>
 800653c:	4607      	mov	r7, r0
 800653e:	2d00      	cmp	r5, #0
 8006540:	dd0c      	ble.n	800655c <_dtoa_r+0x754>
 8006542:	9b05      	ldr	r3, [sp, #20]
 8006544:	2b00      	cmp	r3, #0
 8006546:	dd09      	ble.n	800655c <_dtoa_r+0x754>
 8006548:	42ab      	cmp	r3, r5
 800654a:	9a04      	ldr	r2, [sp, #16]
 800654c:	bfa8      	it	ge
 800654e:	462b      	movge	r3, r5
 8006550:	1ad2      	subs	r2, r2, r3
 8006552:	9204      	str	r2, [sp, #16]
 8006554:	9a05      	ldr	r2, [sp, #20]
 8006556:	1aed      	subs	r5, r5, r3
 8006558:	1ad3      	subs	r3, r2, r3
 800655a:	9305      	str	r3, [sp, #20]
 800655c:	9b07      	ldr	r3, [sp, #28]
 800655e:	b31b      	cbz	r3, 80065a8 <_dtoa_r+0x7a0>
 8006560:	9b08      	ldr	r3, [sp, #32]
 8006562:	2b00      	cmp	r3, #0
 8006564:	f000 80af 	beq.w	80066c6 <_dtoa_r+0x8be>
 8006568:	2e00      	cmp	r6, #0
 800656a:	dd13      	ble.n	8006594 <_dtoa_r+0x78c>
 800656c:	4639      	mov	r1, r7
 800656e:	4632      	mov	r2, r6
 8006570:	4620      	mov	r0, r4
 8006572:	f000 fc09 	bl	8006d88 <__pow5mult>
 8006576:	ee18 2a10 	vmov	r2, s16
 800657a:	4601      	mov	r1, r0
 800657c:	4607      	mov	r7, r0
 800657e:	4620      	mov	r0, r4
 8006580:	f000 fb58 	bl	8006c34 <__multiply>
 8006584:	ee18 1a10 	vmov	r1, s16
 8006588:	4680      	mov	r8, r0
 800658a:	4620      	mov	r0, r4
 800658c:	f000 fa84 	bl	8006a98 <_Bfree>
 8006590:	ee08 8a10 	vmov	s16, r8
 8006594:	9b07      	ldr	r3, [sp, #28]
 8006596:	1b9a      	subs	r2, r3, r6
 8006598:	d006      	beq.n	80065a8 <_dtoa_r+0x7a0>
 800659a:	ee18 1a10 	vmov	r1, s16
 800659e:	4620      	mov	r0, r4
 80065a0:	f000 fbf2 	bl	8006d88 <__pow5mult>
 80065a4:	ee08 0a10 	vmov	s16, r0
 80065a8:	2101      	movs	r1, #1
 80065aa:	4620      	mov	r0, r4
 80065ac:	f000 fb2c 	bl	8006c08 <__i2b>
 80065b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	4606      	mov	r6, r0
 80065b6:	f340 8088 	ble.w	80066ca <_dtoa_r+0x8c2>
 80065ba:	461a      	mov	r2, r3
 80065bc:	4601      	mov	r1, r0
 80065be:	4620      	mov	r0, r4
 80065c0:	f000 fbe2 	bl	8006d88 <__pow5mult>
 80065c4:	9b06      	ldr	r3, [sp, #24]
 80065c6:	2b01      	cmp	r3, #1
 80065c8:	4606      	mov	r6, r0
 80065ca:	f340 8081 	ble.w	80066d0 <_dtoa_r+0x8c8>
 80065ce:	f04f 0800 	mov.w	r8, #0
 80065d2:	6933      	ldr	r3, [r6, #16]
 80065d4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80065d8:	6918      	ldr	r0, [r3, #16]
 80065da:	f000 fac5 	bl	8006b68 <__hi0bits>
 80065de:	f1c0 0020 	rsb	r0, r0, #32
 80065e2:	9b05      	ldr	r3, [sp, #20]
 80065e4:	4418      	add	r0, r3
 80065e6:	f010 001f 	ands.w	r0, r0, #31
 80065ea:	f000 8092 	beq.w	8006712 <_dtoa_r+0x90a>
 80065ee:	f1c0 0320 	rsb	r3, r0, #32
 80065f2:	2b04      	cmp	r3, #4
 80065f4:	f340 808a 	ble.w	800670c <_dtoa_r+0x904>
 80065f8:	f1c0 001c 	rsb	r0, r0, #28
 80065fc:	9b04      	ldr	r3, [sp, #16]
 80065fe:	4403      	add	r3, r0
 8006600:	9304      	str	r3, [sp, #16]
 8006602:	9b05      	ldr	r3, [sp, #20]
 8006604:	4403      	add	r3, r0
 8006606:	4405      	add	r5, r0
 8006608:	9305      	str	r3, [sp, #20]
 800660a:	9b04      	ldr	r3, [sp, #16]
 800660c:	2b00      	cmp	r3, #0
 800660e:	dd07      	ble.n	8006620 <_dtoa_r+0x818>
 8006610:	ee18 1a10 	vmov	r1, s16
 8006614:	461a      	mov	r2, r3
 8006616:	4620      	mov	r0, r4
 8006618:	f000 fc10 	bl	8006e3c <__lshift>
 800661c:	ee08 0a10 	vmov	s16, r0
 8006620:	9b05      	ldr	r3, [sp, #20]
 8006622:	2b00      	cmp	r3, #0
 8006624:	dd05      	ble.n	8006632 <_dtoa_r+0x82a>
 8006626:	4631      	mov	r1, r6
 8006628:	461a      	mov	r2, r3
 800662a:	4620      	mov	r0, r4
 800662c:	f000 fc06 	bl	8006e3c <__lshift>
 8006630:	4606      	mov	r6, r0
 8006632:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006634:	2b00      	cmp	r3, #0
 8006636:	d06e      	beq.n	8006716 <_dtoa_r+0x90e>
 8006638:	ee18 0a10 	vmov	r0, s16
 800663c:	4631      	mov	r1, r6
 800663e:	f000 fc6d 	bl	8006f1c <__mcmp>
 8006642:	2800      	cmp	r0, #0
 8006644:	da67      	bge.n	8006716 <_dtoa_r+0x90e>
 8006646:	9b00      	ldr	r3, [sp, #0]
 8006648:	3b01      	subs	r3, #1
 800664a:	ee18 1a10 	vmov	r1, s16
 800664e:	9300      	str	r3, [sp, #0]
 8006650:	220a      	movs	r2, #10
 8006652:	2300      	movs	r3, #0
 8006654:	4620      	mov	r0, r4
 8006656:	f000 fa41 	bl	8006adc <__multadd>
 800665a:	9b08      	ldr	r3, [sp, #32]
 800665c:	ee08 0a10 	vmov	s16, r0
 8006660:	2b00      	cmp	r3, #0
 8006662:	f000 81b1 	beq.w	80069c8 <_dtoa_r+0xbc0>
 8006666:	2300      	movs	r3, #0
 8006668:	4639      	mov	r1, r7
 800666a:	220a      	movs	r2, #10
 800666c:	4620      	mov	r0, r4
 800666e:	f000 fa35 	bl	8006adc <__multadd>
 8006672:	9b02      	ldr	r3, [sp, #8]
 8006674:	2b00      	cmp	r3, #0
 8006676:	4607      	mov	r7, r0
 8006678:	f300 808e 	bgt.w	8006798 <_dtoa_r+0x990>
 800667c:	9b06      	ldr	r3, [sp, #24]
 800667e:	2b02      	cmp	r3, #2
 8006680:	dc51      	bgt.n	8006726 <_dtoa_r+0x91e>
 8006682:	e089      	b.n	8006798 <_dtoa_r+0x990>
 8006684:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006686:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800668a:	e74b      	b.n	8006524 <_dtoa_r+0x71c>
 800668c:	9b03      	ldr	r3, [sp, #12]
 800668e:	1e5e      	subs	r6, r3, #1
 8006690:	9b07      	ldr	r3, [sp, #28]
 8006692:	42b3      	cmp	r3, r6
 8006694:	bfbf      	itttt	lt
 8006696:	9b07      	ldrlt	r3, [sp, #28]
 8006698:	9607      	strlt	r6, [sp, #28]
 800669a:	1af2      	sublt	r2, r6, r3
 800669c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800669e:	bfb6      	itet	lt
 80066a0:	189b      	addlt	r3, r3, r2
 80066a2:	1b9e      	subge	r6, r3, r6
 80066a4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80066a6:	9b03      	ldr	r3, [sp, #12]
 80066a8:	bfb8      	it	lt
 80066aa:	2600      	movlt	r6, #0
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	bfb7      	itett	lt
 80066b0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80066b4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80066b8:	1a9d      	sublt	r5, r3, r2
 80066ba:	2300      	movlt	r3, #0
 80066bc:	e734      	b.n	8006528 <_dtoa_r+0x720>
 80066be:	9e07      	ldr	r6, [sp, #28]
 80066c0:	9d04      	ldr	r5, [sp, #16]
 80066c2:	9f08      	ldr	r7, [sp, #32]
 80066c4:	e73b      	b.n	800653e <_dtoa_r+0x736>
 80066c6:	9a07      	ldr	r2, [sp, #28]
 80066c8:	e767      	b.n	800659a <_dtoa_r+0x792>
 80066ca:	9b06      	ldr	r3, [sp, #24]
 80066cc:	2b01      	cmp	r3, #1
 80066ce:	dc18      	bgt.n	8006702 <_dtoa_r+0x8fa>
 80066d0:	f1ba 0f00 	cmp.w	sl, #0
 80066d4:	d115      	bne.n	8006702 <_dtoa_r+0x8fa>
 80066d6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80066da:	b993      	cbnz	r3, 8006702 <_dtoa_r+0x8fa>
 80066dc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80066e0:	0d1b      	lsrs	r3, r3, #20
 80066e2:	051b      	lsls	r3, r3, #20
 80066e4:	b183      	cbz	r3, 8006708 <_dtoa_r+0x900>
 80066e6:	9b04      	ldr	r3, [sp, #16]
 80066e8:	3301      	adds	r3, #1
 80066ea:	9304      	str	r3, [sp, #16]
 80066ec:	9b05      	ldr	r3, [sp, #20]
 80066ee:	3301      	adds	r3, #1
 80066f0:	9305      	str	r3, [sp, #20]
 80066f2:	f04f 0801 	mov.w	r8, #1
 80066f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	f47f af6a 	bne.w	80065d2 <_dtoa_r+0x7ca>
 80066fe:	2001      	movs	r0, #1
 8006700:	e76f      	b.n	80065e2 <_dtoa_r+0x7da>
 8006702:	f04f 0800 	mov.w	r8, #0
 8006706:	e7f6      	b.n	80066f6 <_dtoa_r+0x8ee>
 8006708:	4698      	mov	r8, r3
 800670a:	e7f4      	b.n	80066f6 <_dtoa_r+0x8ee>
 800670c:	f43f af7d 	beq.w	800660a <_dtoa_r+0x802>
 8006710:	4618      	mov	r0, r3
 8006712:	301c      	adds	r0, #28
 8006714:	e772      	b.n	80065fc <_dtoa_r+0x7f4>
 8006716:	9b03      	ldr	r3, [sp, #12]
 8006718:	2b00      	cmp	r3, #0
 800671a:	dc37      	bgt.n	800678c <_dtoa_r+0x984>
 800671c:	9b06      	ldr	r3, [sp, #24]
 800671e:	2b02      	cmp	r3, #2
 8006720:	dd34      	ble.n	800678c <_dtoa_r+0x984>
 8006722:	9b03      	ldr	r3, [sp, #12]
 8006724:	9302      	str	r3, [sp, #8]
 8006726:	9b02      	ldr	r3, [sp, #8]
 8006728:	b96b      	cbnz	r3, 8006746 <_dtoa_r+0x93e>
 800672a:	4631      	mov	r1, r6
 800672c:	2205      	movs	r2, #5
 800672e:	4620      	mov	r0, r4
 8006730:	f000 f9d4 	bl	8006adc <__multadd>
 8006734:	4601      	mov	r1, r0
 8006736:	4606      	mov	r6, r0
 8006738:	ee18 0a10 	vmov	r0, s16
 800673c:	f000 fbee 	bl	8006f1c <__mcmp>
 8006740:	2800      	cmp	r0, #0
 8006742:	f73f adbb 	bgt.w	80062bc <_dtoa_r+0x4b4>
 8006746:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006748:	9d01      	ldr	r5, [sp, #4]
 800674a:	43db      	mvns	r3, r3
 800674c:	9300      	str	r3, [sp, #0]
 800674e:	f04f 0800 	mov.w	r8, #0
 8006752:	4631      	mov	r1, r6
 8006754:	4620      	mov	r0, r4
 8006756:	f000 f99f 	bl	8006a98 <_Bfree>
 800675a:	2f00      	cmp	r7, #0
 800675c:	f43f aea4 	beq.w	80064a8 <_dtoa_r+0x6a0>
 8006760:	f1b8 0f00 	cmp.w	r8, #0
 8006764:	d005      	beq.n	8006772 <_dtoa_r+0x96a>
 8006766:	45b8      	cmp	r8, r7
 8006768:	d003      	beq.n	8006772 <_dtoa_r+0x96a>
 800676a:	4641      	mov	r1, r8
 800676c:	4620      	mov	r0, r4
 800676e:	f000 f993 	bl	8006a98 <_Bfree>
 8006772:	4639      	mov	r1, r7
 8006774:	4620      	mov	r0, r4
 8006776:	f000 f98f 	bl	8006a98 <_Bfree>
 800677a:	e695      	b.n	80064a8 <_dtoa_r+0x6a0>
 800677c:	2600      	movs	r6, #0
 800677e:	4637      	mov	r7, r6
 8006780:	e7e1      	b.n	8006746 <_dtoa_r+0x93e>
 8006782:	9700      	str	r7, [sp, #0]
 8006784:	4637      	mov	r7, r6
 8006786:	e599      	b.n	80062bc <_dtoa_r+0x4b4>
 8006788:	40240000 	.word	0x40240000
 800678c:	9b08      	ldr	r3, [sp, #32]
 800678e:	2b00      	cmp	r3, #0
 8006790:	f000 80ca 	beq.w	8006928 <_dtoa_r+0xb20>
 8006794:	9b03      	ldr	r3, [sp, #12]
 8006796:	9302      	str	r3, [sp, #8]
 8006798:	2d00      	cmp	r5, #0
 800679a:	dd05      	ble.n	80067a8 <_dtoa_r+0x9a0>
 800679c:	4639      	mov	r1, r7
 800679e:	462a      	mov	r2, r5
 80067a0:	4620      	mov	r0, r4
 80067a2:	f000 fb4b 	bl	8006e3c <__lshift>
 80067a6:	4607      	mov	r7, r0
 80067a8:	f1b8 0f00 	cmp.w	r8, #0
 80067ac:	d05b      	beq.n	8006866 <_dtoa_r+0xa5e>
 80067ae:	6879      	ldr	r1, [r7, #4]
 80067b0:	4620      	mov	r0, r4
 80067b2:	f000 f931 	bl	8006a18 <_Balloc>
 80067b6:	4605      	mov	r5, r0
 80067b8:	b928      	cbnz	r0, 80067c6 <_dtoa_r+0x9be>
 80067ba:	4b87      	ldr	r3, [pc, #540]	; (80069d8 <_dtoa_r+0xbd0>)
 80067bc:	4602      	mov	r2, r0
 80067be:	f240 21ea 	movw	r1, #746	; 0x2ea
 80067c2:	f7ff bb3b 	b.w	8005e3c <_dtoa_r+0x34>
 80067c6:	693a      	ldr	r2, [r7, #16]
 80067c8:	3202      	adds	r2, #2
 80067ca:	0092      	lsls	r2, r2, #2
 80067cc:	f107 010c 	add.w	r1, r7, #12
 80067d0:	300c      	adds	r0, #12
 80067d2:	f000 f913 	bl	80069fc <memcpy>
 80067d6:	2201      	movs	r2, #1
 80067d8:	4629      	mov	r1, r5
 80067da:	4620      	mov	r0, r4
 80067dc:	f000 fb2e 	bl	8006e3c <__lshift>
 80067e0:	9b01      	ldr	r3, [sp, #4]
 80067e2:	f103 0901 	add.w	r9, r3, #1
 80067e6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80067ea:	4413      	add	r3, r2
 80067ec:	9305      	str	r3, [sp, #20]
 80067ee:	f00a 0301 	and.w	r3, sl, #1
 80067f2:	46b8      	mov	r8, r7
 80067f4:	9304      	str	r3, [sp, #16]
 80067f6:	4607      	mov	r7, r0
 80067f8:	4631      	mov	r1, r6
 80067fa:	ee18 0a10 	vmov	r0, s16
 80067fe:	f7ff fa75 	bl	8005cec <quorem>
 8006802:	4641      	mov	r1, r8
 8006804:	9002      	str	r0, [sp, #8]
 8006806:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800680a:	ee18 0a10 	vmov	r0, s16
 800680e:	f000 fb85 	bl	8006f1c <__mcmp>
 8006812:	463a      	mov	r2, r7
 8006814:	9003      	str	r0, [sp, #12]
 8006816:	4631      	mov	r1, r6
 8006818:	4620      	mov	r0, r4
 800681a:	f000 fb9b 	bl	8006f54 <__mdiff>
 800681e:	68c2      	ldr	r2, [r0, #12]
 8006820:	f109 3bff 	add.w	fp, r9, #4294967295
 8006824:	4605      	mov	r5, r0
 8006826:	bb02      	cbnz	r2, 800686a <_dtoa_r+0xa62>
 8006828:	4601      	mov	r1, r0
 800682a:	ee18 0a10 	vmov	r0, s16
 800682e:	f000 fb75 	bl	8006f1c <__mcmp>
 8006832:	4602      	mov	r2, r0
 8006834:	4629      	mov	r1, r5
 8006836:	4620      	mov	r0, r4
 8006838:	9207      	str	r2, [sp, #28]
 800683a:	f000 f92d 	bl	8006a98 <_Bfree>
 800683e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006842:	ea43 0102 	orr.w	r1, r3, r2
 8006846:	9b04      	ldr	r3, [sp, #16]
 8006848:	430b      	orrs	r3, r1
 800684a:	464d      	mov	r5, r9
 800684c:	d10f      	bne.n	800686e <_dtoa_r+0xa66>
 800684e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006852:	d02a      	beq.n	80068aa <_dtoa_r+0xaa2>
 8006854:	9b03      	ldr	r3, [sp, #12]
 8006856:	2b00      	cmp	r3, #0
 8006858:	dd02      	ble.n	8006860 <_dtoa_r+0xa58>
 800685a:	9b02      	ldr	r3, [sp, #8]
 800685c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006860:	f88b a000 	strb.w	sl, [fp]
 8006864:	e775      	b.n	8006752 <_dtoa_r+0x94a>
 8006866:	4638      	mov	r0, r7
 8006868:	e7ba      	b.n	80067e0 <_dtoa_r+0x9d8>
 800686a:	2201      	movs	r2, #1
 800686c:	e7e2      	b.n	8006834 <_dtoa_r+0xa2c>
 800686e:	9b03      	ldr	r3, [sp, #12]
 8006870:	2b00      	cmp	r3, #0
 8006872:	db04      	blt.n	800687e <_dtoa_r+0xa76>
 8006874:	9906      	ldr	r1, [sp, #24]
 8006876:	430b      	orrs	r3, r1
 8006878:	9904      	ldr	r1, [sp, #16]
 800687a:	430b      	orrs	r3, r1
 800687c:	d122      	bne.n	80068c4 <_dtoa_r+0xabc>
 800687e:	2a00      	cmp	r2, #0
 8006880:	ddee      	ble.n	8006860 <_dtoa_r+0xa58>
 8006882:	ee18 1a10 	vmov	r1, s16
 8006886:	2201      	movs	r2, #1
 8006888:	4620      	mov	r0, r4
 800688a:	f000 fad7 	bl	8006e3c <__lshift>
 800688e:	4631      	mov	r1, r6
 8006890:	ee08 0a10 	vmov	s16, r0
 8006894:	f000 fb42 	bl	8006f1c <__mcmp>
 8006898:	2800      	cmp	r0, #0
 800689a:	dc03      	bgt.n	80068a4 <_dtoa_r+0xa9c>
 800689c:	d1e0      	bne.n	8006860 <_dtoa_r+0xa58>
 800689e:	f01a 0f01 	tst.w	sl, #1
 80068a2:	d0dd      	beq.n	8006860 <_dtoa_r+0xa58>
 80068a4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80068a8:	d1d7      	bne.n	800685a <_dtoa_r+0xa52>
 80068aa:	2339      	movs	r3, #57	; 0x39
 80068ac:	f88b 3000 	strb.w	r3, [fp]
 80068b0:	462b      	mov	r3, r5
 80068b2:	461d      	mov	r5, r3
 80068b4:	3b01      	subs	r3, #1
 80068b6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80068ba:	2a39      	cmp	r2, #57	; 0x39
 80068bc:	d071      	beq.n	80069a2 <_dtoa_r+0xb9a>
 80068be:	3201      	adds	r2, #1
 80068c0:	701a      	strb	r2, [r3, #0]
 80068c2:	e746      	b.n	8006752 <_dtoa_r+0x94a>
 80068c4:	2a00      	cmp	r2, #0
 80068c6:	dd07      	ble.n	80068d8 <_dtoa_r+0xad0>
 80068c8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80068cc:	d0ed      	beq.n	80068aa <_dtoa_r+0xaa2>
 80068ce:	f10a 0301 	add.w	r3, sl, #1
 80068d2:	f88b 3000 	strb.w	r3, [fp]
 80068d6:	e73c      	b.n	8006752 <_dtoa_r+0x94a>
 80068d8:	9b05      	ldr	r3, [sp, #20]
 80068da:	f809 ac01 	strb.w	sl, [r9, #-1]
 80068de:	4599      	cmp	r9, r3
 80068e0:	d047      	beq.n	8006972 <_dtoa_r+0xb6a>
 80068e2:	ee18 1a10 	vmov	r1, s16
 80068e6:	2300      	movs	r3, #0
 80068e8:	220a      	movs	r2, #10
 80068ea:	4620      	mov	r0, r4
 80068ec:	f000 f8f6 	bl	8006adc <__multadd>
 80068f0:	45b8      	cmp	r8, r7
 80068f2:	ee08 0a10 	vmov	s16, r0
 80068f6:	f04f 0300 	mov.w	r3, #0
 80068fa:	f04f 020a 	mov.w	r2, #10
 80068fe:	4641      	mov	r1, r8
 8006900:	4620      	mov	r0, r4
 8006902:	d106      	bne.n	8006912 <_dtoa_r+0xb0a>
 8006904:	f000 f8ea 	bl	8006adc <__multadd>
 8006908:	4680      	mov	r8, r0
 800690a:	4607      	mov	r7, r0
 800690c:	f109 0901 	add.w	r9, r9, #1
 8006910:	e772      	b.n	80067f8 <_dtoa_r+0x9f0>
 8006912:	f000 f8e3 	bl	8006adc <__multadd>
 8006916:	4639      	mov	r1, r7
 8006918:	4680      	mov	r8, r0
 800691a:	2300      	movs	r3, #0
 800691c:	220a      	movs	r2, #10
 800691e:	4620      	mov	r0, r4
 8006920:	f000 f8dc 	bl	8006adc <__multadd>
 8006924:	4607      	mov	r7, r0
 8006926:	e7f1      	b.n	800690c <_dtoa_r+0xb04>
 8006928:	9b03      	ldr	r3, [sp, #12]
 800692a:	9302      	str	r3, [sp, #8]
 800692c:	9d01      	ldr	r5, [sp, #4]
 800692e:	ee18 0a10 	vmov	r0, s16
 8006932:	4631      	mov	r1, r6
 8006934:	f7ff f9da 	bl	8005cec <quorem>
 8006938:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800693c:	9b01      	ldr	r3, [sp, #4]
 800693e:	f805 ab01 	strb.w	sl, [r5], #1
 8006942:	1aea      	subs	r2, r5, r3
 8006944:	9b02      	ldr	r3, [sp, #8]
 8006946:	4293      	cmp	r3, r2
 8006948:	dd09      	ble.n	800695e <_dtoa_r+0xb56>
 800694a:	ee18 1a10 	vmov	r1, s16
 800694e:	2300      	movs	r3, #0
 8006950:	220a      	movs	r2, #10
 8006952:	4620      	mov	r0, r4
 8006954:	f000 f8c2 	bl	8006adc <__multadd>
 8006958:	ee08 0a10 	vmov	s16, r0
 800695c:	e7e7      	b.n	800692e <_dtoa_r+0xb26>
 800695e:	9b02      	ldr	r3, [sp, #8]
 8006960:	2b00      	cmp	r3, #0
 8006962:	bfc8      	it	gt
 8006964:	461d      	movgt	r5, r3
 8006966:	9b01      	ldr	r3, [sp, #4]
 8006968:	bfd8      	it	le
 800696a:	2501      	movle	r5, #1
 800696c:	441d      	add	r5, r3
 800696e:	f04f 0800 	mov.w	r8, #0
 8006972:	ee18 1a10 	vmov	r1, s16
 8006976:	2201      	movs	r2, #1
 8006978:	4620      	mov	r0, r4
 800697a:	f000 fa5f 	bl	8006e3c <__lshift>
 800697e:	4631      	mov	r1, r6
 8006980:	ee08 0a10 	vmov	s16, r0
 8006984:	f000 faca 	bl	8006f1c <__mcmp>
 8006988:	2800      	cmp	r0, #0
 800698a:	dc91      	bgt.n	80068b0 <_dtoa_r+0xaa8>
 800698c:	d102      	bne.n	8006994 <_dtoa_r+0xb8c>
 800698e:	f01a 0f01 	tst.w	sl, #1
 8006992:	d18d      	bne.n	80068b0 <_dtoa_r+0xaa8>
 8006994:	462b      	mov	r3, r5
 8006996:	461d      	mov	r5, r3
 8006998:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800699c:	2a30      	cmp	r2, #48	; 0x30
 800699e:	d0fa      	beq.n	8006996 <_dtoa_r+0xb8e>
 80069a0:	e6d7      	b.n	8006752 <_dtoa_r+0x94a>
 80069a2:	9a01      	ldr	r2, [sp, #4]
 80069a4:	429a      	cmp	r2, r3
 80069a6:	d184      	bne.n	80068b2 <_dtoa_r+0xaaa>
 80069a8:	9b00      	ldr	r3, [sp, #0]
 80069aa:	3301      	adds	r3, #1
 80069ac:	9300      	str	r3, [sp, #0]
 80069ae:	2331      	movs	r3, #49	; 0x31
 80069b0:	7013      	strb	r3, [r2, #0]
 80069b2:	e6ce      	b.n	8006752 <_dtoa_r+0x94a>
 80069b4:	4b09      	ldr	r3, [pc, #36]	; (80069dc <_dtoa_r+0xbd4>)
 80069b6:	f7ff ba95 	b.w	8005ee4 <_dtoa_r+0xdc>
 80069ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80069bc:	2b00      	cmp	r3, #0
 80069be:	f47f aa6e 	bne.w	8005e9e <_dtoa_r+0x96>
 80069c2:	4b07      	ldr	r3, [pc, #28]	; (80069e0 <_dtoa_r+0xbd8>)
 80069c4:	f7ff ba8e 	b.w	8005ee4 <_dtoa_r+0xdc>
 80069c8:	9b02      	ldr	r3, [sp, #8]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	dcae      	bgt.n	800692c <_dtoa_r+0xb24>
 80069ce:	9b06      	ldr	r3, [sp, #24]
 80069d0:	2b02      	cmp	r3, #2
 80069d2:	f73f aea8 	bgt.w	8006726 <_dtoa_r+0x91e>
 80069d6:	e7a9      	b.n	800692c <_dtoa_r+0xb24>
 80069d8:	08007f93 	.word	0x08007f93
 80069dc:	08007ef0 	.word	0x08007ef0
 80069e0:	08007f14 	.word	0x08007f14

080069e4 <_localeconv_r>:
 80069e4:	4800      	ldr	r0, [pc, #0]	; (80069e8 <_localeconv_r+0x4>)
 80069e6:	4770      	bx	lr
 80069e8:	20000160 	.word	0x20000160

080069ec <malloc>:
 80069ec:	4b02      	ldr	r3, [pc, #8]	; (80069f8 <malloc+0xc>)
 80069ee:	4601      	mov	r1, r0
 80069f0:	6818      	ldr	r0, [r3, #0]
 80069f2:	f000 bc17 	b.w	8007224 <_malloc_r>
 80069f6:	bf00      	nop
 80069f8:	2000000c 	.word	0x2000000c

080069fc <memcpy>:
 80069fc:	440a      	add	r2, r1
 80069fe:	4291      	cmp	r1, r2
 8006a00:	f100 33ff 	add.w	r3, r0, #4294967295
 8006a04:	d100      	bne.n	8006a08 <memcpy+0xc>
 8006a06:	4770      	bx	lr
 8006a08:	b510      	push	{r4, lr}
 8006a0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006a12:	4291      	cmp	r1, r2
 8006a14:	d1f9      	bne.n	8006a0a <memcpy+0xe>
 8006a16:	bd10      	pop	{r4, pc}

08006a18 <_Balloc>:
 8006a18:	b570      	push	{r4, r5, r6, lr}
 8006a1a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006a1c:	4604      	mov	r4, r0
 8006a1e:	460d      	mov	r5, r1
 8006a20:	b976      	cbnz	r6, 8006a40 <_Balloc+0x28>
 8006a22:	2010      	movs	r0, #16
 8006a24:	f7ff ffe2 	bl	80069ec <malloc>
 8006a28:	4602      	mov	r2, r0
 8006a2a:	6260      	str	r0, [r4, #36]	; 0x24
 8006a2c:	b920      	cbnz	r0, 8006a38 <_Balloc+0x20>
 8006a2e:	4b18      	ldr	r3, [pc, #96]	; (8006a90 <_Balloc+0x78>)
 8006a30:	4818      	ldr	r0, [pc, #96]	; (8006a94 <_Balloc+0x7c>)
 8006a32:	2166      	movs	r1, #102	; 0x66
 8006a34:	f000 fc7a 	bl	800732c <__assert_func>
 8006a38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006a3c:	6006      	str	r6, [r0, #0]
 8006a3e:	60c6      	str	r6, [r0, #12]
 8006a40:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006a42:	68f3      	ldr	r3, [r6, #12]
 8006a44:	b183      	cbz	r3, 8006a68 <_Balloc+0x50>
 8006a46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a48:	68db      	ldr	r3, [r3, #12]
 8006a4a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006a4e:	b9b8      	cbnz	r0, 8006a80 <_Balloc+0x68>
 8006a50:	2101      	movs	r1, #1
 8006a52:	fa01 f605 	lsl.w	r6, r1, r5
 8006a56:	1d72      	adds	r2, r6, #5
 8006a58:	0092      	lsls	r2, r2, #2
 8006a5a:	4620      	mov	r0, r4
 8006a5c:	f000 fb60 	bl	8007120 <_calloc_r>
 8006a60:	b160      	cbz	r0, 8006a7c <_Balloc+0x64>
 8006a62:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006a66:	e00e      	b.n	8006a86 <_Balloc+0x6e>
 8006a68:	2221      	movs	r2, #33	; 0x21
 8006a6a:	2104      	movs	r1, #4
 8006a6c:	4620      	mov	r0, r4
 8006a6e:	f000 fb57 	bl	8007120 <_calloc_r>
 8006a72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a74:	60f0      	str	r0, [r6, #12]
 8006a76:	68db      	ldr	r3, [r3, #12]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d1e4      	bne.n	8006a46 <_Balloc+0x2e>
 8006a7c:	2000      	movs	r0, #0
 8006a7e:	bd70      	pop	{r4, r5, r6, pc}
 8006a80:	6802      	ldr	r2, [r0, #0]
 8006a82:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006a86:	2300      	movs	r3, #0
 8006a88:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006a8c:	e7f7      	b.n	8006a7e <_Balloc+0x66>
 8006a8e:	bf00      	nop
 8006a90:	08007f21 	.word	0x08007f21
 8006a94:	08007fa4 	.word	0x08007fa4

08006a98 <_Bfree>:
 8006a98:	b570      	push	{r4, r5, r6, lr}
 8006a9a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006a9c:	4605      	mov	r5, r0
 8006a9e:	460c      	mov	r4, r1
 8006aa0:	b976      	cbnz	r6, 8006ac0 <_Bfree+0x28>
 8006aa2:	2010      	movs	r0, #16
 8006aa4:	f7ff ffa2 	bl	80069ec <malloc>
 8006aa8:	4602      	mov	r2, r0
 8006aaa:	6268      	str	r0, [r5, #36]	; 0x24
 8006aac:	b920      	cbnz	r0, 8006ab8 <_Bfree+0x20>
 8006aae:	4b09      	ldr	r3, [pc, #36]	; (8006ad4 <_Bfree+0x3c>)
 8006ab0:	4809      	ldr	r0, [pc, #36]	; (8006ad8 <_Bfree+0x40>)
 8006ab2:	218a      	movs	r1, #138	; 0x8a
 8006ab4:	f000 fc3a 	bl	800732c <__assert_func>
 8006ab8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006abc:	6006      	str	r6, [r0, #0]
 8006abe:	60c6      	str	r6, [r0, #12]
 8006ac0:	b13c      	cbz	r4, 8006ad2 <_Bfree+0x3a>
 8006ac2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006ac4:	6862      	ldr	r2, [r4, #4]
 8006ac6:	68db      	ldr	r3, [r3, #12]
 8006ac8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006acc:	6021      	str	r1, [r4, #0]
 8006ace:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006ad2:	bd70      	pop	{r4, r5, r6, pc}
 8006ad4:	08007f21 	.word	0x08007f21
 8006ad8:	08007fa4 	.word	0x08007fa4

08006adc <__multadd>:
 8006adc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ae0:	690d      	ldr	r5, [r1, #16]
 8006ae2:	4607      	mov	r7, r0
 8006ae4:	460c      	mov	r4, r1
 8006ae6:	461e      	mov	r6, r3
 8006ae8:	f101 0c14 	add.w	ip, r1, #20
 8006aec:	2000      	movs	r0, #0
 8006aee:	f8dc 3000 	ldr.w	r3, [ip]
 8006af2:	b299      	uxth	r1, r3
 8006af4:	fb02 6101 	mla	r1, r2, r1, r6
 8006af8:	0c1e      	lsrs	r6, r3, #16
 8006afa:	0c0b      	lsrs	r3, r1, #16
 8006afc:	fb02 3306 	mla	r3, r2, r6, r3
 8006b00:	b289      	uxth	r1, r1
 8006b02:	3001      	adds	r0, #1
 8006b04:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006b08:	4285      	cmp	r5, r0
 8006b0a:	f84c 1b04 	str.w	r1, [ip], #4
 8006b0e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006b12:	dcec      	bgt.n	8006aee <__multadd+0x12>
 8006b14:	b30e      	cbz	r6, 8006b5a <__multadd+0x7e>
 8006b16:	68a3      	ldr	r3, [r4, #8]
 8006b18:	42ab      	cmp	r3, r5
 8006b1a:	dc19      	bgt.n	8006b50 <__multadd+0x74>
 8006b1c:	6861      	ldr	r1, [r4, #4]
 8006b1e:	4638      	mov	r0, r7
 8006b20:	3101      	adds	r1, #1
 8006b22:	f7ff ff79 	bl	8006a18 <_Balloc>
 8006b26:	4680      	mov	r8, r0
 8006b28:	b928      	cbnz	r0, 8006b36 <__multadd+0x5a>
 8006b2a:	4602      	mov	r2, r0
 8006b2c:	4b0c      	ldr	r3, [pc, #48]	; (8006b60 <__multadd+0x84>)
 8006b2e:	480d      	ldr	r0, [pc, #52]	; (8006b64 <__multadd+0x88>)
 8006b30:	21b5      	movs	r1, #181	; 0xb5
 8006b32:	f000 fbfb 	bl	800732c <__assert_func>
 8006b36:	6922      	ldr	r2, [r4, #16]
 8006b38:	3202      	adds	r2, #2
 8006b3a:	f104 010c 	add.w	r1, r4, #12
 8006b3e:	0092      	lsls	r2, r2, #2
 8006b40:	300c      	adds	r0, #12
 8006b42:	f7ff ff5b 	bl	80069fc <memcpy>
 8006b46:	4621      	mov	r1, r4
 8006b48:	4638      	mov	r0, r7
 8006b4a:	f7ff ffa5 	bl	8006a98 <_Bfree>
 8006b4e:	4644      	mov	r4, r8
 8006b50:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006b54:	3501      	adds	r5, #1
 8006b56:	615e      	str	r6, [r3, #20]
 8006b58:	6125      	str	r5, [r4, #16]
 8006b5a:	4620      	mov	r0, r4
 8006b5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b60:	08007f93 	.word	0x08007f93
 8006b64:	08007fa4 	.word	0x08007fa4

08006b68 <__hi0bits>:
 8006b68:	0c03      	lsrs	r3, r0, #16
 8006b6a:	041b      	lsls	r3, r3, #16
 8006b6c:	b9d3      	cbnz	r3, 8006ba4 <__hi0bits+0x3c>
 8006b6e:	0400      	lsls	r0, r0, #16
 8006b70:	2310      	movs	r3, #16
 8006b72:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006b76:	bf04      	itt	eq
 8006b78:	0200      	lsleq	r0, r0, #8
 8006b7a:	3308      	addeq	r3, #8
 8006b7c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006b80:	bf04      	itt	eq
 8006b82:	0100      	lsleq	r0, r0, #4
 8006b84:	3304      	addeq	r3, #4
 8006b86:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006b8a:	bf04      	itt	eq
 8006b8c:	0080      	lsleq	r0, r0, #2
 8006b8e:	3302      	addeq	r3, #2
 8006b90:	2800      	cmp	r0, #0
 8006b92:	db05      	blt.n	8006ba0 <__hi0bits+0x38>
 8006b94:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006b98:	f103 0301 	add.w	r3, r3, #1
 8006b9c:	bf08      	it	eq
 8006b9e:	2320      	moveq	r3, #32
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	4770      	bx	lr
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	e7e4      	b.n	8006b72 <__hi0bits+0xa>

08006ba8 <__lo0bits>:
 8006ba8:	6803      	ldr	r3, [r0, #0]
 8006baa:	f013 0207 	ands.w	r2, r3, #7
 8006bae:	4601      	mov	r1, r0
 8006bb0:	d00b      	beq.n	8006bca <__lo0bits+0x22>
 8006bb2:	07da      	lsls	r2, r3, #31
 8006bb4:	d423      	bmi.n	8006bfe <__lo0bits+0x56>
 8006bb6:	0798      	lsls	r0, r3, #30
 8006bb8:	bf49      	itett	mi
 8006bba:	085b      	lsrmi	r3, r3, #1
 8006bbc:	089b      	lsrpl	r3, r3, #2
 8006bbe:	2001      	movmi	r0, #1
 8006bc0:	600b      	strmi	r3, [r1, #0]
 8006bc2:	bf5c      	itt	pl
 8006bc4:	600b      	strpl	r3, [r1, #0]
 8006bc6:	2002      	movpl	r0, #2
 8006bc8:	4770      	bx	lr
 8006bca:	b298      	uxth	r0, r3
 8006bcc:	b9a8      	cbnz	r0, 8006bfa <__lo0bits+0x52>
 8006bce:	0c1b      	lsrs	r3, r3, #16
 8006bd0:	2010      	movs	r0, #16
 8006bd2:	b2da      	uxtb	r2, r3
 8006bd4:	b90a      	cbnz	r2, 8006bda <__lo0bits+0x32>
 8006bd6:	3008      	adds	r0, #8
 8006bd8:	0a1b      	lsrs	r3, r3, #8
 8006bda:	071a      	lsls	r2, r3, #28
 8006bdc:	bf04      	itt	eq
 8006bde:	091b      	lsreq	r3, r3, #4
 8006be0:	3004      	addeq	r0, #4
 8006be2:	079a      	lsls	r2, r3, #30
 8006be4:	bf04      	itt	eq
 8006be6:	089b      	lsreq	r3, r3, #2
 8006be8:	3002      	addeq	r0, #2
 8006bea:	07da      	lsls	r2, r3, #31
 8006bec:	d403      	bmi.n	8006bf6 <__lo0bits+0x4e>
 8006bee:	085b      	lsrs	r3, r3, #1
 8006bf0:	f100 0001 	add.w	r0, r0, #1
 8006bf4:	d005      	beq.n	8006c02 <__lo0bits+0x5a>
 8006bf6:	600b      	str	r3, [r1, #0]
 8006bf8:	4770      	bx	lr
 8006bfa:	4610      	mov	r0, r2
 8006bfc:	e7e9      	b.n	8006bd2 <__lo0bits+0x2a>
 8006bfe:	2000      	movs	r0, #0
 8006c00:	4770      	bx	lr
 8006c02:	2020      	movs	r0, #32
 8006c04:	4770      	bx	lr
	...

08006c08 <__i2b>:
 8006c08:	b510      	push	{r4, lr}
 8006c0a:	460c      	mov	r4, r1
 8006c0c:	2101      	movs	r1, #1
 8006c0e:	f7ff ff03 	bl	8006a18 <_Balloc>
 8006c12:	4602      	mov	r2, r0
 8006c14:	b928      	cbnz	r0, 8006c22 <__i2b+0x1a>
 8006c16:	4b05      	ldr	r3, [pc, #20]	; (8006c2c <__i2b+0x24>)
 8006c18:	4805      	ldr	r0, [pc, #20]	; (8006c30 <__i2b+0x28>)
 8006c1a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006c1e:	f000 fb85 	bl	800732c <__assert_func>
 8006c22:	2301      	movs	r3, #1
 8006c24:	6144      	str	r4, [r0, #20]
 8006c26:	6103      	str	r3, [r0, #16]
 8006c28:	bd10      	pop	{r4, pc}
 8006c2a:	bf00      	nop
 8006c2c:	08007f93 	.word	0x08007f93
 8006c30:	08007fa4 	.word	0x08007fa4

08006c34 <__multiply>:
 8006c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c38:	4691      	mov	r9, r2
 8006c3a:	690a      	ldr	r2, [r1, #16]
 8006c3c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006c40:	429a      	cmp	r2, r3
 8006c42:	bfb8      	it	lt
 8006c44:	460b      	movlt	r3, r1
 8006c46:	460c      	mov	r4, r1
 8006c48:	bfbc      	itt	lt
 8006c4a:	464c      	movlt	r4, r9
 8006c4c:	4699      	movlt	r9, r3
 8006c4e:	6927      	ldr	r7, [r4, #16]
 8006c50:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006c54:	68a3      	ldr	r3, [r4, #8]
 8006c56:	6861      	ldr	r1, [r4, #4]
 8006c58:	eb07 060a 	add.w	r6, r7, sl
 8006c5c:	42b3      	cmp	r3, r6
 8006c5e:	b085      	sub	sp, #20
 8006c60:	bfb8      	it	lt
 8006c62:	3101      	addlt	r1, #1
 8006c64:	f7ff fed8 	bl	8006a18 <_Balloc>
 8006c68:	b930      	cbnz	r0, 8006c78 <__multiply+0x44>
 8006c6a:	4602      	mov	r2, r0
 8006c6c:	4b44      	ldr	r3, [pc, #272]	; (8006d80 <__multiply+0x14c>)
 8006c6e:	4845      	ldr	r0, [pc, #276]	; (8006d84 <__multiply+0x150>)
 8006c70:	f240 115d 	movw	r1, #349	; 0x15d
 8006c74:	f000 fb5a 	bl	800732c <__assert_func>
 8006c78:	f100 0514 	add.w	r5, r0, #20
 8006c7c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006c80:	462b      	mov	r3, r5
 8006c82:	2200      	movs	r2, #0
 8006c84:	4543      	cmp	r3, r8
 8006c86:	d321      	bcc.n	8006ccc <__multiply+0x98>
 8006c88:	f104 0314 	add.w	r3, r4, #20
 8006c8c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006c90:	f109 0314 	add.w	r3, r9, #20
 8006c94:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006c98:	9202      	str	r2, [sp, #8]
 8006c9a:	1b3a      	subs	r2, r7, r4
 8006c9c:	3a15      	subs	r2, #21
 8006c9e:	f022 0203 	bic.w	r2, r2, #3
 8006ca2:	3204      	adds	r2, #4
 8006ca4:	f104 0115 	add.w	r1, r4, #21
 8006ca8:	428f      	cmp	r7, r1
 8006caa:	bf38      	it	cc
 8006cac:	2204      	movcc	r2, #4
 8006cae:	9201      	str	r2, [sp, #4]
 8006cb0:	9a02      	ldr	r2, [sp, #8]
 8006cb2:	9303      	str	r3, [sp, #12]
 8006cb4:	429a      	cmp	r2, r3
 8006cb6:	d80c      	bhi.n	8006cd2 <__multiply+0x9e>
 8006cb8:	2e00      	cmp	r6, #0
 8006cba:	dd03      	ble.n	8006cc4 <__multiply+0x90>
 8006cbc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d05a      	beq.n	8006d7a <__multiply+0x146>
 8006cc4:	6106      	str	r6, [r0, #16]
 8006cc6:	b005      	add	sp, #20
 8006cc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ccc:	f843 2b04 	str.w	r2, [r3], #4
 8006cd0:	e7d8      	b.n	8006c84 <__multiply+0x50>
 8006cd2:	f8b3 a000 	ldrh.w	sl, [r3]
 8006cd6:	f1ba 0f00 	cmp.w	sl, #0
 8006cda:	d024      	beq.n	8006d26 <__multiply+0xf2>
 8006cdc:	f104 0e14 	add.w	lr, r4, #20
 8006ce0:	46a9      	mov	r9, r5
 8006ce2:	f04f 0c00 	mov.w	ip, #0
 8006ce6:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006cea:	f8d9 1000 	ldr.w	r1, [r9]
 8006cee:	fa1f fb82 	uxth.w	fp, r2
 8006cf2:	b289      	uxth	r1, r1
 8006cf4:	fb0a 110b 	mla	r1, sl, fp, r1
 8006cf8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006cfc:	f8d9 2000 	ldr.w	r2, [r9]
 8006d00:	4461      	add	r1, ip
 8006d02:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006d06:	fb0a c20b 	mla	r2, sl, fp, ip
 8006d0a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006d0e:	b289      	uxth	r1, r1
 8006d10:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006d14:	4577      	cmp	r7, lr
 8006d16:	f849 1b04 	str.w	r1, [r9], #4
 8006d1a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006d1e:	d8e2      	bhi.n	8006ce6 <__multiply+0xb2>
 8006d20:	9a01      	ldr	r2, [sp, #4]
 8006d22:	f845 c002 	str.w	ip, [r5, r2]
 8006d26:	9a03      	ldr	r2, [sp, #12]
 8006d28:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006d2c:	3304      	adds	r3, #4
 8006d2e:	f1b9 0f00 	cmp.w	r9, #0
 8006d32:	d020      	beq.n	8006d76 <__multiply+0x142>
 8006d34:	6829      	ldr	r1, [r5, #0]
 8006d36:	f104 0c14 	add.w	ip, r4, #20
 8006d3a:	46ae      	mov	lr, r5
 8006d3c:	f04f 0a00 	mov.w	sl, #0
 8006d40:	f8bc b000 	ldrh.w	fp, [ip]
 8006d44:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006d48:	fb09 220b 	mla	r2, r9, fp, r2
 8006d4c:	4492      	add	sl, r2
 8006d4e:	b289      	uxth	r1, r1
 8006d50:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006d54:	f84e 1b04 	str.w	r1, [lr], #4
 8006d58:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006d5c:	f8be 1000 	ldrh.w	r1, [lr]
 8006d60:	0c12      	lsrs	r2, r2, #16
 8006d62:	fb09 1102 	mla	r1, r9, r2, r1
 8006d66:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006d6a:	4567      	cmp	r7, ip
 8006d6c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006d70:	d8e6      	bhi.n	8006d40 <__multiply+0x10c>
 8006d72:	9a01      	ldr	r2, [sp, #4]
 8006d74:	50a9      	str	r1, [r5, r2]
 8006d76:	3504      	adds	r5, #4
 8006d78:	e79a      	b.n	8006cb0 <__multiply+0x7c>
 8006d7a:	3e01      	subs	r6, #1
 8006d7c:	e79c      	b.n	8006cb8 <__multiply+0x84>
 8006d7e:	bf00      	nop
 8006d80:	08007f93 	.word	0x08007f93
 8006d84:	08007fa4 	.word	0x08007fa4

08006d88 <__pow5mult>:
 8006d88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d8c:	4615      	mov	r5, r2
 8006d8e:	f012 0203 	ands.w	r2, r2, #3
 8006d92:	4606      	mov	r6, r0
 8006d94:	460f      	mov	r7, r1
 8006d96:	d007      	beq.n	8006da8 <__pow5mult+0x20>
 8006d98:	4c25      	ldr	r4, [pc, #148]	; (8006e30 <__pow5mult+0xa8>)
 8006d9a:	3a01      	subs	r2, #1
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006da2:	f7ff fe9b 	bl	8006adc <__multadd>
 8006da6:	4607      	mov	r7, r0
 8006da8:	10ad      	asrs	r5, r5, #2
 8006daa:	d03d      	beq.n	8006e28 <__pow5mult+0xa0>
 8006dac:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006dae:	b97c      	cbnz	r4, 8006dd0 <__pow5mult+0x48>
 8006db0:	2010      	movs	r0, #16
 8006db2:	f7ff fe1b 	bl	80069ec <malloc>
 8006db6:	4602      	mov	r2, r0
 8006db8:	6270      	str	r0, [r6, #36]	; 0x24
 8006dba:	b928      	cbnz	r0, 8006dc8 <__pow5mult+0x40>
 8006dbc:	4b1d      	ldr	r3, [pc, #116]	; (8006e34 <__pow5mult+0xac>)
 8006dbe:	481e      	ldr	r0, [pc, #120]	; (8006e38 <__pow5mult+0xb0>)
 8006dc0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006dc4:	f000 fab2 	bl	800732c <__assert_func>
 8006dc8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006dcc:	6004      	str	r4, [r0, #0]
 8006dce:	60c4      	str	r4, [r0, #12]
 8006dd0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006dd4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006dd8:	b94c      	cbnz	r4, 8006dee <__pow5mult+0x66>
 8006dda:	f240 2171 	movw	r1, #625	; 0x271
 8006dde:	4630      	mov	r0, r6
 8006de0:	f7ff ff12 	bl	8006c08 <__i2b>
 8006de4:	2300      	movs	r3, #0
 8006de6:	f8c8 0008 	str.w	r0, [r8, #8]
 8006dea:	4604      	mov	r4, r0
 8006dec:	6003      	str	r3, [r0, #0]
 8006dee:	f04f 0900 	mov.w	r9, #0
 8006df2:	07eb      	lsls	r3, r5, #31
 8006df4:	d50a      	bpl.n	8006e0c <__pow5mult+0x84>
 8006df6:	4639      	mov	r1, r7
 8006df8:	4622      	mov	r2, r4
 8006dfa:	4630      	mov	r0, r6
 8006dfc:	f7ff ff1a 	bl	8006c34 <__multiply>
 8006e00:	4639      	mov	r1, r7
 8006e02:	4680      	mov	r8, r0
 8006e04:	4630      	mov	r0, r6
 8006e06:	f7ff fe47 	bl	8006a98 <_Bfree>
 8006e0a:	4647      	mov	r7, r8
 8006e0c:	106d      	asrs	r5, r5, #1
 8006e0e:	d00b      	beq.n	8006e28 <__pow5mult+0xa0>
 8006e10:	6820      	ldr	r0, [r4, #0]
 8006e12:	b938      	cbnz	r0, 8006e24 <__pow5mult+0x9c>
 8006e14:	4622      	mov	r2, r4
 8006e16:	4621      	mov	r1, r4
 8006e18:	4630      	mov	r0, r6
 8006e1a:	f7ff ff0b 	bl	8006c34 <__multiply>
 8006e1e:	6020      	str	r0, [r4, #0]
 8006e20:	f8c0 9000 	str.w	r9, [r0]
 8006e24:	4604      	mov	r4, r0
 8006e26:	e7e4      	b.n	8006df2 <__pow5mult+0x6a>
 8006e28:	4638      	mov	r0, r7
 8006e2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e2e:	bf00      	nop
 8006e30:	080080f0 	.word	0x080080f0
 8006e34:	08007f21 	.word	0x08007f21
 8006e38:	08007fa4 	.word	0x08007fa4

08006e3c <__lshift>:
 8006e3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e40:	460c      	mov	r4, r1
 8006e42:	6849      	ldr	r1, [r1, #4]
 8006e44:	6923      	ldr	r3, [r4, #16]
 8006e46:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006e4a:	68a3      	ldr	r3, [r4, #8]
 8006e4c:	4607      	mov	r7, r0
 8006e4e:	4691      	mov	r9, r2
 8006e50:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006e54:	f108 0601 	add.w	r6, r8, #1
 8006e58:	42b3      	cmp	r3, r6
 8006e5a:	db0b      	blt.n	8006e74 <__lshift+0x38>
 8006e5c:	4638      	mov	r0, r7
 8006e5e:	f7ff fddb 	bl	8006a18 <_Balloc>
 8006e62:	4605      	mov	r5, r0
 8006e64:	b948      	cbnz	r0, 8006e7a <__lshift+0x3e>
 8006e66:	4602      	mov	r2, r0
 8006e68:	4b2a      	ldr	r3, [pc, #168]	; (8006f14 <__lshift+0xd8>)
 8006e6a:	482b      	ldr	r0, [pc, #172]	; (8006f18 <__lshift+0xdc>)
 8006e6c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006e70:	f000 fa5c 	bl	800732c <__assert_func>
 8006e74:	3101      	adds	r1, #1
 8006e76:	005b      	lsls	r3, r3, #1
 8006e78:	e7ee      	b.n	8006e58 <__lshift+0x1c>
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	f100 0114 	add.w	r1, r0, #20
 8006e80:	f100 0210 	add.w	r2, r0, #16
 8006e84:	4618      	mov	r0, r3
 8006e86:	4553      	cmp	r3, sl
 8006e88:	db37      	blt.n	8006efa <__lshift+0xbe>
 8006e8a:	6920      	ldr	r0, [r4, #16]
 8006e8c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006e90:	f104 0314 	add.w	r3, r4, #20
 8006e94:	f019 091f 	ands.w	r9, r9, #31
 8006e98:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006e9c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006ea0:	d02f      	beq.n	8006f02 <__lshift+0xc6>
 8006ea2:	f1c9 0e20 	rsb	lr, r9, #32
 8006ea6:	468a      	mov	sl, r1
 8006ea8:	f04f 0c00 	mov.w	ip, #0
 8006eac:	681a      	ldr	r2, [r3, #0]
 8006eae:	fa02 f209 	lsl.w	r2, r2, r9
 8006eb2:	ea42 020c 	orr.w	r2, r2, ip
 8006eb6:	f84a 2b04 	str.w	r2, [sl], #4
 8006eba:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ebe:	4298      	cmp	r0, r3
 8006ec0:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006ec4:	d8f2      	bhi.n	8006eac <__lshift+0x70>
 8006ec6:	1b03      	subs	r3, r0, r4
 8006ec8:	3b15      	subs	r3, #21
 8006eca:	f023 0303 	bic.w	r3, r3, #3
 8006ece:	3304      	adds	r3, #4
 8006ed0:	f104 0215 	add.w	r2, r4, #21
 8006ed4:	4290      	cmp	r0, r2
 8006ed6:	bf38      	it	cc
 8006ed8:	2304      	movcc	r3, #4
 8006eda:	f841 c003 	str.w	ip, [r1, r3]
 8006ede:	f1bc 0f00 	cmp.w	ip, #0
 8006ee2:	d001      	beq.n	8006ee8 <__lshift+0xac>
 8006ee4:	f108 0602 	add.w	r6, r8, #2
 8006ee8:	3e01      	subs	r6, #1
 8006eea:	4638      	mov	r0, r7
 8006eec:	612e      	str	r6, [r5, #16]
 8006eee:	4621      	mov	r1, r4
 8006ef0:	f7ff fdd2 	bl	8006a98 <_Bfree>
 8006ef4:	4628      	mov	r0, r5
 8006ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006efa:	f842 0f04 	str.w	r0, [r2, #4]!
 8006efe:	3301      	adds	r3, #1
 8006f00:	e7c1      	b.n	8006e86 <__lshift+0x4a>
 8006f02:	3904      	subs	r1, #4
 8006f04:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f08:	f841 2f04 	str.w	r2, [r1, #4]!
 8006f0c:	4298      	cmp	r0, r3
 8006f0e:	d8f9      	bhi.n	8006f04 <__lshift+0xc8>
 8006f10:	e7ea      	b.n	8006ee8 <__lshift+0xac>
 8006f12:	bf00      	nop
 8006f14:	08007f93 	.word	0x08007f93
 8006f18:	08007fa4 	.word	0x08007fa4

08006f1c <__mcmp>:
 8006f1c:	b530      	push	{r4, r5, lr}
 8006f1e:	6902      	ldr	r2, [r0, #16]
 8006f20:	690c      	ldr	r4, [r1, #16]
 8006f22:	1b12      	subs	r2, r2, r4
 8006f24:	d10e      	bne.n	8006f44 <__mcmp+0x28>
 8006f26:	f100 0314 	add.w	r3, r0, #20
 8006f2a:	3114      	adds	r1, #20
 8006f2c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006f30:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006f34:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006f38:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006f3c:	42a5      	cmp	r5, r4
 8006f3e:	d003      	beq.n	8006f48 <__mcmp+0x2c>
 8006f40:	d305      	bcc.n	8006f4e <__mcmp+0x32>
 8006f42:	2201      	movs	r2, #1
 8006f44:	4610      	mov	r0, r2
 8006f46:	bd30      	pop	{r4, r5, pc}
 8006f48:	4283      	cmp	r3, r0
 8006f4a:	d3f3      	bcc.n	8006f34 <__mcmp+0x18>
 8006f4c:	e7fa      	b.n	8006f44 <__mcmp+0x28>
 8006f4e:	f04f 32ff 	mov.w	r2, #4294967295
 8006f52:	e7f7      	b.n	8006f44 <__mcmp+0x28>

08006f54 <__mdiff>:
 8006f54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f58:	460c      	mov	r4, r1
 8006f5a:	4606      	mov	r6, r0
 8006f5c:	4611      	mov	r1, r2
 8006f5e:	4620      	mov	r0, r4
 8006f60:	4690      	mov	r8, r2
 8006f62:	f7ff ffdb 	bl	8006f1c <__mcmp>
 8006f66:	1e05      	subs	r5, r0, #0
 8006f68:	d110      	bne.n	8006f8c <__mdiff+0x38>
 8006f6a:	4629      	mov	r1, r5
 8006f6c:	4630      	mov	r0, r6
 8006f6e:	f7ff fd53 	bl	8006a18 <_Balloc>
 8006f72:	b930      	cbnz	r0, 8006f82 <__mdiff+0x2e>
 8006f74:	4b3a      	ldr	r3, [pc, #232]	; (8007060 <__mdiff+0x10c>)
 8006f76:	4602      	mov	r2, r0
 8006f78:	f240 2132 	movw	r1, #562	; 0x232
 8006f7c:	4839      	ldr	r0, [pc, #228]	; (8007064 <__mdiff+0x110>)
 8006f7e:	f000 f9d5 	bl	800732c <__assert_func>
 8006f82:	2301      	movs	r3, #1
 8006f84:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006f88:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f8c:	bfa4      	itt	ge
 8006f8e:	4643      	movge	r3, r8
 8006f90:	46a0      	movge	r8, r4
 8006f92:	4630      	mov	r0, r6
 8006f94:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006f98:	bfa6      	itte	ge
 8006f9a:	461c      	movge	r4, r3
 8006f9c:	2500      	movge	r5, #0
 8006f9e:	2501      	movlt	r5, #1
 8006fa0:	f7ff fd3a 	bl	8006a18 <_Balloc>
 8006fa4:	b920      	cbnz	r0, 8006fb0 <__mdiff+0x5c>
 8006fa6:	4b2e      	ldr	r3, [pc, #184]	; (8007060 <__mdiff+0x10c>)
 8006fa8:	4602      	mov	r2, r0
 8006faa:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006fae:	e7e5      	b.n	8006f7c <__mdiff+0x28>
 8006fb0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006fb4:	6926      	ldr	r6, [r4, #16]
 8006fb6:	60c5      	str	r5, [r0, #12]
 8006fb8:	f104 0914 	add.w	r9, r4, #20
 8006fbc:	f108 0514 	add.w	r5, r8, #20
 8006fc0:	f100 0e14 	add.w	lr, r0, #20
 8006fc4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006fc8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006fcc:	f108 0210 	add.w	r2, r8, #16
 8006fd0:	46f2      	mov	sl, lr
 8006fd2:	2100      	movs	r1, #0
 8006fd4:	f859 3b04 	ldr.w	r3, [r9], #4
 8006fd8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006fdc:	fa1f f883 	uxth.w	r8, r3
 8006fe0:	fa11 f18b 	uxtah	r1, r1, fp
 8006fe4:	0c1b      	lsrs	r3, r3, #16
 8006fe6:	eba1 0808 	sub.w	r8, r1, r8
 8006fea:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006fee:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006ff2:	fa1f f888 	uxth.w	r8, r8
 8006ff6:	1419      	asrs	r1, r3, #16
 8006ff8:	454e      	cmp	r6, r9
 8006ffa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006ffe:	f84a 3b04 	str.w	r3, [sl], #4
 8007002:	d8e7      	bhi.n	8006fd4 <__mdiff+0x80>
 8007004:	1b33      	subs	r3, r6, r4
 8007006:	3b15      	subs	r3, #21
 8007008:	f023 0303 	bic.w	r3, r3, #3
 800700c:	3304      	adds	r3, #4
 800700e:	3415      	adds	r4, #21
 8007010:	42a6      	cmp	r6, r4
 8007012:	bf38      	it	cc
 8007014:	2304      	movcc	r3, #4
 8007016:	441d      	add	r5, r3
 8007018:	4473      	add	r3, lr
 800701a:	469e      	mov	lr, r3
 800701c:	462e      	mov	r6, r5
 800701e:	4566      	cmp	r6, ip
 8007020:	d30e      	bcc.n	8007040 <__mdiff+0xec>
 8007022:	f10c 0203 	add.w	r2, ip, #3
 8007026:	1b52      	subs	r2, r2, r5
 8007028:	f022 0203 	bic.w	r2, r2, #3
 800702c:	3d03      	subs	r5, #3
 800702e:	45ac      	cmp	ip, r5
 8007030:	bf38      	it	cc
 8007032:	2200      	movcc	r2, #0
 8007034:	441a      	add	r2, r3
 8007036:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800703a:	b17b      	cbz	r3, 800705c <__mdiff+0x108>
 800703c:	6107      	str	r7, [r0, #16]
 800703e:	e7a3      	b.n	8006f88 <__mdiff+0x34>
 8007040:	f856 8b04 	ldr.w	r8, [r6], #4
 8007044:	fa11 f288 	uxtah	r2, r1, r8
 8007048:	1414      	asrs	r4, r2, #16
 800704a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800704e:	b292      	uxth	r2, r2
 8007050:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007054:	f84e 2b04 	str.w	r2, [lr], #4
 8007058:	1421      	asrs	r1, r4, #16
 800705a:	e7e0      	b.n	800701e <__mdiff+0xca>
 800705c:	3f01      	subs	r7, #1
 800705e:	e7ea      	b.n	8007036 <__mdiff+0xe2>
 8007060:	08007f93 	.word	0x08007f93
 8007064:	08007fa4 	.word	0x08007fa4

08007068 <__d2b>:
 8007068:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800706c:	4689      	mov	r9, r1
 800706e:	2101      	movs	r1, #1
 8007070:	ec57 6b10 	vmov	r6, r7, d0
 8007074:	4690      	mov	r8, r2
 8007076:	f7ff fccf 	bl	8006a18 <_Balloc>
 800707a:	4604      	mov	r4, r0
 800707c:	b930      	cbnz	r0, 800708c <__d2b+0x24>
 800707e:	4602      	mov	r2, r0
 8007080:	4b25      	ldr	r3, [pc, #148]	; (8007118 <__d2b+0xb0>)
 8007082:	4826      	ldr	r0, [pc, #152]	; (800711c <__d2b+0xb4>)
 8007084:	f240 310a 	movw	r1, #778	; 0x30a
 8007088:	f000 f950 	bl	800732c <__assert_func>
 800708c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007090:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007094:	bb35      	cbnz	r5, 80070e4 <__d2b+0x7c>
 8007096:	2e00      	cmp	r6, #0
 8007098:	9301      	str	r3, [sp, #4]
 800709a:	d028      	beq.n	80070ee <__d2b+0x86>
 800709c:	4668      	mov	r0, sp
 800709e:	9600      	str	r6, [sp, #0]
 80070a0:	f7ff fd82 	bl	8006ba8 <__lo0bits>
 80070a4:	9900      	ldr	r1, [sp, #0]
 80070a6:	b300      	cbz	r0, 80070ea <__d2b+0x82>
 80070a8:	9a01      	ldr	r2, [sp, #4]
 80070aa:	f1c0 0320 	rsb	r3, r0, #32
 80070ae:	fa02 f303 	lsl.w	r3, r2, r3
 80070b2:	430b      	orrs	r3, r1
 80070b4:	40c2      	lsrs	r2, r0
 80070b6:	6163      	str	r3, [r4, #20]
 80070b8:	9201      	str	r2, [sp, #4]
 80070ba:	9b01      	ldr	r3, [sp, #4]
 80070bc:	61a3      	str	r3, [r4, #24]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	bf14      	ite	ne
 80070c2:	2202      	movne	r2, #2
 80070c4:	2201      	moveq	r2, #1
 80070c6:	6122      	str	r2, [r4, #16]
 80070c8:	b1d5      	cbz	r5, 8007100 <__d2b+0x98>
 80070ca:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80070ce:	4405      	add	r5, r0
 80070d0:	f8c9 5000 	str.w	r5, [r9]
 80070d4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80070d8:	f8c8 0000 	str.w	r0, [r8]
 80070dc:	4620      	mov	r0, r4
 80070de:	b003      	add	sp, #12
 80070e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80070e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80070e8:	e7d5      	b.n	8007096 <__d2b+0x2e>
 80070ea:	6161      	str	r1, [r4, #20]
 80070ec:	e7e5      	b.n	80070ba <__d2b+0x52>
 80070ee:	a801      	add	r0, sp, #4
 80070f0:	f7ff fd5a 	bl	8006ba8 <__lo0bits>
 80070f4:	9b01      	ldr	r3, [sp, #4]
 80070f6:	6163      	str	r3, [r4, #20]
 80070f8:	2201      	movs	r2, #1
 80070fa:	6122      	str	r2, [r4, #16]
 80070fc:	3020      	adds	r0, #32
 80070fe:	e7e3      	b.n	80070c8 <__d2b+0x60>
 8007100:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007104:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007108:	f8c9 0000 	str.w	r0, [r9]
 800710c:	6918      	ldr	r0, [r3, #16]
 800710e:	f7ff fd2b 	bl	8006b68 <__hi0bits>
 8007112:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007116:	e7df      	b.n	80070d8 <__d2b+0x70>
 8007118:	08007f93 	.word	0x08007f93
 800711c:	08007fa4 	.word	0x08007fa4

08007120 <_calloc_r>:
 8007120:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007122:	fba1 2402 	umull	r2, r4, r1, r2
 8007126:	b94c      	cbnz	r4, 800713c <_calloc_r+0x1c>
 8007128:	4611      	mov	r1, r2
 800712a:	9201      	str	r2, [sp, #4]
 800712c:	f000 f87a 	bl	8007224 <_malloc_r>
 8007130:	9a01      	ldr	r2, [sp, #4]
 8007132:	4605      	mov	r5, r0
 8007134:	b930      	cbnz	r0, 8007144 <_calloc_r+0x24>
 8007136:	4628      	mov	r0, r5
 8007138:	b003      	add	sp, #12
 800713a:	bd30      	pop	{r4, r5, pc}
 800713c:	220c      	movs	r2, #12
 800713e:	6002      	str	r2, [r0, #0]
 8007140:	2500      	movs	r5, #0
 8007142:	e7f8      	b.n	8007136 <_calloc_r+0x16>
 8007144:	4621      	mov	r1, r4
 8007146:	f7fe f95f 	bl	8005408 <memset>
 800714a:	e7f4      	b.n	8007136 <_calloc_r+0x16>

0800714c <_free_r>:
 800714c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800714e:	2900      	cmp	r1, #0
 8007150:	d044      	beq.n	80071dc <_free_r+0x90>
 8007152:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007156:	9001      	str	r0, [sp, #4]
 8007158:	2b00      	cmp	r3, #0
 800715a:	f1a1 0404 	sub.w	r4, r1, #4
 800715e:	bfb8      	it	lt
 8007160:	18e4      	addlt	r4, r4, r3
 8007162:	f000 f925 	bl	80073b0 <__malloc_lock>
 8007166:	4a1e      	ldr	r2, [pc, #120]	; (80071e0 <_free_r+0x94>)
 8007168:	9801      	ldr	r0, [sp, #4]
 800716a:	6813      	ldr	r3, [r2, #0]
 800716c:	b933      	cbnz	r3, 800717c <_free_r+0x30>
 800716e:	6063      	str	r3, [r4, #4]
 8007170:	6014      	str	r4, [r2, #0]
 8007172:	b003      	add	sp, #12
 8007174:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007178:	f000 b920 	b.w	80073bc <__malloc_unlock>
 800717c:	42a3      	cmp	r3, r4
 800717e:	d908      	bls.n	8007192 <_free_r+0x46>
 8007180:	6825      	ldr	r5, [r4, #0]
 8007182:	1961      	adds	r1, r4, r5
 8007184:	428b      	cmp	r3, r1
 8007186:	bf01      	itttt	eq
 8007188:	6819      	ldreq	r1, [r3, #0]
 800718a:	685b      	ldreq	r3, [r3, #4]
 800718c:	1949      	addeq	r1, r1, r5
 800718e:	6021      	streq	r1, [r4, #0]
 8007190:	e7ed      	b.n	800716e <_free_r+0x22>
 8007192:	461a      	mov	r2, r3
 8007194:	685b      	ldr	r3, [r3, #4]
 8007196:	b10b      	cbz	r3, 800719c <_free_r+0x50>
 8007198:	42a3      	cmp	r3, r4
 800719a:	d9fa      	bls.n	8007192 <_free_r+0x46>
 800719c:	6811      	ldr	r1, [r2, #0]
 800719e:	1855      	adds	r5, r2, r1
 80071a0:	42a5      	cmp	r5, r4
 80071a2:	d10b      	bne.n	80071bc <_free_r+0x70>
 80071a4:	6824      	ldr	r4, [r4, #0]
 80071a6:	4421      	add	r1, r4
 80071a8:	1854      	adds	r4, r2, r1
 80071aa:	42a3      	cmp	r3, r4
 80071ac:	6011      	str	r1, [r2, #0]
 80071ae:	d1e0      	bne.n	8007172 <_free_r+0x26>
 80071b0:	681c      	ldr	r4, [r3, #0]
 80071b2:	685b      	ldr	r3, [r3, #4]
 80071b4:	6053      	str	r3, [r2, #4]
 80071b6:	4421      	add	r1, r4
 80071b8:	6011      	str	r1, [r2, #0]
 80071ba:	e7da      	b.n	8007172 <_free_r+0x26>
 80071bc:	d902      	bls.n	80071c4 <_free_r+0x78>
 80071be:	230c      	movs	r3, #12
 80071c0:	6003      	str	r3, [r0, #0]
 80071c2:	e7d6      	b.n	8007172 <_free_r+0x26>
 80071c4:	6825      	ldr	r5, [r4, #0]
 80071c6:	1961      	adds	r1, r4, r5
 80071c8:	428b      	cmp	r3, r1
 80071ca:	bf04      	itt	eq
 80071cc:	6819      	ldreq	r1, [r3, #0]
 80071ce:	685b      	ldreq	r3, [r3, #4]
 80071d0:	6063      	str	r3, [r4, #4]
 80071d2:	bf04      	itt	eq
 80071d4:	1949      	addeq	r1, r1, r5
 80071d6:	6021      	streq	r1, [r4, #0]
 80071d8:	6054      	str	r4, [r2, #4]
 80071da:	e7ca      	b.n	8007172 <_free_r+0x26>
 80071dc:	b003      	add	sp, #12
 80071de:	bd30      	pop	{r4, r5, pc}
 80071e0:	200002bc 	.word	0x200002bc

080071e4 <sbrk_aligned>:
 80071e4:	b570      	push	{r4, r5, r6, lr}
 80071e6:	4e0e      	ldr	r6, [pc, #56]	; (8007220 <sbrk_aligned+0x3c>)
 80071e8:	460c      	mov	r4, r1
 80071ea:	6831      	ldr	r1, [r6, #0]
 80071ec:	4605      	mov	r5, r0
 80071ee:	b911      	cbnz	r1, 80071f6 <sbrk_aligned+0x12>
 80071f0:	f000 f88c 	bl	800730c <_sbrk_r>
 80071f4:	6030      	str	r0, [r6, #0]
 80071f6:	4621      	mov	r1, r4
 80071f8:	4628      	mov	r0, r5
 80071fa:	f000 f887 	bl	800730c <_sbrk_r>
 80071fe:	1c43      	adds	r3, r0, #1
 8007200:	d00a      	beq.n	8007218 <sbrk_aligned+0x34>
 8007202:	1cc4      	adds	r4, r0, #3
 8007204:	f024 0403 	bic.w	r4, r4, #3
 8007208:	42a0      	cmp	r0, r4
 800720a:	d007      	beq.n	800721c <sbrk_aligned+0x38>
 800720c:	1a21      	subs	r1, r4, r0
 800720e:	4628      	mov	r0, r5
 8007210:	f000 f87c 	bl	800730c <_sbrk_r>
 8007214:	3001      	adds	r0, #1
 8007216:	d101      	bne.n	800721c <sbrk_aligned+0x38>
 8007218:	f04f 34ff 	mov.w	r4, #4294967295
 800721c:	4620      	mov	r0, r4
 800721e:	bd70      	pop	{r4, r5, r6, pc}
 8007220:	200002c0 	.word	0x200002c0

08007224 <_malloc_r>:
 8007224:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007228:	1ccd      	adds	r5, r1, #3
 800722a:	f025 0503 	bic.w	r5, r5, #3
 800722e:	3508      	adds	r5, #8
 8007230:	2d0c      	cmp	r5, #12
 8007232:	bf38      	it	cc
 8007234:	250c      	movcc	r5, #12
 8007236:	2d00      	cmp	r5, #0
 8007238:	4607      	mov	r7, r0
 800723a:	db01      	blt.n	8007240 <_malloc_r+0x1c>
 800723c:	42a9      	cmp	r1, r5
 800723e:	d905      	bls.n	800724c <_malloc_r+0x28>
 8007240:	230c      	movs	r3, #12
 8007242:	603b      	str	r3, [r7, #0]
 8007244:	2600      	movs	r6, #0
 8007246:	4630      	mov	r0, r6
 8007248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800724c:	4e2e      	ldr	r6, [pc, #184]	; (8007308 <_malloc_r+0xe4>)
 800724e:	f000 f8af 	bl	80073b0 <__malloc_lock>
 8007252:	6833      	ldr	r3, [r6, #0]
 8007254:	461c      	mov	r4, r3
 8007256:	bb34      	cbnz	r4, 80072a6 <_malloc_r+0x82>
 8007258:	4629      	mov	r1, r5
 800725a:	4638      	mov	r0, r7
 800725c:	f7ff ffc2 	bl	80071e4 <sbrk_aligned>
 8007260:	1c43      	adds	r3, r0, #1
 8007262:	4604      	mov	r4, r0
 8007264:	d14d      	bne.n	8007302 <_malloc_r+0xde>
 8007266:	6834      	ldr	r4, [r6, #0]
 8007268:	4626      	mov	r6, r4
 800726a:	2e00      	cmp	r6, #0
 800726c:	d140      	bne.n	80072f0 <_malloc_r+0xcc>
 800726e:	6823      	ldr	r3, [r4, #0]
 8007270:	4631      	mov	r1, r6
 8007272:	4638      	mov	r0, r7
 8007274:	eb04 0803 	add.w	r8, r4, r3
 8007278:	f000 f848 	bl	800730c <_sbrk_r>
 800727c:	4580      	cmp	r8, r0
 800727e:	d13a      	bne.n	80072f6 <_malloc_r+0xd2>
 8007280:	6821      	ldr	r1, [r4, #0]
 8007282:	3503      	adds	r5, #3
 8007284:	1a6d      	subs	r5, r5, r1
 8007286:	f025 0503 	bic.w	r5, r5, #3
 800728a:	3508      	adds	r5, #8
 800728c:	2d0c      	cmp	r5, #12
 800728e:	bf38      	it	cc
 8007290:	250c      	movcc	r5, #12
 8007292:	4629      	mov	r1, r5
 8007294:	4638      	mov	r0, r7
 8007296:	f7ff ffa5 	bl	80071e4 <sbrk_aligned>
 800729a:	3001      	adds	r0, #1
 800729c:	d02b      	beq.n	80072f6 <_malloc_r+0xd2>
 800729e:	6823      	ldr	r3, [r4, #0]
 80072a0:	442b      	add	r3, r5
 80072a2:	6023      	str	r3, [r4, #0]
 80072a4:	e00e      	b.n	80072c4 <_malloc_r+0xa0>
 80072a6:	6822      	ldr	r2, [r4, #0]
 80072a8:	1b52      	subs	r2, r2, r5
 80072aa:	d41e      	bmi.n	80072ea <_malloc_r+0xc6>
 80072ac:	2a0b      	cmp	r2, #11
 80072ae:	d916      	bls.n	80072de <_malloc_r+0xba>
 80072b0:	1961      	adds	r1, r4, r5
 80072b2:	42a3      	cmp	r3, r4
 80072b4:	6025      	str	r5, [r4, #0]
 80072b6:	bf18      	it	ne
 80072b8:	6059      	strne	r1, [r3, #4]
 80072ba:	6863      	ldr	r3, [r4, #4]
 80072bc:	bf08      	it	eq
 80072be:	6031      	streq	r1, [r6, #0]
 80072c0:	5162      	str	r2, [r4, r5]
 80072c2:	604b      	str	r3, [r1, #4]
 80072c4:	4638      	mov	r0, r7
 80072c6:	f104 060b 	add.w	r6, r4, #11
 80072ca:	f000 f877 	bl	80073bc <__malloc_unlock>
 80072ce:	f026 0607 	bic.w	r6, r6, #7
 80072d2:	1d23      	adds	r3, r4, #4
 80072d4:	1af2      	subs	r2, r6, r3
 80072d6:	d0b6      	beq.n	8007246 <_malloc_r+0x22>
 80072d8:	1b9b      	subs	r3, r3, r6
 80072da:	50a3      	str	r3, [r4, r2]
 80072dc:	e7b3      	b.n	8007246 <_malloc_r+0x22>
 80072de:	6862      	ldr	r2, [r4, #4]
 80072e0:	42a3      	cmp	r3, r4
 80072e2:	bf0c      	ite	eq
 80072e4:	6032      	streq	r2, [r6, #0]
 80072e6:	605a      	strne	r2, [r3, #4]
 80072e8:	e7ec      	b.n	80072c4 <_malloc_r+0xa0>
 80072ea:	4623      	mov	r3, r4
 80072ec:	6864      	ldr	r4, [r4, #4]
 80072ee:	e7b2      	b.n	8007256 <_malloc_r+0x32>
 80072f0:	4634      	mov	r4, r6
 80072f2:	6876      	ldr	r6, [r6, #4]
 80072f4:	e7b9      	b.n	800726a <_malloc_r+0x46>
 80072f6:	230c      	movs	r3, #12
 80072f8:	603b      	str	r3, [r7, #0]
 80072fa:	4638      	mov	r0, r7
 80072fc:	f000 f85e 	bl	80073bc <__malloc_unlock>
 8007300:	e7a1      	b.n	8007246 <_malloc_r+0x22>
 8007302:	6025      	str	r5, [r4, #0]
 8007304:	e7de      	b.n	80072c4 <_malloc_r+0xa0>
 8007306:	bf00      	nop
 8007308:	200002bc 	.word	0x200002bc

0800730c <_sbrk_r>:
 800730c:	b538      	push	{r3, r4, r5, lr}
 800730e:	4d06      	ldr	r5, [pc, #24]	; (8007328 <_sbrk_r+0x1c>)
 8007310:	2300      	movs	r3, #0
 8007312:	4604      	mov	r4, r0
 8007314:	4608      	mov	r0, r1
 8007316:	602b      	str	r3, [r5, #0]
 8007318:	f7fa fda0 	bl	8001e5c <_sbrk>
 800731c:	1c43      	adds	r3, r0, #1
 800731e:	d102      	bne.n	8007326 <_sbrk_r+0x1a>
 8007320:	682b      	ldr	r3, [r5, #0]
 8007322:	b103      	cbz	r3, 8007326 <_sbrk_r+0x1a>
 8007324:	6023      	str	r3, [r4, #0]
 8007326:	bd38      	pop	{r3, r4, r5, pc}
 8007328:	200002c4 	.word	0x200002c4

0800732c <__assert_func>:
 800732c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800732e:	4614      	mov	r4, r2
 8007330:	461a      	mov	r2, r3
 8007332:	4b09      	ldr	r3, [pc, #36]	; (8007358 <__assert_func+0x2c>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4605      	mov	r5, r0
 8007338:	68d8      	ldr	r0, [r3, #12]
 800733a:	b14c      	cbz	r4, 8007350 <__assert_func+0x24>
 800733c:	4b07      	ldr	r3, [pc, #28]	; (800735c <__assert_func+0x30>)
 800733e:	9100      	str	r1, [sp, #0]
 8007340:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007344:	4906      	ldr	r1, [pc, #24]	; (8007360 <__assert_func+0x34>)
 8007346:	462b      	mov	r3, r5
 8007348:	f000 f80e 	bl	8007368 <fiprintf>
 800734c:	f000 fa64 	bl	8007818 <abort>
 8007350:	4b04      	ldr	r3, [pc, #16]	; (8007364 <__assert_func+0x38>)
 8007352:	461c      	mov	r4, r3
 8007354:	e7f3      	b.n	800733e <__assert_func+0x12>
 8007356:	bf00      	nop
 8007358:	2000000c 	.word	0x2000000c
 800735c:	080080fc 	.word	0x080080fc
 8007360:	08008109 	.word	0x08008109
 8007364:	08008137 	.word	0x08008137

08007368 <fiprintf>:
 8007368:	b40e      	push	{r1, r2, r3}
 800736a:	b503      	push	{r0, r1, lr}
 800736c:	4601      	mov	r1, r0
 800736e:	ab03      	add	r3, sp, #12
 8007370:	4805      	ldr	r0, [pc, #20]	; (8007388 <fiprintf+0x20>)
 8007372:	f853 2b04 	ldr.w	r2, [r3], #4
 8007376:	6800      	ldr	r0, [r0, #0]
 8007378:	9301      	str	r3, [sp, #4]
 800737a:	f000 f84f 	bl	800741c <_vfiprintf_r>
 800737e:	b002      	add	sp, #8
 8007380:	f85d eb04 	ldr.w	lr, [sp], #4
 8007384:	b003      	add	sp, #12
 8007386:	4770      	bx	lr
 8007388:	2000000c 	.word	0x2000000c

0800738c <__ascii_mbtowc>:
 800738c:	b082      	sub	sp, #8
 800738e:	b901      	cbnz	r1, 8007392 <__ascii_mbtowc+0x6>
 8007390:	a901      	add	r1, sp, #4
 8007392:	b142      	cbz	r2, 80073a6 <__ascii_mbtowc+0x1a>
 8007394:	b14b      	cbz	r3, 80073aa <__ascii_mbtowc+0x1e>
 8007396:	7813      	ldrb	r3, [r2, #0]
 8007398:	600b      	str	r3, [r1, #0]
 800739a:	7812      	ldrb	r2, [r2, #0]
 800739c:	1e10      	subs	r0, r2, #0
 800739e:	bf18      	it	ne
 80073a0:	2001      	movne	r0, #1
 80073a2:	b002      	add	sp, #8
 80073a4:	4770      	bx	lr
 80073a6:	4610      	mov	r0, r2
 80073a8:	e7fb      	b.n	80073a2 <__ascii_mbtowc+0x16>
 80073aa:	f06f 0001 	mvn.w	r0, #1
 80073ae:	e7f8      	b.n	80073a2 <__ascii_mbtowc+0x16>

080073b0 <__malloc_lock>:
 80073b0:	4801      	ldr	r0, [pc, #4]	; (80073b8 <__malloc_lock+0x8>)
 80073b2:	f000 bbf1 	b.w	8007b98 <__retarget_lock_acquire_recursive>
 80073b6:	bf00      	nop
 80073b8:	200002c8 	.word	0x200002c8

080073bc <__malloc_unlock>:
 80073bc:	4801      	ldr	r0, [pc, #4]	; (80073c4 <__malloc_unlock+0x8>)
 80073be:	f000 bbec 	b.w	8007b9a <__retarget_lock_release_recursive>
 80073c2:	bf00      	nop
 80073c4:	200002c8 	.word	0x200002c8

080073c8 <__sfputc_r>:
 80073c8:	6893      	ldr	r3, [r2, #8]
 80073ca:	3b01      	subs	r3, #1
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	b410      	push	{r4}
 80073d0:	6093      	str	r3, [r2, #8]
 80073d2:	da08      	bge.n	80073e6 <__sfputc_r+0x1e>
 80073d4:	6994      	ldr	r4, [r2, #24]
 80073d6:	42a3      	cmp	r3, r4
 80073d8:	db01      	blt.n	80073de <__sfputc_r+0x16>
 80073da:	290a      	cmp	r1, #10
 80073dc:	d103      	bne.n	80073e6 <__sfputc_r+0x1e>
 80073de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80073e2:	f000 b94b 	b.w	800767c <__swbuf_r>
 80073e6:	6813      	ldr	r3, [r2, #0]
 80073e8:	1c58      	adds	r0, r3, #1
 80073ea:	6010      	str	r0, [r2, #0]
 80073ec:	7019      	strb	r1, [r3, #0]
 80073ee:	4608      	mov	r0, r1
 80073f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80073f4:	4770      	bx	lr

080073f6 <__sfputs_r>:
 80073f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073f8:	4606      	mov	r6, r0
 80073fa:	460f      	mov	r7, r1
 80073fc:	4614      	mov	r4, r2
 80073fe:	18d5      	adds	r5, r2, r3
 8007400:	42ac      	cmp	r4, r5
 8007402:	d101      	bne.n	8007408 <__sfputs_r+0x12>
 8007404:	2000      	movs	r0, #0
 8007406:	e007      	b.n	8007418 <__sfputs_r+0x22>
 8007408:	f814 1b01 	ldrb.w	r1, [r4], #1
 800740c:	463a      	mov	r2, r7
 800740e:	4630      	mov	r0, r6
 8007410:	f7ff ffda 	bl	80073c8 <__sfputc_r>
 8007414:	1c43      	adds	r3, r0, #1
 8007416:	d1f3      	bne.n	8007400 <__sfputs_r+0xa>
 8007418:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800741c <_vfiprintf_r>:
 800741c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007420:	460d      	mov	r5, r1
 8007422:	b09d      	sub	sp, #116	; 0x74
 8007424:	4614      	mov	r4, r2
 8007426:	4698      	mov	r8, r3
 8007428:	4606      	mov	r6, r0
 800742a:	b118      	cbz	r0, 8007434 <_vfiprintf_r+0x18>
 800742c:	6983      	ldr	r3, [r0, #24]
 800742e:	b90b      	cbnz	r3, 8007434 <_vfiprintf_r+0x18>
 8007430:	f000 fb14 	bl	8007a5c <__sinit>
 8007434:	4b89      	ldr	r3, [pc, #548]	; (800765c <_vfiprintf_r+0x240>)
 8007436:	429d      	cmp	r5, r3
 8007438:	d11b      	bne.n	8007472 <_vfiprintf_r+0x56>
 800743a:	6875      	ldr	r5, [r6, #4]
 800743c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800743e:	07d9      	lsls	r1, r3, #31
 8007440:	d405      	bmi.n	800744e <_vfiprintf_r+0x32>
 8007442:	89ab      	ldrh	r3, [r5, #12]
 8007444:	059a      	lsls	r2, r3, #22
 8007446:	d402      	bmi.n	800744e <_vfiprintf_r+0x32>
 8007448:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800744a:	f000 fba5 	bl	8007b98 <__retarget_lock_acquire_recursive>
 800744e:	89ab      	ldrh	r3, [r5, #12]
 8007450:	071b      	lsls	r3, r3, #28
 8007452:	d501      	bpl.n	8007458 <_vfiprintf_r+0x3c>
 8007454:	692b      	ldr	r3, [r5, #16]
 8007456:	b9eb      	cbnz	r3, 8007494 <_vfiprintf_r+0x78>
 8007458:	4629      	mov	r1, r5
 800745a:	4630      	mov	r0, r6
 800745c:	f000 f96e 	bl	800773c <__swsetup_r>
 8007460:	b1c0      	cbz	r0, 8007494 <_vfiprintf_r+0x78>
 8007462:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007464:	07dc      	lsls	r4, r3, #31
 8007466:	d50e      	bpl.n	8007486 <_vfiprintf_r+0x6a>
 8007468:	f04f 30ff 	mov.w	r0, #4294967295
 800746c:	b01d      	add	sp, #116	; 0x74
 800746e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007472:	4b7b      	ldr	r3, [pc, #492]	; (8007660 <_vfiprintf_r+0x244>)
 8007474:	429d      	cmp	r5, r3
 8007476:	d101      	bne.n	800747c <_vfiprintf_r+0x60>
 8007478:	68b5      	ldr	r5, [r6, #8]
 800747a:	e7df      	b.n	800743c <_vfiprintf_r+0x20>
 800747c:	4b79      	ldr	r3, [pc, #484]	; (8007664 <_vfiprintf_r+0x248>)
 800747e:	429d      	cmp	r5, r3
 8007480:	bf08      	it	eq
 8007482:	68f5      	ldreq	r5, [r6, #12]
 8007484:	e7da      	b.n	800743c <_vfiprintf_r+0x20>
 8007486:	89ab      	ldrh	r3, [r5, #12]
 8007488:	0598      	lsls	r0, r3, #22
 800748a:	d4ed      	bmi.n	8007468 <_vfiprintf_r+0x4c>
 800748c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800748e:	f000 fb84 	bl	8007b9a <__retarget_lock_release_recursive>
 8007492:	e7e9      	b.n	8007468 <_vfiprintf_r+0x4c>
 8007494:	2300      	movs	r3, #0
 8007496:	9309      	str	r3, [sp, #36]	; 0x24
 8007498:	2320      	movs	r3, #32
 800749a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800749e:	f8cd 800c 	str.w	r8, [sp, #12]
 80074a2:	2330      	movs	r3, #48	; 0x30
 80074a4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007668 <_vfiprintf_r+0x24c>
 80074a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80074ac:	f04f 0901 	mov.w	r9, #1
 80074b0:	4623      	mov	r3, r4
 80074b2:	469a      	mov	sl, r3
 80074b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80074b8:	b10a      	cbz	r2, 80074be <_vfiprintf_r+0xa2>
 80074ba:	2a25      	cmp	r2, #37	; 0x25
 80074bc:	d1f9      	bne.n	80074b2 <_vfiprintf_r+0x96>
 80074be:	ebba 0b04 	subs.w	fp, sl, r4
 80074c2:	d00b      	beq.n	80074dc <_vfiprintf_r+0xc0>
 80074c4:	465b      	mov	r3, fp
 80074c6:	4622      	mov	r2, r4
 80074c8:	4629      	mov	r1, r5
 80074ca:	4630      	mov	r0, r6
 80074cc:	f7ff ff93 	bl	80073f6 <__sfputs_r>
 80074d0:	3001      	adds	r0, #1
 80074d2:	f000 80aa 	beq.w	800762a <_vfiprintf_r+0x20e>
 80074d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80074d8:	445a      	add	r2, fp
 80074da:	9209      	str	r2, [sp, #36]	; 0x24
 80074dc:	f89a 3000 	ldrb.w	r3, [sl]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	f000 80a2 	beq.w	800762a <_vfiprintf_r+0x20e>
 80074e6:	2300      	movs	r3, #0
 80074e8:	f04f 32ff 	mov.w	r2, #4294967295
 80074ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80074f0:	f10a 0a01 	add.w	sl, sl, #1
 80074f4:	9304      	str	r3, [sp, #16]
 80074f6:	9307      	str	r3, [sp, #28]
 80074f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80074fc:	931a      	str	r3, [sp, #104]	; 0x68
 80074fe:	4654      	mov	r4, sl
 8007500:	2205      	movs	r2, #5
 8007502:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007506:	4858      	ldr	r0, [pc, #352]	; (8007668 <_vfiprintf_r+0x24c>)
 8007508:	f7f8 fe6a 	bl	80001e0 <memchr>
 800750c:	9a04      	ldr	r2, [sp, #16]
 800750e:	b9d8      	cbnz	r0, 8007548 <_vfiprintf_r+0x12c>
 8007510:	06d1      	lsls	r1, r2, #27
 8007512:	bf44      	itt	mi
 8007514:	2320      	movmi	r3, #32
 8007516:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800751a:	0713      	lsls	r3, r2, #28
 800751c:	bf44      	itt	mi
 800751e:	232b      	movmi	r3, #43	; 0x2b
 8007520:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007524:	f89a 3000 	ldrb.w	r3, [sl]
 8007528:	2b2a      	cmp	r3, #42	; 0x2a
 800752a:	d015      	beq.n	8007558 <_vfiprintf_r+0x13c>
 800752c:	9a07      	ldr	r2, [sp, #28]
 800752e:	4654      	mov	r4, sl
 8007530:	2000      	movs	r0, #0
 8007532:	f04f 0c0a 	mov.w	ip, #10
 8007536:	4621      	mov	r1, r4
 8007538:	f811 3b01 	ldrb.w	r3, [r1], #1
 800753c:	3b30      	subs	r3, #48	; 0x30
 800753e:	2b09      	cmp	r3, #9
 8007540:	d94e      	bls.n	80075e0 <_vfiprintf_r+0x1c4>
 8007542:	b1b0      	cbz	r0, 8007572 <_vfiprintf_r+0x156>
 8007544:	9207      	str	r2, [sp, #28]
 8007546:	e014      	b.n	8007572 <_vfiprintf_r+0x156>
 8007548:	eba0 0308 	sub.w	r3, r0, r8
 800754c:	fa09 f303 	lsl.w	r3, r9, r3
 8007550:	4313      	orrs	r3, r2
 8007552:	9304      	str	r3, [sp, #16]
 8007554:	46a2      	mov	sl, r4
 8007556:	e7d2      	b.n	80074fe <_vfiprintf_r+0xe2>
 8007558:	9b03      	ldr	r3, [sp, #12]
 800755a:	1d19      	adds	r1, r3, #4
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	9103      	str	r1, [sp, #12]
 8007560:	2b00      	cmp	r3, #0
 8007562:	bfbb      	ittet	lt
 8007564:	425b      	neglt	r3, r3
 8007566:	f042 0202 	orrlt.w	r2, r2, #2
 800756a:	9307      	strge	r3, [sp, #28]
 800756c:	9307      	strlt	r3, [sp, #28]
 800756e:	bfb8      	it	lt
 8007570:	9204      	strlt	r2, [sp, #16]
 8007572:	7823      	ldrb	r3, [r4, #0]
 8007574:	2b2e      	cmp	r3, #46	; 0x2e
 8007576:	d10c      	bne.n	8007592 <_vfiprintf_r+0x176>
 8007578:	7863      	ldrb	r3, [r4, #1]
 800757a:	2b2a      	cmp	r3, #42	; 0x2a
 800757c:	d135      	bne.n	80075ea <_vfiprintf_r+0x1ce>
 800757e:	9b03      	ldr	r3, [sp, #12]
 8007580:	1d1a      	adds	r2, r3, #4
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	9203      	str	r2, [sp, #12]
 8007586:	2b00      	cmp	r3, #0
 8007588:	bfb8      	it	lt
 800758a:	f04f 33ff 	movlt.w	r3, #4294967295
 800758e:	3402      	adds	r4, #2
 8007590:	9305      	str	r3, [sp, #20]
 8007592:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007678 <_vfiprintf_r+0x25c>
 8007596:	7821      	ldrb	r1, [r4, #0]
 8007598:	2203      	movs	r2, #3
 800759a:	4650      	mov	r0, sl
 800759c:	f7f8 fe20 	bl	80001e0 <memchr>
 80075a0:	b140      	cbz	r0, 80075b4 <_vfiprintf_r+0x198>
 80075a2:	2340      	movs	r3, #64	; 0x40
 80075a4:	eba0 000a 	sub.w	r0, r0, sl
 80075a8:	fa03 f000 	lsl.w	r0, r3, r0
 80075ac:	9b04      	ldr	r3, [sp, #16]
 80075ae:	4303      	orrs	r3, r0
 80075b0:	3401      	adds	r4, #1
 80075b2:	9304      	str	r3, [sp, #16]
 80075b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075b8:	482c      	ldr	r0, [pc, #176]	; (800766c <_vfiprintf_r+0x250>)
 80075ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80075be:	2206      	movs	r2, #6
 80075c0:	f7f8 fe0e 	bl	80001e0 <memchr>
 80075c4:	2800      	cmp	r0, #0
 80075c6:	d03f      	beq.n	8007648 <_vfiprintf_r+0x22c>
 80075c8:	4b29      	ldr	r3, [pc, #164]	; (8007670 <_vfiprintf_r+0x254>)
 80075ca:	bb1b      	cbnz	r3, 8007614 <_vfiprintf_r+0x1f8>
 80075cc:	9b03      	ldr	r3, [sp, #12]
 80075ce:	3307      	adds	r3, #7
 80075d0:	f023 0307 	bic.w	r3, r3, #7
 80075d4:	3308      	adds	r3, #8
 80075d6:	9303      	str	r3, [sp, #12]
 80075d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075da:	443b      	add	r3, r7
 80075dc:	9309      	str	r3, [sp, #36]	; 0x24
 80075de:	e767      	b.n	80074b0 <_vfiprintf_r+0x94>
 80075e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80075e4:	460c      	mov	r4, r1
 80075e6:	2001      	movs	r0, #1
 80075e8:	e7a5      	b.n	8007536 <_vfiprintf_r+0x11a>
 80075ea:	2300      	movs	r3, #0
 80075ec:	3401      	adds	r4, #1
 80075ee:	9305      	str	r3, [sp, #20]
 80075f0:	4619      	mov	r1, r3
 80075f2:	f04f 0c0a 	mov.w	ip, #10
 80075f6:	4620      	mov	r0, r4
 80075f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80075fc:	3a30      	subs	r2, #48	; 0x30
 80075fe:	2a09      	cmp	r2, #9
 8007600:	d903      	bls.n	800760a <_vfiprintf_r+0x1ee>
 8007602:	2b00      	cmp	r3, #0
 8007604:	d0c5      	beq.n	8007592 <_vfiprintf_r+0x176>
 8007606:	9105      	str	r1, [sp, #20]
 8007608:	e7c3      	b.n	8007592 <_vfiprintf_r+0x176>
 800760a:	fb0c 2101 	mla	r1, ip, r1, r2
 800760e:	4604      	mov	r4, r0
 8007610:	2301      	movs	r3, #1
 8007612:	e7f0      	b.n	80075f6 <_vfiprintf_r+0x1da>
 8007614:	ab03      	add	r3, sp, #12
 8007616:	9300      	str	r3, [sp, #0]
 8007618:	462a      	mov	r2, r5
 800761a:	4b16      	ldr	r3, [pc, #88]	; (8007674 <_vfiprintf_r+0x258>)
 800761c:	a904      	add	r1, sp, #16
 800761e:	4630      	mov	r0, r6
 8007620:	f7fd ff9a 	bl	8005558 <_printf_float>
 8007624:	4607      	mov	r7, r0
 8007626:	1c78      	adds	r0, r7, #1
 8007628:	d1d6      	bne.n	80075d8 <_vfiprintf_r+0x1bc>
 800762a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800762c:	07d9      	lsls	r1, r3, #31
 800762e:	d405      	bmi.n	800763c <_vfiprintf_r+0x220>
 8007630:	89ab      	ldrh	r3, [r5, #12]
 8007632:	059a      	lsls	r2, r3, #22
 8007634:	d402      	bmi.n	800763c <_vfiprintf_r+0x220>
 8007636:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007638:	f000 faaf 	bl	8007b9a <__retarget_lock_release_recursive>
 800763c:	89ab      	ldrh	r3, [r5, #12]
 800763e:	065b      	lsls	r3, r3, #25
 8007640:	f53f af12 	bmi.w	8007468 <_vfiprintf_r+0x4c>
 8007644:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007646:	e711      	b.n	800746c <_vfiprintf_r+0x50>
 8007648:	ab03      	add	r3, sp, #12
 800764a:	9300      	str	r3, [sp, #0]
 800764c:	462a      	mov	r2, r5
 800764e:	4b09      	ldr	r3, [pc, #36]	; (8007674 <_vfiprintf_r+0x258>)
 8007650:	a904      	add	r1, sp, #16
 8007652:	4630      	mov	r0, r6
 8007654:	f7fe fa24 	bl	8005aa0 <_printf_i>
 8007658:	e7e4      	b.n	8007624 <_vfiprintf_r+0x208>
 800765a:	bf00      	nop
 800765c:	08008274 	.word	0x08008274
 8007660:	08008294 	.word	0x08008294
 8007664:	08008254 	.word	0x08008254
 8007668:	08008142 	.word	0x08008142
 800766c:	0800814c 	.word	0x0800814c
 8007670:	08005559 	.word	0x08005559
 8007674:	080073f7 	.word	0x080073f7
 8007678:	08008148 	.word	0x08008148

0800767c <__swbuf_r>:
 800767c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800767e:	460e      	mov	r6, r1
 8007680:	4614      	mov	r4, r2
 8007682:	4605      	mov	r5, r0
 8007684:	b118      	cbz	r0, 800768e <__swbuf_r+0x12>
 8007686:	6983      	ldr	r3, [r0, #24]
 8007688:	b90b      	cbnz	r3, 800768e <__swbuf_r+0x12>
 800768a:	f000 f9e7 	bl	8007a5c <__sinit>
 800768e:	4b21      	ldr	r3, [pc, #132]	; (8007714 <__swbuf_r+0x98>)
 8007690:	429c      	cmp	r4, r3
 8007692:	d12b      	bne.n	80076ec <__swbuf_r+0x70>
 8007694:	686c      	ldr	r4, [r5, #4]
 8007696:	69a3      	ldr	r3, [r4, #24]
 8007698:	60a3      	str	r3, [r4, #8]
 800769a:	89a3      	ldrh	r3, [r4, #12]
 800769c:	071a      	lsls	r2, r3, #28
 800769e:	d52f      	bpl.n	8007700 <__swbuf_r+0x84>
 80076a0:	6923      	ldr	r3, [r4, #16]
 80076a2:	b36b      	cbz	r3, 8007700 <__swbuf_r+0x84>
 80076a4:	6923      	ldr	r3, [r4, #16]
 80076a6:	6820      	ldr	r0, [r4, #0]
 80076a8:	1ac0      	subs	r0, r0, r3
 80076aa:	6963      	ldr	r3, [r4, #20]
 80076ac:	b2f6      	uxtb	r6, r6
 80076ae:	4283      	cmp	r3, r0
 80076b0:	4637      	mov	r7, r6
 80076b2:	dc04      	bgt.n	80076be <__swbuf_r+0x42>
 80076b4:	4621      	mov	r1, r4
 80076b6:	4628      	mov	r0, r5
 80076b8:	f000 f93c 	bl	8007934 <_fflush_r>
 80076bc:	bb30      	cbnz	r0, 800770c <__swbuf_r+0x90>
 80076be:	68a3      	ldr	r3, [r4, #8]
 80076c0:	3b01      	subs	r3, #1
 80076c2:	60a3      	str	r3, [r4, #8]
 80076c4:	6823      	ldr	r3, [r4, #0]
 80076c6:	1c5a      	adds	r2, r3, #1
 80076c8:	6022      	str	r2, [r4, #0]
 80076ca:	701e      	strb	r6, [r3, #0]
 80076cc:	6963      	ldr	r3, [r4, #20]
 80076ce:	3001      	adds	r0, #1
 80076d0:	4283      	cmp	r3, r0
 80076d2:	d004      	beq.n	80076de <__swbuf_r+0x62>
 80076d4:	89a3      	ldrh	r3, [r4, #12]
 80076d6:	07db      	lsls	r3, r3, #31
 80076d8:	d506      	bpl.n	80076e8 <__swbuf_r+0x6c>
 80076da:	2e0a      	cmp	r6, #10
 80076dc:	d104      	bne.n	80076e8 <__swbuf_r+0x6c>
 80076de:	4621      	mov	r1, r4
 80076e0:	4628      	mov	r0, r5
 80076e2:	f000 f927 	bl	8007934 <_fflush_r>
 80076e6:	b988      	cbnz	r0, 800770c <__swbuf_r+0x90>
 80076e8:	4638      	mov	r0, r7
 80076ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80076ec:	4b0a      	ldr	r3, [pc, #40]	; (8007718 <__swbuf_r+0x9c>)
 80076ee:	429c      	cmp	r4, r3
 80076f0:	d101      	bne.n	80076f6 <__swbuf_r+0x7a>
 80076f2:	68ac      	ldr	r4, [r5, #8]
 80076f4:	e7cf      	b.n	8007696 <__swbuf_r+0x1a>
 80076f6:	4b09      	ldr	r3, [pc, #36]	; (800771c <__swbuf_r+0xa0>)
 80076f8:	429c      	cmp	r4, r3
 80076fa:	bf08      	it	eq
 80076fc:	68ec      	ldreq	r4, [r5, #12]
 80076fe:	e7ca      	b.n	8007696 <__swbuf_r+0x1a>
 8007700:	4621      	mov	r1, r4
 8007702:	4628      	mov	r0, r5
 8007704:	f000 f81a 	bl	800773c <__swsetup_r>
 8007708:	2800      	cmp	r0, #0
 800770a:	d0cb      	beq.n	80076a4 <__swbuf_r+0x28>
 800770c:	f04f 37ff 	mov.w	r7, #4294967295
 8007710:	e7ea      	b.n	80076e8 <__swbuf_r+0x6c>
 8007712:	bf00      	nop
 8007714:	08008274 	.word	0x08008274
 8007718:	08008294 	.word	0x08008294
 800771c:	08008254 	.word	0x08008254

08007720 <__ascii_wctomb>:
 8007720:	b149      	cbz	r1, 8007736 <__ascii_wctomb+0x16>
 8007722:	2aff      	cmp	r2, #255	; 0xff
 8007724:	bf85      	ittet	hi
 8007726:	238a      	movhi	r3, #138	; 0x8a
 8007728:	6003      	strhi	r3, [r0, #0]
 800772a:	700a      	strbls	r2, [r1, #0]
 800772c:	f04f 30ff 	movhi.w	r0, #4294967295
 8007730:	bf98      	it	ls
 8007732:	2001      	movls	r0, #1
 8007734:	4770      	bx	lr
 8007736:	4608      	mov	r0, r1
 8007738:	4770      	bx	lr
	...

0800773c <__swsetup_r>:
 800773c:	4b32      	ldr	r3, [pc, #200]	; (8007808 <__swsetup_r+0xcc>)
 800773e:	b570      	push	{r4, r5, r6, lr}
 8007740:	681d      	ldr	r5, [r3, #0]
 8007742:	4606      	mov	r6, r0
 8007744:	460c      	mov	r4, r1
 8007746:	b125      	cbz	r5, 8007752 <__swsetup_r+0x16>
 8007748:	69ab      	ldr	r3, [r5, #24]
 800774a:	b913      	cbnz	r3, 8007752 <__swsetup_r+0x16>
 800774c:	4628      	mov	r0, r5
 800774e:	f000 f985 	bl	8007a5c <__sinit>
 8007752:	4b2e      	ldr	r3, [pc, #184]	; (800780c <__swsetup_r+0xd0>)
 8007754:	429c      	cmp	r4, r3
 8007756:	d10f      	bne.n	8007778 <__swsetup_r+0x3c>
 8007758:	686c      	ldr	r4, [r5, #4]
 800775a:	89a3      	ldrh	r3, [r4, #12]
 800775c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007760:	0719      	lsls	r1, r3, #28
 8007762:	d42c      	bmi.n	80077be <__swsetup_r+0x82>
 8007764:	06dd      	lsls	r5, r3, #27
 8007766:	d411      	bmi.n	800778c <__swsetup_r+0x50>
 8007768:	2309      	movs	r3, #9
 800776a:	6033      	str	r3, [r6, #0]
 800776c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007770:	81a3      	strh	r3, [r4, #12]
 8007772:	f04f 30ff 	mov.w	r0, #4294967295
 8007776:	e03e      	b.n	80077f6 <__swsetup_r+0xba>
 8007778:	4b25      	ldr	r3, [pc, #148]	; (8007810 <__swsetup_r+0xd4>)
 800777a:	429c      	cmp	r4, r3
 800777c:	d101      	bne.n	8007782 <__swsetup_r+0x46>
 800777e:	68ac      	ldr	r4, [r5, #8]
 8007780:	e7eb      	b.n	800775a <__swsetup_r+0x1e>
 8007782:	4b24      	ldr	r3, [pc, #144]	; (8007814 <__swsetup_r+0xd8>)
 8007784:	429c      	cmp	r4, r3
 8007786:	bf08      	it	eq
 8007788:	68ec      	ldreq	r4, [r5, #12]
 800778a:	e7e6      	b.n	800775a <__swsetup_r+0x1e>
 800778c:	0758      	lsls	r0, r3, #29
 800778e:	d512      	bpl.n	80077b6 <__swsetup_r+0x7a>
 8007790:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007792:	b141      	cbz	r1, 80077a6 <__swsetup_r+0x6a>
 8007794:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007798:	4299      	cmp	r1, r3
 800779a:	d002      	beq.n	80077a2 <__swsetup_r+0x66>
 800779c:	4630      	mov	r0, r6
 800779e:	f7ff fcd5 	bl	800714c <_free_r>
 80077a2:	2300      	movs	r3, #0
 80077a4:	6363      	str	r3, [r4, #52]	; 0x34
 80077a6:	89a3      	ldrh	r3, [r4, #12]
 80077a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80077ac:	81a3      	strh	r3, [r4, #12]
 80077ae:	2300      	movs	r3, #0
 80077b0:	6063      	str	r3, [r4, #4]
 80077b2:	6923      	ldr	r3, [r4, #16]
 80077b4:	6023      	str	r3, [r4, #0]
 80077b6:	89a3      	ldrh	r3, [r4, #12]
 80077b8:	f043 0308 	orr.w	r3, r3, #8
 80077bc:	81a3      	strh	r3, [r4, #12]
 80077be:	6923      	ldr	r3, [r4, #16]
 80077c0:	b94b      	cbnz	r3, 80077d6 <__swsetup_r+0x9a>
 80077c2:	89a3      	ldrh	r3, [r4, #12]
 80077c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80077c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80077cc:	d003      	beq.n	80077d6 <__swsetup_r+0x9a>
 80077ce:	4621      	mov	r1, r4
 80077d0:	4630      	mov	r0, r6
 80077d2:	f000 fa09 	bl	8007be8 <__smakebuf_r>
 80077d6:	89a0      	ldrh	r0, [r4, #12]
 80077d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80077dc:	f010 0301 	ands.w	r3, r0, #1
 80077e0:	d00a      	beq.n	80077f8 <__swsetup_r+0xbc>
 80077e2:	2300      	movs	r3, #0
 80077e4:	60a3      	str	r3, [r4, #8]
 80077e6:	6963      	ldr	r3, [r4, #20]
 80077e8:	425b      	negs	r3, r3
 80077ea:	61a3      	str	r3, [r4, #24]
 80077ec:	6923      	ldr	r3, [r4, #16]
 80077ee:	b943      	cbnz	r3, 8007802 <__swsetup_r+0xc6>
 80077f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80077f4:	d1ba      	bne.n	800776c <__swsetup_r+0x30>
 80077f6:	bd70      	pop	{r4, r5, r6, pc}
 80077f8:	0781      	lsls	r1, r0, #30
 80077fa:	bf58      	it	pl
 80077fc:	6963      	ldrpl	r3, [r4, #20]
 80077fe:	60a3      	str	r3, [r4, #8]
 8007800:	e7f4      	b.n	80077ec <__swsetup_r+0xb0>
 8007802:	2000      	movs	r0, #0
 8007804:	e7f7      	b.n	80077f6 <__swsetup_r+0xba>
 8007806:	bf00      	nop
 8007808:	2000000c 	.word	0x2000000c
 800780c:	08008274 	.word	0x08008274
 8007810:	08008294 	.word	0x08008294
 8007814:	08008254 	.word	0x08008254

08007818 <abort>:
 8007818:	b508      	push	{r3, lr}
 800781a:	2006      	movs	r0, #6
 800781c:	f000 fa4c 	bl	8007cb8 <raise>
 8007820:	2001      	movs	r0, #1
 8007822:	f7fa fabf 	bl	8001da4 <_exit>
	...

08007828 <__sflush_r>:
 8007828:	898a      	ldrh	r2, [r1, #12]
 800782a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800782e:	4605      	mov	r5, r0
 8007830:	0710      	lsls	r0, r2, #28
 8007832:	460c      	mov	r4, r1
 8007834:	d458      	bmi.n	80078e8 <__sflush_r+0xc0>
 8007836:	684b      	ldr	r3, [r1, #4]
 8007838:	2b00      	cmp	r3, #0
 800783a:	dc05      	bgt.n	8007848 <__sflush_r+0x20>
 800783c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800783e:	2b00      	cmp	r3, #0
 8007840:	dc02      	bgt.n	8007848 <__sflush_r+0x20>
 8007842:	2000      	movs	r0, #0
 8007844:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007848:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800784a:	2e00      	cmp	r6, #0
 800784c:	d0f9      	beq.n	8007842 <__sflush_r+0x1a>
 800784e:	2300      	movs	r3, #0
 8007850:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007854:	682f      	ldr	r7, [r5, #0]
 8007856:	602b      	str	r3, [r5, #0]
 8007858:	d032      	beq.n	80078c0 <__sflush_r+0x98>
 800785a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800785c:	89a3      	ldrh	r3, [r4, #12]
 800785e:	075a      	lsls	r2, r3, #29
 8007860:	d505      	bpl.n	800786e <__sflush_r+0x46>
 8007862:	6863      	ldr	r3, [r4, #4]
 8007864:	1ac0      	subs	r0, r0, r3
 8007866:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007868:	b10b      	cbz	r3, 800786e <__sflush_r+0x46>
 800786a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800786c:	1ac0      	subs	r0, r0, r3
 800786e:	2300      	movs	r3, #0
 8007870:	4602      	mov	r2, r0
 8007872:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007874:	6a21      	ldr	r1, [r4, #32]
 8007876:	4628      	mov	r0, r5
 8007878:	47b0      	blx	r6
 800787a:	1c43      	adds	r3, r0, #1
 800787c:	89a3      	ldrh	r3, [r4, #12]
 800787e:	d106      	bne.n	800788e <__sflush_r+0x66>
 8007880:	6829      	ldr	r1, [r5, #0]
 8007882:	291d      	cmp	r1, #29
 8007884:	d82c      	bhi.n	80078e0 <__sflush_r+0xb8>
 8007886:	4a2a      	ldr	r2, [pc, #168]	; (8007930 <__sflush_r+0x108>)
 8007888:	40ca      	lsrs	r2, r1
 800788a:	07d6      	lsls	r6, r2, #31
 800788c:	d528      	bpl.n	80078e0 <__sflush_r+0xb8>
 800788e:	2200      	movs	r2, #0
 8007890:	6062      	str	r2, [r4, #4]
 8007892:	04d9      	lsls	r1, r3, #19
 8007894:	6922      	ldr	r2, [r4, #16]
 8007896:	6022      	str	r2, [r4, #0]
 8007898:	d504      	bpl.n	80078a4 <__sflush_r+0x7c>
 800789a:	1c42      	adds	r2, r0, #1
 800789c:	d101      	bne.n	80078a2 <__sflush_r+0x7a>
 800789e:	682b      	ldr	r3, [r5, #0]
 80078a0:	b903      	cbnz	r3, 80078a4 <__sflush_r+0x7c>
 80078a2:	6560      	str	r0, [r4, #84]	; 0x54
 80078a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80078a6:	602f      	str	r7, [r5, #0]
 80078a8:	2900      	cmp	r1, #0
 80078aa:	d0ca      	beq.n	8007842 <__sflush_r+0x1a>
 80078ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80078b0:	4299      	cmp	r1, r3
 80078b2:	d002      	beq.n	80078ba <__sflush_r+0x92>
 80078b4:	4628      	mov	r0, r5
 80078b6:	f7ff fc49 	bl	800714c <_free_r>
 80078ba:	2000      	movs	r0, #0
 80078bc:	6360      	str	r0, [r4, #52]	; 0x34
 80078be:	e7c1      	b.n	8007844 <__sflush_r+0x1c>
 80078c0:	6a21      	ldr	r1, [r4, #32]
 80078c2:	2301      	movs	r3, #1
 80078c4:	4628      	mov	r0, r5
 80078c6:	47b0      	blx	r6
 80078c8:	1c41      	adds	r1, r0, #1
 80078ca:	d1c7      	bne.n	800785c <__sflush_r+0x34>
 80078cc:	682b      	ldr	r3, [r5, #0]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d0c4      	beq.n	800785c <__sflush_r+0x34>
 80078d2:	2b1d      	cmp	r3, #29
 80078d4:	d001      	beq.n	80078da <__sflush_r+0xb2>
 80078d6:	2b16      	cmp	r3, #22
 80078d8:	d101      	bne.n	80078de <__sflush_r+0xb6>
 80078da:	602f      	str	r7, [r5, #0]
 80078dc:	e7b1      	b.n	8007842 <__sflush_r+0x1a>
 80078de:	89a3      	ldrh	r3, [r4, #12]
 80078e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80078e4:	81a3      	strh	r3, [r4, #12]
 80078e6:	e7ad      	b.n	8007844 <__sflush_r+0x1c>
 80078e8:	690f      	ldr	r7, [r1, #16]
 80078ea:	2f00      	cmp	r7, #0
 80078ec:	d0a9      	beq.n	8007842 <__sflush_r+0x1a>
 80078ee:	0793      	lsls	r3, r2, #30
 80078f0:	680e      	ldr	r6, [r1, #0]
 80078f2:	bf08      	it	eq
 80078f4:	694b      	ldreq	r3, [r1, #20]
 80078f6:	600f      	str	r7, [r1, #0]
 80078f8:	bf18      	it	ne
 80078fa:	2300      	movne	r3, #0
 80078fc:	eba6 0807 	sub.w	r8, r6, r7
 8007900:	608b      	str	r3, [r1, #8]
 8007902:	f1b8 0f00 	cmp.w	r8, #0
 8007906:	dd9c      	ble.n	8007842 <__sflush_r+0x1a>
 8007908:	6a21      	ldr	r1, [r4, #32]
 800790a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800790c:	4643      	mov	r3, r8
 800790e:	463a      	mov	r2, r7
 8007910:	4628      	mov	r0, r5
 8007912:	47b0      	blx	r6
 8007914:	2800      	cmp	r0, #0
 8007916:	dc06      	bgt.n	8007926 <__sflush_r+0xfe>
 8007918:	89a3      	ldrh	r3, [r4, #12]
 800791a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800791e:	81a3      	strh	r3, [r4, #12]
 8007920:	f04f 30ff 	mov.w	r0, #4294967295
 8007924:	e78e      	b.n	8007844 <__sflush_r+0x1c>
 8007926:	4407      	add	r7, r0
 8007928:	eba8 0800 	sub.w	r8, r8, r0
 800792c:	e7e9      	b.n	8007902 <__sflush_r+0xda>
 800792e:	bf00      	nop
 8007930:	20400001 	.word	0x20400001

08007934 <_fflush_r>:
 8007934:	b538      	push	{r3, r4, r5, lr}
 8007936:	690b      	ldr	r3, [r1, #16]
 8007938:	4605      	mov	r5, r0
 800793a:	460c      	mov	r4, r1
 800793c:	b913      	cbnz	r3, 8007944 <_fflush_r+0x10>
 800793e:	2500      	movs	r5, #0
 8007940:	4628      	mov	r0, r5
 8007942:	bd38      	pop	{r3, r4, r5, pc}
 8007944:	b118      	cbz	r0, 800794e <_fflush_r+0x1a>
 8007946:	6983      	ldr	r3, [r0, #24]
 8007948:	b90b      	cbnz	r3, 800794e <_fflush_r+0x1a>
 800794a:	f000 f887 	bl	8007a5c <__sinit>
 800794e:	4b14      	ldr	r3, [pc, #80]	; (80079a0 <_fflush_r+0x6c>)
 8007950:	429c      	cmp	r4, r3
 8007952:	d11b      	bne.n	800798c <_fflush_r+0x58>
 8007954:	686c      	ldr	r4, [r5, #4]
 8007956:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d0ef      	beq.n	800793e <_fflush_r+0xa>
 800795e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007960:	07d0      	lsls	r0, r2, #31
 8007962:	d404      	bmi.n	800796e <_fflush_r+0x3a>
 8007964:	0599      	lsls	r1, r3, #22
 8007966:	d402      	bmi.n	800796e <_fflush_r+0x3a>
 8007968:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800796a:	f000 f915 	bl	8007b98 <__retarget_lock_acquire_recursive>
 800796e:	4628      	mov	r0, r5
 8007970:	4621      	mov	r1, r4
 8007972:	f7ff ff59 	bl	8007828 <__sflush_r>
 8007976:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007978:	07da      	lsls	r2, r3, #31
 800797a:	4605      	mov	r5, r0
 800797c:	d4e0      	bmi.n	8007940 <_fflush_r+0xc>
 800797e:	89a3      	ldrh	r3, [r4, #12]
 8007980:	059b      	lsls	r3, r3, #22
 8007982:	d4dd      	bmi.n	8007940 <_fflush_r+0xc>
 8007984:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007986:	f000 f908 	bl	8007b9a <__retarget_lock_release_recursive>
 800798a:	e7d9      	b.n	8007940 <_fflush_r+0xc>
 800798c:	4b05      	ldr	r3, [pc, #20]	; (80079a4 <_fflush_r+0x70>)
 800798e:	429c      	cmp	r4, r3
 8007990:	d101      	bne.n	8007996 <_fflush_r+0x62>
 8007992:	68ac      	ldr	r4, [r5, #8]
 8007994:	e7df      	b.n	8007956 <_fflush_r+0x22>
 8007996:	4b04      	ldr	r3, [pc, #16]	; (80079a8 <_fflush_r+0x74>)
 8007998:	429c      	cmp	r4, r3
 800799a:	bf08      	it	eq
 800799c:	68ec      	ldreq	r4, [r5, #12]
 800799e:	e7da      	b.n	8007956 <_fflush_r+0x22>
 80079a0:	08008274 	.word	0x08008274
 80079a4:	08008294 	.word	0x08008294
 80079a8:	08008254 	.word	0x08008254

080079ac <std>:
 80079ac:	2300      	movs	r3, #0
 80079ae:	b510      	push	{r4, lr}
 80079b0:	4604      	mov	r4, r0
 80079b2:	e9c0 3300 	strd	r3, r3, [r0]
 80079b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80079ba:	6083      	str	r3, [r0, #8]
 80079bc:	8181      	strh	r1, [r0, #12]
 80079be:	6643      	str	r3, [r0, #100]	; 0x64
 80079c0:	81c2      	strh	r2, [r0, #14]
 80079c2:	6183      	str	r3, [r0, #24]
 80079c4:	4619      	mov	r1, r3
 80079c6:	2208      	movs	r2, #8
 80079c8:	305c      	adds	r0, #92	; 0x5c
 80079ca:	f7fd fd1d 	bl	8005408 <memset>
 80079ce:	4b05      	ldr	r3, [pc, #20]	; (80079e4 <std+0x38>)
 80079d0:	6263      	str	r3, [r4, #36]	; 0x24
 80079d2:	4b05      	ldr	r3, [pc, #20]	; (80079e8 <std+0x3c>)
 80079d4:	62a3      	str	r3, [r4, #40]	; 0x28
 80079d6:	4b05      	ldr	r3, [pc, #20]	; (80079ec <std+0x40>)
 80079d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80079da:	4b05      	ldr	r3, [pc, #20]	; (80079f0 <std+0x44>)
 80079dc:	6224      	str	r4, [r4, #32]
 80079de:	6323      	str	r3, [r4, #48]	; 0x30
 80079e0:	bd10      	pop	{r4, pc}
 80079e2:	bf00      	nop
 80079e4:	08007cf1 	.word	0x08007cf1
 80079e8:	08007d13 	.word	0x08007d13
 80079ec:	08007d4b 	.word	0x08007d4b
 80079f0:	08007d6f 	.word	0x08007d6f

080079f4 <_cleanup_r>:
 80079f4:	4901      	ldr	r1, [pc, #4]	; (80079fc <_cleanup_r+0x8>)
 80079f6:	f000 b8af 	b.w	8007b58 <_fwalk_reent>
 80079fa:	bf00      	nop
 80079fc:	08007935 	.word	0x08007935

08007a00 <__sfmoreglue>:
 8007a00:	b570      	push	{r4, r5, r6, lr}
 8007a02:	2268      	movs	r2, #104	; 0x68
 8007a04:	1e4d      	subs	r5, r1, #1
 8007a06:	4355      	muls	r5, r2
 8007a08:	460e      	mov	r6, r1
 8007a0a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007a0e:	f7ff fc09 	bl	8007224 <_malloc_r>
 8007a12:	4604      	mov	r4, r0
 8007a14:	b140      	cbz	r0, 8007a28 <__sfmoreglue+0x28>
 8007a16:	2100      	movs	r1, #0
 8007a18:	e9c0 1600 	strd	r1, r6, [r0]
 8007a1c:	300c      	adds	r0, #12
 8007a1e:	60a0      	str	r0, [r4, #8]
 8007a20:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007a24:	f7fd fcf0 	bl	8005408 <memset>
 8007a28:	4620      	mov	r0, r4
 8007a2a:	bd70      	pop	{r4, r5, r6, pc}

08007a2c <__sfp_lock_acquire>:
 8007a2c:	4801      	ldr	r0, [pc, #4]	; (8007a34 <__sfp_lock_acquire+0x8>)
 8007a2e:	f000 b8b3 	b.w	8007b98 <__retarget_lock_acquire_recursive>
 8007a32:	bf00      	nop
 8007a34:	200002c9 	.word	0x200002c9

08007a38 <__sfp_lock_release>:
 8007a38:	4801      	ldr	r0, [pc, #4]	; (8007a40 <__sfp_lock_release+0x8>)
 8007a3a:	f000 b8ae 	b.w	8007b9a <__retarget_lock_release_recursive>
 8007a3e:	bf00      	nop
 8007a40:	200002c9 	.word	0x200002c9

08007a44 <__sinit_lock_acquire>:
 8007a44:	4801      	ldr	r0, [pc, #4]	; (8007a4c <__sinit_lock_acquire+0x8>)
 8007a46:	f000 b8a7 	b.w	8007b98 <__retarget_lock_acquire_recursive>
 8007a4a:	bf00      	nop
 8007a4c:	200002ca 	.word	0x200002ca

08007a50 <__sinit_lock_release>:
 8007a50:	4801      	ldr	r0, [pc, #4]	; (8007a58 <__sinit_lock_release+0x8>)
 8007a52:	f000 b8a2 	b.w	8007b9a <__retarget_lock_release_recursive>
 8007a56:	bf00      	nop
 8007a58:	200002ca 	.word	0x200002ca

08007a5c <__sinit>:
 8007a5c:	b510      	push	{r4, lr}
 8007a5e:	4604      	mov	r4, r0
 8007a60:	f7ff fff0 	bl	8007a44 <__sinit_lock_acquire>
 8007a64:	69a3      	ldr	r3, [r4, #24]
 8007a66:	b11b      	cbz	r3, 8007a70 <__sinit+0x14>
 8007a68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a6c:	f7ff bff0 	b.w	8007a50 <__sinit_lock_release>
 8007a70:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007a74:	6523      	str	r3, [r4, #80]	; 0x50
 8007a76:	4b13      	ldr	r3, [pc, #76]	; (8007ac4 <__sinit+0x68>)
 8007a78:	4a13      	ldr	r2, [pc, #76]	; (8007ac8 <__sinit+0x6c>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	62a2      	str	r2, [r4, #40]	; 0x28
 8007a7e:	42a3      	cmp	r3, r4
 8007a80:	bf04      	itt	eq
 8007a82:	2301      	moveq	r3, #1
 8007a84:	61a3      	streq	r3, [r4, #24]
 8007a86:	4620      	mov	r0, r4
 8007a88:	f000 f820 	bl	8007acc <__sfp>
 8007a8c:	6060      	str	r0, [r4, #4]
 8007a8e:	4620      	mov	r0, r4
 8007a90:	f000 f81c 	bl	8007acc <__sfp>
 8007a94:	60a0      	str	r0, [r4, #8]
 8007a96:	4620      	mov	r0, r4
 8007a98:	f000 f818 	bl	8007acc <__sfp>
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	60e0      	str	r0, [r4, #12]
 8007aa0:	2104      	movs	r1, #4
 8007aa2:	6860      	ldr	r0, [r4, #4]
 8007aa4:	f7ff ff82 	bl	80079ac <std>
 8007aa8:	68a0      	ldr	r0, [r4, #8]
 8007aaa:	2201      	movs	r2, #1
 8007aac:	2109      	movs	r1, #9
 8007aae:	f7ff ff7d 	bl	80079ac <std>
 8007ab2:	68e0      	ldr	r0, [r4, #12]
 8007ab4:	2202      	movs	r2, #2
 8007ab6:	2112      	movs	r1, #18
 8007ab8:	f7ff ff78 	bl	80079ac <std>
 8007abc:	2301      	movs	r3, #1
 8007abe:	61a3      	str	r3, [r4, #24]
 8007ac0:	e7d2      	b.n	8007a68 <__sinit+0xc>
 8007ac2:	bf00      	nop
 8007ac4:	08007edc 	.word	0x08007edc
 8007ac8:	080079f5 	.word	0x080079f5

08007acc <__sfp>:
 8007acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ace:	4607      	mov	r7, r0
 8007ad0:	f7ff ffac 	bl	8007a2c <__sfp_lock_acquire>
 8007ad4:	4b1e      	ldr	r3, [pc, #120]	; (8007b50 <__sfp+0x84>)
 8007ad6:	681e      	ldr	r6, [r3, #0]
 8007ad8:	69b3      	ldr	r3, [r6, #24]
 8007ada:	b913      	cbnz	r3, 8007ae2 <__sfp+0x16>
 8007adc:	4630      	mov	r0, r6
 8007ade:	f7ff ffbd 	bl	8007a5c <__sinit>
 8007ae2:	3648      	adds	r6, #72	; 0x48
 8007ae4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007ae8:	3b01      	subs	r3, #1
 8007aea:	d503      	bpl.n	8007af4 <__sfp+0x28>
 8007aec:	6833      	ldr	r3, [r6, #0]
 8007aee:	b30b      	cbz	r3, 8007b34 <__sfp+0x68>
 8007af0:	6836      	ldr	r6, [r6, #0]
 8007af2:	e7f7      	b.n	8007ae4 <__sfp+0x18>
 8007af4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007af8:	b9d5      	cbnz	r5, 8007b30 <__sfp+0x64>
 8007afa:	4b16      	ldr	r3, [pc, #88]	; (8007b54 <__sfp+0x88>)
 8007afc:	60e3      	str	r3, [r4, #12]
 8007afe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007b02:	6665      	str	r5, [r4, #100]	; 0x64
 8007b04:	f000 f847 	bl	8007b96 <__retarget_lock_init_recursive>
 8007b08:	f7ff ff96 	bl	8007a38 <__sfp_lock_release>
 8007b0c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007b10:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007b14:	6025      	str	r5, [r4, #0]
 8007b16:	61a5      	str	r5, [r4, #24]
 8007b18:	2208      	movs	r2, #8
 8007b1a:	4629      	mov	r1, r5
 8007b1c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007b20:	f7fd fc72 	bl	8005408 <memset>
 8007b24:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007b28:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007b2c:	4620      	mov	r0, r4
 8007b2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b30:	3468      	adds	r4, #104	; 0x68
 8007b32:	e7d9      	b.n	8007ae8 <__sfp+0x1c>
 8007b34:	2104      	movs	r1, #4
 8007b36:	4638      	mov	r0, r7
 8007b38:	f7ff ff62 	bl	8007a00 <__sfmoreglue>
 8007b3c:	4604      	mov	r4, r0
 8007b3e:	6030      	str	r0, [r6, #0]
 8007b40:	2800      	cmp	r0, #0
 8007b42:	d1d5      	bne.n	8007af0 <__sfp+0x24>
 8007b44:	f7ff ff78 	bl	8007a38 <__sfp_lock_release>
 8007b48:	230c      	movs	r3, #12
 8007b4a:	603b      	str	r3, [r7, #0]
 8007b4c:	e7ee      	b.n	8007b2c <__sfp+0x60>
 8007b4e:	bf00      	nop
 8007b50:	08007edc 	.word	0x08007edc
 8007b54:	ffff0001 	.word	0xffff0001

08007b58 <_fwalk_reent>:
 8007b58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b5c:	4606      	mov	r6, r0
 8007b5e:	4688      	mov	r8, r1
 8007b60:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007b64:	2700      	movs	r7, #0
 8007b66:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007b6a:	f1b9 0901 	subs.w	r9, r9, #1
 8007b6e:	d505      	bpl.n	8007b7c <_fwalk_reent+0x24>
 8007b70:	6824      	ldr	r4, [r4, #0]
 8007b72:	2c00      	cmp	r4, #0
 8007b74:	d1f7      	bne.n	8007b66 <_fwalk_reent+0xe>
 8007b76:	4638      	mov	r0, r7
 8007b78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b7c:	89ab      	ldrh	r3, [r5, #12]
 8007b7e:	2b01      	cmp	r3, #1
 8007b80:	d907      	bls.n	8007b92 <_fwalk_reent+0x3a>
 8007b82:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007b86:	3301      	adds	r3, #1
 8007b88:	d003      	beq.n	8007b92 <_fwalk_reent+0x3a>
 8007b8a:	4629      	mov	r1, r5
 8007b8c:	4630      	mov	r0, r6
 8007b8e:	47c0      	blx	r8
 8007b90:	4307      	orrs	r7, r0
 8007b92:	3568      	adds	r5, #104	; 0x68
 8007b94:	e7e9      	b.n	8007b6a <_fwalk_reent+0x12>

08007b96 <__retarget_lock_init_recursive>:
 8007b96:	4770      	bx	lr

08007b98 <__retarget_lock_acquire_recursive>:
 8007b98:	4770      	bx	lr

08007b9a <__retarget_lock_release_recursive>:
 8007b9a:	4770      	bx	lr

08007b9c <__swhatbuf_r>:
 8007b9c:	b570      	push	{r4, r5, r6, lr}
 8007b9e:	460e      	mov	r6, r1
 8007ba0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ba4:	2900      	cmp	r1, #0
 8007ba6:	b096      	sub	sp, #88	; 0x58
 8007ba8:	4614      	mov	r4, r2
 8007baa:	461d      	mov	r5, r3
 8007bac:	da08      	bge.n	8007bc0 <__swhatbuf_r+0x24>
 8007bae:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	602a      	str	r2, [r5, #0]
 8007bb6:	061a      	lsls	r2, r3, #24
 8007bb8:	d410      	bmi.n	8007bdc <__swhatbuf_r+0x40>
 8007bba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007bbe:	e00e      	b.n	8007bde <__swhatbuf_r+0x42>
 8007bc0:	466a      	mov	r2, sp
 8007bc2:	f000 f8fb 	bl	8007dbc <_fstat_r>
 8007bc6:	2800      	cmp	r0, #0
 8007bc8:	dbf1      	blt.n	8007bae <__swhatbuf_r+0x12>
 8007bca:	9a01      	ldr	r2, [sp, #4]
 8007bcc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007bd0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007bd4:	425a      	negs	r2, r3
 8007bd6:	415a      	adcs	r2, r3
 8007bd8:	602a      	str	r2, [r5, #0]
 8007bda:	e7ee      	b.n	8007bba <__swhatbuf_r+0x1e>
 8007bdc:	2340      	movs	r3, #64	; 0x40
 8007bde:	2000      	movs	r0, #0
 8007be0:	6023      	str	r3, [r4, #0]
 8007be2:	b016      	add	sp, #88	; 0x58
 8007be4:	bd70      	pop	{r4, r5, r6, pc}
	...

08007be8 <__smakebuf_r>:
 8007be8:	898b      	ldrh	r3, [r1, #12]
 8007bea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007bec:	079d      	lsls	r5, r3, #30
 8007bee:	4606      	mov	r6, r0
 8007bf0:	460c      	mov	r4, r1
 8007bf2:	d507      	bpl.n	8007c04 <__smakebuf_r+0x1c>
 8007bf4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007bf8:	6023      	str	r3, [r4, #0]
 8007bfa:	6123      	str	r3, [r4, #16]
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	6163      	str	r3, [r4, #20]
 8007c00:	b002      	add	sp, #8
 8007c02:	bd70      	pop	{r4, r5, r6, pc}
 8007c04:	ab01      	add	r3, sp, #4
 8007c06:	466a      	mov	r2, sp
 8007c08:	f7ff ffc8 	bl	8007b9c <__swhatbuf_r>
 8007c0c:	9900      	ldr	r1, [sp, #0]
 8007c0e:	4605      	mov	r5, r0
 8007c10:	4630      	mov	r0, r6
 8007c12:	f7ff fb07 	bl	8007224 <_malloc_r>
 8007c16:	b948      	cbnz	r0, 8007c2c <__smakebuf_r+0x44>
 8007c18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c1c:	059a      	lsls	r2, r3, #22
 8007c1e:	d4ef      	bmi.n	8007c00 <__smakebuf_r+0x18>
 8007c20:	f023 0303 	bic.w	r3, r3, #3
 8007c24:	f043 0302 	orr.w	r3, r3, #2
 8007c28:	81a3      	strh	r3, [r4, #12]
 8007c2a:	e7e3      	b.n	8007bf4 <__smakebuf_r+0xc>
 8007c2c:	4b0d      	ldr	r3, [pc, #52]	; (8007c64 <__smakebuf_r+0x7c>)
 8007c2e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007c30:	89a3      	ldrh	r3, [r4, #12]
 8007c32:	6020      	str	r0, [r4, #0]
 8007c34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c38:	81a3      	strh	r3, [r4, #12]
 8007c3a:	9b00      	ldr	r3, [sp, #0]
 8007c3c:	6163      	str	r3, [r4, #20]
 8007c3e:	9b01      	ldr	r3, [sp, #4]
 8007c40:	6120      	str	r0, [r4, #16]
 8007c42:	b15b      	cbz	r3, 8007c5c <__smakebuf_r+0x74>
 8007c44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c48:	4630      	mov	r0, r6
 8007c4a:	f000 f8c9 	bl	8007de0 <_isatty_r>
 8007c4e:	b128      	cbz	r0, 8007c5c <__smakebuf_r+0x74>
 8007c50:	89a3      	ldrh	r3, [r4, #12]
 8007c52:	f023 0303 	bic.w	r3, r3, #3
 8007c56:	f043 0301 	orr.w	r3, r3, #1
 8007c5a:	81a3      	strh	r3, [r4, #12]
 8007c5c:	89a0      	ldrh	r0, [r4, #12]
 8007c5e:	4305      	orrs	r5, r0
 8007c60:	81a5      	strh	r5, [r4, #12]
 8007c62:	e7cd      	b.n	8007c00 <__smakebuf_r+0x18>
 8007c64:	080079f5 	.word	0x080079f5

08007c68 <_raise_r>:
 8007c68:	291f      	cmp	r1, #31
 8007c6a:	b538      	push	{r3, r4, r5, lr}
 8007c6c:	4604      	mov	r4, r0
 8007c6e:	460d      	mov	r5, r1
 8007c70:	d904      	bls.n	8007c7c <_raise_r+0x14>
 8007c72:	2316      	movs	r3, #22
 8007c74:	6003      	str	r3, [r0, #0]
 8007c76:	f04f 30ff 	mov.w	r0, #4294967295
 8007c7a:	bd38      	pop	{r3, r4, r5, pc}
 8007c7c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007c7e:	b112      	cbz	r2, 8007c86 <_raise_r+0x1e>
 8007c80:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007c84:	b94b      	cbnz	r3, 8007c9a <_raise_r+0x32>
 8007c86:	4620      	mov	r0, r4
 8007c88:	f000 f830 	bl	8007cec <_getpid_r>
 8007c8c:	462a      	mov	r2, r5
 8007c8e:	4601      	mov	r1, r0
 8007c90:	4620      	mov	r0, r4
 8007c92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c96:	f000 b817 	b.w	8007cc8 <_kill_r>
 8007c9a:	2b01      	cmp	r3, #1
 8007c9c:	d00a      	beq.n	8007cb4 <_raise_r+0x4c>
 8007c9e:	1c59      	adds	r1, r3, #1
 8007ca0:	d103      	bne.n	8007caa <_raise_r+0x42>
 8007ca2:	2316      	movs	r3, #22
 8007ca4:	6003      	str	r3, [r0, #0]
 8007ca6:	2001      	movs	r0, #1
 8007ca8:	e7e7      	b.n	8007c7a <_raise_r+0x12>
 8007caa:	2400      	movs	r4, #0
 8007cac:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007cb0:	4628      	mov	r0, r5
 8007cb2:	4798      	blx	r3
 8007cb4:	2000      	movs	r0, #0
 8007cb6:	e7e0      	b.n	8007c7a <_raise_r+0x12>

08007cb8 <raise>:
 8007cb8:	4b02      	ldr	r3, [pc, #8]	; (8007cc4 <raise+0xc>)
 8007cba:	4601      	mov	r1, r0
 8007cbc:	6818      	ldr	r0, [r3, #0]
 8007cbe:	f7ff bfd3 	b.w	8007c68 <_raise_r>
 8007cc2:	bf00      	nop
 8007cc4:	2000000c 	.word	0x2000000c

08007cc8 <_kill_r>:
 8007cc8:	b538      	push	{r3, r4, r5, lr}
 8007cca:	4d07      	ldr	r5, [pc, #28]	; (8007ce8 <_kill_r+0x20>)
 8007ccc:	2300      	movs	r3, #0
 8007cce:	4604      	mov	r4, r0
 8007cd0:	4608      	mov	r0, r1
 8007cd2:	4611      	mov	r1, r2
 8007cd4:	602b      	str	r3, [r5, #0]
 8007cd6:	f7fa f855 	bl	8001d84 <_kill>
 8007cda:	1c43      	adds	r3, r0, #1
 8007cdc:	d102      	bne.n	8007ce4 <_kill_r+0x1c>
 8007cde:	682b      	ldr	r3, [r5, #0]
 8007ce0:	b103      	cbz	r3, 8007ce4 <_kill_r+0x1c>
 8007ce2:	6023      	str	r3, [r4, #0]
 8007ce4:	bd38      	pop	{r3, r4, r5, pc}
 8007ce6:	bf00      	nop
 8007ce8:	200002c4 	.word	0x200002c4

08007cec <_getpid_r>:
 8007cec:	f7fa b842 	b.w	8001d74 <_getpid>

08007cf0 <__sread>:
 8007cf0:	b510      	push	{r4, lr}
 8007cf2:	460c      	mov	r4, r1
 8007cf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cf8:	f000 f894 	bl	8007e24 <_read_r>
 8007cfc:	2800      	cmp	r0, #0
 8007cfe:	bfab      	itete	ge
 8007d00:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007d02:	89a3      	ldrhlt	r3, [r4, #12]
 8007d04:	181b      	addge	r3, r3, r0
 8007d06:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007d0a:	bfac      	ite	ge
 8007d0c:	6563      	strge	r3, [r4, #84]	; 0x54
 8007d0e:	81a3      	strhlt	r3, [r4, #12]
 8007d10:	bd10      	pop	{r4, pc}

08007d12 <__swrite>:
 8007d12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d16:	461f      	mov	r7, r3
 8007d18:	898b      	ldrh	r3, [r1, #12]
 8007d1a:	05db      	lsls	r3, r3, #23
 8007d1c:	4605      	mov	r5, r0
 8007d1e:	460c      	mov	r4, r1
 8007d20:	4616      	mov	r6, r2
 8007d22:	d505      	bpl.n	8007d30 <__swrite+0x1e>
 8007d24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d28:	2302      	movs	r3, #2
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	f000 f868 	bl	8007e00 <_lseek_r>
 8007d30:	89a3      	ldrh	r3, [r4, #12]
 8007d32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007d36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007d3a:	81a3      	strh	r3, [r4, #12]
 8007d3c:	4632      	mov	r2, r6
 8007d3e:	463b      	mov	r3, r7
 8007d40:	4628      	mov	r0, r5
 8007d42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d46:	f000 b817 	b.w	8007d78 <_write_r>

08007d4a <__sseek>:
 8007d4a:	b510      	push	{r4, lr}
 8007d4c:	460c      	mov	r4, r1
 8007d4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d52:	f000 f855 	bl	8007e00 <_lseek_r>
 8007d56:	1c43      	adds	r3, r0, #1
 8007d58:	89a3      	ldrh	r3, [r4, #12]
 8007d5a:	bf15      	itete	ne
 8007d5c:	6560      	strne	r0, [r4, #84]	; 0x54
 8007d5e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007d62:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007d66:	81a3      	strheq	r3, [r4, #12]
 8007d68:	bf18      	it	ne
 8007d6a:	81a3      	strhne	r3, [r4, #12]
 8007d6c:	bd10      	pop	{r4, pc}

08007d6e <__sclose>:
 8007d6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d72:	f000 b813 	b.w	8007d9c <_close_r>
	...

08007d78 <_write_r>:
 8007d78:	b538      	push	{r3, r4, r5, lr}
 8007d7a:	4d07      	ldr	r5, [pc, #28]	; (8007d98 <_write_r+0x20>)
 8007d7c:	4604      	mov	r4, r0
 8007d7e:	4608      	mov	r0, r1
 8007d80:	4611      	mov	r1, r2
 8007d82:	2200      	movs	r2, #0
 8007d84:	602a      	str	r2, [r5, #0]
 8007d86:	461a      	mov	r2, r3
 8007d88:	f7f9 fc3c 	bl	8001604 <_write>
 8007d8c:	1c43      	adds	r3, r0, #1
 8007d8e:	d102      	bne.n	8007d96 <_write_r+0x1e>
 8007d90:	682b      	ldr	r3, [r5, #0]
 8007d92:	b103      	cbz	r3, 8007d96 <_write_r+0x1e>
 8007d94:	6023      	str	r3, [r4, #0]
 8007d96:	bd38      	pop	{r3, r4, r5, pc}
 8007d98:	200002c4 	.word	0x200002c4

08007d9c <_close_r>:
 8007d9c:	b538      	push	{r3, r4, r5, lr}
 8007d9e:	4d06      	ldr	r5, [pc, #24]	; (8007db8 <_close_r+0x1c>)
 8007da0:	2300      	movs	r3, #0
 8007da2:	4604      	mov	r4, r0
 8007da4:	4608      	mov	r0, r1
 8007da6:	602b      	str	r3, [r5, #0]
 8007da8:	f7fa f823 	bl	8001df2 <_close>
 8007dac:	1c43      	adds	r3, r0, #1
 8007dae:	d102      	bne.n	8007db6 <_close_r+0x1a>
 8007db0:	682b      	ldr	r3, [r5, #0]
 8007db2:	b103      	cbz	r3, 8007db6 <_close_r+0x1a>
 8007db4:	6023      	str	r3, [r4, #0]
 8007db6:	bd38      	pop	{r3, r4, r5, pc}
 8007db8:	200002c4 	.word	0x200002c4

08007dbc <_fstat_r>:
 8007dbc:	b538      	push	{r3, r4, r5, lr}
 8007dbe:	4d07      	ldr	r5, [pc, #28]	; (8007ddc <_fstat_r+0x20>)
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	4604      	mov	r4, r0
 8007dc4:	4608      	mov	r0, r1
 8007dc6:	4611      	mov	r1, r2
 8007dc8:	602b      	str	r3, [r5, #0]
 8007dca:	f7fa f81e 	bl	8001e0a <_fstat>
 8007dce:	1c43      	adds	r3, r0, #1
 8007dd0:	d102      	bne.n	8007dd8 <_fstat_r+0x1c>
 8007dd2:	682b      	ldr	r3, [r5, #0]
 8007dd4:	b103      	cbz	r3, 8007dd8 <_fstat_r+0x1c>
 8007dd6:	6023      	str	r3, [r4, #0]
 8007dd8:	bd38      	pop	{r3, r4, r5, pc}
 8007dda:	bf00      	nop
 8007ddc:	200002c4 	.word	0x200002c4

08007de0 <_isatty_r>:
 8007de0:	b538      	push	{r3, r4, r5, lr}
 8007de2:	4d06      	ldr	r5, [pc, #24]	; (8007dfc <_isatty_r+0x1c>)
 8007de4:	2300      	movs	r3, #0
 8007de6:	4604      	mov	r4, r0
 8007de8:	4608      	mov	r0, r1
 8007dea:	602b      	str	r3, [r5, #0]
 8007dec:	f7fa f81d 	bl	8001e2a <_isatty>
 8007df0:	1c43      	adds	r3, r0, #1
 8007df2:	d102      	bne.n	8007dfa <_isatty_r+0x1a>
 8007df4:	682b      	ldr	r3, [r5, #0]
 8007df6:	b103      	cbz	r3, 8007dfa <_isatty_r+0x1a>
 8007df8:	6023      	str	r3, [r4, #0]
 8007dfa:	bd38      	pop	{r3, r4, r5, pc}
 8007dfc:	200002c4 	.word	0x200002c4

08007e00 <_lseek_r>:
 8007e00:	b538      	push	{r3, r4, r5, lr}
 8007e02:	4d07      	ldr	r5, [pc, #28]	; (8007e20 <_lseek_r+0x20>)
 8007e04:	4604      	mov	r4, r0
 8007e06:	4608      	mov	r0, r1
 8007e08:	4611      	mov	r1, r2
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	602a      	str	r2, [r5, #0]
 8007e0e:	461a      	mov	r2, r3
 8007e10:	f7fa f816 	bl	8001e40 <_lseek>
 8007e14:	1c43      	adds	r3, r0, #1
 8007e16:	d102      	bne.n	8007e1e <_lseek_r+0x1e>
 8007e18:	682b      	ldr	r3, [r5, #0]
 8007e1a:	b103      	cbz	r3, 8007e1e <_lseek_r+0x1e>
 8007e1c:	6023      	str	r3, [r4, #0]
 8007e1e:	bd38      	pop	{r3, r4, r5, pc}
 8007e20:	200002c4 	.word	0x200002c4

08007e24 <_read_r>:
 8007e24:	b538      	push	{r3, r4, r5, lr}
 8007e26:	4d07      	ldr	r5, [pc, #28]	; (8007e44 <_read_r+0x20>)
 8007e28:	4604      	mov	r4, r0
 8007e2a:	4608      	mov	r0, r1
 8007e2c:	4611      	mov	r1, r2
 8007e2e:	2200      	movs	r2, #0
 8007e30:	602a      	str	r2, [r5, #0]
 8007e32:	461a      	mov	r2, r3
 8007e34:	f7f9 ffc0 	bl	8001db8 <_read>
 8007e38:	1c43      	adds	r3, r0, #1
 8007e3a:	d102      	bne.n	8007e42 <_read_r+0x1e>
 8007e3c:	682b      	ldr	r3, [r5, #0]
 8007e3e:	b103      	cbz	r3, 8007e42 <_read_r+0x1e>
 8007e40:	6023      	str	r3, [r4, #0]
 8007e42:	bd38      	pop	{r3, r4, r5, pc}
 8007e44:	200002c4 	.word	0x200002c4

08007e48 <_init>:
 8007e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e4a:	bf00      	nop
 8007e4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e4e:	bc08      	pop	{r3}
 8007e50:	469e      	mov	lr, r3
 8007e52:	4770      	bx	lr

08007e54 <_fini>:
 8007e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e56:	bf00      	nop
 8007e58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e5a:	bc08      	pop	{r3}
 8007e5c:	469e      	mov	lr, r3
 8007e5e:	4770      	bx	lr
