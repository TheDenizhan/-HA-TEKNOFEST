
004.3-I-BUS_Fail_Safe.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a98  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000046c  08006c28  08006c28  00016c28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007094  08007094  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08007094  08007094  00017094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800709c  0800709c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800709c  0800709c  0001709c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080070a0  080070a0  000170a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080070a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a8  200001dc  08007280  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000284  08007280  00020284  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a335  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023ba  00000000  00000000  0002a541  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a10  00000000  00000000  0002c900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008e8  00000000  00000000  0002d310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002424b  00000000  00000000  0002dbf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000abb4  00000000  00000000  00051e43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d0d84  00000000  00000000  0005c9f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012d77b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003800  00000000  00000000  0012d7cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006c10 	.word	0x08006c10

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08006c10 	.word	0x08006c10

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <iBus_Check_CHKSUM>:
#include"FS-iA10B.h"

FSiA10B_iBus iBus;

unsigned char iBus_Check_CHKSUM(unsigned char* data, unsigned char len)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b085      	sub	sp, #20
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
 8000eb4:	460b      	mov	r3, r1
 8000eb6:	70fb      	strb	r3, [r7, #3]
	unsigned short chksum = 0xffff;
 8000eb8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ebc:	81fb      	strh	r3, [r7, #14]
	for (int i=0; i<len-2;i++)
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	60bb      	str	r3, [r7, #8]
 8000ec2:	e00a      	b.n	8000eda <iBus_Check_CHKSUM+0x2e>
	{
		chksum = chksum - data[i];
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	687a      	ldr	r2, [r7, #4]
 8000ec8:	4413      	add	r3, r2
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	b29b      	uxth	r3, r3
 8000ece:	89fa      	ldrh	r2, [r7, #14]
 8000ed0:	1ad3      	subs	r3, r2, r3
 8000ed2:	81fb      	strh	r3, [r7, #14]
	for (int i=0; i<len-2;i++)
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	3301      	adds	r3, #1
 8000ed8:	60bb      	str	r3, [r7, #8]
 8000eda:	78fb      	ldrb	r3, [r7, #3]
 8000edc:	3b02      	subs	r3, #2
 8000ede:	68ba      	ldr	r2, [r7, #8]
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	dbef      	blt.n	8000ec4 <iBus_Check_CHKSUM+0x18>
	}

	return ((chksum&0x00ff)==data[30]) && ((chksum>>8) == data[31]);
 8000ee4:	89fb      	ldrh	r3, [r7, #14]
 8000ee6:	b2db      	uxtb	r3, r3
 8000ee8:	687a      	ldr	r2, [r7, #4]
 8000eea:	321e      	adds	r2, #30
 8000eec:	7812      	ldrb	r2, [r2, #0]
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d10a      	bne.n	8000f08 <iBus_Check_CHKSUM+0x5c>
 8000ef2:	89fb      	ldrh	r3, [r7, #14]
 8000ef4:	0a1b      	lsrs	r3, r3, #8
 8000ef6:	b29a      	uxth	r2, r3
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	331f      	adds	r3, #31
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	b29b      	uxth	r3, r3
 8000f00:	429a      	cmp	r2, r3
 8000f02:	d101      	bne.n	8000f08 <iBus_Check_CHKSUM+0x5c>
 8000f04:	2301      	movs	r3, #1
 8000f06:	e000      	b.n	8000f0a <iBus_Check_CHKSUM+0x5e>
 8000f08:	2300      	movs	r3, #0
 8000f0a:	b2db      	uxtb	r3, r3

};
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	3714      	adds	r7, #20
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr

08000f18 <iBus_Parsing>:

void iBus_Parsing(unsigned char* data, FSiA10B_iBus* iBus)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
 8000f20:	6039      	str	r1, [r7, #0]
	iBus->RH =(data[2] | data[3] << 8) & 0x0fff;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	3302      	adds	r3, #2
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	b21a      	sxth	r2, r3
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	3303      	adds	r3, #3
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	021b      	lsls	r3, r3, #8
 8000f32:	b21b      	sxth	r3, r3
 8000f34:	4313      	orrs	r3, r2
 8000f36:	b21b      	sxth	r3, r3
 8000f38:	b29b      	uxth	r3, r3
 8000f3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f3e:	b29a      	uxth	r2, r3
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	801a      	strh	r2, [r3, #0]
	iBus->RV =(data[4] | data[5] << 8) & 0x0fff;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	3304      	adds	r3, #4
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	b21a      	sxth	r2, r3
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	3305      	adds	r3, #5
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	021b      	lsls	r3, r3, #8
 8000f54:	b21b      	sxth	r3, r3
 8000f56:	4313      	orrs	r3, r2
 8000f58:	b21b      	sxth	r3, r3
 8000f5a:	b29b      	uxth	r3, r3
 8000f5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f60:	b29a      	uxth	r2, r3
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	805a      	strh	r2, [r3, #2]
	iBus->LV =(data[6] | data[7] << 8) & 0x0fff;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	3306      	adds	r3, #6
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	b21a      	sxth	r2, r3
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	3307      	adds	r3, #7
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	021b      	lsls	r3, r3, #8
 8000f76:	b21b      	sxth	r3, r3
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	b21b      	sxth	r3, r3
 8000f7c:	b29b      	uxth	r3, r3
 8000f7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f82:	b29a      	uxth	r2, r3
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	809a      	strh	r2, [r3, #4]
	iBus->LH =(data[8] | data[9] << 8) & 0x0fff;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	3308      	adds	r3, #8
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	b21a      	sxth	r2, r3
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	3309      	adds	r3, #9
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	021b      	lsls	r3, r3, #8
 8000f98:	b21b      	sxth	r3, r3
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	b21b      	sxth	r3, r3
 8000f9e:	b29b      	uxth	r3, r3
 8000fa0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000fa4:	b29a      	uxth	r2, r3
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	80da      	strh	r2, [r3, #6]
	iBus->SwA =(data[10] | data[11] << 8) & 0x0fff;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	330a      	adds	r3, #10
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	b21a      	sxth	r2, r3
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	330b      	adds	r3, #11
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	021b      	lsls	r3, r3, #8
 8000fba:	b21b      	sxth	r3, r3
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	b21b      	sxth	r3, r3
 8000fc0:	b29b      	uxth	r3, r3
 8000fc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000fc6:	b29a      	uxth	r2, r3
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	811a      	strh	r2, [r3, #8]
	iBus->SwC =(data[12] | data[13] << 8) & 0x0fff;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	330c      	adds	r3, #12
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	b21a      	sxth	r2, r3
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	330d      	adds	r3, #13
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	021b      	lsls	r3, r3, #8
 8000fdc:	b21b      	sxth	r3, r3
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	b21b      	sxth	r3, r3
 8000fe2:	b29b      	uxth	r3, r3
 8000fe4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000fe8:	b29a      	uxth	r2, r3
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	819a      	strh	r2, [r3, #12]

	iBus->SwD =(data[14] | data[15] << 8) & 0x0fff;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	330e      	adds	r3, #14
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	b21a      	sxth	r2, r3
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	330f      	adds	r3, #15
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	021b      	lsls	r3, r3, #8
 8000ffe:	b21b      	sxth	r3, r3
 8001000:	4313      	orrs	r3, r2
 8001002:	b21b      	sxth	r3, r3
 8001004:	b29b      	uxth	r3, r3
 8001006:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800100a:	b29a      	uxth	r2, r3
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	81da      	strh	r2, [r3, #14]
	iBus->SwB =(data[16] | data[17] << 8) & 0x0fff;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	3310      	adds	r3, #16
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	b21a      	sxth	r2, r3
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	3311      	adds	r3, #17
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	021b      	lsls	r3, r3, #8
 8001020:	b21b      	sxth	r3, r3
 8001022:	4313      	orrs	r3, r2
 8001024:	b21b      	sxth	r3, r3
 8001026:	b29b      	uxth	r3, r3
 8001028:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800102c:	b29a      	uxth	r2, r3
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	815a      	strh	r2, [r3, #10]
	iBus->VrA =(data[18] | data[19] << 8) & 0x0fff;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	3312      	adds	r3, #18
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	b21a      	sxth	r2, r3
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	3313      	adds	r3, #19
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	021b      	lsls	r3, r3, #8
 8001042:	b21b      	sxth	r3, r3
 8001044:	4313      	orrs	r3, r2
 8001046:	b21b      	sxth	r3, r3
 8001048:	b29b      	uxth	r3, r3
 800104a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800104e:	b29a      	uxth	r2, r3
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	821a      	strh	r2, [r3, #16]
	iBus->VrB =(data[20] | data[21] << 8) & 0x0fff;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	3314      	adds	r3, #20
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	b21a      	sxth	r2, r3
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	3315      	adds	r3, #21
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	021b      	lsls	r3, r3, #8
 8001064:	b21b      	sxth	r3, r3
 8001066:	4313      	orrs	r3, r2
 8001068:	b21b      	sxth	r3, r3
 800106a:	b29b      	uxth	r3, r3
 800106c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001070:	b29a      	uxth	r2, r3
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	825a      	strh	r2, [r3, #18]


	iBus->FailSafe =iBus->SwD == 1500;
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	89db      	ldrh	r3, [r3, #14]
 800107a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800107e:	4293      	cmp	r3, r2
 8001080:	bf0c      	ite	eq
 8001082:	2301      	moveq	r3, #1
 8001084:	2300      	movne	r3, #0
 8001086:	b2db      	uxtb	r3, r3
 8001088:	461a      	mov	r2, r3
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	f883 2020 	strb.w	r2, [r3, #32]





}
 8001090:	bf00      	nop
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr

0800109c <iBus_isActiveFailSafe>:

unsigned char iBus_isActiveFailSafe(FSiA10B_iBus* iBus)
{
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
	return iBus->FailSafe !=0;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	bf14      	ite	ne
 80010ae:	2301      	movne	r3, #1
 80010b0:	2300      	moveq	r3, #0
 80010b2:	b2db      	uxtb	r3, r3

}
 80010b4:	4618      	mov	r0, r3
 80010b6:	370c      	adds	r7, #12
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr

080010c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010c4:	4b04      	ldr	r3, [pc, #16]	; (80010d8 <__NVIC_GetPriorityGrouping+0x18>)
 80010c6:	68db      	ldr	r3, [r3, #12]
 80010c8:	0a1b      	lsrs	r3, r3, #8
 80010ca:	f003 0307 	and.w	r3, r3, #7
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr
 80010d8:	e000ed00 	.word	0xe000ed00

080010dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4603      	mov	r3, r0
 80010e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	db0b      	blt.n	8001106 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010ee:	79fb      	ldrb	r3, [r7, #7]
 80010f0:	f003 021f 	and.w	r2, r3, #31
 80010f4:	4907      	ldr	r1, [pc, #28]	; (8001114 <__NVIC_EnableIRQ+0x38>)
 80010f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fa:	095b      	lsrs	r3, r3, #5
 80010fc:	2001      	movs	r0, #1
 80010fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001102:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001106:	bf00      	nop
 8001108:	370c      	adds	r7, #12
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	e000e100 	.word	0xe000e100

08001118 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	6039      	str	r1, [r7, #0]
 8001122:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001124:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001128:	2b00      	cmp	r3, #0
 800112a:	db0a      	blt.n	8001142 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	b2da      	uxtb	r2, r3
 8001130:	490c      	ldr	r1, [pc, #48]	; (8001164 <__NVIC_SetPriority+0x4c>)
 8001132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001136:	0112      	lsls	r2, r2, #4
 8001138:	b2d2      	uxtb	r2, r2
 800113a:	440b      	add	r3, r1
 800113c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001140:	e00a      	b.n	8001158 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	b2da      	uxtb	r2, r3
 8001146:	4908      	ldr	r1, [pc, #32]	; (8001168 <__NVIC_SetPriority+0x50>)
 8001148:	79fb      	ldrb	r3, [r7, #7]
 800114a:	f003 030f 	and.w	r3, r3, #15
 800114e:	3b04      	subs	r3, #4
 8001150:	0112      	lsls	r2, r2, #4
 8001152:	b2d2      	uxtb	r2, r2
 8001154:	440b      	add	r3, r1
 8001156:	761a      	strb	r2, [r3, #24]
}
 8001158:	bf00      	nop
 800115a:	370c      	adds	r7, #12
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr
 8001164:	e000e100 	.word	0xe000e100
 8001168:	e000ed00 	.word	0xe000ed00

0800116c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800116c:	b480      	push	{r7}
 800116e:	b089      	sub	sp, #36	; 0x24
 8001170:	af00      	add	r7, sp, #0
 8001172:	60f8      	str	r0, [r7, #12]
 8001174:	60b9      	str	r1, [r7, #8]
 8001176:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	f003 0307 	and.w	r3, r3, #7
 800117e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	f1c3 0307 	rsb	r3, r3, #7
 8001186:	2b04      	cmp	r3, #4
 8001188:	bf28      	it	cs
 800118a:	2304      	movcs	r3, #4
 800118c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	3304      	adds	r3, #4
 8001192:	2b06      	cmp	r3, #6
 8001194:	d902      	bls.n	800119c <NVIC_EncodePriority+0x30>
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	3b03      	subs	r3, #3
 800119a:	e000      	b.n	800119e <NVIC_EncodePriority+0x32>
 800119c:	2300      	movs	r3, #0
 800119e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a0:	f04f 32ff 	mov.w	r2, #4294967295
 80011a4:	69bb      	ldr	r3, [r7, #24]
 80011a6:	fa02 f303 	lsl.w	r3, r2, r3
 80011aa:	43da      	mvns	r2, r3
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	401a      	ands	r2, r3
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011b4:	f04f 31ff 	mov.w	r1, #4294967295
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	fa01 f303 	lsl.w	r3, r1, r3
 80011be:	43d9      	mvns	r1, r3
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c4:	4313      	orrs	r3, r2
         );
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3724      	adds	r7, #36	; 0x24
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr

080011d2 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 80011d2:	b480      	push	{r7}
 80011d4:	b083      	sub	sp, #12
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	68db      	ldr	r3, [r3, #12]
 80011de:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	60da      	str	r2, [r3, #12]
}
 80011e6:	bf00      	nop
 80011e8:	370c      	adds	r7, #12
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr

080011f2 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 80011f2:	b480      	push	{r7}
 80011f4:	b083      	sub	sp, #12
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	691b      	ldr	r3, [r3, #16]
 80011fe:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	695b      	ldr	r3, [r3, #20]
 800120a:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	615a      	str	r2, [r3, #20]
}
 8001212:	bf00      	nop
 8001214:	370c      	adds	r7, #12
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr

0800121e <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 800121e:	b480      	push	{r7}
 8001220:	b083      	sub	sp, #12
 8001222:	af00      	add	r7, sp, #0
 8001224:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800122e:	2b80      	cmp	r3, #128	; 0x80
 8001230:	bf0c      	ite	eq
 8001232:	2301      	moveq	r3, #1
 8001234:	2300      	movne	r3, #0
 8001236:	b2db      	uxtb	r3, r3
}
 8001238:	4618      	mov	r0, r3
 800123a:	370c      	adds	r7, #12
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr

08001244 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	460b      	mov	r3, r1
 800124e:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8001250:	78fa      	ldrb	r2, [r7, #3]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	605a      	str	r2, [r3, #4]
}
 8001256:	bf00      	nop
 8001258:	370c      	adds	r7, #12
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
	...

08001264 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001264:	b480      	push	{r7}
 8001266:	b085      	sub	sp, #20
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 800126c:	4b08      	ldr	r3, [pc, #32]	; (8001290 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800126e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001270:	4907      	ldr	r1, [pc, #28]	; (8001290 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4313      	orrs	r3, r2
 8001276:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001278:	4b05      	ldr	r3, [pc, #20]	; (8001290 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800127a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	4013      	ands	r3, r2
 8001280:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001282:	68fb      	ldr	r3, [r7, #12]
}
 8001284:	bf00      	nop
 8001286:	3714      	adds	r7, #20
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr
 8001290:	40023800 	.word	0x40023800

08001294 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001294:	b480      	push	{r7}
 8001296:	b085      	sub	sp, #20
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 800129c:	4b08      	ldr	r3, [pc, #32]	; (80012c0 <LL_APB1_GRP1_EnableClock+0x2c>)
 800129e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012a0:	4907      	ldr	r1, [pc, #28]	; (80012c0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80012a8:	4b05      	ldr	r3, [pc, #20]	; (80012c0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80012aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	4013      	ands	r3, r2
 80012b0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80012b2:	68fb      	ldr	r3, [r7, #12]
}
 80012b4:	bf00      	nop
 80012b6:	3714      	adds	r7, #20
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr
 80012c0:	40023800 	.word	0x40023800

080012c4 <M8N_TransimiData>:
0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x17,0x31,
0xBF
};

void M8N_TransimiData(unsigned char* data, unsigned char len)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	460b      	mov	r3, r1
 80012ce:	70fb      	strb	r3, [r7, #3]
for(int i=0;i<len;i++)
 80012d0:	2300      	movs	r3, #0
 80012d2:	60fb      	str	r3, [r7, #12]
 80012d4:	e011      	b.n	80012fa <M8N_TransimiData+0x36>
{
while(!LL_USART_IsActiveFlag_TXE(UART4));
 80012d6:	bf00      	nop
 80012d8:	480c      	ldr	r0, [pc, #48]	; (800130c <M8N_TransimiData+0x48>)
 80012da:	f7ff ffa0 	bl	800121e <LL_USART_IsActiveFlag_TXE>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d0f9      	beq.n	80012d8 <M8N_TransimiData+0x14>
LL_USART_TransmitData8(UART4, *(data+i));
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	687a      	ldr	r2, [r7, #4]
 80012e8:	4413      	add	r3, r2
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	4619      	mov	r1, r3
 80012ee:	4807      	ldr	r0, [pc, #28]	; (800130c <M8N_TransimiData+0x48>)
 80012f0:	f7ff ffa8 	bl	8001244 <LL_USART_TransmitData8>
for(int i=0;i<len;i++)
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	3301      	adds	r3, #1
 80012f8:	60fb      	str	r3, [r7, #12]
 80012fa:	78fb      	ldrb	r3, [r7, #3]
 80012fc:	68fa      	ldr	r2, [r7, #12]
 80012fe:	429a      	cmp	r2, r3
 8001300:	dbe9      	blt.n	80012d6 <M8N_TransimiData+0x12>
}
}
 8001302:	bf00      	nop
 8001304:	bf00      	nop
 8001306:	3710      	adds	r7, #16
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	40004c00 	.word	0x40004c00

08001310 <M8N_UART4_Initialization>:

void M8N_UART4_Initialization(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b08e      	sub	sp, #56	; 0x38
 8001314:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001316:	f107 031c 	add.w	r3, r7, #28
 800131a:	2200      	movs	r2, #0
 800131c:	601a      	str	r2, [r3, #0]
 800131e:	605a      	str	r2, [r3, #4]
 8001320:	609a      	str	r2, [r3, #8]
 8001322:	60da      	str	r2, [r3, #12]
 8001324:	611a      	str	r2, [r3, #16]
 8001326:	615a      	str	r2, [r3, #20]
 8001328:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800132a:	1d3b      	adds	r3, r7, #4
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	605a      	str	r2, [r3, #4]
 8001332:	609a      	str	r2, [r3, #8]
 8001334:	60da      	str	r2, [r3, #12]
 8001336:	611a      	str	r2, [r3, #16]
 8001338:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART4);
 800133a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800133e:	f7ff ffa9 	bl	8001294 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001342:	2004      	movs	r0, #4
 8001344:	f7ff ff8e 	bl	8001264 <LL_AHB1_GRP1_EnableClock>
  /**UART4 GPIO Configuration
  PC10   ------> UART4_TX
  PC11   ------> UART4_RX
  */
  GPIO_InitStruct.Pin = GPS_UART4_TX_Pin|GPS_UART4_RX_Pin;
 8001348:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800134c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800134e:	2302      	movs	r3, #2
 8001350:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001352:	2303      	movs	r3, #3
 8001354:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001356:	2300      	movs	r3, #0
 8001358:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800135a:	2301      	movs	r3, #1
 800135c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 800135e:	2308      	movs	r3, #8
 8001360:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001362:	1d3b      	adds	r3, r7, #4
 8001364:	4619      	mov	r1, r3
 8001366:	4819      	ldr	r0, [pc, #100]	; (80013cc <M8N_UART4_Initialization+0xbc>)
 8001368:	f001 ff6d 	bl	8003246 <LL_GPIO_Init>

  /* UART4 interrupt Init */
  NVIC_SetPriority(UART4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800136c:	f7ff fea8 	bl	80010c0 <__NVIC_GetPriorityGrouping>
 8001370:	4603      	mov	r3, r0
 8001372:	2200      	movs	r2, #0
 8001374:	2100      	movs	r1, #0
 8001376:	4618      	mov	r0, r3
 8001378:	f7ff fef8 	bl	800116c <NVIC_EncodePriority>
 800137c:	4603      	mov	r3, r0
 800137e:	4619      	mov	r1, r3
 8001380:	2034      	movs	r0, #52	; 0x34
 8001382:	f7ff fec9 	bl	8001118 <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART4_IRQn);
 8001386:	2034      	movs	r0, #52	; 0x34
 8001388:	f7ff fea8 	bl	80010dc <__NVIC_EnableIRQ>

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  USART_InitStruct.BaudRate = 9600;
 800138c:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8001390:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001392:	2300      	movs	r3, #0
 8001394:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001396:	2300      	movs	r3, #0
 8001398:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800139a:	2300      	movs	r3, #0
 800139c:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800139e:	230c      	movs	r3, #12
 80013a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80013a2:	2300      	movs	r3, #0
 80013a4:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80013a6:	2300      	movs	r3, #0
 80013a8:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(UART4, &USART_InitStruct);
 80013aa:	f107 031c 	add.w	r3, r7, #28
 80013ae:	4619      	mov	r1, r3
 80013b0:	4807      	ldr	r0, [pc, #28]	; (80013d0 <M8N_UART4_Initialization+0xc0>)
 80013b2:	f002 fe4d 	bl	8004050 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART4);
 80013b6:	4806      	ldr	r0, [pc, #24]	; (80013d0 <M8N_UART4_Initialization+0xc0>)
 80013b8:	f7ff ff1b 	bl	80011f2 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART4);
 80013bc:	4804      	ldr	r0, [pc, #16]	; (80013d0 <M8N_UART4_Initialization+0xc0>)
 80013be:	f7ff ff08 	bl	80011d2 <LL_USART_Enable>
}
 80013c2:	bf00      	nop
 80013c4:	3738      	adds	r7, #56	; 0x38
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	40020800 	.word	0x40020800
 80013d0:	40004c00 	.word	0x40004c00

080013d4 <M8N_Initialization>:

void M8N_Initialization(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
M8N_UART4_Initialization();
 80013d8:	f7ff ff9a 	bl	8001310 <M8N_UART4_Initialization>

M8N_TransimiData(&UBX_CFG_PRT[0],sizeof(UBX_CFG_PRT));
 80013dc:	211c      	movs	r1, #28
 80013de:	480d      	ldr	r0, [pc, #52]	; (8001414 <M8N_Initialization+0x40>)
 80013e0:	f7ff ff70 	bl	80012c4 <M8N_TransimiData>
HAL_Delay(100);
 80013e4:	2064      	movs	r0, #100	; 0x64
 80013e6:	f001 f8bb 	bl	8002560 <HAL_Delay>
M8N_TransimiData(&UBX_CFG_MSG[0],sizeof(UBX_CFG_MSG));
 80013ea:	2110      	movs	r1, #16
 80013ec:	480a      	ldr	r0, [pc, #40]	; (8001418 <M8N_Initialization+0x44>)
 80013ee:	f7ff ff69 	bl	80012c4 <M8N_TransimiData>
HAL_Delay(100);
 80013f2:	2064      	movs	r0, #100	; 0x64
 80013f4:	f001 f8b4 	bl	8002560 <HAL_Delay>
M8N_TransimiData(&UBX_CFG_RATE[0],sizeof(UBX_CFG_RATE));
 80013f8:	210e      	movs	r1, #14
 80013fa:	4808      	ldr	r0, [pc, #32]	; (800141c <M8N_Initialization+0x48>)
 80013fc:	f7ff ff62 	bl	80012c4 <M8N_TransimiData>
HAL_Delay(100);
 8001400:	2064      	movs	r0, #100	; 0x64
 8001402:	f001 f8ad 	bl	8002560 <HAL_Delay>
M8N_TransimiData(&UBX_CFG_CFG[0],sizeof(UBX_CFG_CFG));
 8001406:	2115      	movs	r1, #21
 8001408:	4805      	ldr	r0, [pc, #20]	; (8001420 <M8N_Initialization+0x4c>)
 800140a:	f7ff ff5b 	bl	80012c4 <M8N_TransimiData>
}
 800140e:	bf00      	nop
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	08006c40 	.word	0x08006c40
 8001418:	08006c5c 	.word	0x08006c5c
 800141c:	08006c6c 	.word	0x08006c6c
 8001420:	08006c7c 	.word	0x08006c7c

08001424 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	041a      	lsls	r2, r3, #16
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	619a      	str	r2, [r3, #24]
}
 8001436:	bf00      	nop
 8001438:	370c      	adds	r7, #12
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
	...

08001444 <LL_AHB1_GRP1_EnableClock>:
{
 8001444:	b480      	push	{r7}
 8001446:	b085      	sub	sp, #20
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800144c:	4b08      	ldr	r3, [pc, #32]	; (8001470 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800144e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001450:	4907      	ldr	r1, [pc, #28]	; (8001470 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4313      	orrs	r3, r2
 8001456:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001458:	4b05      	ldr	r3, [pc, #20]	; (8001470 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800145a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	4013      	ands	r3, r2
 8001460:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001462:	68fb      	ldr	r3, [r7, #12]
}
 8001464:	bf00      	nop
 8001466:	3714      	adds	r7, #20
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr
 8001470:	40023800 	.word	0x40023800

08001474 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b086      	sub	sp, #24
 8001478:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800147a:	463b      	mov	r3, r7
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	605a      	str	r2, [r3, #4]
 8001482:	609a      	str	r2, [r3, #8]
 8001484:	60da      	str	r2, [r3, #12]
 8001486:	611a      	str	r2, [r3, #16]
 8001488:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 800148a:	2080      	movs	r0, #128	; 0x80
 800148c:	f7ff ffda 	bl	8001444 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001490:	2002      	movs	r0, #2
 8001492:	f7ff ffd7 	bl	8001444 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8001496:	2008      	movs	r0, #8
 8001498:	f7ff ffd4 	bl	8001444 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800149c:	2004      	movs	r0, #4
 800149e:	f7ff ffd1 	bl	8001444 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOD, LL_GPIO_PIN_14);
 80014a2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014a6:	480b      	ldr	r0, [pc, #44]	; (80014d4 <MX_GPIO_Init+0x60>)
 80014a8:	f7ff ffbc 	bl	8001424 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_14;
 80014ac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80014b0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80014b2:	2301      	movs	r3, #1
 80014b4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80014b6:	2300      	movs	r3, #0
 80014b8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80014ba:	2300      	movs	r3, #0
 80014bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80014be:	2300      	movs	r3, #0
 80014c0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014c2:	463b      	mov	r3, r7
 80014c4:	4619      	mov	r1, r3
 80014c6:	4803      	ldr	r0, [pc, #12]	; (80014d4 <MX_GPIO_Init+0x60>)
 80014c8:	f001 febd 	bl	8003246 <LL_GPIO_Init>

}
 80014cc:	bf00      	nop
 80014ce:	3718      	adds	r7, #24
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	40020c00 	.word	0x40020c00

080014d8 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f043 0201 	orr.w	r2, r3, #1
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	601a      	str	r2, [r3, #0]
}
 80014ec:	bf00      	nop
 80014ee:	370c      	adds	r7, #12
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr

080014f8 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6a1a      	ldr	r2, [r3, #32]
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	431a      	orrs	r2, r3
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	621a      	str	r2, [r3, #32]
}
 800150e:	bf00      	nop
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr

0800151a <LL_TIM_CC_DisableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_DisableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 800151a:	b480      	push	{r7}
 800151c:	b083      	sub	sp, #12
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
 8001522:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6a1a      	ldr	r2, [r3, #32]
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	43db      	mvns	r3, r3
 800152c:	401a      	ands	r2, r3
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	621a      	str	r2, [r3, #32]
}
 8001532:	bf00      	nop
 8001534:	370c      	adds	r7, #12
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr

0800153e <LL_USART_IsActiveFlag_TXE>:
{
 800153e:	b480      	push	{r7}
 8001540:	b083      	sub	sp, #12
 8001542:	af00      	add	r7, sp, #0
 8001544:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800154e:	2b80      	cmp	r3, #128	; 0x80
 8001550:	bf0c      	ite	eq
 8001552:	2301      	moveq	r3, #1
 8001554:	2300      	movne	r3, #0
 8001556:	b2db      	uxtb	r3, r3
}
 8001558:	4618      	mov	r0, r3
 800155a:	370c      	adds	r7, #12
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr

08001564 <LL_USART_EnableIT_RXNE>:
{
 8001564:	b480      	push	{r7}
 8001566:	b089      	sub	sp, #36	; 0x24
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	330c      	adds	r3, #12
 8001570:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	e853 3f00 	ldrex	r3, [r3]
 8001578:	60bb      	str	r3, [r7, #8]
   return(result);
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	f043 0320 	orr.w	r3, r3, #32
 8001580:	61fb      	str	r3, [r7, #28]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	330c      	adds	r3, #12
 8001586:	69fa      	ldr	r2, [r7, #28]
 8001588:	61ba      	str	r2, [r7, #24]
 800158a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800158c:	6979      	ldr	r1, [r7, #20]
 800158e:	69ba      	ldr	r2, [r7, #24]
 8001590:	e841 2300 	strex	r3, r2, [r1]
 8001594:	613b      	str	r3, [r7, #16]
   return(result);
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d1e7      	bne.n	800156c <LL_USART_EnableIT_RXNE+0x8>
}
 800159c:	bf00      	nop
 800159e:	bf00      	nop
 80015a0:	3724      	adds	r7, #36	; 0x24
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr

080015aa <LL_USART_TransmitData8>:
{
 80015aa:	b480      	push	{r7}
 80015ac:	b083      	sub	sp, #12
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	6078      	str	r0, [r7, #4]
 80015b2:	460b      	mov	r3, r1
 80015b4:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 80015b6:	78fa      	ldrb	r2, [r7, #3]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	605a      	str	r2, [r3, #4]
}
 80015bc:	bf00      	nop
 80015be:	370c      	adds	r7, #12
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr

080015c8 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b085      	sub	sp, #20
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	695b      	ldr	r3, [r3, #20]
 80015d6:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 80015d8:	68fa      	ldr	r2, [r7, #12]
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	4013      	ands	r3, r2
 80015de:	041a      	lsls	r2, r3, #16
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	43d9      	mvns	r1, r3
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	400b      	ands	r3, r1
 80015e8:	431a      	orrs	r2, r3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	619a      	str	r2, [r3, #24]
}
 80015ee:	bf00      	nop
 80015f0:	3714      	adds	r7, #20
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
	...

080015fc <_write>:
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
int _write(int file, char* p,int len)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b086      	sub	sp, #24
 8001600:	af00      	add	r7, sp, #0
 8001602:	60f8      	str	r0, [r7, #12]
 8001604:	60b9      	str	r1, [r7, #8]
 8001606:	607a      	str	r2, [r7, #4]
	for(int i=0;i<len;i++)
 8001608:	2300      	movs	r3, #0
 800160a:	617b      	str	r3, [r7, #20]
 800160c:	e011      	b.n	8001632 <_write+0x36>
	{
		while(!LL_USART_IsActiveFlag_TXE(USART6));
 800160e:	bf00      	nop
 8001610:	480c      	ldr	r0, [pc, #48]	; (8001644 <_write+0x48>)
 8001612:	f7ff ff94 	bl	800153e <LL_USART_IsActiveFlag_TXE>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d0f9      	beq.n	8001610 <_write+0x14>
		LL_USART_TransmitData8(USART6, *(p+i));
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	68ba      	ldr	r2, [r7, #8]
 8001620:	4413      	add	r3, r2
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	4619      	mov	r1, r3
 8001626:	4807      	ldr	r0, [pc, #28]	; (8001644 <_write+0x48>)
 8001628:	f7ff ffbf 	bl	80015aa <LL_USART_TransmitData8>
	for(int i=0;i<len;i++)
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	3301      	adds	r3, #1
 8001630:	617b      	str	r3, [r7, #20]
 8001632:	697a      	ldr	r2, [r7, #20]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	429a      	cmp	r2, r3
 8001638:	dbe9      	blt.n	800160e <_write+0x12>
	}
}
 800163a:	bf00      	nop
 800163c:	4618      	mov	r0, r3
 800163e:	3718      	adds	r7, #24
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	40011400 	.word	0x40011400

08001648 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001648:	b5b0      	push	{r4, r5, r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800164e:	f000 ff15 	bl	800247c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001652:	f000 f88f 	bl	8001774 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001656:	f7ff ff0d 	bl	8001474 <MX_GPIO_Init>
  MX_TIM3_Init();
 800165a:	f000 fc41 	bl	8001ee0 <MX_TIM3_Init>
  MX_USART6_UART_Init();
 800165e:	f000 fe83 	bl	8002368 <MX_USART6_UART_Init>
  MX_UART4_Init();
 8001662:	f000 fda7 	bl	80021b4 <MX_UART4_Init>
  MX_UART5_Init();
 8001666:	f000 fe07 	bl	8002278 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  LL_TIM_EnableCounter(TIM3);
 800166a:	4839      	ldr	r0, [pc, #228]	; (8001750 <main+0x108>)
 800166c:	f7ff ff34 	bl	80014d8 <LL_TIM_EnableCounter>
  LL_TIM_CC_EnableChannel(TIM3,LL_TIM_CHANNEL_CH4); // buzzer enable
 8001670:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001674:	4836      	ldr	r0, [pc, #216]	; (8001750 <main+0x108>)
 8001676:	f7ff ff3f 	bl	80014f8 <LL_TIM_CC_EnableChannel>
  TIM3->PSC = 2000;
 800167a:	4b35      	ldr	r3, [pc, #212]	; (8001750 <main+0x108>)
 800167c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001680:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_Delay(100);
 8001682:	2064      	movs	r0, #100	; 0x64
 8001684:	f000 ff6c 	bl	8002560 <HAL_Delay>
  TIM3->PSC = 1500;
 8001688:	4b31      	ldr	r3, [pc, #196]	; (8001750 <main+0x108>)
 800168a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800168e:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_Delay(100);
 8001690:	2064      	movs	r0, #100	; 0x64
 8001692:	f000 ff65 	bl	8002560 <HAL_Delay>
  TIM3->PSC = 1000;
 8001696:	4b2e      	ldr	r3, [pc, #184]	; (8001750 <main+0x108>)
 8001698:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800169c:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_Delay(100);
 800169e:	2064      	movs	r0, #100	; 0x64
 80016a0:	f000 ff5e 	bl	8002560 <HAL_Delay>

  LL_TIM_CC_DisableChannel(TIM3,LL_TIM_CHANNEL_CH4);  // buzzer disable
 80016a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016a8:	4829      	ldr	r0, [pc, #164]	; (8001750 <main+0x108>)
 80016aa:	f7ff ff36 	bl	800151a <LL_TIM_CC_DisableChannel>
  LL_USART_EnableIT_RXNE(USART6); //interrupt olarak cagiracagiz
 80016ae:	4829      	ldr	r0, [pc, #164]	; (8001754 <main+0x10c>)
 80016b0:	f7ff ff58 	bl	8001564 <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_RXNE(UART4); //interrupt olarak cagiracagiz
 80016b4:	4828      	ldr	r0, [pc, #160]	; (8001758 <main+0x110>)
 80016b6:	f7ff ff55 	bl	8001564 <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_RXNE(UART5); //interrupt olarak cagiracagiz
 80016ba:	4828      	ldr	r0, [pc, #160]	; (800175c <main+0x114>)
 80016bc:	f7ff ff52 	bl	8001564 <LL_USART_EnableIT_RXNE>

  M8N_Initialization();
 80016c0:	f7ff fe88 	bl	80013d4 <M8N_Initialization>

	  }

	  */

	  if(ibus_rx_cplt_flag == 1)
 80016c4:	4b26      	ldr	r3, [pc, #152]	; (8001760 <main+0x118>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d1fb      	bne.n	80016c4 <main+0x7c>
	  	  {
	  		  ibus_rx_cplt_flag = 0;
 80016cc:	4b24      	ldr	r3, [pc, #144]	; (8001760 <main+0x118>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	701a      	strb	r2, [r3, #0]
	  		  if(iBus_Check_CHKSUM(&ibus_rxbuff[0],32)==1)
 80016d2:	2120      	movs	r1, #32
 80016d4:	4823      	ldr	r0, [pc, #140]	; (8001764 <main+0x11c>)
 80016d6:	f7ff fbe9 	bl	8000eac <iBus_Check_CHKSUM>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d1f1      	bne.n	80016c4 <main+0x7c>
	  		  {
	  			LL_GPIO_TogglePin(GPIOD, LL_GPIO_PIN_14);
 80016e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016e4:	4820      	ldr	r0, [pc, #128]	; (8001768 <main+0x120>)
 80016e6:	f7ff ff6f 	bl	80015c8 <LL_GPIO_TogglePin>
	  			iBus_Parsing(&ibus_rxbuff[0], &iBus);
 80016ea:	4920      	ldr	r1, [pc, #128]	; (800176c <main+0x124>)
 80016ec:	481d      	ldr	r0, [pc, #116]	; (8001764 <main+0x11c>)
 80016ee:	f7ff fc13 	bl	8000f18 <iBus_Parsing>
	  			if(iBus_isActiveFailSafe(&iBus) ==1)
 80016f2:	481e      	ldr	r0, [pc, #120]	; (800176c <main+0x124>)
 80016f4:	f7ff fcd2 	bl	800109c <iBus_isActiveFailSafe>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d105      	bne.n	800170a <main+0xc2>
	  			{
	  				LL_TIM_CC_EnableChannel(TIM3,LL_TIM_CHANNEL_CH4);
 80016fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001702:	4813      	ldr	r0, [pc, #76]	; (8001750 <main+0x108>)
 8001704:	f7ff fef8 	bl	80014f8 <LL_TIM_CC_EnableChannel>
 8001708:	e004      	b.n	8001714 <main+0xcc>
	  			}
	  			else
	  			{
	  				LL_TIM_CC_DisableChannel(TIM3,LL_TIM_CHANNEL_CH4);
 800170a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800170e:	4810      	ldr	r0, [pc, #64]	; (8001750 <main+0x108>)
 8001710:	f7ff ff03 	bl	800151a <LL_TIM_CC_DisableChannel>
	  			}
	  			printf("%d\t %d\t %d\t %d\t %d\t %d\n",
	  					iBus.RH,iBus.RV,iBus.LV,iBus.LH,iBus.SwA,iBus.SwC);
 8001714:	4b15      	ldr	r3, [pc, #84]	; (800176c <main+0x124>)
 8001716:	881b      	ldrh	r3, [r3, #0]
	  			printf("%d\t %d\t %d\t %d\t %d\t %d\n",
 8001718:	4618      	mov	r0, r3
	  					iBus.RH,iBus.RV,iBus.LV,iBus.LH,iBus.SwA,iBus.SwC);
 800171a:	4b14      	ldr	r3, [pc, #80]	; (800176c <main+0x124>)
 800171c:	885b      	ldrh	r3, [r3, #2]
	  			printf("%d\t %d\t %d\t %d\t %d\t %d\n",
 800171e:	461c      	mov	r4, r3
	  					iBus.RH,iBus.RV,iBus.LV,iBus.LH,iBus.SwA,iBus.SwC);
 8001720:	4b12      	ldr	r3, [pc, #72]	; (800176c <main+0x124>)
 8001722:	889b      	ldrh	r3, [r3, #4]
	  			printf("%d\t %d\t %d\t %d\t %d\t %d\n",
 8001724:	461d      	mov	r5, r3
	  					iBus.RH,iBus.RV,iBus.LV,iBus.LH,iBus.SwA,iBus.SwC);
 8001726:	4b11      	ldr	r3, [pc, #68]	; (800176c <main+0x124>)
 8001728:	88db      	ldrh	r3, [r3, #6]
	  			printf("%d\t %d\t %d\t %d\t %d\t %d\n",
 800172a:	461a      	mov	r2, r3
	  					iBus.RH,iBus.RV,iBus.LV,iBus.LH,iBus.SwA,iBus.SwC);
 800172c:	4b0f      	ldr	r3, [pc, #60]	; (800176c <main+0x124>)
 800172e:	891b      	ldrh	r3, [r3, #8]
	  			printf("%d\t %d\t %d\t %d\t %d\t %d\n",
 8001730:	4619      	mov	r1, r3
	  					iBus.RH,iBus.RV,iBus.LV,iBus.LH,iBus.SwA,iBus.SwC);
 8001732:	4b0e      	ldr	r3, [pc, #56]	; (800176c <main+0x124>)
 8001734:	899b      	ldrh	r3, [r3, #12]
	  			printf("%d\t %d\t %d\t %d\t %d\t %d\n",
 8001736:	9302      	str	r3, [sp, #8]
 8001738:	9101      	str	r1, [sp, #4]
 800173a:	9200      	str	r2, [sp, #0]
 800173c:	462b      	mov	r3, r5
 800173e:	4622      	mov	r2, r4
 8001740:	4601      	mov	r1, r0
 8001742:	480b      	ldr	r0, [pc, #44]	; (8001770 <main+0x128>)
 8001744:	f003 f9a0 	bl	8004a88 <iprintf>
	  			HAL_Delay(100);
 8001748:	2064      	movs	r0, #100	; 0x64
 800174a:	f000 ff09 	bl	8002560 <HAL_Delay>
	  if(ibus_rx_cplt_flag == 1)
 800174e:	e7b9      	b.n	80016c4 <main+0x7c>
 8001750:	40000400 	.word	0x40000400
 8001754:	40011400 	.word	0x40011400
 8001758:	40004c00 	.word	0x40004c00
 800175c:	40005000 	.word	0x40005000
 8001760:	20000240 	.word	0x20000240
 8001764:	20000220 	.word	0x20000220
 8001768:	40020c00 	.word	0x40020c00
 800176c:	200001f8 	.word	0x200001f8
 8001770:	08006c28 	.word	0x08006c28

08001774 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b094      	sub	sp, #80	; 0x50
 8001778:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800177a:	f107 0320 	add.w	r3, r7, #32
 800177e:	2230      	movs	r2, #48	; 0x30
 8001780:	2100      	movs	r1, #0
 8001782:	4618      	mov	r0, r3
 8001784:	f002 fd0e 	bl	80041a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001788:	f107 030c 	add.w	r3, r7, #12
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]
 8001790:	605a      	str	r2, [r3, #4]
 8001792:	609a      	str	r2, [r3, #8]
 8001794:	60da      	str	r2, [r3, #12]
 8001796:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001798:	2300      	movs	r3, #0
 800179a:	60bb      	str	r3, [r7, #8]
 800179c:	4b28      	ldr	r3, [pc, #160]	; (8001840 <SystemClock_Config+0xcc>)
 800179e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a0:	4a27      	ldr	r2, [pc, #156]	; (8001840 <SystemClock_Config+0xcc>)
 80017a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017a6:	6413      	str	r3, [r2, #64]	; 0x40
 80017a8:	4b25      	ldr	r3, [pc, #148]	; (8001840 <SystemClock_Config+0xcc>)
 80017aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017b0:	60bb      	str	r3, [r7, #8]
 80017b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017b4:	2300      	movs	r3, #0
 80017b6:	607b      	str	r3, [r7, #4]
 80017b8:	4b22      	ldr	r3, [pc, #136]	; (8001844 <SystemClock_Config+0xd0>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a21      	ldr	r2, [pc, #132]	; (8001844 <SystemClock_Config+0xd0>)
 80017be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017c2:	6013      	str	r3, [r2, #0]
 80017c4:	4b1f      	ldr	r3, [pc, #124]	; (8001844 <SystemClock_Config+0xd0>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017cc:	607b      	str	r3, [r7, #4]
 80017ce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017d0:	2301      	movs	r3, #1
 80017d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017d8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017da:	2302      	movs	r3, #2
 80017dc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017de:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80017e4:	2304      	movs	r3, #4
 80017e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80017e8:	23a8      	movs	r3, #168	; 0xa8
 80017ea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017ec:	2302      	movs	r3, #2
 80017ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80017f0:	2304      	movs	r3, #4
 80017f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017f4:	f107 0320 	add.w	r3, r7, #32
 80017f8:	4618      	mov	r0, r3
 80017fa:	f000 ffbb 	bl	8002774 <HAL_RCC_OscConfig>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001804:	f000 f820 	bl	8001848 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001808:	230f      	movs	r3, #15
 800180a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800180c:	2302      	movs	r3, #2
 800180e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001810:	2300      	movs	r3, #0
 8001812:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001814:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001818:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800181a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800181e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001820:	f107 030c 	add.w	r3, r7, #12
 8001824:	2105      	movs	r1, #5
 8001826:	4618      	mov	r0, r3
 8001828:	f001 fa1c 	bl	8002c64 <HAL_RCC_ClockConfig>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001832:	f000 f809 	bl	8001848 <Error_Handler>
  }
}
 8001836:	bf00      	nop
 8001838:	3750      	adds	r7, #80	; 0x50
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	40023800 	.word	0x40023800
 8001844:	40007000 	.word	0x40007000

08001848 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800184c:	b672      	cpsid	i
}
 800184e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001850:	e7fe      	b.n	8001850 <Error_Handler+0x8>
	...

08001854 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800185a:	2300      	movs	r3, #0
 800185c:	607b      	str	r3, [r7, #4]
 800185e:	4b10      	ldr	r3, [pc, #64]	; (80018a0 <HAL_MspInit+0x4c>)
 8001860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001862:	4a0f      	ldr	r2, [pc, #60]	; (80018a0 <HAL_MspInit+0x4c>)
 8001864:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001868:	6453      	str	r3, [r2, #68]	; 0x44
 800186a:	4b0d      	ldr	r3, [pc, #52]	; (80018a0 <HAL_MspInit+0x4c>)
 800186c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800186e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001872:	607b      	str	r3, [r7, #4]
 8001874:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001876:	2300      	movs	r3, #0
 8001878:	603b      	str	r3, [r7, #0]
 800187a:	4b09      	ldr	r3, [pc, #36]	; (80018a0 <HAL_MspInit+0x4c>)
 800187c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187e:	4a08      	ldr	r2, [pc, #32]	; (80018a0 <HAL_MspInit+0x4c>)
 8001880:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001884:	6413      	str	r3, [r2, #64]	; 0x40
 8001886:	4b06      	ldr	r3, [pc, #24]	; (80018a0 <HAL_MspInit+0x4c>)
 8001888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800188e:	603b      	str	r3, [r7, #0]
 8001890:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001892:	bf00      	nop
 8001894:	370c      	adds	r7, #12
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	40023800 	.word	0x40023800

080018a4 <LL_USART_IsActiveFlag_RXNE>:
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 0320 	and.w	r3, r3, #32
 80018b4:	2b20      	cmp	r3, #32
 80018b6:	bf0c      	ite	eq
 80018b8:	2301      	moveq	r3, #1
 80018ba:	2300      	movne	r3, #0
 80018bc:	b2db      	uxtb	r3, r3
}
 80018be:	4618      	mov	r0, r3
 80018c0:	370c      	adds	r7, #12
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr

080018ca <LL_USART_ClearFlag_RXNE>:
{
 80018ca:	b480      	push	{r7}
 80018cc:	b083      	sub	sp, #12
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_RXNE));
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	f06f 0220 	mvn.w	r2, #32
 80018d8:	601a      	str	r2, [r3, #0]
}
 80018da:	bf00      	nop
 80018dc:	370c      	adds	r7, #12
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr

080018e6 <LL_USART_ReceiveData8>:
{
 80018e6:	b480      	push	{r7}
 80018e8:	b083      	sub	sp, #12
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	b2db      	uxtb	r3, r3
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	370c      	adds	r7, #12
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr

08001900 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001904:	e7fe      	b.n	8001904 <NMI_Handler+0x4>

08001906 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001906:	b480      	push	{r7}
 8001908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800190a:	e7fe      	b.n	800190a <HardFault_Handler+0x4>

0800190c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001910:	e7fe      	b.n	8001910 <MemManage_Handler+0x4>

08001912 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001912:	b480      	push	{r7}
 8001914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001916:	e7fe      	b.n	8001916 <BusFault_Handler+0x4>

08001918 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800191c:	e7fe      	b.n	800191c <UsageFault_Handler+0x4>

0800191e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800191e:	b480      	push	{r7}
 8001920:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001922:	bf00      	nop
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr

0800192c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001930:	bf00      	nop
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr

0800193a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800193a:	b480      	push	{r7}
 800193c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800193e:	bf00      	nop
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr

08001948 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800194c:	f000 fde8 	bl	8002520 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001950:	bf00      	nop
 8001952:	bd80      	pop	{r7, pc}

08001954 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */
	static unsigned char cnt = 0;
	if(LL_USART_IsActiveFlag_RXNE(UART4)) // bu bir receive işlemi mi?
 8001958:	4833      	ldr	r0, [pc, #204]	; (8001a28 <UART4_IRQHandler+0xd4>)
 800195a:	f7ff ffa3 	bl	80018a4 <LL_USART_IsActiveFlag_RXNE>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d05b      	beq.n	8001a1c <UART4_IRQHandler+0xc8>
		{
			LL_USART_ClearFlag_RXNE(UART4); // bayragı temizle
 8001964:	4830      	ldr	r0, [pc, #192]	; (8001a28 <UART4_IRQHandler+0xd4>)
 8001966:	f7ff ffb0 	bl	80018ca <LL_USART_ClearFlag_RXNE>
			uart4_rx_data = LL_USART_ReceiveData8(UART4); // veriyi alalım
 800196a:	482f      	ldr	r0, [pc, #188]	; (8001a28 <UART4_IRQHandler+0xd4>)
 800196c:	f7ff ffbb 	bl	80018e6 <LL_USART_ReceiveData8>
 8001970:	4603      	mov	r3, r0
 8001972:	461a      	mov	r2, r3
 8001974:	4b2d      	ldr	r3, [pc, #180]	; (8001a2c <UART4_IRQHandler+0xd8>)
 8001976:	701a      	strb	r2, [r3, #0]
			uart4_rx_flag = 1; // once main icerisindeki while kodu okunacak
 8001978:	4b2d      	ldr	r3, [pc, #180]	; (8001a30 <UART4_IRQHandler+0xdc>)
 800197a:	2201      	movs	r2, #1
 800197c:	701a      	strb	r2, [r3, #0]

			//LL_USART_TransmitData8(USART6, uart4_rx_data);

			switch(cnt)
 800197e:	4b2d      	ldr	r3, [pc, #180]	; (8001a34 <UART4_IRQHandler+0xe0>)
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	2b23      	cmp	r3, #35	; 0x23
 8001984:	d02e      	beq.n	80019e4 <UART4_IRQHandler+0x90>
 8001986:	2b23      	cmp	r3, #35	; 0x23
 8001988:	dc3a      	bgt.n	8001a00 <UART4_IRQHandler+0xac>
 800198a:	2b00      	cmp	r3, #0
 800198c:	d002      	beq.n	8001994 <UART4_IRQHandler+0x40>
 800198e:	2b01      	cmp	r3, #1
 8001990:	d012      	beq.n	80019b8 <UART4_IRQHandler+0x64>
 8001992:	e035      	b.n	8001a00 <UART4_IRQHandler+0xac>
			{
			case 0:
				if(uart4_rx_data == 0xb5)
 8001994:	4b25      	ldr	r3, [pc, #148]	; (8001a2c <UART4_IRQHandler+0xd8>)
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	2bb5      	cmp	r3, #181	; 0xb5
 800199a:	d141      	bne.n	8001a20 <UART4_IRQHandler+0xcc>
				{
					m8n_rxbuff[cnt] = uart4_rx_data;
 800199c:	4b25      	ldr	r3, [pc, #148]	; (8001a34 <UART4_IRQHandler+0xe0>)
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	461a      	mov	r2, r3
 80019a2:	4b22      	ldr	r3, [pc, #136]	; (8001a2c <UART4_IRQHandler+0xd8>)
 80019a4:	7819      	ldrb	r1, [r3, #0]
 80019a6:	4b24      	ldr	r3, [pc, #144]	; (8001a38 <UART4_IRQHandler+0xe4>)
 80019a8:	5499      	strb	r1, [r3, r2]
					cnt++;
 80019aa:	4b22      	ldr	r3, [pc, #136]	; (8001a34 <UART4_IRQHandler+0xe0>)
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	3301      	adds	r3, #1
 80019b0:	b2da      	uxtb	r2, r3
 80019b2:	4b20      	ldr	r3, [pc, #128]	; (8001a34 <UART4_IRQHandler+0xe0>)
 80019b4:	701a      	strb	r2, [r3, #0]
				}
				break;
 80019b6:	e033      	b.n	8001a20 <UART4_IRQHandler+0xcc>
			case 1:
				if(uart4_rx_data == 0x62)
 80019b8:	4b1c      	ldr	r3, [pc, #112]	; (8001a2c <UART4_IRQHandler+0xd8>)
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	2b62      	cmp	r3, #98	; 0x62
 80019be:	d10d      	bne.n	80019dc <UART4_IRQHandler+0x88>
				{
					m8n_rxbuff[cnt] = uart4_rx_data;
 80019c0:	4b1c      	ldr	r3, [pc, #112]	; (8001a34 <UART4_IRQHandler+0xe0>)
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	461a      	mov	r2, r3
 80019c6:	4b19      	ldr	r3, [pc, #100]	; (8001a2c <UART4_IRQHandler+0xd8>)
 80019c8:	7819      	ldrb	r1, [r3, #0]
 80019ca:	4b1b      	ldr	r3, [pc, #108]	; (8001a38 <UART4_IRQHandler+0xe4>)
 80019cc:	5499      	strb	r1, [r3, r2]
					cnt++;
 80019ce:	4b19      	ldr	r3, [pc, #100]	; (8001a34 <UART4_IRQHandler+0xe0>)
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	3301      	adds	r3, #1
 80019d4:	b2da      	uxtb	r2, r3
 80019d6:	4b17      	ldr	r3, [pc, #92]	; (8001a34 <UART4_IRQHandler+0xe0>)
 80019d8:	701a      	strb	r2, [r3, #0]
				}
				else
					cnt = 0;
				break;
 80019da:	e022      	b.n	8001a22 <UART4_IRQHandler+0xce>
					cnt = 0;
 80019dc:	4b15      	ldr	r3, [pc, #84]	; (8001a34 <UART4_IRQHandler+0xe0>)
 80019de:	2200      	movs	r2, #0
 80019e0:	701a      	strb	r2, [r3, #0]
				break;
 80019e2:	e01e      	b.n	8001a22 <UART4_IRQHandler+0xce>
			case 35:
				m8n_rxbuff[cnt] = uart4_rx_data;
 80019e4:	4b13      	ldr	r3, [pc, #76]	; (8001a34 <UART4_IRQHandler+0xe0>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	461a      	mov	r2, r3
 80019ea:	4b10      	ldr	r3, [pc, #64]	; (8001a2c <UART4_IRQHandler+0xd8>)
 80019ec:	7819      	ldrb	r1, [r3, #0]
 80019ee:	4b12      	ldr	r3, [pc, #72]	; (8001a38 <UART4_IRQHandler+0xe4>)
 80019f0:	5499      	strb	r1, [r3, r2]
				cnt=0;
 80019f2:	4b10      	ldr	r3, [pc, #64]	; (8001a34 <UART4_IRQHandler+0xe0>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	701a      	strb	r2, [r3, #0]
				m8n_rx_cplt_flag = 1;
 80019f8:	4b10      	ldr	r3, [pc, #64]	; (8001a3c <UART4_IRQHandler+0xe8>)
 80019fa:	2201      	movs	r2, #1
 80019fc:	701a      	strb	r2, [r3, #0]
				break;
 80019fe:	e010      	b.n	8001a22 <UART4_IRQHandler+0xce>
			default:
				m8n_rxbuff[cnt] = uart4_rx_data;
 8001a00:	4b0c      	ldr	r3, [pc, #48]	; (8001a34 <UART4_IRQHandler+0xe0>)
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	461a      	mov	r2, r3
 8001a06:	4b09      	ldr	r3, [pc, #36]	; (8001a2c <UART4_IRQHandler+0xd8>)
 8001a08:	7819      	ldrb	r1, [r3, #0]
 8001a0a:	4b0b      	ldr	r3, [pc, #44]	; (8001a38 <UART4_IRQHandler+0xe4>)
 8001a0c:	5499      	strb	r1, [r3, r2]
				cnt++;
 8001a0e:	4b09      	ldr	r3, [pc, #36]	; (8001a34 <UART4_IRQHandler+0xe0>)
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	3301      	adds	r3, #1
 8001a14:	b2da      	uxtb	r2, r3
 8001a16:	4b07      	ldr	r3, [pc, #28]	; (8001a34 <UART4_IRQHandler+0xe0>)
 8001a18:	701a      	strb	r2, [r3, #0]
				break;
 8001a1a:	e002      	b.n	8001a22 <UART4_IRQHandler+0xce>
			}
		}
 8001a1c:	bf00      	nop
 8001a1e:	e000      	b.n	8001a22 <UART4_IRQHandler+0xce>
				break;
 8001a20:	bf00      	nop
  /* USER CODE END UART4_IRQn 0 */
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001a22:	bf00      	nop
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	40004c00 	.word	0x40004c00
 8001a2c:	2000021d 	.word	0x2000021d
 8001a30:	2000021c 	.word	0x2000021c
 8001a34:	20000269 	.word	0x20000269
 8001a38:	20000244 	.word	0x20000244
 8001a3c:	20000268 	.word	0x20000268

08001a40 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */
	static unsigned char cnt2 = 0;
		if(LL_USART_IsActiveFlag_RXNE(UART5)) // bu bir receive işlemi mi?
 8001a44:	4833      	ldr	r0, [pc, #204]	; (8001b14 <UART5_IRQHandler+0xd4>)
 8001a46:	f7ff ff2d 	bl	80018a4 <LL_USART_IsActiveFlag_RXNE>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d05b      	beq.n	8001b08 <UART5_IRQHandler+0xc8>
			{
				LL_USART_ClearFlag_RXNE(UART5); // bayragı temizle
 8001a50:	4830      	ldr	r0, [pc, #192]	; (8001b14 <UART5_IRQHandler+0xd4>)
 8001a52:	f7ff ff3a 	bl	80018ca <LL_USART_ClearFlag_RXNE>
				uart5_rx_data = LL_USART_ReceiveData8(UART5); // veriyi alalım
 8001a56:	482f      	ldr	r0, [pc, #188]	; (8001b14 <UART5_IRQHandler+0xd4>)
 8001a58:	f7ff ff45 	bl	80018e6 <LL_USART_ReceiveData8>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	461a      	mov	r2, r3
 8001a60:	4b2d      	ldr	r3, [pc, #180]	; (8001b18 <UART5_IRQHandler+0xd8>)
 8001a62:	701a      	strb	r2, [r3, #0]
				uart5_rx_flag = 1; // once main icerisindeki while kodu okunacak
 8001a64:	4b2d      	ldr	r3, [pc, #180]	; (8001b1c <UART5_IRQHandler+0xdc>)
 8001a66:	2201      	movs	r2, #1
 8001a68:	701a      	strb	r2, [r3, #0]

				switch(cnt2)
 8001a6a:	4b2d      	ldr	r3, [pc, #180]	; (8001b20 <UART5_IRQHandler+0xe0>)
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	2b1f      	cmp	r3, #31
 8001a70:	d02e      	beq.n	8001ad0 <UART5_IRQHandler+0x90>
 8001a72:	2b1f      	cmp	r3, #31
 8001a74:	dc3a      	bgt.n	8001aec <UART5_IRQHandler+0xac>
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d002      	beq.n	8001a80 <UART5_IRQHandler+0x40>
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d012      	beq.n	8001aa4 <UART5_IRQHandler+0x64>
 8001a7e:	e035      	b.n	8001aec <UART5_IRQHandler+0xac>
				{
				case 0:
					if(uart5_rx_data == 0x20)
 8001a80:	4b25      	ldr	r3, [pc, #148]	; (8001b18 <UART5_IRQHandler+0xd8>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	2b20      	cmp	r3, #32
 8001a86:	d141      	bne.n	8001b0c <UART5_IRQHandler+0xcc>
					{
						ibus_rxbuff[cnt2] = uart5_rx_data;
 8001a88:	4b25      	ldr	r3, [pc, #148]	; (8001b20 <UART5_IRQHandler+0xe0>)
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	4b22      	ldr	r3, [pc, #136]	; (8001b18 <UART5_IRQHandler+0xd8>)
 8001a90:	7819      	ldrb	r1, [r3, #0]
 8001a92:	4b24      	ldr	r3, [pc, #144]	; (8001b24 <UART5_IRQHandler+0xe4>)
 8001a94:	5499      	strb	r1, [r3, r2]
						cnt2++;
 8001a96:	4b22      	ldr	r3, [pc, #136]	; (8001b20 <UART5_IRQHandler+0xe0>)
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	b2da      	uxtb	r2, r3
 8001a9e:	4b20      	ldr	r3, [pc, #128]	; (8001b20 <UART5_IRQHandler+0xe0>)
 8001aa0:	701a      	strb	r2, [r3, #0]

					}
					break;
 8001aa2:	e033      	b.n	8001b0c <UART5_IRQHandler+0xcc>
				case 1:
					if(uart5_rx_data == 0x40)
 8001aa4:	4b1c      	ldr	r3, [pc, #112]	; (8001b18 <UART5_IRQHandler+0xd8>)
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	2b40      	cmp	r3, #64	; 0x40
 8001aaa:	d10d      	bne.n	8001ac8 <UART5_IRQHandler+0x88>
					{
						ibus_rxbuff[cnt2] = uart5_rx_data;
 8001aac:	4b1c      	ldr	r3, [pc, #112]	; (8001b20 <UART5_IRQHandler+0xe0>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	4b19      	ldr	r3, [pc, #100]	; (8001b18 <UART5_IRQHandler+0xd8>)
 8001ab4:	7819      	ldrb	r1, [r3, #0]
 8001ab6:	4b1b      	ldr	r3, [pc, #108]	; (8001b24 <UART5_IRQHandler+0xe4>)
 8001ab8:	5499      	strb	r1, [r3, r2]
						cnt2++;
 8001aba:	4b19      	ldr	r3, [pc, #100]	; (8001b20 <UART5_IRQHandler+0xe0>)
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	3301      	adds	r3, #1
 8001ac0:	b2da      	uxtb	r2, r3
 8001ac2:	4b17      	ldr	r3, [pc, #92]	; (8001b20 <UART5_IRQHandler+0xe0>)
 8001ac4:	701a      	strb	r2, [r3, #0]
					}
					else
						cnt2 = 0;
					break;
 8001ac6:	e022      	b.n	8001b0e <UART5_IRQHandler+0xce>
						cnt2 = 0;
 8001ac8:	4b15      	ldr	r3, [pc, #84]	; (8001b20 <UART5_IRQHandler+0xe0>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	701a      	strb	r2, [r3, #0]
					break;
 8001ace:	e01e      	b.n	8001b0e <UART5_IRQHandler+0xce>
					ibus_rxbuff[cnt2] = uart5_rx_data;
					cnt2++;
					break;
					*/
				case 31:
					ibus_rxbuff[cnt2] = uart5_rx_data;
 8001ad0:	4b13      	ldr	r3, [pc, #76]	; (8001b20 <UART5_IRQHandler+0xe0>)
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	4b10      	ldr	r3, [pc, #64]	; (8001b18 <UART5_IRQHandler+0xd8>)
 8001ad8:	7819      	ldrb	r1, [r3, #0]
 8001ada:	4b12      	ldr	r3, [pc, #72]	; (8001b24 <UART5_IRQHandler+0xe4>)
 8001adc:	5499      	strb	r1, [r3, r2]
					cnt2=0;
 8001ade:	4b10      	ldr	r3, [pc, #64]	; (8001b20 <UART5_IRQHandler+0xe0>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	701a      	strb	r2, [r3, #0]
					ibus_rx_cplt_flag = 1;
 8001ae4:	4b10      	ldr	r3, [pc, #64]	; (8001b28 <UART5_IRQHandler+0xe8>)
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	701a      	strb	r2, [r3, #0]
					break;
 8001aea:	e010      	b.n	8001b0e <UART5_IRQHandler+0xce>
				default:
					ibus_rxbuff[cnt2] = uart5_rx_data;
 8001aec:	4b0c      	ldr	r3, [pc, #48]	; (8001b20 <UART5_IRQHandler+0xe0>)
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	461a      	mov	r2, r3
 8001af2:	4b09      	ldr	r3, [pc, #36]	; (8001b18 <UART5_IRQHandler+0xd8>)
 8001af4:	7819      	ldrb	r1, [r3, #0]
 8001af6:	4b0b      	ldr	r3, [pc, #44]	; (8001b24 <UART5_IRQHandler+0xe4>)
 8001af8:	5499      	strb	r1, [r3, r2]
					cnt2++;
 8001afa:	4b09      	ldr	r3, [pc, #36]	; (8001b20 <UART5_IRQHandler+0xe0>)
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	3301      	adds	r3, #1
 8001b00:	b2da      	uxtb	r2, r3
 8001b02:	4b07      	ldr	r3, [pc, #28]	; (8001b20 <UART5_IRQHandler+0xe0>)
 8001b04:	701a      	strb	r2, [r3, #0]
					break;
 8001b06:	e002      	b.n	8001b0e <UART5_IRQHandler+0xce>

				}
			}
 8001b08:	bf00      	nop
 8001b0a:	e000      	b.n	8001b0e <UART5_IRQHandler+0xce>
					break;
 8001b0c:	bf00      	nop

  /* USER CODE END UART5_IRQn 0 */
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8001b0e:	bf00      	nop
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	40005000 	.word	0x40005000
 8001b18:	2000021f 	.word	0x2000021f
 8001b1c:	2000021e 	.word	0x2000021e
 8001b20:	2000026a 	.word	0x2000026a
 8001b24:	20000220 	.word	0x20000220
 8001b28:	20000240 	.word	0x20000240

08001b2c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	if(LL_USART_IsActiveFlag_RXNE(USART6)) // bu bir receive işlemi mi?
 8001b30:	480a      	ldr	r0, [pc, #40]	; (8001b5c <USART6_IRQHandler+0x30>)
 8001b32:	f7ff feb7 	bl	80018a4 <LL_USART_IsActiveFlag_RXNE>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d00c      	beq.n	8001b56 <USART6_IRQHandler+0x2a>
	{
		LL_USART_ClearFlag_RXNE(USART6); // bayragı temizle
 8001b3c:	4807      	ldr	r0, [pc, #28]	; (8001b5c <USART6_IRQHandler+0x30>)
 8001b3e:	f7ff fec4 	bl	80018ca <LL_USART_ClearFlag_RXNE>
		uart6_rx_data = LL_USART_ReceiveData8(USART6); // veriyi alalım
 8001b42:	4806      	ldr	r0, [pc, #24]	; (8001b5c <USART6_IRQHandler+0x30>)
 8001b44:	f7ff fecf 	bl	80018e6 <LL_USART_ReceiveData8>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	4b04      	ldr	r3, [pc, #16]	; (8001b60 <USART6_IRQHandler+0x34>)
 8001b4e:	701a      	strb	r2, [r3, #0]
		uart6_rx_flag = 1; // once main icerisindeki while kodu okunacak
 8001b50:	4b04      	ldr	r3, [pc, #16]	; (8001b64 <USART6_IRQHandler+0x38>)
 8001b52:	2201      	movs	r2, #1
 8001b54:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END USART6_IRQn 0 */
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001b56:	bf00      	nop
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	40011400 	.word	0x40011400
 8001b60:	2000021b 	.word	0x2000021b
 8001b64:	2000021a 	.word	0x2000021a

08001b68 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
	return 1;
 8001b6c:	2301      	movs	r3, #1
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr

08001b78 <_kill>:

int _kill(int pid, int sig)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001b82:	f002 fae5 	bl	8004150 <__errno>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2216      	movs	r2, #22
 8001b8a:	601a      	str	r2, [r3, #0]
	return -1;
 8001b8c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3708      	adds	r7, #8
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}

08001b98 <_exit>:

void _exit (int status)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001ba0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	f7ff ffe7 	bl	8001b78 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001baa:	e7fe      	b.n	8001baa <_exit+0x12>

08001bac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b086      	sub	sp, #24
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	60f8      	str	r0, [r7, #12]
 8001bb4:	60b9      	str	r1, [r7, #8]
 8001bb6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bb8:	2300      	movs	r3, #0
 8001bba:	617b      	str	r3, [r7, #20]
 8001bbc:	e00a      	b.n	8001bd4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001bbe:	f3af 8000 	nop.w
 8001bc2:	4601      	mov	r1, r0
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	1c5a      	adds	r2, r3, #1
 8001bc8:	60ba      	str	r2, [r7, #8]
 8001bca:	b2ca      	uxtb	r2, r1
 8001bcc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	617b      	str	r3, [r7, #20]
 8001bd4:	697a      	ldr	r2, [r7, #20]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	dbf0      	blt.n	8001bbe <_read+0x12>
	}

return len;
 8001bdc:	687b      	ldr	r3, [r7, #4]
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3718      	adds	r7, #24
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}

08001be6 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001be6:	b480      	push	{r7}
 8001be8:	b083      	sub	sp, #12
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	6078      	str	r0, [r7, #4]
	return -1;
 8001bee:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	370c      	adds	r7, #12
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr

08001bfe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bfe:	b480      	push	{r7}
 8001c00:	b083      	sub	sp, #12
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	6078      	str	r0, [r7, #4]
 8001c06:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c0e:	605a      	str	r2, [r3, #4]
	return 0;
 8001c10:	2300      	movs	r3, #0
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	370c      	adds	r7, #12
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr

08001c1e <_isatty>:

int _isatty(int file)
{
 8001c1e:	b480      	push	{r7}
 8001c20:	b083      	sub	sp, #12
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	6078      	str	r0, [r7, #4]
	return 1;
 8001c26:	2301      	movs	r3, #1
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	370c      	adds	r7, #12
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b085      	sub	sp, #20
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	60f8      	str	r0, [r7, #12]
 8001c3c:	60b9      	str	r1, [r7, #8]
 8001c3e:	607a      	str	r2, [r7, #4]
	return 0;
 8001c40:	2300      	movs	r3, #0
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3714      	adds	r7, #20
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
	...

08001c50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b086      	sub	sp, #24
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c58:	4a14      	ldr	r2, [pc, #80]	; (8001cac <_sbrk+0x5c>)
 8001c5a:	4b15      	ldr	r3, [pc, #84]	; (8001cb0 <_sbrk+0x60>)
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c64:	4b13      	ldr	r3, [pc, #76]	; (8001cb4 <_sbrk+0x64>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d102      	bne.n	8001c72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c6c:	4b11      	ldr	r3, [pc, #68]	; (8001cb4 <_sbrk+0x64>)
 8001c6e:	4a12      	ldr	r2, [pc, #72]	; (8001cb8 <_sbrk+0x68>)
 8001c70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c72:	4b10      	ldr	r3, [pc, #64]	; (8001cb4 <_sbrk+0x64>)
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4413      	add	r3, r2
 8001c7a:	693a      	ldr	r2, [r7, #16]
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d207      	bcs.n	8001c90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c80:	f002 fa66 	bl	8004150 <__errno>
 8001c84:	4603      	mov	r3, r0
 8001c86:	220c      	movs	r2, #12
 8001c88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c8a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c8e:	e009      	b.n	8001ca4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c90:	4b08      	ldr	r3, [pc, #32]	; (8001cb4 <_sbrk+0x64>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c96:	4b07      	ldr	r3, [pc, #28]	; (8001cb4 <_sbrk+0x64>)
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4413      	add	r3, r2
 8001c9e:	4a05      	ldr	r2, [pc, #20]	; (8001cb4 <_sbrk+0x64>)
 8001ca0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3718      	adds	r7, #24
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	20020000 	.word	0x20020000
 8001cb0:	00000400 	.word	0x00000400
 8001cb4:	2000026c 	.word	0x2000026c
 8001cb8:	20000288 	.word	0x20000288

08001cbc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cc0:	4b06      	ldr	r3, [pc, #24]	; (8001cdc <SystemInit+0x20>)
 8001cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cc6:	4a05      	ldr	r2, [pc, #20]	; (8001cdc <SystemInit+0x20>)
 8001cc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ccc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cd0:	bf00      	nop
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	e000ed00 	.word	0xe000ed00

08001ce0 <LL_TIM_EnableARRPreload>:
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	601a      	str	r2, [r3, #0]
}
 8001cf4:	bf00      	nop
 8001cf6:	370c      	adds	r7, #12
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr

08001d00 <LL_TIM_OC_EnableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b085      	sub	sp, #20
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d01c      	beq.n	8001d4a <LL_TIM_OC_EnableFast+0x4a>
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	2b04      	cmp	r3, #4
 8001d14:	d017      	beq.n	8001d46 <LL_TIM_OC_EnableFast+0x46>
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	2b10      	cmp	r3, #16
 8001d1a:	d012      	beq.n	8001d42 <LL_TIM_OC_EnableFast+0x42>
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	2b40      	cmp	r3, #64	; 0x40
 8001d20:	d00d      	beq.n	8001d3e <LL_TIM_OC_EnableFast+0x3e>
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d28:	d007      	beq.n	8001d3a <LL_TIM_OC_EnableFast+0x3a>
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d30:	d101      	bne.n	8001d36 <LL_TIM_OC_EnableFast+0x36>
 8001d32:	2305      	movs	r3, #5
 8001d34:	e00a      	b.n	8001d4c <LL_TIM_OC_EnableFast+0x4c>
 8001d36:	2306      	movs	r3, #6
 8001d38:	e008      	b.n	8001d4c <LL_TIM_OC_EnableFast+0x4c>
 8001d3a:	2304      	movs	r3, #4
 8001d3c:	e006      	b.n	8001d4c <LL_TIM_OC_EnableFast+0x4c>
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e004      	b.n	8001d4c <LL_TIM_OC_EnableFast+0x4c>
 8001d42:	2302      	movs	r3, #2
 8001d44:	e002      	b.n	8001d4c <LL_TIM_OC_EnableFast+0x4c>
 8001d46:	2301      	movs	r3, #1
 8001d48:	e000      	b.n	8001d4c <LL_TIM_OC_EnableFast+0x4c>
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	3318      	adds	r3, #24
 8001d52:	4619      	mov	r1, r3
 8001d54:	7bfb      	ldrb	r3, [r7, #15]
 8001d56:	4a0a      	ldr	r2, [pc, #40]	; (8001d80 <LL_TIM_OC_EnableFast+0x80>)
 8001d58:	5cd3      	ldrb	r3, [r2, r3]
 8001d5a:	440b      	add	r3, r1
 8001d5c:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	7bfb      	ldrb	r3, [r7, #15]
 8001d64:	4907      	ldr	r1, [pc, #28]	; (8001d84 <LL_TIM_OC_EnableFast+0x84>)
 8001d66:	5ccb      	ldrb	r3, [r1, r3]
 8001d68:	4619      	mov	r1, r3
 8001d6a:	2304      	movs	r3, #4
 8001d6c:	408b      	lsls	r3, r1
 8001d6e:	431a      	orrs	r2, r3
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	601a      	str	r2, [r3, #0]

}
 8001d74:	bf00      	nop
 8001d76:	3714      	adds	r7, #20
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr
 8001d80:	08006cac 	.word	0x08006cac
 8001d84:	08006cb4 	.word	0x08006cb4

08001d88 <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b085      	sub	sp, #20
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d01c      	beq.n	8001dd2 <LL_TIM_OC_EnablePreload+0x4a>
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	2b04      	cmp	r3, #4
 8001d9c:	d017      	beq.n	8001dce <LL_TIM_OC_EnablePreload+0x46>
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	2b10      	cmp	r3, #16
 8001da2:	d012      	beq.n	8001dca <LL_TIM_OC_EnablePreload+0x42>
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	2b40      	cmp	r3, #64	; 0x40
 8001da8:	d00d      	beq.n	8001dc6 <LL_TIM_OC_EnablePreload+0x3e>
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001db0:	d007      	beq.n	8001dc2 <LL_TIM_OC_EnablePreload+0x3a>
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001db8:	d101      	bne.n	8001dbe <LL_TIM_OC_EnablePreload+0x36>
 8001dba:	2305      	movs	r3, #5
 8001dbc:	e00a      	b.n	8001dd4 <LL_TIM_OC_EnablePreload+0x4c>
 8001dbe:	2306      	movs	r3, #6
 8001dc0:	e008      	b.n	8001dd4 <LL_TIM_OC_EnablePreload+0x4c>
 8001dc2:	2304      	movs	r3, #4
 8001dc4:	e006      	b.n	8001dd4 <LL_TIM_OC_EnablePreload+0x4c>
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e004      	b.n	8001dd4 <LL_TIM_OC_EnablePreload+0x4c>
 8001dca:	2302      	movs	r3, #2
 8001dcc:	e002      	b.n	8001dd4 <LL_TIM_OC_EnablePreload+0x4c>
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e000      	b.n	8001dd4 <LL_TIM_OC_EnablePreload+0x4c>
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	3318      	adds	r3, #24
 8001dda:	4619      	mov	r1, r3
 8001ddc:	7bfb      	ldrb	r3, [r7, #15]
 8001dde:	4a0a      	ldr	r2, [pc, #40]	; (8001e08 <LL_TIM_OC_EnablePreload+0x80>)
 8001de0:	5cd3      	ldrb	r3, [r2, r3]
 8001de2:	440b      	add	r3, r1
 8001de4:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	7bfb      	ldrb	r3, [r7, #15]
 8001dec:	4907      	ldr	r1, [pc, #28]	; (8001e0c <LL_TIM_OC_EnablePreload+0x84>)
 8001dee:	5ccb      	ldrb	r3, [r1, r3]
 8001df0:	4619      	mov	r1, r3
 8001df2:	2308      	movs	r3, #8
 8001df4:	408b      	lsls	r3, r1
 8001df6:	431a      	orrs	r2, r3
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	601a      	str	r2, [r3, #0]
}
 8001dfc:	bf00      	nop
 8001dfe:	3714      	adds	r7, #20
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr
 8001e08:	08006cac 	.word	0x08006cac
 8001e0c:	08006cb4 	.word	0x08006cb4

08001e10 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e22:	f023 0307 	bic.w	r3, r3, #7
 8001e26:	683a      	ldr	r2, [r7, #0]
 8001e28:	431a      	orrs	r2, r3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	609a      	str	r2, [r3, #8]
}
 8001e2e:	bf00      	nop
 8001e30:	370c      	adds	r7, #12
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr

08001e3a <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8001e3a:	b480      	push	{r7}
 8001e3c:	b083      	sub	sp, #12
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	6078      	str	r0, [r7, #4]
 8001e42:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	431a      	orrs	r2, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	605a      	str	r2, [r3, #4]
}
 8001e54:	bf00      	nop
 8001e56:	370c      	adds	r7, #12
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr

08001e60 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	609a      	str	r2, [r3, #8]
}
 8001e74:	bf00      	nop
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr

08001e80 <LL_AHB1_GRP1_EnableClock>:
{
 8001e80:	b480      	push	{r7}
 8001e82:	b085      	sub	sp, #20
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001e88:	4b08      	ldr	r3, [pc, #32]	; (8001eac <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001e8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e8c:	4907      	ldr	r1, [pc, #28]	; (8001eac <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001e94:	4b05      	ldr	r3, [pc, #20]	; (8001eac <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001e96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
}
 8001ea0:	bf00      	nop
 8001ea2:	3714      	adds	r7, #20
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr
 8001eac:	40023800 	.word	0x40023800

08001eb0 <LL_APB1_GRP1_EnableClock>:
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b085      	sub	sp, #20
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001eb8:	4b08      	ldr	r3, [pc, #32]	; (8001edc <LL_APB1_GRP1_EnableClock+0x2c>)
 8001eba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ebc:	4907      	ldr	r1, [pc, #28]	; (8001edc <LL_APB1_GRP1_EnableClock+0x2c>)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001ec4:	4b05      	ldr	r3, [pc, #20]	; (8001edc <LL_APB1_GRP1_EnableClock+0x2c>)
 8001ec6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	4013      	ands	r3, r2
 8001ecc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001ece:	68fb      	ldr	r3, [r7, #12]
}
 8001ed0:	bf00      	nop
 8001ed2:	3714      	adds	r7, #20
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr
 8001edc:	40023800 	.word	0x40023800

08001ee0 <MX_TIM3_Init>:

/* USER CODE END 0 */

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b094      	sub	sp, #80	; 0x50
 8001ee4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001ee6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001eea:	2200      	movs	r2, #0
 8001eec:	601a      	str	r2, [r3, #0]
 8001eee:	605a      	str	r2, [r3, #4]
 8001ef0:	609a      	str	r2, [r3, #8]
 8001ef2:	60da      	str	r2, [r3, #12]
 8001ef4:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8001ef6:	f107 031c 	add.w	r3, r7, #28
 8001efa:	2220      	movs	r2, #32
 8001efc:	2100      	movs	r1, #0
 8001efe:	4618      	mov	r0, r3
 8001f00:	f002 f950 	bl	80041a4 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f04:	1d3b      	adds	r3, r7, #4
 8001f06:	2200      	movs	r2, #0
 8001f08:	601a      	str	r2, [r3, #0]
 8001f0a:	605a      	str	r2, [r3, #4]
 8001f0c:	609a      	str	r2, [r3, #8]
 8001f0e:	60da      	str	r2, [r3, #12]
 8001f10:	611a      	str	r2, [r3, #16]
 8001f12:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8001f14:	2002      	movs	r0, #2
 8001f16:	f7ff ffcb 	bl	8001eb0 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 999;
 8001f1a:	f240 33e7 	movw	r3, #999	; 0x3e7
 8001f1e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001f20:	2300      	movs	r3, #0
 8001f22:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 20;
 8001f24:	2314      	movs	r3, #20
 8001f26:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8001f2c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001f30:	4619      	mov	r1, r3
 8001f32:	4822      	ldr	r0, [pc, #136]	; (8001fbc <MX_TIM3_Init+0xdc>)
 8001f34:	f001 fba6 	bl	8003684 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM3);
 8001f38:	4820      	ldr	r0, [pc, #128]	; (8001fbc <MX_TIM3_Init+0xdc>)
 8001f3a:	f7ff fed1 	bl	8001ce0 <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 8001f3e:	2100      	movs	r1, #0
 8001f40:	481e      	ldr	r0, [pc, #120]	; (8001fbc <MX_TIM3_Init+0xdc>)
 8001f42:	f7ff ff65 	bl	8001e10 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH4);
 8001f46:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f4a:	481c      	ldr	r0, [pc, #112]	; (8001fbc <MX_TIM3_Init+0xdc>)
 8001f4c:	f7ff ff1c 	bl	8001d88 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8001f50:	2360      	movs	r3, #96	; 0x60
 8001f52:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8001f54:	2300      	movs	r3, #0
 8001f56:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 10;
 8001f5c:	230a      	movs	r3, #10
 8001f5e:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001f60:	2300      	movs	r3, #0
 8001f62:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 8001f64:	f107 031c 	add.w	r3, r7, #28
 8001f68:	461a      	mov	r2, r3
 8001f6a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f6e:	4813      	ldr	r0, [pc, #76]	; (8001fbc <MX_TIM3_Init+0xdc>)
 8001f70:	f001 fc22 	bl	80037b8 <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM3, LL_TIM_CHANNEL_CH4);
 8001f74:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f78:	4810      	ldr	r0, [pc, #64]	; (8001fbc <MX_TIM3_Init+0xdc>)
 8001f7a:	f7ff fec1 	bl	8001d00 <LL_TIM_OC_EnableFast>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8001f7e:	2100      	movs	r1, #0
 8001f80:	480e      	ldr	r0, [pc, #56]	; (8001fbc <MX_TIM3_Init+0xdc>)
 8001f82:	f7ff ff5a 	bl	8001e3a <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8001f86:	480d      	ldr	r0, [pc, #52]	; (8001fbc <MX_TIM3_Init+0xdc>)
 8001f88:	f7ff ff6a 	bl	8001e60 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001f8c:	2002      	movs	r0, #2
 8001f8e:	f7ff ff77 	bl	8001e80 <LL_AHB1_GRP1_EnableClock>
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
  GPIO_InitStruct.Pin = BUZZER_TIM3_CH4_Pin;
 8001f92:	2302      	movs	r3, #2
 8001f94:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001f96:	2302      	movs	r3, #2
 8001f98:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8001fa6:	2302      	movs	r3, #2
 8001fa8:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(BUZZER_TIM3_CH4_GPIO_Port, &GPIO_InitStruct);
 8001faa:	1d3b      	adds	r3, r7, #4
 8001fac:	4619      	mov	r1, r3
 8001fae:	4804      	ldr	r0, [pc, #16]	; (8001fc0 <MX_TIM3_Init+0xe0>)
 8001fb0:	f001 f949 	bl	8003246 <LL_GPIO_Init>

}
 8001fb4:	bf00      	nop
 8001fb6:	3750      	adds	r7, #80	; 0x50
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	40000400 	.word	0x40000400
 8001fc0:	40020400 	.word	0x40020400

08001fc4 <__NVIC_GetPriorityGrouping>:
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fc8:	4b04      	ldr	r3, [pc, #16]	; (8001fdc <__NVIC_GetPriorityGrouping+0x18>)
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	0a1b      	lsrs	r3, r3, #8
 8001fce:	f003 0307 	and.w	r3, r3, #7
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr
 8001fdc:	e000ed00 	.word	0xe000ed00

08001fe0 <__NVIC_EnableIRQ>:
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	db0b      	blt.n	800200a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ff2:	79fb      	ldrb	r3, [r7, #7]
 8001ff4:	f003 021f 	and.w	r2, r3, #31
 8001ff8:	4907      	ldr	r1, [pc, #28]	; (8002018 <__NVIC_EnableIRQ+0x38>)
 8001ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ffe:	095b      	lsrs	r3, r3, #5
 8002000:	2001      	movs	r0, #1
 8002002:	fa00 f202 	lsl.w	r2, r0, r2
 8002006:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800200a:	bf00      	nop
 800200c:	370c      	adds	r7, #12
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	e000e100 	.word	0xe000e100

0800201c <__NVIC_SetPriority>:
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	4603      	mov	r3, r0
 8002024:	6039      	str	r1, [r7, #0]
 8002026:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002028:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800202c:	2b00      	cmp	r3, #0
 800202e:	db0a      	blt.n	8002046 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	b2da      	uxtb	r2, r3
 8002034:	490c      	ldr	r1, [pc, #48]	; (8002068 <__NVIC_SetPriority+0x4c>)
 8002036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800203a:	0112      	lsls	r2, r2, #4
 800203c:	b2d2      	uxtb	r2, r2
 800203e:	440b      	add	r3, r1
 8002040:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002044:	e00a      	b.n	800205c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	b2da      	uxtb	r2, r3
 800204a:	4908      	ldr	r1, [pc, #32]	; (800206c <__NVIC_SetPriority+0x50>)
 800204c:	79fb      	ldrb	r3, [r7, #7]
 800204e:	f003 030f 	and.w	r3, r3, #15
 8002052:	3b04      	subs	r3, #4
 8002054:	0112      	lsls	r2, r2, #4
 8002056:	b2d2      	uxtb	r2, r2
 8002058:	440b      	add	r3, r1
 800205a:	761a      	strb	r2, [r3, #24]
}
 800205c:	bf00      	nop
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr
 8002068:	e000e100 	.word	0xe000e100
 800206c:	e000ed00 	.word	0xe000ed00

08002070 <NVIC_EncodePriority>:
{
 8002070:	b480      	push	{r7}
 8002072:	b089      	sub	sp, #36	; 0x24
 8002074:	af00      	add	r7, sp, #0
 8002076:	60f8      	str	r0, [r7, #12]
 8002078:	60b9      	str	r1, [r7, #8]
 800207a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	f003 0307 	and.w	r3, r3, #7
 8002082:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	f1c3 0307 	rsb	r3, r3, #7
 800208a:	2b04      	cmp	r3, #4
 800208c:	bf28      	it	cs
 800208e:	2304      	movcs	r3, #4
 8002090:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	3304      	adds	r3, #4
 8002096:	2b06      	cmp	r3, #6
 8002098:	d902      	bls.n	80020a0 <NVIC_EncodePriority+0x30>
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	3b03      	subs	r3, #3
 800209e:	e000      	b.n	80020a2 <NVIC_EncodePriority+0x32>
 80020a0:	2300      	movs	r3, #0
 80020a2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020a4:	f04f 32ff 	mov.w	r2, #4294967295
 80020a8:	69bb      	ldr	r3, [r7, #24]
 80020aa:	fa02 f303 	lsl.w	r3, r2, r3
 80020ae:	43da      	mvns	r2, r3
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	401a      	ands	r2, r3
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020b8:	f04f 31ff 	mov.w	r1, #4294967295
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	fa01 f303 	lsl.w	r3, r1, r3
 80020c2:	43d9      	mvns	r1, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020c8:	4313      	orrs	r3, r2
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3724      	adds	r7, #36	; 0x24
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr

080020d6 <LL_USART_Enable>:
{
 80020d6:	b480      	push	{r7}
 80020d8:	b083      	sub	sp, #12
 80020da:	af00      	add	r7, sp, #0
 80020dc:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	60da      	str	r2, [r3, #12]
}
 80020ea:	bf00      	nop
 80020ec:	370c      	adds	r7, #12
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr

080020f6 <LL_USART_ConfigAsyncMode>:
{
 80020f6:	b480      	push	{r7}
 80020f8:	b083      	sub	sp, #12
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	691b      	ldr	r3, [r3, #16]
 8002102:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	695b      	ldr	r3, [r3, #20]
 800210e:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	615a      	str	r2, [r3, #20]
}
 8002116:	bf00      	nop
 8002118:	370c      	adds	r7, #12
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
	...

08002124 <LL_AHB1_GRP1_EnableClock>:
{
 8002124:	b480      	push	{r7}
 8002126:	b085      	sub	sp, #20
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800212c:	4b08      	ldr	r3, [pc, #32]	; (8002150 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800212e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002130:	4907      	ldr	r1, [pc, #28]	; (8002150 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4313      	orrs	r3, r2
 8002136:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002138:	4b05      	ldr	r3, [pc, #20]	; (8002150 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800213a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	4013      	ands	r3, r2
 8002140:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002142:	68fb      	ldr	r3, [r7, #12]
}
 8002144:	bf00      	nop
 8002146:	3714      	adds	r7, #20
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr
 8002150:	40023800 	.word	0x40023800

08002154 <LL_APB1_GRP1_EnableClock>:
{
 8002154:	b480      	push	{r7}
 8002156:	b085      	sub	sp, #20
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 800215c:	4b08      	ldr	r3, [pc, #32]	; (8002180 <LL_APB1_GRP1_EnableClock+0x2c>)
 800215e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002160:	4907      	ldr	r1, [pc, #28]	; (8002180 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4313      	orrs	r3, r2
 8002166:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002168:	4b05      	ldr	r3, [pc, #20]	; (8002180 <LL_APB1_GRP1_EnableClock+0x2c>)
 800216a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	4013      	ands	r3, r2
 8002170:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002172:	68fb      	ldr	r3, [r7, #12]
}
 8002174:	bf00      	nop
 8002176:	3714      	adds	r7, #20
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr
 8002180:	40023800 	.word	0x40023800

08002184 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8002184:	b480      	push	{r7}
 8002186:	b085      	sub	sp, #20
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800218c:	4b08      	ldr	r3, [pc, #32]	; (80021b0 <LL_APB2_GRP1_EnableClock+0x2c>)
 800218e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002190:	4907      	ldr	r1, [pc, #28]	; (80021b0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4313      	orrs	r3, r2
 8002196:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002198:	4b05      	ldr	r3, [pc, #20]	; (80021b0 <LL_APB2_GRP1_EnableClock+0x2c>)
 800219a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	4013      	ands	r3, r2
 80021a0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80021a2:	68fb      	ldr	r3, [r7, #12]
}
 80021a4:	bf00      	nop
 80021a6:	3714      	adds	r7, #20
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr
 80021b0:	40023800 	.word	0x40023800

080021b4 <MX_UART4_Init>:

/* USER CODE END 0 */

/* UART4 init function */
void MX_UART4_Init(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b08e      	sub	sp, #56	; 0x38
 80021b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART4_Init 0 */

  /* USER CODE END UART4_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80021ba:	f107 031c 	add.w	r3, r7, #28
 80021be:	2200      	movs	r2, #0
 80021c0:	601a      	str	r2, [r3, #0]
 80021c2:	605a      	str	r2, [r3, #4]
 80021c4:	609a      	str	r2, [r3, #8]
 80021c6:	60da      	str	r2, [r3, #12]
 80021c8:	611a      	str	r2, [r3, #16]
 80021ca:	615a      	str	r2, [r3, #20]
 80021cc:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021ce:	1d3b      	adds	r3, r7, #4
 80021d0:	2200      	movs	r2, #0
 80021d2:	601a      	str	r2, [r3, #0]
 80021d4:	605a      	str	r2, [r3, #4]
 80021d6:	609a      	str	r2, [r3, #8]
 80021d8:	60da      	str	r2, [r3, #12]
 80021da:	611a      	str	r2, [r3, #16]
 80021dc:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART4);
 80021de:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80021e2:	f7ff ffb7 	bl	8002154 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80021e6:	2004      	movs	r0, #4
 80021e8:	f7ff ff9c 	bl	8002124 <LL_AHB1_GRP1_EnableClock>
  /**UART4 GPIO Configuration
  PC10   ------> UART4_TX
  PC11   ------> UART4_RX
  */
  GPIO_InitStruct.Pin = GPS_UART4_TX_Pin|GPS_UART4_RX_Pin;
 80021ec:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80021f0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80021f2:	2302      	movs	r3, #2
 80021f4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80021f6:	2303      	movs	r3, #3
 80021f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80021fa:	2300      	movs	r3, #0
 80021fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80021fe:	2300      	movs	r3, #0
 8002200:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8002202:	2308      	movs	r3, #8
 8002204:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002206:	1d3b      	adds	r3, r7, #4
 8002208:	4619      	mov	r1, r3
 800220a:	4819      	ldr	r0, [pc, #100]	; (8002270 <MX_UART4_Init+0xbc>)
 800220c:	f001 f81b 	bl	8003246 <LL_GPIO_Init>

  /* UART4 interrupt Init */
  NVIC_SetPriority(UART4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002210:	f7ff fed8 	bl	8001fc4 <__NVIC_GetPriorityGrouping>
 8002214:	4603      	mov	r3, r0
 8002216:	2200      	movs	r2, #0
 8002218:	2100      	movs	r1, #0
 800221a:	4618      	mov	r0, r3
 800221c:	f7ff ff28 	bl	8002070 <NVIC_EncodePriority>
 8002220:	4603      	mov	r3, r0
 8002222:	4619      	mov	r1, r3
 8002224:	2034      	movs	r0, #52	; 0x34
 8002226:	f7ff fef9 	bl	800201c <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART4_IRQn);
 800222a:	2034      	movs	r0, #52	; 0x34
 800222c:	f7ff fed8 	bl	8001fe0 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  USART_InitStruct.BaudRate = 9600;
 8002230:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8002234:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002236:	2300      	movs	r3, #0
 8002238:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800223a:	2300      	movs	r3, #0
 800223c:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800223e:	2300      	movs	r3, #0
 8002240:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002242:	230c      	movs	r3, #12
 8002244:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002246:	2300      	movs	r3, #0
 8002248:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800224a:	2300      	movs	r3, #0
 800224c:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(UART4, &USART_InitStruct);
 800224e:	f107 031c 	add.w	r3, r7, #28
 8002252:	4619      	mov	r1, r3
 8002254:	4807      	ldr	r0, [pc, #28]	; (8002274 <MX_UART4_Init+0xc0>)
 8002256:	f001 fefb 	bl	8004050 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART4);
 800225a:	4806      	ldr	r0, [pc, #24]	; (8002274 <MX_UART4_Init+0xc0>)
 800225c:	f7ff ff4b 	bl	80020f6 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART4);
 8002260:	4804      	ldr	r0, [pc, #16]	; (8002274 <MX_UART4_Init+0xc0>)
 8002262:	f7ff ff38 	bl	80020d6 <LL_USART_Enable>
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002266:	bf00      	nop
 8002268:	3738      	adds	r7, #56	; 0x38
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	40020800 	.word	0x40020800
 8002274:	40004c00 	.word	0x40004c00

08002278 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b08e      	sub	sp, #56	; 0x38
 800227c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART5_Init 0 */

  /* USER CODE END UART5_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800227e:	f107 031c 	add.w	r3, r7, #28
 8002282:	2200      	movs	r2, #0
 8002284:	601a      	str	r2, [r3, #0]
 8002286:	605a      	str	r2, [r3, #4]
 8002288:	609a      	str	r2, [r3, #8]
 800228a:	60da      	str	r2, [r3, #12]
 800228c:	611a      	str	r2, [r3, #16]
 800228e:	615a      	str	r2, [r3, #20]
 8002290:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002292:	1d3b      	adds	r3, r7, #4
 8002294:	2200      	movs	r2, #0
 8002296:	601a      	str	r2, [r3, #0]
 8002298:	605a      	str	r2, [r3, #4]
 800229a:	609a      	str	r2, [r3, #8]
 800229c:	60da      	str	r2, [r3, #12]
 800229e:	611a      	str	r2, [r3, #16]
 80022a0:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART5);
 80022a2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80022a6:	f7ff ff55 	bl	8002154 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80022aa:	2004      	movs	r0, #4
 80022ac:	f7ff ff3a 	bl	8002124 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 80022b0:	2008      	movs	r0, #8
 80022b2:	f7ff ff37 	bl	8002124 <LL_AHB1_GRP1_EnableClock>
  /**UART5 GPIO Configuration
  PC12   ------> UART5_TX
  PD2   ------> UART5_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12;
 80022b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022ba:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80022bc:	2302      	movs	r3, #2
 80022be:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80022c0:	2303      	movs	r3, #3
 80022c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80022c4:	2300      	movs	r3, #0
 80022c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80022c8:	2300      	movs	r3, #0
 80022ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 80022cc:	2308      	movs	r3, #8
 80022ce:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022d0:	1d3b      	adds	r3, r7, #4
 80022d2:	4619      	mov	r1, r3
 80022d4:	4821      	ldr	r0, [pc, #132]	; (800235c <MX_UART5_Init+0xe4>)
 80022d6:	f000 ffb6 	bl	8003246 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 80022da:	2304      	movs	r3, #4
 80022dc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80022de:	2302      	movs	r3, #2
 80022e0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80022e2:	2303      	movs	r3, #3
 80022e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80022e6:	2300      	movs	r3, #0
 80022e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80022ea:	2300      	movs	r3, #0
 80022ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 80022ee:	2308      	movs	r3, #8
 80022f0:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022f2:	1d3b      	adds	r3, r7, #4
 80022f4:	4619      	mov	r1, r3
 80022f6:	481a      	ldr	r0, [pc, #104]	; (8002360 <MX_UART5_Init+0xe8>)
 80022f8:	f000 ffa5 	bl	8003246 <LL_GPIO_Init>

  /* UART5 interrupt Init */
  NVIC_SetPriority(UART5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80022fc:	f7ff fe62 	bl	8001fc4 <__NVIC_GetPriorityGrouping>
 8002300:	4603      	mov	r3, r0
 8002302:	2200      	movs	r2, #0
 8002304:	2100      	movs	r1, #0
 8002306:	4618      	mov	r0, r3
 8002308:	f7ff feb2 	bl	8002070 <NVIC_EncodePriority>
 800230c:	4603      	mov	r3, r0
 800230e:	4619      	mov	r1, r3
 8002310:	2035      	movs	r0, #53	; 0x35
 8002312:	f7ff fe83 	bl	800201c <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART5_IRQn);
 8002316:	2035      	movs	r0, #53	; 0x35
 8002318:	f7ff fe62 	bl	8001fe0 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 800231c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002320:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002322:	2300      	movs	r3, #0
 8002324:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002326:	2300      	movs	r3, #0
 8002328:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800232a:	2300      	movs	r3, #0
 800232c:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_RX;
 800232e:	2304      	movs	r3, #4
 8002330:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002332:	2300      	movs	r3, #0
 8002334:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002336:	2300      	movs	r3, #0
 8002338:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(UART5, &USART_InitStruct);
 800233a:	f107 031c 	add.w	r3, r7, #28
 800233e:	4619      	mov	r1, r3
 8002340:	4808      	ldr	r0, [pc, #32]	; (8002364 <MX_UART5_Init+0xec>)
 8002342:	f001 fe85 	bl	8004050 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART5);
 8002346:	4807      	ldr	r0, [pc, #28]	; (8002364 <MX_UART5_Init+0xec>)
 8002348:	f7ff fed5 	bl	80020f6 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART5);
 800234c:	4805      	ldr	r0, [pc, #20]	; (8002364 <MX_UART5_Init+0xec>)
 800234e:	f7ff fec2 	bl	80020d6 <LL_USART_Enable>
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8002352:	bf00      	nop
 8002354:	3738      	adds	r7, #56	; 0x38
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	40020800 	.word	0x40020800
 8002360:	40020c00 	.word	0x40020c00
 8002364:	40005000 	.word	0x40005000

08002368 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b08e      	sub	sp, #56	; 0x38
 800236c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART6_Init 0 */

  /* USER CODE END USART6_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800236e:	f107 031c 	add.w	r3, r7, #28
 8002372:	2200      	movs	r2, #0
 8002374:	601a      	str	r2, [r3, #0]
 8002376:	605a      	str	r2, [r3, #4]
 8002378:	609a      	str	r2, [r3, #8]
 800237a:	60da      	str	r2, [r3, #12]
 800237c:	611a      	str	r2, [r3, #16]
 800237e:	615a      	str	r2, [r3, #20]
 8002380:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002382:	1d3b      	adds	r3, r7, #4
 8002384:	2200      	movs	r2, #0
 8002386:	601a      	str	r2, [r3, #0]
 8002388:	605a      	str	r2, [r3, #4]
 800238a:	609a      	str	r2, [r3, #8]
 800238c:	60da      	str	r2, [r3, #12]
 800238e:	611a      	str	r2, [r3, #16]
 8002390:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART6);
 8002392:	2020      	movs	r0, #32
 8002394:	f7ff fef6 	bl	8002184 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8002398:	2004      	movs	r0, #4
 800239a:	f7ff fec3 	bl	8002124 <LL_AHB1_GRP1_EnableClock>
  /**USART6 GPIO Configuration
  PC6   ------> USART6_TX
  PC7   ------> USART6_RX
  */
  GPIO_InitStruct.Pin = TELEMETRI_USART6_TX_Pin|TELEMETRI_USART6_RX_Pin;
 800239e:	23c0      	movs	r3, #192	; 0xc0
 80023a0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80023a2:	2302      	movs	r3, #2
 80023a4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80023a6:	2303      	movs	r3, #3
 80023a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80023aa:	2300      	movs	r3, #0
 80023ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80023ae:	2300      	movs	r3, #0
 80023b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 80023b2:	2308      	movs	r3, #8
 80023b4:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023b6:	1d3b      	adds	r3, r7, #4
 80023b8:	4619      	mov	r1, r3
 80023ba:	4819      	ldr	r0, [pc, #100]	; (8002420 <MX_USART6_UART_Init+0xb8>)
 80023bc:	f000 ff43 	bl	8003246 <LL_GPIO_Init>

  /* USART6 interrupt Init */
  NVIC_SetPriority(USART6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80023c0:	f7ff fe00 	bl	8001fc4 <__NVIC_GetPriorityGrouping>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2200      	movs	r2, #0
 80023c8:	2100      	movs	r1, #0
 80023ca:	4618      	mov	r0, r3
 80023cc:	f7ff fe50 	bl	8002070 <NVIC_EncodePriority>
 80023d0:	4603      	mov	r3, r0
 80023d2:	4619      	mov	r1, r3
 80023d4:	2047      	movs	r0, #71	; 0x47
 80023d6:	f7ff fe21 	bl	800201c <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART6_IRQn);
 80023da:	2047      	movs	r0, #71	; 0x47
 80023dc:	f7ff fe00 	bl	8001fe0 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  USART_InitStruct.BaudRate = 57600;
 80023e0:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 80023e4:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80023e6:	2300      	movs	r3, #0
 80023e8:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80023ea:	2300      	movs	r3, #0
 80023ec:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80023ee:	2300      	movs	r3, #0
 80023f0:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80023f2:	230c      	movs	r3, #12
 80023f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80023f6:	2300      	movs	r3, #0
 80023f8:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80023fa:	2300      	movs	r3, #0
 80023fc:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART6, &USART_InitStruct);
 80023fe:	f107 031c 	add.w	r3, r7, #28
 8002402:	4619      	mov	r1, r3
 8002404:	4807      	ldr	r0, [pc, #28]	; (8002424 <MX_USART6_UART_Init+0xbc>)
 8002406:	f001 fe23 	bl	8004050 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART6);
 800240a:	4806      	ldr	r0, [pc, #24]	; (8002424 <MX_USART6_UART_Init+0xbc>)
 800240c:	f7ff fe73 	bl	80020f6 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART6);
 8002410:	4804      	ldr	r0, [pc, #16]	; (8002424 <MX_USART6_UART_Init+0xbc>)
 8002412:	f7ff fe60 	bl	80020d6 <LL_USART_Enable>
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002416:	bf00      	nop
 8002418:	3738      	adds	r7, #56	; 0x38
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	40020800 	.word	0x40020800
 8002424:	40011400 	.word	0x40011400

08002428 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002428:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002460 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800242c:	480d      	ldr	r0, [pc, #52]	; (8002464 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800242e:	490e      	ldr	r1, [pc, #56]	; (8002468 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002430:	4a0e      	ldr	r2, [pc, #56]	; (800246c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002432:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002434:	e002      	b.n	800243c <LoopCopyDataInit>

08002436 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002436:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002438:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800243a:	3304      	adds	r3, #4

0800243c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800243c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800243e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002440:	d3f9      	bcc.n	8002436 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002442:	4a0b      	ldr	r2, [pc, #44]	; (8002470 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002444:	4c0b      	ldr	r4, [pc, #44]	; (8002474 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002446:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002448:	e001      	b.n	800244e <LoopFillZerobss>

0800244a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800244a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800244c:	3204      	adds	r2, #4

0800244e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800244e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002450:	d3fb      	bcc.n	800244a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002452:	f7ff fc33 	bl	8001cbc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002456:	f001 fe81 	bl	800415c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800245a:	f7ff f8f5 	bl	8001648 <main>
  bx  lr    
 800245e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002460:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002464:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002468:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 800246c:	080070a4 	.word	0x080070a4
  ldr r2, =_sbss
 8002470:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002474:	20000284 	.word	0x20000284

08002478 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002478:	e7fe      	b.n	8002478 <ADC_IRQHandler>
	...

0800247c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002480:	4b0e      	ldr	r3, [pc, #56]	; (80024bc <HAL_Init+0x40>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a0d      	ldr	r2, [pc, #52]	; (80024bc <HAL_Init+0x40>)
 8002486:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800248a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800248c:	4b0b      	ldr	r3, [pc, #44]	; (80024bc <HAL_Init+0x40>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a0a      	ldr	r2, [pc, #40]	; (80024bc <HAL_Init+0x40>)
 8002492:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002496:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002498:	4b08      	ldr	r3, [pc, #32]	; (80024bc <HAL_Init+0x40>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a07      	ldr	r2, [pc, #28]	; (80024bc <HAL_Init+0x40>)
 800249e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024a4:	2003      	movs	r0, #3
 80024a6:	f000 f931 	bl	800270c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024aa:	2000      	movs	r0, #0
 80024ac:	f000 f808 	bl	80024c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024b0:	f7ff f9d0 	bl	8001854 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024b4:	2300      	movs	r3, #0
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	40023c00 	.word	0x40023c00

080024c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024c8:	4b12      	ldr	r3, [pc, #72]	; (8002514 <HAL_InitTick+0x54>)
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	4b12      	ldr	r3, [pc, #72]	; (8002518 <HAL_InitTick+0x58>)
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	4619      	mov	r1, r3
 80024d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80024da:	fbb2 f3f3 	udiv	r3, r2, r3
 80024de:	4618      	mov	r0, r3
 80024e0:	f000 f93b 	bl	800275a <HAL_SYSTICK_Config>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e00e      	b.n	800250c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2b0f      	cmp	r3, #15
 80024f2:	d80a      	bhi.n	800250a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024f4:	2200      	movs	r2, #0
 80024f6:	6879      	ldr	r1, [r7, #4]
 80024f8:	f04f 30ff 	mov.w	r0, #4294967295
 80024fc:	f000 f911 	bl	8002722 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002500:	4a06      	ldr	r2, [pc, #24]	; (800251c <HAL_InitTick+0x5c>)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002506:	2300      	movs	r3, #0
 8002508:	e000      	b.n	800250c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
}
 800250c:	4618      	mov	r0, r3
 800250e:	3708      	adds	r7, #8
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}
 8002514:	20000000 	.word	0x20000000
 8002518:	20000008 	.word	0x20000008
 800251c:	20000004 	.word	0x20000004

08002520 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002524:	4b06      	ldr	r3, [pc, #24]	; (8002540 <HAL_IncTick+0x20>)
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	461a      	mov	r2, r3
 800252a:	4b06      	ldr	r3, [pc, #24]	; (8002544 <HAL_IncTick+0x24>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4413      	add	r3, r2
 8002530:	4a04      	ldr	r2, [pc, #16]	; (8002544 <HAL_IncTick+0x24>)
 8002532:	6013      	str	r3, [r2, #0]
}
 8002534:	bf00      	nop
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr
 800253e:	bf00      	nop
 8002540:	20000008 	.word	0x20000008
 8002544:	20000270 	.word	0x20000270

08002548 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002548:	b480      	push	{r7}
 800254a:	af00      	add	r7, sp, #0
  return uwTick;
 800254c:	4b03      	ldr	r3, [pc, #12]	; (800255c <HAL_GetTick+0x14>)
 800254e:	681b      	ldr	r3, [r3, #0]
}
 8002550:	4618      	mov	r0, r3
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	20000270 	.word	0x20000270

08002560 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b084      	sub	sp, #16
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002568:	f7ff ffee 	bl	8002548 <HAL_GetTick>
 800256c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002578:	d005      	beq.n	8002586 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800257a:	4b0a      	ldr	r3, [pc, #40]	; (80025a4 <HAL_Delay+0x44>)
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	461a      	mov	r2, r3
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	4413      	add	r3, r2
 8002584:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002586:	bf00      	nop
 8002588:	f7ff ffde 	bl	8002548 <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	68fa      	ldr	r2, [r7, #12]
 8002594:	429a      	cmp	r2, r3
 8002596:	d8f7      	bhi.n	8002588 <HAL_Delay+0x28>
  {
  }
}
 8002598:	bf00      	nop
 800259a:	bf00      	nop
 800259c:	3710      	adds	r7, #16
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	20000008 	.word	0x20000008

080025a8 <__NVIC_SetPriorityGrouping>:
{
 80025a8:	b480      	push	{r7}
 80025aa:	b085      	sub	sp, #20
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	f003 0307 	and.w	r3, r3, #7
 80025b6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025b8:	4b0c      	ldr	r3, [pc, #48]	; (80025ec <__NVIC_SetPriorityGrouping+0x44>)
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025be:	68ba      	ldr	r2, [r7, #8]
 80025c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025c4:	4013      	ands	r3, r2
 80025c6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025da:	4a04      	ldr	r2, [pc, #16]	; (80025ec <__NVIC_SetPriorityGrouping+0x44>)
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	60d3      	str	r3, [r2, #12]
}
 80025e0:	bf00      	nop
 80025e2:	3714      	adds	r7, #20
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr
 80025ec:	e000ed00 	.word	0xe000ed00

080025f0 <__NVIC_GetPriorityGrouping>:
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025f4:	4b04      	ldr	r3, [pc, #16]	; (8002608 <__NVIC_GetPriorityGrouping+0x18>)
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	0a1b      	lsrs	r3, r3, #8
 80025fa:	f003 0307 	and.w	r3, r3, #7
}
 80025fe:	4618      	mov	r0, r3
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr
 8002608:	e000ed00 	.word	0xe000ed00

0800260c <__NVIC_SetPriority>:
{
 800260c:	b480      	push	{r7}
 800260e:	b083      	sub	sp, #12
 8002610:	af00      	add	r7, sp, #0
 8002612:	4603      	mov	r3, r0
 8002614:	6039      	str	r1, [r7, #0]
 8002616:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002618:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800261c:	2b00      	cmp	r3, #0
 800261e:	db0a      	blt.n	8002636 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	b2da      	uxtb	r2, r3
 8002624:	490c      	ldr	r1, [pc, #48]	; (8002658 <__NVIC_SetPriority+0x4c>)
 8002626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800262a:	0112      	lsls	r2, r2, #4
 800262c:	b2d2      	uxtb	r2, r2
 800262e:	440b      	add	r3, r1
 8002630:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002634:	e00a      	b.n	800264c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	b2da      	uxtb	r2, r3
 800263a:	4908      	ldr	r1, [pc, #32]	; (800265c <__NVIC_SetPriority+0x50>)
 800263c:	79fb      	ldrb	r3, [r7, #7]
 800263e:	f003 030f 	and.w	r3, r3, #15
 8002642:	3b04      	subs	r3, #4
 8002644:	0112      	lsls	r2, r2, #4
 8002646:	b2d2      	uxtb	r2, r2
 8002648:	440b      	add	r3, r1
 800264a:	761a      	strb	r2, [r3, #24]
}
 800264c:	bf00      	nop
 800264e:	370c      	adds	r7, #12
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr
 8002658:	e000e100 	.word	0xe000e100
 800265c:	e000ed00 	.word	0xe000ed00

08002660 <NVIC_EncodePriority>:
{
 8002660:	b480      	push	{r7}
 8002662:	b089      	sub	sp, #36	; 0x24
 8002664:	af00      	add	r7, sp, #0
 8002666:	60f8      	str	r0, [r7, #12]
 8002668:	60b9      	str	r1, [r7, #8]
 800266a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	f003 0307 	and.w	r3, r3, #7
 8002672:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	f1c3 0307 	rsb	r3, r3, #7
 800267a:	2b04      	cmp	r3, #4
 800267c:	bf28      	it	cs
 800267e:	2304      	movcs	r3, #4
 8002680:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	3304      	adds	r3, #4
 8002686:	2b06      	cmp	r3, #6
 8002688:	d902      	bls.n	8002690 <NVIC_EncodePriority+0x30>
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	3b03      	subs	r3, #3
 800268e:	e000      	b.n	8002692 <NVIC_EncodePriority+0x32>
 8002690:	2300      	movs	r3, #0
 8002692:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002694:	f04f 32ff 	mov.w	r2, #4294967295
 8002698:	69bb      	ldr	r3, [r7, #24]
 800269a:	fa02 f303 	lsl.w	r3, r2, r3
 800269e:	43da      	mvns	r2, r3
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	401a      	ands	r2, r3
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026a8:	f04f 31ff 	mov.w	r1, #4294967295
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	fa01 f303 	lsl.w	r3, r1, r3
 80026b2:	43d9      	mvns	r1, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026b8:	4313      	orrs	r3, r2
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3724      	adds	r7, #36	; 0x24
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr
	...

080026c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	3b01      	subs	r3, #1
 80026d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026d8:	d301      	bcc.n	80026de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026da:	2301      	movs	r3, #1
 80026dc:	e00f      	b.n	80026fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026de:	4a0a      	ldr	r2, [pc, #40]	; (8002708 <SysTick_Config+0x40>)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	3b01      	subs	r3, #1
 80026e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026e6:	210f      	movs	r1, #15
 80026e8:	f04f 30ff 	mov.w	r0, #4294967295
 80026ec:	f7ff ff8e 	bl	800260c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026f0:	4b05      	ldr	r3, [pc, #20]	; (8002708 <SysTick_Config+0x40>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026f6:	4b04      	ldr	r3, [pc, #16]	; (8002708 <SysTick_Config+0x40>)
 80026f8:	2207      	movs	r2, #7
 80026fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026fc:	2300      	movs	r3, #0
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3708      	adds	r7, #8
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	e000e010 	.word	0xe000e010

0800270c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b082      	sub	sp, #8
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	f7ff ff47 	bl	80025a8 <__NVIC_SetPriorityGrouping>
}
 800271a:	bf00      	nop
 800271c:	3708      	adds	r7, #8
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}

08002722 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002722:	b580      	push	{r7, lr}
 8002724:	b086      	sub	sp, #24
 8002726:	af00      	add	r7, sp, #0
 8002728:	4603      	mov	r3, r0
 800272a:	60b9      	str	r1, [r7, #8]
 800272c:	607a      	str	r2, [r7, #4]
 800272e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002730:	2300      	movs	r3, #0
 8002732:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002734:	f7ff ff5c 	bl	80025f0 <__NVIC_GetPriorityGrouping>
 8002738:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	68b9      	ldr	r1, [r7, #8]
 800273e:	6978      	ldr	r0, [r7, #20]
 8002740:	f7ff ff8e 	bl	8002660 <NVIC_EncodePriority>
 8002744:	4602      	mov	r2, r0
 8002746:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800274a:	4611      	mov	r1, r2
 800274c:	4618      	mov	r0, r3
 800274e:	f7ff ff5d 	bl	800260c <__NVIC_SetPriority>
}
 8002752:	bf00      	nop
 8002754:	3718      	adds	r7, #24
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}

0800275a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800275a:	b580      	push	{r7, lr}
 800275c:	b082      	sub	sp, #8
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f7ff ffb0 	bl	80026c8 <SysTick_Config>
 8002768:	4603      	mov	r3, r0
}
 800276a:	4618      	mov	r0, r3
 800276c:	3708      	adds	r7, #8
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
	...

08002774 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b086      	sub	sp, #24
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d101      	bne.n	8002786 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e267      	b.n	8002c56 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0301 	and.w	r3, r3, #1
 800278e:	2b00      	cmp	r3, #0
 8002790:	d075      	beq.n	800287e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002792:	4b88      	ldr	r3, [pc, #544]	; (80029b4 <HAL_RCC_OscConfig+0x240>)
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	f003 030c 	and.w	r3, r3, #12
 800279a:	2b04      	cmp	r3, #4
 800279c:	d00c      	beq.n	80027b8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800279e:	4b85      	ldr	r3, [pc, #532]	; (80029b4 <HAL_RCC_OscConfig+0x240>)
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80027a6:	2b08      	cmp	r3, #8
 80027a8:	d112      	bne.n	80027d0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027aa:	4b82      	ldr	r3, [pc, #520]	; (80029b4 <HAL_RCC_OscConfig+0x240>)
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027b6:	d10b      	bne.n	80027d0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027b8:	4b7e      	ldr	r3, [pc, #504]	; (80029b4 <HAL_RCC_OscConfig+0x240>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d05b      	beq.n	800287c <HAL_RCC_OscConfig+0x108>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d157      	bne.n	800287c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e242      	b.n	8002c56 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027d8:	d106      	bne.n	80027e8 <HAL_RCC_OscConfig+0x74>
 80027da:	4b76      	ldr	r3, [pc, #472]	; (80029b4 <HAL_RCC_OscConfig+0x240>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a75      	ldr	r2, [pc, #468]	; (80029b4 <HAL_RCC_OscConfig+0x240>)
 80027e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027e4:	6013      	str	r3, [r2, #0]
 80027e6:	e01d      	b.n	8002824 <HAL_RCC_OscConfig+0xb0>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027f0:	d10c      	bne.n	800280c <HAL_RCC_OscConfig+0x98>
 80027f2:	4b70      	ldr	r3, [pc, #448]	; (80029b4 <HAL_RCC_OscConfig+0x240>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a6f      	ldr	r2, [pc, #444]	; (80029b4 <HAL_RCC_OscConfig+0x240>)
 80027f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027fc:	6013      	str	r3, [r2, #0]
 80027fe:	4b6d      	ldr	r3, [pc, #436]	; (80029b4 <HAL_RCC_OscConfig+0x240>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a6c      	ldr	r2, [pc, #432]	; (80029b4 <HAL_RCC_OscConfig+0x240>)
 8002804:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002808:	6013      	str	r3, [r2, #0]
 800280a:	e00b      	b.n	8002824 <HAL_RCC_OscConfig+0xb0>
 800280c:	4b69      	ldr	r3, [pc, #420]	; (80029b4 <HAL_RCC_OscConfig+0x240>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a68      	ldr	r2, [pc, #416]	; (80029b4 <HAL_RCC_OscConfig+0x240>)
 8002812:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002816:	6013      	str	r3, [r2, #0]
 8002818:	4b66      	ldr	r3, [pc, #408]	; (80029b4 <HAL_RCC_OscConfig+0x240>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a65      	ldr	r2, [pc, #404]	; (80029b4 <HAL_RCC_OscConfig+0x240>)
 800281e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002822:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d013      	beq.n	8002854 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800282c:	f7ff fe8c 	bl	8002548 <HAL_GetTick>
 8002830:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002832:	e008      	b.n	8002846 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002834:	f7ff fe88 	bl	8002548 <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	2b64      	cmp	r3, #100	; 0x64
 8002840:	d901      	bls.n	8002846 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e207      	b.n	8002c56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002846:	4b5b      	ldr	r3, [pc, #364]	; (80029b4 <HAL_RCC_OscConfig+0x240>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d0f0      	beq.n	8002834 <HAL_RCC_OscConfig+0xc0>
 8002852:	e014      	b.n	800287e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002854:	f7ff fe78 	bl	8002548 <HAL_GetTick>
 8002858:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800285a:	e008      	b.n	800286e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800285c:	f7ff fe74 	bl	8002548 <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	2b64      	cmp	r3, #100	; 0x64
 8002868:	d901      	bls.n	800286e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e1f3      	b.n	8002c56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800286e:	4b51      	ldr	r3, [pc, #324]	; (80029b4 <HAL_RCC_OscConfig+0x240>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d1f0      	bne.n	800285c <HAL_RCC_OscConfig+0xe8>
 800287a:	e000      	b.n	800287e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800287c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0302 	and.w	r3, r3, #2
 8002886:	2b00      	cmp	r3, #0
 8002888:	d063      	beq.n	8002952 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800288a:	4b4a      	ldr	r3, [pc, #296]	; (80029b4 <HAL_RCC_OscConfig+0x240>)
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	f003 030c 	and.w	r3, r3, #12
 8002892:	2b00      	cmp	r3, #0
 8002894:	d00b      	beq.n	80028ae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002896:	4b47      	ldr	r3, [pc, #284]	; (80029b4 <HAL_RCC_OscConfig+0x240>)
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800289e:	2b08      	cmp	r3, #8
 80028a0:	d11c      	bne.n	80028dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028a2:	4b44      	ldr	r3, [pc, #272]	; (80029b4 <HAL_RCC_OscConfig+0x240>)
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d116      	bne.n	80028dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028ae:	4b41      	ldr	r3, [pc, #260]	; (80029b4 <HAL_RCC_OscConfig+0x240>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0302 	and.w	r3, r3, #2
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d005      	beq.n	80028c6 <HAL_RCC_OscConfig+0x152>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d001      	beq.n	80028c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e1c7      	b.n	8002c56 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028c6:	4b3b      	ldr	r3, [pc, #236]	; (80029b4 <HAL_RCC_OscConfig+0x240>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	691b      	ldr	r3, [r3, #16]
 80028d2:	00db      	lsls	r3, r3, #3
 80028d4:	4937      	ldr	r1, [pc, #220]	; (80029b4 <HAL_RCC_OscConfig+0x240>)
 80028d6:	4313      	orrs	r3, r2
 80028d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028da:	e03a      	b.n	8002952 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d020      	beq.n	8002926 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028e4:	4b34      	ldr	r3, [pc, #208]	; (80029b8 <HAL_RCC_OscConfig+0x244>)
 80028e6:	2201      	movs	r2, #1
 80028e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ea:	f7ff fe2d 	bl	8002548 <HAL_GetTick>
 80028ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028f0:	e008      	b.n	8002904 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028f2:	f7ff fe29 	bl	8002548 <HAL_GetTick>
 80028f6:	4602      	mov	r2, r0
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	d901      	bls.n	8002904 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002900:	2303      	movs	r3, #3
 8002902:	e1a8      	b.n	8002c56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002904:	4b2b      	ldr	r3, [pc, #172]	; (80029b4 <HAL_RCC_OscConfig+0x240>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0302 	and.w	r3, r3, #2
 800290c:	2b00      	cmp	r3, #0
 800290e:	d0f0      	beq.n	80028f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002910:	4b28      	ldr	r3, [pc, #160]	; (80029b4 <HAL_RCC_OscConfig+0x240>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	691b      	ldr	r3, [r3, #16]
 800291c:	00db      	lsls	r3, r3, #3
 800291e:	4925      	ldr	r1, [pc, #148]	; (80029b4 <HAL_RCC_OscConfig+0x240>)
 8002920:	4313      	orrs	r3, r2
 8002922:	600b      	str	r3, [r1, #0]
 8002924:	e015      	b.n	8002952 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002926:	4b24      	ldr	r3, [pc, #144]	; (80029b8 <HAL_RCC_OscConfig+0x244>)
 8002928:	2200      	movs	r2, #0
 800292a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800292c:	f7ff fe0c 	bl	8002548 <HAL_GetTick>
 8002930:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002932:	e008      	b.n	8002946 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002934:	f7ff fe08 	bl	8002548 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	2b02      	cmp	r3, #2
 8002940:	d901      	bls.n	8002946 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e187      	b.n	8002c56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002946:	4b1b      	ldr	r3, [pc, #108]	; (80029b4 <HAL_RCC_OscConfig+0x240>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0302 	and.w	r3, r3, #2
 800294e:	2b00      	cmp	r3, #0
 8002950:	d1f0      	bne.n	8002934 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0308 	and.w	r3, r3, #8
 800295a:	2b00      	cmp	r3, #0
 800295c:	d036      	beq.n	80029cc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	695b      	ldr	r3, [r3, #20]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d016      	beq.n	8002994 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002966:	4b15      	ldr	r3, [pc, #84]	; (80029bc <HAL_RCC_OscConfig+0x248>)
 8002968:	2201      	movs	r2, #1
 800296a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800296c:	f7ff fdec 	bl	8002548 <HAL_GetTick>
 8002970:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002972:	e008      	b.n	8002986 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002974:	f7ff fde8 	bl	8002548 <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	2b02      	cmp	r3, #2
 8002980:	d901      	bls.n	8002986 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e167      	b.n	8002c56 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002986:	4b0b      	ldr	r3, [pc, #44]	; (80029b4 <HAL_RCC_OscConfig+0x240>)
 8002988:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800298a:	f003 0302 	and.w	r3, r3, #2
 800298e:	2b00      	cmp	r3, #0
 8002990:	d0f0      	beq.n	8002974 <HAL_RCC_OscConfig+0x200>
 8002992:	e01b      	b.n	80029cc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002994:	4b09      	ldr	r3, [pc, #36]	; (80029bc <HAL_RCC_OscConfig+0x248>)
 8002996:	2200      	movs	r2, #0
 8002998:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800299a:	f7ff fdd5 	bl	8002548 <HAL_GetTick>
 800299e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029a0:	e00e      	b.n	80029c0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029a2:	f7ff fdd1 	bl	8002548 <HAL_GetTick>
 80029a6:	4602      	mov	r2, r0
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	2b02      	cmp	r3, #2
 80029ae:	d907      	bls.n	80029c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80029b0:	2303      	movs	r3, #3
 80029b2:	e150      	b.n	8002c56 <HAL_RCC_OscConfig+0x4e2>
 80029b4:	40023800 	.word	0x40023800
 80029b8:	42470000 	.word	0x42470000
 80029bc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029c0:	4b88      	ldr	r3, [pc, #544]	; (8002be4 <HAL_RCC_OscConfig+0x470>)
 80029c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029c4:	f003 0302 	and.w	r3, r3, #2
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d1ea      	bne.n	80029a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0304 	and.w	r3, r3, #4
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	f000 8097 	beq.w	8002b08 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029da:	2300      	movs	r3, #0
 80029dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029de:	4b81      	ldr	r3, [pc, #516]	; (8002be4 <HAL_RCC_OscConfig+0x470>)
 80029e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d10f      	bne.n	8002a0a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029ea:	2300      	movs	r3, #0
 80029ec:	60bb      	str	r3, [r7, #8]
 80029ee:	4b7d      	ldr	r3, [pc, #500]	; (8002be4 <HAL_RCC_OscConfig+0x470>)
 80029f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f2:	4a7c      	ldr	r2, [pc, #496]	; (8002be4 <HAL_RCC_OscConfig+0x470>)
 80029f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029f8:	6413      	str	r3, [r2, #64]	; 0x40
 80029fa:	4b7a      	ldr	r3, [pc, #488]	; (8002be4 <HAL_RCC_OscConfig+0x470>)
 80029fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a02:	60bb      	str	r3, [r7, #8]
 8002a04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a06:	2301      	movs	r3, #1
 8002a08:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a0a:	4b77      	ldr	r3, [pc, #476]	; (8002be8 <HAL_RCC_OscConfig+0x474>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d118      	bne.n	8002a48 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a16:	4b74      	ldr	r3, [pc, #464]	; (8002be8 <HAL_RCC_OscConfig+0x474>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a73      	ldr	r2, [pc, #460]	; (8002be8 <HAL_RCC_OscConfig+0x474>)
 8002a1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a22:	f7ff fd91 	bl	8002548 <HAL_GetTick>
 8002a26:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a28:	e008      	b.n	8002a3c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a2a:	f7ff fd8d 	bl	8002548 <HAL_GetTick>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	1ad3      	subs	r3, r2, r3
 8002a34:	2b02      	cmp	r3, #2
 8002a36:	d901      	bls.n	8002a3c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002a38:	2303      	movs	r3, #3
 8002a3a:	e10c      	b.n	8002c56 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a3c:	4b6a      	ldr	r3, [pc, #424]	; (8002be8 <HAL_RCC_OscConfig+0x474>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d0f0      	beq.n	8002a2a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d106      	bne.n	8002a5e <HAL_RCC_OscConfig+0x2ea>
 8002a50:	4b64      	ldr	r3, [pc, #400]	; (8002be4 <HAL_RCC_OscConfig+0x470>)
 8002a52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a54:	4a63      	ldr	r2, [pc, #396]	; (8002be4 <HAL_RCC_OscConfig+0x470>)
 8002a56:	f043 0301 	orr.w	r3, r3, #1
 8002a5a:	6713      	str	r3, [r2, #112]	; 0x70
 8002a5c:	e01c      	b.n	8002a98 <HAL_RCC_OscConfig+0x324>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	2b05      	cmp	r3, #5
 8002a64:	d10c      	bne.n	8002a80 <HAL_RCC_OscConfig+0x30c>
 8002a66:	4b5f      	ldr	r3, [pc, #380]	; (8002be4 <HAL_RCC_OscConfig+0x470>)
 8002a68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a6a:	4a5e      	ldr	r2, [pc, #376]	; (8002be4 <HAL_RCC_OscConfig+0x470>)
 8002a6c:	f043 0304 	orr.w	r3, r3, #4
 8002a70:	6713      	str	r3, [r2, #112]	; 0x70
 8002a72:	4b5c      	ldr	r3, [pc, #368]	; (8002be4 <HAL_RCC_OscConfig+0x470>)
 8002a74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a76:	4a5b      	ldr	r2, [pc, #364]	; (8002be4 <HAL_RCC_OscConfig+0x470>)
 8002a78:	f043 0301 	orr.w	r3, r3, #1
 8002a7c:	6713      	str	r3, [r2, #112]	; 0x70
 8002a7e:	e00b      	b.n	8002a98 <HAL_RCC_OscConfig+0x324>
 8002a80:	4b58      	ldr	r3, [pc, #352]	; (8002be4 <HAL_RCC_OscConfig+0x470>)
 8002a82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a84:	4a57      	ldr	r2, [pc, #348]	; (8002be4 <HAL_RCC_OscConfig+0x470>)
 8002a86:	f023 0301 	bic.w	r3, r3, #1
 8002a8a:	6713      	str	r3, [r2, #112]	; 0x70
 8002a8c:	4b55      	ldr	r3, [pc, #340]	; (8002be4 <HAL_RCC_OscConfig+0x470>)
 8002a8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a90:	4a54      	ldr	r2, [pc, #336]	; (8002be4 <HAL_RCC_OscConfig+0x470>)
 8002a92:	f023 0304 	bic.w	r3, r3, #4
 8002a96:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d015      	beq.n	8002acc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aa0:	f7ff fd52 	bl	8002548 <HAL_GetTick>
 8002aa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aa6:	e00a      	b.n	8002abe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002aa8:	f7ff fd4e 	bl	8002548 <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d901      	bls.n	8002abe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002aba:	2303      	movs	r3, #3
 8002abc:	e0cb      	b.n	8002c56 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002abe:	4b49      	ldr	r3, [pc, #292]	; (8002be4 <HAL_RCC_OscConfig+0x470>)
 8002ac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ac2:	f003 0302 	and.w	r3, r3, #2
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d0ee      	beq.n	8002aa8 <HAL_RCC_OscConfig+0x334>
 8002aca:	e014      	b.n	8002af6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002acc:	f7ff fd3c 	bl	8002548 <HAL_GetTick>
 8002ad0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ad2:	e00a      	b.n	8002aea <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ad4:	f7ff fd38 	bl	8002548 <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d901      	bls.n	8002aea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	e0b5      	b.n	8002c56 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002aea:	4b3e      	ldr	r3, [pc, #248]	; (8002be4 <HAL_RCC_OscConfig+0x470>)
 8002aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aee:	f003 0302 	and.w	r3, r3, #2
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d1ee      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002af6:	7dfb      	ldrb	r3, [r7, #23]
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d105      	bne.n	8002b08 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002afc:	4b39      	ldr	r3, [pc, #228]	; (8002be4 <HAL_RCC_OscConfig+0x470>)
 8002afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b00:	4a38      	ldr	r2, [pc, #224]	; (8002be4 <HAL_RCC_OscConfig+0x470>)
 8002b02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b06:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	699b      	ldr	r3, [r3, #24]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	f000 80a1 	beq.w	8002c54 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b12:	4b34      	ldr	r3, [pc, #208]	; (8002be4 <HAL_RCC_OscConfig+0x470>)
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	f003 030c 	and.w	r3, r3, #12
 8002b1a:	2b08      	cmp	r3, #8
 8002b1c:	d05c      	beq.n	8002bd8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	699b      	ldr	r3, [r3, #24]
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d141      	bne.n	8002baa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b26:	4b31      	ldr	r3, [pc, #196]	; (8002bec <HAL_RCC_OscConfig+0x478>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b2c:	f7ff fd0c 	bl	8002548 <HAL_GetTick>
 8002b30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b32:	e008      	b.n	8002b46 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b34:	f7ff fd08 	bl	8002548 <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d901      	bls.n	8002b46 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e087      	b.n	8002c56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b46:	4b27      	ldr	r3, [pc, #156]	; (8002be4 <HAL_RCC_OscConfig+0x470>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d1f0      	bne.n	8002b34 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	69da      	ldr	r2, [r3, #28]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6a1b      	ldr	r3, [r3, #32]
 8002b5a:	431a      	orrs	r2, r3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b60:	019b      	lsls	r3, r3, #6
 8002b62:	431a      	orrs	r2, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b68:	085b      	lsrs	r3, r3, #1
 8002b6a:	3b01      	subs	r3, #1
 8002b6c:	041b      	lsls	r3, r3, #16
 8002b6e:	431a      	orrs	r2, r3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b74:	061b      	lsls	r3, r3, #24
 8002b76:	491b      	ldr	r1, [pc, #108]	; (8002be4 <HAL_RCC_OscConfig+0x470>)
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b7c:	4b1b      	ldr	r3, [pc, #108]	; (8002bec <HAL_RCC_OscConfig+0x478>)
 8002b7e:	2201      	movs	r2, #1
 8002b80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b82:	f7ff fce1 	bl	8002548 <HAL_GetTick>
 8002b86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b88:	e008      	b.n	8002b9c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b8a:	f7ff fcdd 	bl	8002548 <HAL_GetTick>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	1ad3      	subs	r3, r2, r3
 8002b94:	2b02      	cmp	r3, #2
 8002b96:	d901      	bls.n	8002b9c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002b98:	2303      	movs	r3, #3
 8002b9a:	e05c      	b.n	8002c56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b9c:	4b11      	ldr	r3, [pc, #68]	; (8002be4 <HAL_RCC_OscConfig+0x470>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d0f0      	beq.n	8002b8a <HAL_RCC_OscConfig+0x416>
 8002ba8:	e054      	b.n	8002c54 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002baa:	4b10      	ldr	r3, [pc, #64]	; (8002bec <HAL_RCC_OscConfig+0x478>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb0:	f7ff fcca 	bl	8002548 <HAL_GetTick>
 8002bb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bb6:	e008      	b.n	8002bca <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bb8:	f7ff fcc6 	bl	8002548 <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d901      	bls.n	8002bca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e045      	b.n	8002c56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bca:	4b06      	ldr	r3, [pc, #24]	; (8002be4 <HAL_RCC_OscConfig+0x470>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d1f0      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x444>
 8002bd6:	e03d      	b.n	8002c54 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	699b      	ldr	r3, [r3, #24]
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d107      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e038      	b.n	8002c56 <HAL_RCC_OscConfig+0x4e2>
 8002be4:	40023800 	.word	0x40023800
 8002be8:	40007000 	.word	0x40007000
 8002bec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002bf0:	4b1b      	ldr	r3, [pc, #108]	; (8002c60 <HAL_RCC_OscConfig+0x4ec>)
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	699b      	ldr	r3, [r3, #24]
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d028      	beq.n	8002c50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d121      	bne.n	8002c50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d11a      	bne.n	8002c50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c1a:	68fa      	ldr	r2, [r7, #12]
 8002c1c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c20:	4013      	ands	r3, r2
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c26:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d111      	bne.n	8002c50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c36:	085b      	lsrs	r3, r3, #1
 8002c38:	3b01      	subs	r3, #1
 8002c3a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d107      	bne.n	8002c50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c4a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d001      	beq.n	8002c54 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e000      	b.n	8002c56 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002c54:	2300      	movs	r3, #0
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3718      	adds	r7, #24
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	40023800 	.word	0x40023800

08002c64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b084      	sub	sp, #16
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d101      	bne.n	8002c78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e0cc      	b.n	8002e12 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c78:	4b68      	ldr	r3, [pc, #416]	; (8002e1c <HAL_RCC_ClockConfig+0x1b8>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0307 	and.w	r3, r3, #7
 8002c80:	683a      	ldr	r2, [r7, #0]
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d90c      	bls.n	8002ca0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c86:	4b65      	ldr	r3, [pc, #404]	; (8002e1c <HAL_RCC_ClockConfig+0x1b8>)
 8002c88:	683a      	ldr	r2, [r7, #0]
 8002c8a:	b2d2      	uxtb	r2, r2
 8002c8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c8e:	4b63      	ldr	r3, [pc, #396]	; (8002e1c <HAL_RCC_ClockConfig+0x1b8>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0307 	and.w	r3, r3, #7
 8002c96:	683a      	ldr	r2, [r7, #0]
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d001      	beq.n	8002ca0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e0b8      	b.n	8002e12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 0302 	and.w	r3, r3, #2
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d020      	beq.n	8002cee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0304 	and.w	r3, r3, #4
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d005      	beq.n	8002cc4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cb8:	4b59      	ldr	r3, [pc, #356]	; (8002e20 <HAL_RCC_ClockConfig+0x1bc>)
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	4a58      	ldr	r2, [pc, #352]	; (8002e20 <HAL_RCC_ClockConfig+0x1bc>)
 8002cbe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002cc2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0308 	and.w	r3, r3, #8
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d005      	beq.n	8002cdc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002cd0:	4b53      	ldr	r3, [pc, #332]	; (8002e20 <HAL_RCC_ClockConfig+0x1bc>)
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	4a52      	ldr	r2, [pc, #328]	; (8002e20 <HAL_RCC_ClockConfig+0x1bc>)
 8002cd6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002cda:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cdc:	4b50      	ldr	r3, [pc, #320]	; (8002e20 <HAL_RCC_ClockConfig+0x1bc>)
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	494d      	ldr	r1, [pc, #308]	; (8002e20 <HAL_RCC_ClockConfig+0x1bc>)
 8002cea:	4313      	orrs	r3, r2
 8002cec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0301 	and.w	r3, r3, #1
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d044      	beq.n	8002d84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d107      	bne.n	8002d12 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d02:	4b47      	ldr	r3, [pc, #284]	; (8002e20 <HAL_RCC_ClockConfig+0x1bc>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d119      	bne.n	8002d42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e07f      	b.n	8002e12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	d003      	beq.n	8002d22 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d1e:	2b03      	cmp	r3, #3
 8002d20:	d107      	bne.n	8002d32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d22:	4b3f      	ldr	r3, [pc, #252]	; (8002e20 <HAL_RCC_ClockConfig+0x1bc>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d109      	bne.n	8002d42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e06f      	b.n	8002e12 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d32:	4b3b      	ldr	r3, [pc, #236]	; (8002e20 <HAL_RCC_ClockConfig+0x1bc>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0302 	and.w	r3, r3, #2
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d101      	bne.n	8002d42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e067      	b.n	8002e12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d42:	4b37      	ldr	r3, [pc, #220]	; (8002e20 <HAL_RCC_ClockConfig+0x1bc>)
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	f023 0203 	bic.w	r2, r3, #3
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	4934      	ldr	r1, [pc, #208]	; (8002e20 <HAL_RCC_ClockConfig+0x1bc>)
 8002d50:	4313      	orrs	r3, r2
 8002d52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d54:	f7ff fbf8 	bl	8002548 <HAL_GetTick>
 8002d58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d5a:	e00a      	b.n	8002d72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d5c:	f7ff fbf4 	bl	8002548 <HAL_GetTick>
 8002d60:	4602      	mov	r2, r0
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d901      	bls.n	8002d72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	e04f      	b.n	8002e12 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d72:	4b2b      	ldr	r3, [pc, #172]	; (8002e20 <HAL_RCC_ClockConfig+0x1bc>)
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	f003 020c 	and.w	r2, r3, #12
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d1eb      	bne.n	8002d5c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d84:	4b25      	ldr	r3, [pc, #148]	; (8002e1c <HAL_RCC_ClockConfig+0x1b8>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0307 	and.w	r3, r3, #7
 8002d8c:	683a      	ldr	r2, [r7, #0]
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d20c      	bcs.n	8002dac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d92:	4b22      	ldr	r3, [pc, #136]	; (8002e1c <HAL_RCC_ClockConfig+0x1b8>)
 8002d94:	683a      	ldr	r2, [r7, #0]
 8002d96:	b2d2      	uxtb	r2, r2
 8002d98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d9a:	4b20      	ldr	r3, [pc, #128]	; (8002e1c <HAL_RCC_ClockConfig+0x1b8>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0307 	and.w	r3, r3, #7
 8002da2:	683a      	ldr	r2, [r7, #0]
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d001      	beq.n	8002dac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e032      	b.n	8002e12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0304 	and.w	r3, r3, #4
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d008      	beq.n	8002dca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002db8:	4b19      	ldr	r3, [pc, #100]	; (8002e20 <HAL_RCC_ClockConfig+0x1bc>)
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	4916      	ldr	r1, [pc, #88]	; (8002e20 <HAL_RCC_ClockConfig+0x1bc>)
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0308 	and.w	r3, r3, #8
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d009      	beq.n	8002dea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002dd6:	4b12      	ldr	r3, [pc, #72]	; (8002e20 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	691b      	ldr	r3, [r3, #16]
 8002de2:	00db      	lsls	r3, r3, #3
 8002de4:	490e      	ldr	r1, [pc, #56]	; (8002e20 <HAL_RCC_ClockConfig+0x1bc>)
 8002de6:	4313      	orrs	r3, r2
 8002de8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002dea:	f000 f821 	bl	8002e30 <HAL_RCC_GetSysClockFreq>
 8002dee:	4602      	mov	r2, r0
 8002df0:	4b0b      	ldr	r3, [pc, #44]	; (8002e20 <HAL_RCC_ClockConfig+0x1bc>)
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	091b      	lsrs	r3, r3, #4
 8002df6:	f003 030f 	and.w	r3, r3, #15
 8002dfa:	490a      	ldr	r1, [pc, #40]	; (8002e24 <HAL_RCC_ClockConfig+0x1c0>)
 8002dfc:	5ccb      	ldrb	r3, [r1, r3]
 8002dfe:	fa22 f303 	lsr.w	r3, r2, r3
 8002e02:	4a09      	ldr	r2, [pc, #36]	; (8002e28 <HAL_RCC_ClockConfig+0x1c4>)
 8002e04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002e06:	4b09      	ldr	r3, [pc, #36]	; (8002e2c <HAL_RCC_ClockConfig+0x1c8>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f7ff fb58 	bl	80024c0 <HAL_InitTick>

  return HAL_OK;
 8002e10:	2300      	movs	r3, #0
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3710      	adds	r7, #16
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	40023c00 	.word	0x40023c00
 8002e20:	40023800 	.word	0x40023800
 8002e24:	08006c94 	.word	0x08006c94
 8002e28:	20000000 	.word	0x20000000
 8002e2c:	20000004 	.word	0x20000004

08002e30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e34:	b094      	sub	sp, #80	; 0x50
 8002e36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	647b      	str	r3, [r7, #68]	; 0x44
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e40:	2300      	movs	r3, #0
 8002e42:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002e44:	2300      	movs	r3, #0
 8002e46:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e48:	4b79      	ldr	r3, [pc, #484]	; (8003030 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	f003 030c 	and.w	r3, r3, #12
 8002e50:	2b08      	cmp	r3, #8
 8002e52:	d00d      	beq.n	8002e70 <HAL_RCC_GetSysClockFreq+0x40>
 8002e54:	2b08      	cmp	r3, #8
 8002e56:	f200 80e1 	bhi.w	800301c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d002      	beq.n	8002e64 <HAL_RCC_GetSysClockFreq+0x34>
 8002e5e:	2b04      	cmp	r3, #4
 8002e60:	d003      	beq.n	8002e6a <HAL_RCC_GetSysClockFreq+0x3a>
 8002e62:	e0db      	b.n	800301c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e64:	4b73      	ldr	r3, [pc, #460]	; (8003034 <HAL_RCC_GetSysClockFreq+0x204>)
 8002e66:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002e68:	e0db      	b.n	8003022 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e6a:	4b73      	ldr	r3, [pc, #460]	; (8003038 <HAL_RCC_GetSysClockFreq+0x208>)
 8002e6c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e6e:	e0d8      	b.n	8003022 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e70:	4b6f      	ldr	r3, [pc, #444]	; (8003030 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e78:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e7a:	4b6d      	ldr	r3, [pc, #436]	; (8003030 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d063      	beq.n	8002f4e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e86:	4b6a      	ldr	r3, [pc, #424]	; (8003030 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	099b      	lsrs	r3, r3, #6
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e90:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e98:	633b      	str	r3, [r7, #48]	; 0x30
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	637b      	str	r3, [r7, #52]	; 0x34
 8002e9e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002ea2:	4622      	mov	r2, r4
 8002ea4:	462b      	mov	r3, r5
 8002ea6:	f04f 0000 	mov.w	r0, #0
 8002eaa:	f04f 0100 	mov.w	r1, #0
 8002eae:	0159      	lsls	r1, r3, #5
 8002eb0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002eb4:	0150      	lsls	r0, r2, #5
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	460b      	mov	r3, r1
 8002eba:	4621      	mov	r1, r4
 8002ebc:	1a51      	subs	r1, r2, r1
 8002ebe:	6139      	str	r1, [r7, #16]
 8002ec0:	4629      	mov	r1, r5
 8002ec2:	eb63 0301 	sbc.w	r3, r3, r1
 8002ec6:	617b      	str	r3, [r7, #20]
 8002ec8:	f04f 0200 	mov.w	r2, #0
 8002ecc:	f04f 0300 	mov.w	r3, #0
 8002ed0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ed4:	4659      	mov	r1, fp
 8002ed6:	018b      	lsls	r3, r1, #6
 8002ed8:	4651      	mov	r1, sl
 8002eda:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ede:	4651      	mov	r1, sl
 8002ee0:	018a      	lsls	r2, r1, #6
 8002ee2:	4651      	mov	r1, sl
 8002ee4:	ebb2 0801 	subs.w	r8, r2, r1
 8002ee8:	4659      	mov	r1, fp
 8002eea:	eb63 0901 	sbc.w	r9, r3, r1
 8002eee:	f04f 0200 	mov.w	r2, #0
 8002ef2:	f04f 0300 	mov.w	r3, #0
 8002ef6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002efa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002efe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f02:	4690      	mov	r8, r2
 8002f04:	4699      	mov	r9, r3
 8002f06:	4623      	mov	r3, r4
 8002f08:	eb18 0303 	adds.w	r3, r8, r3
 8002f0c:	60bb      	str	r3, [r7, #8]
 8002f0e:	462b      	mov	r3, r5
 8002f10:	eb49 0303 	adc.w	r3, r9, r3
 8002f14:	60fb      	str	r3, [r7, #12]
 8002f16:	f04f 0200 	mov.w	r2, #0
 8002f1a:	f04f 0300 	mov.w	r3, #0
 8002f1e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002f22:	4629      	mov	r1, r5
 8002f24:	024b      	lsls	r3, r1, #9
 8002f26:	4621      	mov	r1, r4
 8002f28:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f2c:	4621      	mov	r1, r4
 8002f2e:	024a      	lsls	r2, r1, #9
 8002f30:	4610      	mov	r0, r2
 8002f32:	4619      	mov	r1, r3
 8002f34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f36:	2200      	movs	r2, #0
 8002f38:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f3a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f3c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002f40:	f7fd fe32 	bl	8000ba8 <__aeabi_uldivmod>
 8002f44:	4602      	mov	r2, r0
 8002f46:	460b      	mov	r3, r1
 8002f48:	4613      	mov	r3, r2
 8002f4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f4c:	e058      	b.n	8003000 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f4e:	4b38      	ldr	r3, [pc, #224]	; (8003030 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	099b      	lsrs	r3, r3, #6
 8002f54:	2200      	movs	r2, #0
 8002f56:	4618      	mov	r0, r3
 8002f58:	4611      	mov	r1, r2
 8002f5a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002f5e:	623b      	str	r3, [r7, #32]
 8002f60:	2300      	movs	r3, #0
 8002f62:	627b      	str	r3, [r7, #36]	; 0x24
 8002f64:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002f68:	4642      	mov	r2, r8
 8002f6a:	464b      	mov	r3, r9
 8002f6c:	f04f 0000 	mov.w	r0, #0
 8002f70:	f04f 0100 	mov.w	r1, #0
 8002f74:	0159      	lsls	r1, r3, #5
 8002f76:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f7a:	0150      	lsls	r0, r2, #5
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	460b      	mov	r3, r1
 8002f80:	4641      	mov	r1, r8
 8002f82:	ebb2 0a01 	subs.w	sl, r2, r1
 8002f86:	4649      	mov	r1, r9
 8002f88:	eb63 0b01 	sbc.w	fp, r3, r1
 8002f8c:	f04f 0200 	mov.w	r2, #0
 8002f90:	f04f 0300 	mov.w	r3, #0
 8002f94:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002f98:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002f9c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002fa0:	ebb2 040a 	subs.w	r4, r2, sl
 8002fa4:	eb63 050b 	sbc.w	r5, r3, fp
 8002fa8:	f04f 0200 	mov.w	r2, #0
 8002fac:	f04f 0300 	mov.w	r3, #0
 8002fb0:	00eb      	lsls	r3, r5, #3
 8002fb2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002fb6:	00e2      	lsls	r2, r4, #3
 8002fb8:	4614      	mov	r4, r2
 8002fba:	461d      	mov	r5, r3
 8002fbc:	4643      	mov	r3, r8
 8002fbe:	18e3      	adds	r3, r4, r3
 8002fc0:	603b      	str	r3, [r7, #0]
 8002fc2:	464b      	mov	r3, r9
 8002fc4:	eb45 0303 	adc.w	r3, r5, r3
 8002fc8:	607b      	str	r3, [r7, #4]
 8002fca:	f04f 0200 	mov.w	r2, #0
 8002fce:	f04f 0300 	mov.w	r3, #0
 8002fd2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002fd6:	4629      	mov	r1, r5
 8002fd8:	028b      	lsls	r3, r1, #10
 8002fda:	4621      	mov	r1, r4
 8002fdc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002fe0:	4621      	mov	r1, r4
 8002fe2:	028a      	lsls	r2, r1, #10
 8002fe4:	4610      	mov	r0, r2
 8002fe6:	4619      	mov	r1, r3
 8002fe8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fea:	2200      	movs	r2, #0
 8002fec:	61bb      	str	r3, [r7, #24]
 8002fee:	61fa      	str	r2, [r7, #28]
 8002ff0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ff4:	f7fd fdd8 	bl	8000ba8 <__aeabi_uldivmod>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	460b      	mov	r3, r1
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003000:	4b0b      	ldr	r3, [pc, #44]	; (8003030 <HAL_RCC_GetSysClockFreq+0x200>)
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	0c1b      	lsrs	r3, r3, #16
 8003006:	f003 0303 	and.w	r3, r3, #3
 800300a:	3301      	adds	r3, #1
 800300c:	005b      	lsls	r3, r3, #1
 800300e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003010:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003012:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003014:	fbb2 f3f3 	udiv	r3, r2, r3
 8003018:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800301a:	e002      	b.n	8003022 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800301c:	4b05      	ldr	r3, [pc, #20]	; (8003034 <HAL_RCC_GetSysClockFreq+0x204>)
 800301e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003020:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003022:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003024:	4618      	mov	r0, r3
 8003026:	3750      	adds	r7, #80	; 0x50
 8003028:	46bd      	mov	sp, r7
 800302a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800302e:	bf00      	nop
 8003030:	40023800 	.word	0x40023800
 8003034:	00f42400 	.word	0x00f42400
 8003038:	007a1200 	.word	0x007a1200

0800303c <LL_GPIO_SetPinMode>:
{
 800303c:	b480      	push	{r7}
 800303e:	b089      	sub	sp, #36	; 0x24
 8003040:	af00      	add	r7, sp, #0
 8003042:	60f8      	str	r0, [r7, #12]
 8003044:	60b9      	str	r1, [r7, #8]
 8003046:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	fa93 f3a3 	rbit	r3, r3
 8003056:	613b      	str	r3, [r7, #16]
  return result;
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	fab3 f383 	clz	r3, r3
 800305e:	b2db      	uxtb	r3, r3
 8003060:	005b      	lsls	r3, r3, #1
 8003062:	2103      	movs	r1, #3
 8003064:	fa01 f303 	lsl.w	r3, r1, r3
 8003068:	43db      	mvns	r3, r3
 800306a:	401a      	ands	r2, r3
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	fa93 f3a3 	rbit	r3, r3
 8003076:	61bb      	str	r3, [r7, #24]
  return result;
 8003078:	69bb      	ldr	r3, [r7, #24]
 800307a:	fab3 f383 	clz	r3, r3
 800307e:	b2db      	uxtb	r3, r3
 8003080:	005b      	lsls	r3, r3, #1
 8003082:	6879      	ldr	r1, [r7, #4]
 8003084:	fa01 f303 	lsl.w	r3, r1, r3
 8003088:	431a      	orrs	r2, r3
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	601a      	str	r2, [r3, #0]
}
 800308e:	bf00      	nop
 8003090:	3724      	adds	r7, #36	; 0x24
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr

0800309a <LL_GPIO_SetPinOutputType>:
{
 800309a:	b480      	push	{r7}
 800309c:	b085      	sub	sp, #20
 800309e:	af00      	add	r7, sp, #0
 80030a0:	60f8      	str	r0, [r7, #12]
 80030a2:	60b9      	str	r1, [r7, #8]
 80030a4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	685a      	ldr	r2, [r3, #4]
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	43db      	mvns	r3, r3
 80030ae:	401a      	ands	r2, r3
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	6879      	ldr	r1, [r7, #4]
 80030b4:	fb01 f303 	mul.w	r3, r1, r3
 80030b8:	431a      	orrs	r2, r3
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	605a      	str	r2, [r3, #4]
}
 80030be:	bf00      	nop
 80030c0:	3714      	adds	r7, #20
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr

080030ca <LL_GPIO_SetPinSpeed>:
{
 80030ca:	b480      	push	{r7}
 80030cc:	b089      	sub	sp, #36	; 0x24
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	60f8      	str	r0, [r7, #12]
 80030d2:	60b9      	str	r1, [r7, #8]
 80030d4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	689a      	ldr	r2, [r3, #8]
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	fa93 f3a3 	rbit	r3, r3
 80030e4:	613b      	str	r3, [r7, #16]
  return result;
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	fab3 f383 	clz	r3, r3
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	005b      	lsls	r3, r3, #1
 80030f0:	2103      	movs	r1, #3
 80030f2:	fa01 f303 	lsl.w	r3, r1, r3
 80030f6:	43db      	mvns	r3, r3
 80030f8:	401a      	ands	r2, r3
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	fa93 f3a3 	rbit	r3, r3
 8003104:	61bb      	str	r3, [r7, #24]
  return result;
 8003106:	69bb      	ldr	r3, [r7, #24]
 8003108:	fab3 f383 	clz	r3, r3
 800310c:	b2db      	uxtb	r3, r3
 800310e:	005b      	lsls	r3, r3, #1
 8003110:	6879      	ldr	r1, [r7, #4]
 8003112:	fa01 f303 	lsl.w	r3, r1, r3
 8003116:	431a      	orrs	r2, r3
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	609a      	str	r2, [r3, #8]
}
 800311c:	bf00      	nop
 800311e:	3724      	adds	r7, #36	; 0x24
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr

08003128 <LL_GPIO_SetPinPull>:
{
 8003128:	b480      	push	{r7}
 800312a:	b089      	sub	sp, #36	; 0x24
 800312c:	af00      	add	r7, sp, #0
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	60b9      	str	r1, [r7, #8]
 8003132:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	68da      	ldr	r2, [r3, #12]
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	fa93 f3a3 	rbit	r3, r3
 8003142:	613b      	str	r3, [r7, #16]
  return result;
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	fab3 f383 	clz	r3, r3
 800314a:	b2db      	uxtb	r3, r3
 800314c:	005b      	lsls	r3, r3, #1
 800314e:	2103      	movs	r1, #3
 8003150:	fa01 f303 	lsl.w	r3, r1, r3
 8003154:	43db      	mvns	r3, r3
 8003156:	401a      	ands	r2, r3
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800315c:	69fb      	ldr	r3, [r7, #28]
 800315e:	fa93 f3a3 	rbit	r3, r3
 8003162:	61bb      	str	r3, [r7, #24]
  return result;
 8003164:	69bb      	ldr	r3, [r7, #24]
 8003166:	fab3 f383 	clz	r3, r3
 800316a:	b2db      	uxtb	r3, r3
 800316c:	005b      	lsls	r3, r3, #1
 800316e:	6879      	ldr	r1, [r7, #4]
 8003170:	fa01 f303 	lsl.w	r3, r1, r3
 8003174:	431a      	orrs	r2, r3
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	60da      	str	r2, [r3, #12]
}
 800317a:	bf00      	nop
 800317c:	3724      	adds	r7, #36	; 0x24
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr

08003186 <LL_GPIO_SetAFPin_0_7>:
{
 8003186:	b480      	push	{r7}
 8003188:	b089      	sub	sp, #36	; 0x24
 800318a:	af00      	add	r7, sp, #0
 800318c:	60f8      	str	r0, [r7, #12]
 800318e:	60b9      	str	r1, [r7, #8]
 8003190:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	6a1a      	ldr	r2, [r3, #32]
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	fa93 f3a3 	rbit	r3, r3
 80031a0:	613b      	str	r3, [r7, #16]
  return result;
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	fab3 f383 	clz	r3, r3
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	210f      	movs	r1, #15
 80031ae:	fa01 f303 	lsl.w	r3, r1, r3
 80031b2:	43db      	mvns	r3, r3
 80031b4:	401a      	ands	r2, r3
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	fa93 f3a3 	rbit	r3, r3
 80031c0:	61bb      	str	r3, [r7, #24]
  return result;
 80031c2:	69bb      	ldr	r3, [r7, #24]
 80031c4:	fab3 f383 	clz	r3, r3
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	6879      	ldr	r1, [r7, #4]
 80031ce:	fa01 f303 	lsl.w	r3, r1, r3
 80031d2:	431a      	orrs	r2, r3
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	621a      	str	r2, [r3, #32]
}
 80031d8:	bf00      	nop
 80031da:	3724      	adds	r7, #36	; 0x24
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr

080031e4 <LL_GPIO_SetAFPin_8_15>:
{
 80031e4:	b480      	push	{r7}
 80031e6:	b089      	sub	sp, #36	; 0x24
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	60f8      	str	r0, [r7, #12]
 80031ec:	60b9      	str	r1, [r7, #8]
 80031ee:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	0a1b      	lsrs	r3, r3, #8
 80031f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	fa93 f3a3 	rbit	r3, r3
 8003200:	613b      	str	r3, [r7, #16]
  return result;
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	fab3 f383 	clz	r3, r3
 8003208:	b2db      	uxtb	r3, r3
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	210f      	movs	r1, #15
 800320e:	fa01 f303 	lsl.w	r3, r1, r3
 8003212:	43db      	mvns	r3, r3
 8003214:	401a      	ands	r2, r3
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	0a1b      	lsrs	r3, r3, #8
 800321a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800321c:	69fb      	ldr	r3, [r7, #28]
 800321e:	fa93 f3a3 	rbit	r3, r3
 8003222:	61bb      	str	r3, [r7, #24]
  return result;
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	fab3 f383 	clz	r3, r3
 800322a:	b2db      	uxtb	r3, r3
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	6879      	ldr	r1, [r7, #4]
 8003230:	fa01 f303 	lsl.w	r3, r1, r3
 8003234:	431a      	orrs	r2, r3
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	625a      	str	r2, [r3, #36]	; 0x24
}
 800323a:	bf00      	nop
 800323c:	3724      	adds	r7, #36	; 0x24
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr

08003246 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8003246:	b580      	push	{r7, lr}
 8003248:	b088      	sub	sp, #32
 800324a:	af00      	add	r7, sp, #0
 800324c:	6078      	str	r0, [r7, #4]
 800324e:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8003250:	2300      	movs	r3, #0
 8003252:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8003254:	2300      	movs	r3, #0
 8003256:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	fa93 f3a3 	rbit	r3, r3
 8003264:	613b      	str	r3, [r7, #16]
  return result;
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	fab3 f383 	clz	r3, r3
 800326c:	b2db      	uxtb	r3, r3
 800326e:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8003270:	e050      	b.n	8003314 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	2101      	movs	r1, #1
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	fa01 f303 	lsl.w	r3, r1, r3
 800327e:	4013      	ands	r3, r2
 8003280:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 8003282:	69bb      	ldr	r3, [r7, #24]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d042      	beq.n	800330e <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	2b01      	cmp	r3, #1
 800328e:	d003      	beq.n	8003298 <LL_GPIO_Init+0x52>
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	2b02      	cmp	r3, #2
 8003296:	d10d      	bne.n	80032b4 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	461a      	mov	r2, r3
 800329e:	69b9      	ldr	r1, [r7, #24]
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	f7ff ff12 	bl	80030ca <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	461a      	mov	r2, r3
 80032ac:	69b9      	ldr	r1, [r7, #24]
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f7ff fef3 	bl	800309a <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	691b      	ldr	r3, [r3, #16]
 80032b8:	461a      	mov	r2, r3
 80032ba:	69b9      	ldr	r1, [r7, #24]
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	f7ff ff33 	bl	8003128 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	2b02      	cmp	r3, #2
 80032c8:	d11a      	bne.n	8003300 <LL_GPIO_Init+0xba>
 80032ca:	69bb      	ldr	r3, [r7, #24]
 80032cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	fa93 f3a3 	rbit	r3, r3
 80032d4:	60bb      	str	r3, [r7, #8]
  return result;
 80032d6:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80032d8:	fab3 f383 	clz	r3, r3
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	2b07      	cmp	r3, #7
 80032e0:	d807      	bhi.n	80032f2 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	695b      	ldr	r3, [r3, #20]
 80032e6:	461a      	mov	r2, r3
 80032e8:	69b9      	ldr	r1, [r7, #24]
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f7ff ff4b 	bl	8003186 <LL_GPIO_SetAFPin_0_7>
 80032f0:	e006      	b.n	8003300 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	695b      	ldr	r3, [r3, #20]
 80032f6:	461a      	mov	r2, r3
 80032f8:	69b9      	ldr	r1, [r7, #24]
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f7ff ff72 	bl	80031e4 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	461a      	mov	r2, r3
 8003306:	69b9      	ldr	r1, [r7, #24]
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f7ff fe97 	bl	800303c <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	3301      	adds	r3, #1
 8003312:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	69fb      	ldr	r3, [r7, #28]
 800331a:	fa22 f303 	lsr.w	r3, r2, r3
 800331e:	2b00      	cmp	r3, #0
 8003320:	d1a7      	bne.n	8003272 <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8003322:	2300      	movs	r3, #0
}
 8003324:	4618      	mov	r0, r3
 8003326:	3720      	adds	r7, #32
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}

0800332c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800332c:	b480      	push	{r7}
 800332e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003330:	4b04      	ldr	r3, [pc, #16]	; (8003344 <LL_RCC_GetSysClkSource+0x18>)
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	f003 030c 	and.w	r3, r3, #12
}
 8003338:	4618      	mov	r0, r3
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr
 8003342:	bf00      	nop
 8003344:	40023800 	.word	0x40023800

08003348 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8003348:	b480      	push	{r7}
 800334a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800334c:	4b04      	ldr	r3, [pc, #16]	; (8003360 <LL_RCC_GetAHBPrescaler+0x18>)
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003354:	4618      	mov	r0, r3
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr
 800335e:	bf00      	nop
 8003360:	40023800 	.word	0x40023800

08003364 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003364:	b480      	push	{r7}
 8003366:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003368:	4b04      	ldr	r3, [pc, #16]	; (800337c <LL_RCC_GetAPB1Prescaler+0x18>)
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8003370:	4618      	mov	r0, r3
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr
 800337a:	bf00      	nop
 800337c:	40023800 	.word	0x40023800

08003380 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8003380:	b480      	push	{r7}
 8003382:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003384:	4b04      	ldr	r3, [pc, #16]	; (8003398 <LL_RCC_GetAPB2Prescaler+0x18>)
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 800338c:	4618      	mov	r0, r3
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr
 8003396:	bf00      	nop
 8003398:	40023800 	.word	0x40023800

0800339c <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800339c:	b480      	push	{r7}
 800339e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80033a0:	4b04      	ldr	r3, [pc, #16]	; (80033b4 <LL_RCC_PLL_GetMainSource+0x18>)
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr
 80033b2:	bf00      	nop
 80033b4:	40023800 	.word	0x40023800

080033b8 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80033b8:	b480      	push	{r7}
 80033ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80033bc:	4b04      	ldr	r3, [pc, #16]	; (80033d0 <LL_RCC_PLL_GetN+0x18>)
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	099b      	lsrs	r3, r3, #6
 80033c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr
 80033d0:	40023800 	.word	0x40023800

080033d4 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 80033d4:	b480      	push	{r7}
 80033d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 80033d8:	4b04      	ldr	r3, [pc, #16]	; (80033ec <LL_RCC_PLL_GetP+0x18>)
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr
 80033ea:	bf00      	nop
 80033ec:	40023800 	.word	0x40023800

080033f0 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80033f0:	b480      	push	{r7}
 80033f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80033f4:	4b04      	ldr	r3, [pc, #16]	; (8003408 <LL_RCC_PLL_GetDivider+0x18>)
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr
 8003406:	bf00      	nop
 8003408:	40023800 	.word	0x40023800

0800340c <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b082      	sub	sp, #8
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8003414:	f000 f820 	bl	8003458 <RCC_GetSystemClockFreq>
 8003418:	4602      	mov	r2, r0
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4618      	mov	r0, r3
 8003424:	f000 f840 	bl	80034a8 <RCC_GetHCLKClockFreq>
 8003428:	4602      	mov	r2, r0
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	4618      	mov	r0, r3
 8003434:	f000 f84e 	bl	80034d4 <RCC_GetPCLK1ClockFreq>
 8003438:	4602      	mov	r2, r0
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	4618      	mov	r0, r3
 8003444:	f000 f85a 	bl	80034fc <RCC_GetPCLK2ClockFreq>
 8003448:	4602      	mov	r2, r0
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	60da      	str	r2, [r3, #12]
}
 800344e:	bf00      	nop
 8003450:	3708      	adds	r7, #8
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
	...

08003458 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b082      	sub	sp, #8
 800345c:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800345e:	2300      	movs	r3, #0
 8003460:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8003462:	f7ff ff63 	bl	800332c <LL_RCC_GetSysClkSource>
 8003466:	4603      	mov	r3, r0
 8003468:	2b08      	cmp	r3, #8
 800346a:	d00c      	beq.n	8003486 <RCC_GetSystemClockFreq+0x2e>
 800346c:	2b08      	cmp	r3, #8
 800346e:	d80f      	bhi.n	8003490 <RCC_GetSystemClockFreq+0x38>
 8003470:	2b00      	cmp	r3, #0
 8003472:	d002      	beq.n	800347a <RCC_GetSystemClockFreq+0x22>
 8003474:	2b04      	cmp	r3, #4
 8003476:	d003      	beq.n	8003480 <RCC_GetSystemClockFreq+0x28>
 8003478:	e00a      	b.n	8003490 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800347a:	4b09      	ldr	r3, [pc, #36]	; (80034a0 <RCC_GetSystemClockFreq+0x48>)
 800347c:	607b      	str	r3, [r7, #4]
      break;
 800347e:	e00a      	b.n	8003496 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8003480:	4b08      	ldr	r3, [pc, #32]	; (80034a4 <RCC_GetSystemClockFreq+0x4c>)
 8003482:	607b      	str	r3, [r7, #4]
      break;
 8003484:	e007      	b.n	8003496 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8003486:	2008      	movs	r0, #8
 8003488:	f000 f84c 	bl	8003524 <RCC_PLL_GetFreqDomain_SYS>
 800348c:	6078      	str	r0, [r7, #4]
      break;
 800348e:	e002      	b.n	8003496 <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8003490:	4b03      	ldr	r3, [pc, #12]	; (80034a0 <RCC_GetSystemClockFreq+0x48>)
 8003492:	607b      	str	r3, [r7, #4]
      break;
 8003494:	bf00      	nop
  }

  return frequency;
 8003496:	687b      	ldr	r3, [r7, #4]
}
 8003498:	4618      	mov	r0, r3
 800349a:	3708      	adds	r7, #8
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	00f42400 	.word	0x00f42400
 80034a4:	007a1200 	.word	0x007a1200

080034a8 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b082      	sub	sp, #8
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80034b0:	f7ff ff4a 	bl	8003348 <LL_RCC_GetAHBPrescaler>
 80034b4:	4603      	mov	r3, r0
 80034b6:	091b      	lsrs	r3, r3, #4
 80034b8:	f003 030f 	and.w	r3, r3, #15
 80034bc:	4a04      	ldr	r2, [pc, #16]	; (80034d0 <RCC_GetHCLKClockFreq+0x28>)
 80034be:	5cd3      	ldrb	r3, [r2, r3]
 80034c0:	461a      	mov	r2, r3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	40d3      	lsrs	r3, r2
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3708      	adds	r7, #8
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	08006c94 	.word	0x08006c94

080034d4 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b082      	sub	sp, #8
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80034dc:	f7ff ff42 	bl	8003364 <LL_RCC_GetAPB1Prescaler>
 80034e0:	4603      	mov	r3, r0
 80034e2:	0a9b      	lsrs	r3, r3, #10
 80034e4:	4a04      	ldr	r2, [pc, #16]	; (80034f8 <RCC_GetPCLK1ClockFreq+0x24>)
 80034e6:	5cd3      	ldrb	r3, [r2, r3]
 80034e8:	461a      	mov	r2, r3
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	40d3      	lsrs	r3, r2
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3708      	adds	r7, #8
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	08006ca4 	.word	0x08006ca4

080034fc <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b082      	sub	sp, #8
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8003504:	f7ff ff3c 	bl	8003380 <LL_RCC_GetAPB2Prescaler>
 8003508:	4603      	mov	r3, r0
 800350a:	0b5b      	lsrs	r3, r3, #13
 800350c:	4a04      	ldr	r2, [pc, #16]	; (8003520 <RCC_GetPCLK2ClockFreq+0x24>)
 800350e:	5cd3      	ldrb	r3, [r2, r3]
 8003510:	461a      	mov	r2, r3
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	40d3      	lsrs	r3, r2
}
 8003516:	4618      	mov	r0, r3
 8003518:	3708      	adds	r7, #8
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop
 8003520:	08006ca4 	.word	0x08006ca4

08003524 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8003524:	b590      	push	{r4, r7, lr}
 8003526:	b087      	sub	sp, #28
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 800352c:	2300      	movs	r3, #0
 800352e:	617b      	str	r3, [r7, #20]
 8003530:	2300      	movs	r3, #0
 8003532:	60fb      	str	r3, [r7, #12]
 8003534:	2300      	movs	r3, #0
 8003536:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8003538:	f7ff ff30 	bl	800339c <LL_RCC_PLL_GetMainSource>
 800353c:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d004      	beq.n	800354e <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800354a:	d003      	beq.n	8003554 <RCC_PLL_GetFreqDomain_SYS+0x30>
 800354c:	e005      	b.n	800355a <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800354e:	4b12      	ldr	r3, [pc, #72]	; (8003598 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8003550:	617b      	str	r3, [r7, #20]
      break;
 8003552:	e005      	b.n	8003560 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8003554:	4b11      	ldr	r3, [pc, #68]	; (800359c <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8003556:	617b      	str	r3, [r7, #20]
      break;
 8003558:	e002      	b.n	8003560 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 800355a:	4b0f      	ldr	r3, [pc, #60]	; (8003598 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 800355c:	617b      	str	r3, [r7, #20]
      break;
 800355e:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2b08      	cmp	r3, #8
 8003564:	d113      	bne.n	800358e <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003566:	f7ff ff43 	bl	80033f0 <LL_RCC_PLL_GetDivider>
 800356a:	4602      	mov	r2, r0
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	fbb3 f4f2 	udiv	r4, r3, r2
 8003572:	f7ff ff21 	bl	80033b8 <LL_RCC_PLL_GetN>
 8003576:	4603      	mov	r3, r0
 8003578:	fb03 f404 	mul.w	r4, r3, r4
 800357c:	f7ff ff2a 	bl	80033d4 <LL_RCC_PLL_GetP>
 8003580:	4603      	mov	r3, r0
 8003582:	0c1b      	lsrs	r3, r3, #16
 8003584:	3301      	adds	r3, #1
 8003586:	005b      	lsls	r3, r3, #1
 8003588:	fbb4 f3f3 	udiv	r3, r4, r3
 800358c:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 800358e:	693b      	ldr	r3, [r7, #16]
}
 8003590:	4618      	mov	r0, r3
 8003592:	371c      	adds	r7, #28
 8003594:	46bd      	mov	sp, r7
 8003596:	bd90      	pop	{r4, r7, pc}
 8003598:	00f42400 	.word	0x00f42400
 800359c:	007a1200 	.word	0x007a1200

080035a0 <LL_TIM_SetPrescaler>:
{
 80035a0:	b480      	push	{r7}
 80035a2:	b083      	sub	sp, #12
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	683a      	ldr	r2, [r7, #0]
 80035ae:	629a      	str	r2, [r3, #40]	; 0x28
}
 80035b0:	bf00      	nop
 80035b2:	370c      	adds	r7, #12
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr

080035bc <LL_TIM_SetAutoReload>:
{
 80035bc:	b480      	push	{r7}
 80035be:	b083      	sub	sp, #12
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
 80035c4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	683a      	ldr	r2, [r7, #0]
 80035ca:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80035cc:	bf00      	nop
 80035ce:	370c      	adds	r7, #12
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr

080035d8 <LL_TIM_SetRepetitionCounter>:
{
 80035d8:	b480      	push	{r7}
 80035da:	b083      	sub	sp, #12
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	683a      	ldr	r2, [r7, #0]
 80035e6:	631a      	str	r2, [r3, #48]	; 0x30
}
 80035e8:	bf00      	nop
 80035ea:	370c      	adds	r7, #12
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr

080035f4 <LL_TIM_OC_SetCompareCH1>:
{
 80035f4:	b480      	push	{r7}
 80035f6:	b083      	sub	sp, #12
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	683a      	ldr	r2, [r7, #0]
 8003602:	635a      	str	r2, [r3, #52]	; 0x34
}
 8003604:	bf00      	nop
 8003606:	370c      	adds	r7, #12
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr

08003610 <LL_TIM_OC_SetCompareCH2>:
{
 8003610:	b480      	push	{r7}
 8003612:	b083      	sub	sp, #12
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	683a      	ldr	r2, [r7, #0]
 800361e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003620:	bf00      	nop
 8003622:	370c      	adds	r7, #12
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr

0800362c <LL_TIM_OC_SetCompareCH3>:
{
 800362c:	b480      	push	{r7}
 800362e:	b083      	sub	sp, #12
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	683a      	ldr	r2, [r7, #0]
 800363a:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800363c:	bf00      	nop
 800363e:	370c      	adds	r7, #12
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr

08003648 <LL_TIM_OC_SetCompareCH4>:
{
 8003648:	b480      	push	{r7}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	683a      	ldr	r2, [r7, #0]
 8003656:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003658:	bf00      	nop
 800365a:	370c      	adds	r7, #12
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr

08003664 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8003664:	b480      	push	{r7}
 8003666:	b083      	sub	sp, #12
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	695b      	ldr	r3, [r3, #20]
 8003670:	f043 0201 	orr.w	r2, r3, #1
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	615a      	str	r2, [r3, #20]
}
 8003678:	bf00      	nop
 800367a:	370c      	adds	r7, #12
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr

08003684 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b084      	sub	sp, #16
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	4a3d      	ldr	r2, [pc, #244]	; (800378c <LL_TIM_Init+0x108>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d013      	beq.n	80036c4 <LL_TIM_Init+0x40>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036a2:	d00f      	beq.n	80036c4 <LL_TIM_Init+0x40>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	4a3a      	ldr	r2, [pc, #232]	; (8003790 <LL_TIM_Init+0x10c>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d00b      	beq.n	80036c4 <LL_TIM_Init+0x40>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	4a39      	ldr	r2, [pc, #228]	; (8003794 <LL_TIM_Init+0x110>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d007      	beq.n	80036c4 <LL_TIM_Init+0x40>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	4a38      	ldr	r2, [pc, #224]	; (8003798 <LL_TIM_Init+0x114>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d003      	beq.n	80036c4 <LL_TIM_Init+0x40>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	4a37      	ldr	r2, [pc, #220]	; (800379c <LL_TIM_Init+0x118>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d106      	bne.n	80036d2 <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	4313      	orrs	r3, r2
 80036d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	4a2d      	ldr	r2, [pc, #180]	; (800378c <LL_TIM_Init+0x108>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d02b      	beq.n	8003732 <LL_TIM_Init+0xae>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036e0:	d027      	beq.n	8003732 <LL_TIM_Init+0xae>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4a2a      	ldr	r2, [pc, #168]	; (8003790 <LL_TIM_Init+0x10c>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d023      	beq.n	8003732 <LL_TIM_Init+0xae>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4a29      	ldr	r2, [pc, #164]	; (8003794 <LL_TIM_Init+0x110>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d01f      	beq.n	8003732 <LL_TIM_Init+0xae>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4a28      	ldr	r2, [pc, #160]	; (8003798 <LL_TIM_Init+0x114>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d01b      	beq.n	8003732 <LL_TIM_Init+0xae>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4a27      	ldr	r2, [pc, #156]	; (800379c <LL_TIM_Init+0x118>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d017      	beq.n	8003732 <LL_TIM_Init+0xae>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4a26      	ldr	r2, [pc, #152]	; (80037a0 <LL_TIM_Init+0x11c>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d013      	beq.n	8003732 <LL_TIM_Init+0xae>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4a25      	ldr	r2, [pc, #148]	; (80037a4 <LL_TIM_Init+0x120>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d00f      	beq.n	8003732 <LL_TIM_Init+0xae>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4a24      	ldr	r2, [pc, #144]	; (80037a8 <LL_TIM_Init+0x124>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d00b      	beq.n	8003732 <LL_TIM_Init+0xae>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	4a23      	ldr	r2, [pc, #140]	; (80037ac <LL_TIM_Init+0x128>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d007      	beq.n	8003732 <LL_TIM_Init+0xae>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	4a22      	ldr	r2, [pc, #136]	; (80037b0 <LL_TIM_Init+0x12c>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d003      	beq.n	8003732 <LL_TIM_Init+0xae>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	4a21      	ldr	r2, [pc, #132]	; (80037b4 <LL_TIM_Init+0x130>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d106      	bne.n	8003740 <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	4313      	orrs	r3, r2
 800373e:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	68fa      	ldr	r2, [r7, #12]
 8003744:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	4619      	mov	r1, r3
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f7ff ff35 	bl	80035bc <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	881b      	ldrh	r3, [r3, #0]
 8003756:	4619      	mov	r1, r3
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f7ff ff21 	bl	80035a0 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	4a0a      	ldr	r2, [pc, #40]	; (800378c <LL_TIM_Init+0x108>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d003      	beq.n	800376e <LL_TIM_Init+0xea>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	4a0c      	ldr	r2, [pc, #48]	; (800379c <LL_TIM_Init+0x118>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d105      	bne.n	800377a <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	691b      	ldr	r3, [r3, #16]
 8003772:	4619      	mov	r1, r3
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f7ff ff2f 	bl	80035d8 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f7ff ff72 	bl	8003664 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8003780:	2300      	movs	r3, #0
}
 8003782:	4618      	mov	r0, r3
 8003784:	3710      	adds	r7, #16
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	40010000 	.word	0x40010000
 8003790:	40000400 	.word	0x40000400
 8003794:	40000800 	.word	0x40000800
 8003798:	40000c00 	.word	0x40000c00
 800379c:	40010400 	.word	0x40010400
 80037a0:	40014000 	.word	0x40014000
 80037a4:	40014400 	.word	0x40014400
 80037a8:	40014800 	.word	0x40014800
 80037ac:	40001800 	.word	0x40001800
 80037b0:	40001c00 	.word	0x40001c00
 80037b4:	40002000 	.word	0x40002000

080037b8 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b086      	sub	sp, #24
 80037bc:	af00      	add	r7, sp, #0
 80037be:	60f8      	str	r0, [r7, #12]
 80037c0:	60b9      	str	r1, [r7, #8]
 80037c2:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037ce:	d027      	beq.n	8003820 <LL_TIM_OC_Init+0x68>
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037d6:	d82a      	bhi.n	800382e <LL_TIM_OC_Init+0x76>
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037de:	d018      	beq.n	8003812 <LL_TIM_OC_Init+0x5a>
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037e6:	d822      	bhi.n	800382e <LL_TIM_OC_Init+0x76>
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d003      	beq.n	80037f6 <LL_TIM_OC_Init+0x3e>
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	2b10      	cmp	r3, #16
 80037f2:	d007      	beq.n	8003804 <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 80037f4:	e01b      	b.n	800382e <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 80037f6:	6879      	ldr	r1, [r7, #4]
 80037f8:	68f8      	ldr	r0, [r7, #12]
 80037fa:	f000 f81f 	bl	800383c <OC1Config>
 80037fe:	4603      	mov	r3, r0
 8003800:	75fb      	strb	r3, [r7, #23]
      break;
 8003802:	e015      	b.n	8003830 <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8003804:	6879      	ldr	r1, [r7, #4]
 8003806:	68f8      	ldr	r0, [r7, #12]
 8003808:	f000 f884 	bl	8003914 <OC2Config>
 800380c:	4603      	mov	r3, r0
 800380e:	75fb      	strb	r3, [r7, #23]
      break;
 8003810:	e00e      	b.n	8003830 <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8003812:	6879      	ldr	r1, [r7, #4]
 8003814:	68f8      	ldr	r0, [r7, #12]
 8003816:	f000 f8ed 	bl	80039f4 <OC3Config>
 800381a:	4603      	mov	r3, r0
 800381c:	75fb      	strb	r3, [r7, #23]
      break;
 800381e:	e007      	b.n	8003830 <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8003820:	6879      	ldr	r1, [r7, #4]
 8003822:	68f8      	ldr	r0, [r7, #12]
 8003824:	f000 f956 	bl	8003ad4 <OC4Config>
 8003828:	4603      	mov	r3, r0
 800382a:	75fb      	strb	r3, [r7, #23]
      break;
 800382c:	e000      	b.n	8003830 <LL_TIM_OC_Init+0x78>
      break;
 800382e:	bf00      	nop
  }

  return result;
 8003830:	7dfb      	ldrb	r3, [r7, #23]
}
 8003832:	4618      	mov	r0, r3
 8003834:	3718      	adds	r7, #24
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
	...

0800383c <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b086      	sub	sp, #24
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
 8003844:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6a1b      	ldr	r3, [r3, #32]
 800384a:	f023 0201 	bic.w	r2, r3, #1
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6a1b      	ldr	r3, [r3, #32]
 8003856:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	699b      	ldr	r3, [r3, #24]
 8003862:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f023 0303 	bic.w	r3, r3, #3
 800386a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4313      	orrs	r3, r2
 8003878:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	f023 0202 	bic.w	r2, r3, #2
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	691b      	ldr	r3, [r3, #16]
 8003884:	4313      	orrs	r3, r2
 8003886:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	f023 0201 	bic.w	r2, r3, #1
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	4313      	orrs	r3, r2
 8003894:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4a1c      	ldr	r2, [pc, #112]	; (800390c <OC1Config+0xd0>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d003      	beq.n	80038a6 <OC1Config+0x6a>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4a1b      	ldr	r2, [pc, #108]	; (8003910 <OC1Config+0xd4>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d11e      	bne.n	80038e4 <OC1Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	f023 0208 	bic.w	r2, r3, #8
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	695b      	ldr	r3, [r3, #20]
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	4313      	orrs	r3, r2
 80038b4:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	f023 0204 	bic.w	r2, r3, #4
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	009b      	lsls	r3, r3, #2
 80038c2:	4313      	orrs	r3, r2
 80038c4:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	699b      	ldr	r3, [r3, #24]
 80038d0:	4313      	orrs	r3, r2
 80038d2:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	69db      	ldr	r3, [r3, #28]
 80038de:	005b      	lsls	r3, r3, #1
 80038e0:	4313      	orrs	r3, r2
 80038e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	693a      	ldr	r2, [r7, #16]
 80038e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	68fa      	ldr	r2, [r7, #12]
 80038ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	4619      	mov	r1, r3
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f7ff fe7c 	bl	80035f4 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	697a      	ldr	r2, [r7, #20]
 8003900:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003902:	2300      	movs	r3, #0
}
 8003904:	4618      	mov	r0, r3
 8003906:	3718      	adds	r7, #24
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}
 800390c:	40010000 	.word	0x40010000
 8003910:	40010400 	.word	0x40010400

08003914 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b086      	sub	sp, #24
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6a1b      	ldr	r3, [r3, #32]
 8003922:	f023 0210 	bic.w	r2, r3, #16
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6a1b      	ldr	r3, [r3, #32]
 800392e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	699b      	ldr	r3, [r3, #24]
 800393a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003942:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	021b      	lsls	r3, r3, #8
 8003950:	4313      	orrs	r3, r2
 8003952:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	f023 0220 	bic.w	r2, r3, #32
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	691b      	ldr	r3, [r3, #16]
 800395e:	011b      	lsls	r3, r3, #4
 8003960:	4313      	orrs	r3, r2
 8003962:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	f023 0210 	bic.w	r2, r3, #16
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	011b      	lsls	r3, r3, #4
 8003970:	4313      	orrs	r3, r2
 8003972:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	4a1d      	ldr	r2, [pc, #116]	; (80039ec <OC2Config+0xd8>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d003      	beq.n	8003984 <OC2Config+0x70>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	4a1c      	ldr	r2, [pc, #112]	; (80039f0 <OC2Config+0xdc>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d11f      	bne.n	80039c4 <OC2Config+0xb0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	695b      	ldr	r3, [r3, #20]
 800398e:	019b      	lsls	r3, r3, #6
 8003990:	4313      	orrs	r3, r2
 8003992:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	019b      	lsls	r3, r3, #6
 80039a0:	4313      	orrs	r3, r2
 80039a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	699b      	ldr	r3, [r3, #24]
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	4313      	orrs	r3, r2
 80039b2:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	69db      	ldr	r3, [r3, #28]
 80039be:	00db      	lsls	r3, r3, #3
 80039c0:	4313      	orrs	r3, r2
 80039c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	693a      	ldr	r2, [r7, #16]
 80039c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	68fa      	ldr	r2, [r7, #12]
 80039ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	4619      	mov	r1, r3
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f7ff fe1a 	bl	8003610 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	697a      	ldr	r2, [r7, #20]
 80039e0:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80039e2:	2300      	movs	r3, #0
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3718      	adds	r7, #24
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	40010000 	.word	0x40010000
 80039f0:	40010400 	.word	0x40010400

080039f4 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b086      	sub	sp, #24
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
 80039fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6a1b      	ldr	r3, [r3, #32]
 8003a02:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6a1b      	ldr	r3, [r3, #32]
 8003a0e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	69db      	ldr	r3, [r3, #28]
 8003a1a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	f023 0303 	bic.w	r3, r3, #3
 8003a22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	691b      	ldr	r3, [r3, #16]
 8003a3c:	021b      	lsls	r3, r3, #8
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	021b      	lsls	r3, r3, #8
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4a1d      	ldr	r2, [pc, #116]	; (8003acc <OC3Config+0xd8>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d003      	beq.n	8003a62 <OC3Config+0x6e>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4a1c      	ldr	r2, [pc, #112]	; (8003ad0 <OC3Config+0xdc>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d11f      	bne.n	8003aa2 <OC3Config+0xae>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	695b      	ldr	r3, [r3, #20]
 8003a6c:	029b      	lsls	r3, r3, #10
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	029b      	lsls	r3, r3, #10
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	699b      	ldr	r3, [r3, #24]
 8003a8c:	011b      	lsls	r3, r3, #4
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	69db      	ldr	r3, [r3, #28]
 8003a9c:	015b      	lsls	r3, r3, #5
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	693a      	ldr	r2, [r7, #16]
 8003aa6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	68fa      	ldr	r2, [r7, #12]
 8003aac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	4619      	mov	r1, r3
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f7ff fdb9 	bl	800362c <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	697a      	ldr	r2, [r7, #20]
 8003abe:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003ac0:	2300      	movs	r3, #0
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3718      	adds	r7, #24
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop
 8003acc:	40010000 	.word	0x40010000
 8003ad0:	40010400 	.word	0x40010400

08003ad4 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b086      	sub	sp, #24
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6a1b      	ldr	r3, [r3, #32]
 8003ae2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a1b      	ldr	r3, [r3, #32]
 8003aee:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	69db      	ldr	r3, [r3, #28]
 8003afa:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	021b      	lsls	r3, r3, #8
 8003b10:	4313      	orrs	r3, r2
 8003b12:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	691b      	ldr	r3, [r3, #16]
 8003b1e:	031b      	lsls	r3, r3, #12
 8003b20:	4313      	orrs	r3, r2
 8003b22:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	031b      	lsls	r3, r3, #12
 8003b30:	4313      	orrs	r3, r2
 8003b32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	4a11      	ldr	r2, [pc, #68]	; (8003b7c <OC4Config+0xa8>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d003      	beq.n	8003b44 <OC4Config+0x70>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	4a10      	ldr	r2, [pc, #64]	; (8003b80 <OC4Config+0xac>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d107      	bne.n	8003b54 <OC4Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	699b      	ldr	r3, [r3, #24]
 8003b4e:	019b      	lsls	r3, r3, #6
 8003b50:	4313      	orrs	r3, r2
 8003b52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	697a      	ldr	r2, [r7, #20]
 8003b58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	68fa      	ldr	r2, [r7, #12]
 8003b5e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	4619      	mov	r1, r3
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f7ff fd6e 	bl	8003648 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	693a      	ldr	r2, [r7, #16]
 8003b70:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003b72:	2300      	movs	r3, #0
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3718      	adds	r7, #24
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}
 8003b7c:	40010000 	.word	0x40010000
 8003b80:	40010400 	.word	0x40010400

08003b84 <LL_USART_IsEnabled>:
{
 8003b84:	b480      	push	{r7}
 8003b86:	b083      	sub	sp, #12
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b98:	bf0c      	ite	eq
 8003b9a:	2301      	moveq	r3, #1
 8003b9c:	2300      	movne	r3, #0
 8003b9e:	b2db      	uxtb	r3, r3
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	370c      	adds	r7, #12
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr

08003bac <LL_USART_SetStopBitsLength>:
{
 8003bac:	b480      	push	{r7}
 8003bae:	b083      	sub	sp, #12
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
 8003bb4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	691b      	ldr	r3, [r3, #16]
 8003bba:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	431a      	orrs	r2, r3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	611a      	str	r2, [r3, #16]
}
 8003bc6:	bf00      	nop
 8003bc8:	370c      	adds	r7, #12
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr

08003bd2 <LL_USART_SetHWFlowCtrl>:
{
 8003bd2:	b480      	push	{r7}
 8003bd4:	b083      	sub	sp, #12
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	6078      	str	r0, [r7, #4]
 8003bda:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	695b      	ldr	r3, [r3, #20]
 8003be0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	431a      	orrs	r2, r3
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	615a      	str	r2, [r3, #20]
}
 8003bec:	bf00      	nop
 8003bee:	370c      	adds	r7, #12
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr

08003bf8 <LL_USART_SetBaudRate>:
{
 8003bf8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bfc:	b0c0      	sub	sp, #256	; 0x100
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003c04:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 8003c08:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8003c0c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8003c10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c18:	f040 810c 	bne.w	8003e34 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8003c1c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003c20:	2200      	movs	r2, #0
 8003c22:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003c26:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003c2a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003c2e:	4622      	mov	r2, r4
 8003c30:	462b      	mov	r3, r5
 8003c32:	1891      	adds	r1, r2, r2
 8003c34:	6639      	str	r1, [r7, #96]	; 0x60
 8003c36:	415b      	adcs	r3, r3
 8003c38:	667b      	str	r3, [r7, #100]	; 0x64
 8003c3a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003c3e:	4621      	mov	r1, r4
 8003c40:	eb12 0801 	adds.w	r8, r2, r1
 8003c44:	4629      	mov	r1, r5
 8003c46:	eb43 0901 	adc.w	r9, r3, r1
 8003c4a:	f04f 0200 	mov.w	r2, #0
 8003c4e:	f04f 0300 	mov.w	r3, #0
 8003c52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c5e:	4690      	mov	r8, r2
 8003c60:	4699      	mov	r9, r3
 8003c62:	4623      	mov	r3, r4
 8003c64:	eb18 0303 	adds.w	r3, r8, r3
 8003c68:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003c6c:	462b      	mov	r3, r5
 8003c6e:	eb49 0303 	adc.w	r3, r9, r3
 8003c72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003c76:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	469a      	mov	sl, r3
 8003c7e:	4693      	mov	fp, r2
 8003c80:	eb1a 030a 	adds.w	r3, sl, sl
 8003c84:	65bb      	str	r3, [r7, #88]	; 0x58
 8003c86:	eb4b 030b 	adc.w	r3, fp, fp
 8003c8a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c8c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003c90:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003c94:	f7fc ff88 	bl	8000ba8 <__aeabi_uldivmod>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	460b      	mov	r3, r1
 8003c9c:	4b64      	ldr	r3, [pc, #400]	; (8003e30 <LL_USART_SetBaudRate+0x238>)
 8003c9e:	fba3 2302 	umull	r2, r3, r3, r2
 8003ca2:	095b      	lsrs	r3, r3, #5
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	011b      	lsls	r3, r3, #4
 8003ca8:	b29c      	uxth	r4, r3
 8003caa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003cae:	2200      	movs	r2, #0
 8003cb0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003cb4:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003cb8:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 8003cbc:	4642      	mov	r2, r8
 8003cbe:	464b      	mov	r3, r9
 8003cc0:	1891      	adds	r1, r2, r2
 8003cc2:	6539      	str	r1, [r7, #80]	; 0x50
 8003cc4:	415b      	adcs	r3, r3
 8003cc6:	657b      	str	r3, [r7, #84]	; 0x54
 8003cc8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003ccc:	4641      	mov	r1, r8
 8003cce:	1851      	adds	r1, r2, r1
 8003cd0:	64b9      	str	r1, [r7, #72]	; 0x48
 8003cd2:	4649      	mov	r1, r9
 8003cd4:	414b      	adcs	r3, r1
 8003cd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cd8:	f04f 0200 	mov.w	r2, #0
 8003cdc:	f04f 0300 	mov.w	r3, #0
 8003ce0:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	; 0x48
 8003ce4:	4659      	mov	r1, fp
 8003ce6:	00cb      	lsls	r3, r1, #3
 8003ce8:	4651      	mov	r1, sl
 8003cea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003cee:	4651      	mov	r1, sl
 8003cf0:	00ca      	lsls	r2, r1, #3
 8003cf2:	4610      	mov	r0, r2
 8003cf4:	4619      	mov	r1, r3
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	4642      	mov	r2, r8
 8003cfa:	189b      	adds	r3, r3, r2
 8003cfc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003d00:	464b      	mov	r3, r9
 8003d02:	460a      	mov	r2, r1
 8003d04:	eb42 0303 	adc.w	r3, r2, r3
 8003d08:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003d0c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003d10:	2200      	movs	r2, #0
 8003d12:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003d16:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8003d1a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8003d1e:	460b      	mov	r3, r1
 8003d20:	18db      	adds	r3, r3, r3
 8003d22:	643b      	str	r3, [r7, #64]	; 0x40
 8003d24:	4613      	mov	r3, r2
 8003d26:	eb42 0303 	adc.w	r3, r2, r3
 8003d2a:	647b      	str	r3, [r7, #68]	; 0x44
 8003d2c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003d30:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8003d34:	f7fc ff38 	bl	8000ba8 <__aeabi_uldivmod>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	460b      	mov	r3, r1
 8003d3c:	4611      	mov	r1, r2
 8003d3e:	4b3c      	ldr	r3, [pc, #240]	; (8003e30 <LL_USART_SetBaudRate+0x238>)
 8003d40:	fba3 2301 	umull	r2, r3, r3, r1
 8003d44:	095b      	lsrs	r3, r3, #5
 8003d46:	2264      	movs	r2, #100	; 0x64
 8003d48:	fb02 f303 	mul.w	r3, r2, r3
 8003d4c:	1acb      	subs	r3, r1, r3
 8003d4e:	00db      	lsls	r3, r3, #3
 8003d50:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003d54:	4b36      	ldr	r3, [pc, #216]	; (8003e30 <LL_USART_SetBaudRate+0x238>)
 8003d56:	fba3 2302 	umull	r2, r3, r3, r2
 8003d5a:	095b      	lsrs	r3, r3, #5
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	005b      	lsls	r3, r3, #1
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	4423      	add	r3, r4
 8003d6a:	b29c      	uxth	r4, r3
 8003d6c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003d70:	2200      	movs	r2, #0
 8003d72:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003d76:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003d7a:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 8003d7e:	4642      	mov	r2, r8
 8003d80:	464b      	mov	r3, r9
 8003d82:	1891      	adds	r1, r2, r2
 8003d84:	63b9      	str	r1, [r7, #56]	; 0x38
 8003d86:	415b      	adcs	r3, r3
 8003d88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d8a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003d8e:	4641      	mov	r1, r8
 8003d90:	1851      	adds	r1, r2, r1
 8003d92:	6339      	str	r1, [r7, #48]	; 0x30
 8003d94:	4649      	mov	r1, r9
 8003d96:	414b      	adcs	r3, r1
 8003d98:	637b      	str	r3, [r7, #52]	; 0x34
 8003d9a:	f04f 0200 	mov.w	r2, #0
 8003d9e:	f04f 0300 	mov.w	r3, #0
 8003da2:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003da6:	4659      	mov	r1, fp
 8003da8:	00cb      	lsls	r3, r1, #3
 8003daa:	4651      	mov	r1, sl
 8003dac:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003db0:	4651      	mov	r1, sl
 8003db2:	00ca      	lsls	r2, r1, #3
 8003db4:	4610      	mov	r0, r2
 8003db6:	4619      	mov	r1, r3
 8003db8:	4603      	mov	r3, r0
 8003dba:	4642      	mov	r2, r8
 8003dbc:	189b      	adds	r3, r3, r2
 8003dbe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003dc2:	464b      	mov	r3, r9
 8003dc4:	460a      	mov	r2, r1
 8003dc6:	eb42 0303 	adc.w	r3, r2, r3
 8003dca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003dce:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003dd8:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8003ddc:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8003de0:	460b      	mov	r3, r1
 8003de2:	18db      	adds	r3, r3, r3
 8003de4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003de6:	4613      	mov	r3, r2
 8003de8:	eb42 0303 	adc.w	r3, r2, r3
 8003dec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003dee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003df2:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8003df6:	f7fc fed7 	bl	8000ba8 <__aeabi_uldivmod>
 8003dfa:	4602      	mov	r2, r0
 8003dfc:	460b      	mov	r3, r1
 8003dfe:	4b0c      	ldr	r3, [pc, #48]	; (8003e30 <LL_USART_SetBaudRate+0x238>)
 8003e00:	fba3 1302 	umull	r1, r3, r3, r2
 8003e04:	095b      	lsrs	r3, r3, #5
 8003e06:	2164      	movs	r1, #100	; 0x64
 8003e08:	fb01 f303 	mul.w	r3, r1, r3
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	00db      	lsls	r3, r3, #3
 8003e10:	3332      	adds	r3, #50	; 0x32
 8003e12:	4a07      	ldr	r2, [pc, #28]	; (8003e30 <LL_USART_SetBaudRate+0x238>)
 8003e14:	fba2 2303 	umull	r2, r3, r2, r3
 8003e18:	095b      	lsrs	r3, r3, #5
 8003e1a:	b29b      	uxth	r3, r3
 8003e1c:	f003 0307 	and.w	r3, r3, #7
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	4423      	add	r3, r4
 8003e24:	b29b      	uxth	r3, r3
 8003e26:	461a      	mov	r2, r3
 8003e28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e2c:	609a      	str	r2, [r3, #8]
}
 8003e2e:	e107      	b.n	8004040 <LL_USART_SetBaudRate+0x448>
 8003e30:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8003e34:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003e38:	2200      	movs	r2, #0
 8003e3a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003e3e:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003e42:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 8003e46:	4642      	mov	r2, r8
 8003e48:	464b      	mov	r3, r9
 8003e4a:	1891      	adds	r1, r2, r2
 8003e4c:	6239      	str	r1, [r7, #32]
 8003e4e:	415b      	adcs	r3, r3
 8003e50:	627b      	str	r3, [r7, #36]	; 0x24
 8003e52:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003e56:	4641      	mov	r1, r8
 8003e58:	1854      	adds	r4, r2, r1
 8003e5a:	4649      	mov	r1, r9
 8003e5c:	eb43 0501 	adc.w	r5, r3, r1
 8003e60:	f04f 0200 	mov.w	r2, #0
 8003e64:	f04f 0300 	mov.w	r3, #0
 8003e68:	00eb      	lsls	r3, r5, #3
 8003e6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e6e:	00e2      	lsls	r2, r4, #3
 8003e70:	4614      	mov	r4, r2
 8003e72:	461d      	mov	r5, r3
 8003e74:	4643      	mov	r3, r8
 8003e76:	18e3      	adds	r3, r4, r3
 8003e78:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003e7c:	464b      	mov	r3, r9
 8003e7e:	eb45 0303 	adc.w	r3, r5, r3
 8003e82:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003e86:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003e90:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003e94:	f04f 0200 	mov.w	r2, #0
 8003e98:	f04f 0300 	mov.w	r3, #0
 8003e9c:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8003ea0:	4629      	mov	r1, r5
 8003ea2:	008b      	lsls	r3, r1, #2
 8003ea4:	4621      	mov	r1, r4
 8003ea6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003eaa:	4621      	mov	r1, r4
 8003eac:	008a      	lsls	r2, r1, #2
 8003eae:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8003eb2:	f7fc fe79 	bl	8000ba8 <__aeabi_uldivmod>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	460b      	mov	r3, r1
 8003eba:	4b64      	ldr	r3, [pc, #400]	; (800404c <LL_USART_SetBaudRate+0x454>)
 8003ebc:	fba3 2302 	umull	r2, r3, r3, r2
 8003ec0:	095b      	lsrs	r3, r3, #5
 8003ec2:	b29b      	uxth	r3, r3
 8003ec4:	011b      	lsls	r3, r3, #4
 8003ec6:	b29c      	uxth	r4, r3
 8003ec8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003ecc:	2200      	movs	r2, #0
 8003ece:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003ed2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003ed6:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 8003eda:	4642      	mov	r2, r8
 8003edc:	464b      	mov	r3, r9
 8003ede:	1891      	adds	r1, r2, r2
 8003ee0:	61b9      	str	r1, [r7, #24]
 8003ee2:	415b      	adcs	r3, r3
 8003ee4:	61fb      	str	r3, [r7, #28]
 8003ee6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003eea:	4641      	mov	r1, r8
 8003eec:	1851      	adds	r1, r2, r1
 8003eee:	6139      	str	r1, [r7, #16]
 8003ef0:	4649      	mov	r1, r9
 8003ef2:	414b      	adcs	r3, r1
 8003ef4:	617b      	str	r3, [r7, #20]
 8003ef6:	f04f 0200 	mov.w	r2, #0
 8003efa:	f04f 0300 	mov.w	r3, #0
 8003efe:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f02:	4659      	mov	r1, fp
 8003f04:	00cb      	lsls	r3, r1, #3
 8003f06:	4651      	mov	r1, sl
 8003f08:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f0c:	4651      	mov	r1, sl
 8003f0e:	00ca      	lsls	r2, r1, #3
 8003f10:	4610      	mov	r0, r2
 8003f12:	4619      	mov	r1, r3
 8003f14:	4603      	mov	r3, r0
 8003f16:	4642      	mov	r2, r8
 8003f18:	189b      	adds	r3, r3, r2
 8003f1a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003f1e:	464b      	mov	r3, r9
 8003f20:	460a      	mov	r2, r1
 8003f22:	eb42 0303 	adc.w	r3, r2, r3
 8003f26:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003f2a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003f2e:	2200      	movs	r2, #0
 8003f30:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003f34:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003f38:	f04f 0200 	mov.w	r2, #0
 8003f3c:	f04f 0300 	mov.w	r3, #0
 8003f40:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 8003f44:	4649      	mov	r1, r9
 8003f46:	008b      	lsls	r3, r1, #2
 8003f48:	4641      	mov	r1, r8
 8003f4a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f4e:	4641      	mov	r1, r8
 8003f50:	008a      	lsls	r2, r1, #2
 8003f52:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8003f56:	f7fc fe27 	bl	8000ba8 <__aeabi_uldivmod>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	460b      	mov	r3, r1
 8003f5e:	4b3b      	ldr	r3, [pc, #236]	; (800404c <LL_USART_SetBaudRate+0x454>)
 8003f60:	fba3 1302 	umull	r1, r3, r3, r2
 8003f64:	095b      	lsrs	r3, r3, #5
 8003f66:	2164      	movs	r1, #100	; 0x64
 8003f68:	fb01 f303 	mul.w	r3, r1, r3
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	011b      	lsls	r3, r3, #4
 8003f70:	3332      	adds	r3, #50	; 0x32
 8003f72:	4a36      	ldr	r2, [pc, #216]	; (800404c <LL_USART_SetBaudRate+0x454>)
 8003f74:	fba2 2303 	umull	r2, r3, r2, r3
 8003f78:	095b      	lsrs	r3, r3, #5
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f80:	b29b      	uxth	r3, r3
 8003f82:	4423      	add	r3, r4
 8003f84:	b29c      	uxth	r4, r3
 8003f86:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	67bb      	str	r3, [r7, #120]	; 0x78
 8003f8e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003f90:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003f94:	4642      	mov	r2, r8
 8003f96:	464b      	mov	r3, r9
 8003f98:	1891      	adds	r1, r2, r2
 8003f9a:	60b9      	str	r1, [r7, #8]
 8003f9c:	415b      	adcs	r3, r3
 8003f9e:	60fb      	str	r3, [r7, #12]
 8003fa0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003fa4:	4641      	mov	r1, r8
 8003fa6:	1851      	adds	r1, r2, r1
 8003fa8:	6039      	str	r1, [r7, #0]
 8003faa:	4649      	mov	r1, r9
 8003fac:	414b      	adcs	r3, r1
 8003fae:	607b      	str	r3, [r7, #4]
 8003fb0:	f04f 0200 	mov.w	r2, #0
 8003fb4:	f04f 0300 	mov.w	r3, #0
 8003fb8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003fbc:	4659      	mov	r1, fp
 8003fbe:	00cb      	lsls	r3, r1, #3
 8003fc0:	4651      	mov	r1, sl
 8003fc2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003fc6:	4651      	mov	r1, sl
 8003fc8:	00ca      	lsls	r2, r1, #3
 8003fca:	4610      	mov	r0, r2
 8003fcc:	4619      	mov	r1, r3
 8003fce:	4603      	mov	r3, r0
 8003fd0:	4642      	mov	r2, r8
 8003fd2:	189b      	adds	r3, r3, r2
 8003fd4:	673b      	str	r3, [r7, #112]	; 0x70
 8003fd6:	464b      	mov	r3, r9
 8003fd8:	460a      	mov	r2, r1
 8003fda:	eb42 0303 	adc.w	r3, r2, r3
 8003fde:	677b      	str	r3, [r7, #116]	; 0x74
 8003fe0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	66bb      	str	r3, [r7, #104]	; 0x68
 8003fe8:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003fea:	f04f 0200 	mov.w	r2, #0
 8003fee:	f04f 0300 	mov.w	r3, #0
 8003ff2:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 8003ff6:	4649      	mov	r1, r9
 8003ff8:	008b      	lsls	r3, r1, #2
 8003ffa:	4641      	mov	r1, r8
 8003ffc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004000:	4641      	mov	r1, r8
 8004002:	008a      	lsls	r2, r1, #2
 8004004:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8004008:	f7fc fdce 	bl	8000ba8 <__aeabi_uldivmod>
 800400c:	4602      	mov	r2, r0
 800400e:	460b      	mov	r3, r1
 8004010:	4b0e      	ldr	r3, [pc, #56]	; (800404c <LL_USART_SetBaudRate+0x454>)
 8004012:	fba3 1302 	umull	r1, r3, r3, r2
 8004016:	095b      	lsrs	r3, r3, #5
 8004018:	2164      	movs	r1, #100	; 0x64
 800401a:	fb01 f303 	mul.w	r3, r1, r3
 800401e:	1ad3      	subs	r3, r2, r3
 8004020:	011b      	lsls	r3, r3, #4
 8004022:	3332      	adds	r3, #50	; 0x32
 8004024:	4a09      	ldr	r2, [pc, #36]	; (800404c <LL_USART_SetBaudRate+0x454>)
 8004026:	fba2 2303 	umull	r2, r3, r2, r3
 800402a:	095b      	lsrs	r3, r3, #5
 800402c:	b29b      	uxth	r3, r3
 800402e:	f003 030f 	and.w	r3, r3, #15
 8004032:	b29b      	uxth	r3, r3
 8004034:	4423      	add	r3, r4
 8004036:	b29b      	uxth	r3, r3
 8004038:	461a      	mov	r2, r3
 800403a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800403e:	609a      	str	r2, [r3, #8]
}
 8004040:	bf00      	nop
 8004042:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004046:	46bd      	mov	sp, r7
 8004048:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800404c:	51eb851f 	.word	0x51eb851f

08004050 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b088      	sub	sp, #32
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
 8004058:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800405e:	2300      	movs	r3, #0
 8004060:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f7ff fd8e 	bl	8003b84 <LL_USART_IsEnabled>
 8004068:	4603      	mov	r3, r0
 800406a:	2b00      	cmp	r3, #0
 800406c:	d15e      	bne.n	800412c <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004076:	f023 030c 	bic.w	r3, r3, #12
 800407a:	683a      	ldr	r2, [r7, #0]
 800407c:	6851      	ldr	r1, [r2, #4]
 800407e:	683a      	ldr	r2, [r7, #0]
 8004080:	68d2      	ldr	r2, [r2, #12]
 8004082:	4311      	orrs	r1, r2
 8004084:	683a      	ldr	r2, [r7, #0]
 8004086:	6912      	ldr	r2, [r2, #16]
 8004088:	4311      	orrs	r1, r2
 800408a:	683a      	ldr	r2, [r7, #0]
 800408c:	6992      	ldr	r2, [r2, #24]
 800408e:	430a      	orrs	r2, r1
 8004090:	431a      	orrs	r2, r3
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	4619      	mov	r1, r3
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	f7ff fd85 	bl	8003bac <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	695b      	ldr	r3, [r3, #20]
 80040a6:	4619      	mov	r1, r3
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f7ff fd92 	bl	8003bd2 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 80040ae:	f107 0308 	add.w	r3, r7, #8
 80040b2:	4618      	mov	r0, r3
 80040b4:	f7ff f9aa 	bl	800340c <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	4a1f      	ldr	r2, [pc, #124]	; (8004138 <LL_USART_Init+0xe8>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d102      	bne.n	80040c6 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	61bb      	str	r3, [r7, #24]
 80040c4:	e021      	b.n	800410a <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	4a1c      	ldr	r2, [pc, #112]	; (800413c <LL_USART_Init+0xec>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d102      	bne.n	80040d4 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	61bb      	str	r3, [r7, #24]
 80040d2:	e01a      	b.n	800410a <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	4a1a      	ldr	r2, [pc, #104]	; (8004140 <LL_USART_Init+0xf0>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d102      	bne.n	80040e2 <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	61bb      	str	r3, [r7, #24]
 80040e0:	e013      	b.n	800410a <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	4a17      	ldr	r2, [pc, #92]	; (8004144 <LL_USART_Init+0xf4>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d102      	bne.n	80040f0 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	61bb      	str	r3, [r7, #24]
 80040ee:	e00c      	b.n	800410a <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	4a15      	ldr	r2, [pc, #84]	; (8004148 <LL_USART_Init+0xf8>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d102      	bne.n	80040fe <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	61bb      	str	r3, [r7, #24]
 80040fc:	e005      	b.n	800410a <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4a12      	ldr	r2, [pc, #72]	; (800414c <LL_USART_Init+0xfc>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d101      	bne.n	800410a <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800410a:	69bb      	ldr	r3, [r7, #24]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d00d      	beq.n	800412c <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d009      	beq.n	800412c <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 8004118:	2300      	movs	r3, #0
 800411a:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	699a      	ldr	r2, [r3, #24]
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	69b9      	ldr	r1, [r7, #24]
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f7ff fd66 	bl	8003bf8 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800412c:	7ffb      	ldrb	r3, [r7, #31]
}
 800412e:	4618      	mov	r0, r3
 8004130:	3720      	adds	r7, #32
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}
 8004136:	bf00      	nop
 8004138:	40011000 	.word	0x40011000
 800413c:	40004400 	.word	0x40004400
 8004140:	40004800 	.word	0x40004800
 8004144:	40011400 	.word	0x40011400
 8004148:	40004c00 	.word	0x40004c00
 800414c:	40005000 	.word	0x40005000

08004150 <__errno>:
 8004150:	4b01      	ldr	r3, [pc, #4]	; (8004158 <__errno+0x8>)
 8004152:	6818      	ldr	r0, [r3, #0]
 8004154:	4770      	bx	lr
 8004156:	bf00      	nop
 8004158:	2000000c 	.word	0x2000000c

0800415c <__libc_init_array>:
 800415c:	b570      	push	{r4, r5, r6, lr}
 800415e:	4d0d      	ldr	r5, [pc, #52]	; (8004194 <__libc_init_array+0x38>)
 8004160:	4c0d      	ldr	r4, [pc, #52]	; (8004198 <__libc_init_array+0x3c>)
 8004162:	1b64      	subs	r4, r4, r5
 8004164:	10a4      	asrs	r4, r4, #2
 8004166:	2600      	movs	r6, #0
 8004168:	42a6      	cmp	r6, r4
 800416a:	d109      	bne.n	8004180 <__libc_init_array+0x24>
 800416c:	4d0b      	ldr	r5, [pc, #44]	; (800419c <__libc_init_array+0x40>)
 800416e:	4c0c      	ldr	r4, [pc, #48]	; (80041a0 <__libc_init_array+0x44>)
 8004170:	f002 fd4e 	bl	8006c10 <_init>
 8004174:	1b64      	subs	r4, r4, r5
 8004176:	10a4      	asrs	r4, r4, #2
 8004178:	2600      	movs	r6, #0
 800417a:	42a6      	cmp	r6, r4
 800417c:	d105      	bne.n	800418a <__libc_init_array+0x2e>
 800417e:	bd70      	pop	{r4, r5, r6, pc}
 8004180:	f855 3b04 	ldr.w	r3, [r5], #4
 8004184:	4798      	blx	r3
 8004186:	3601      	adds	r6, #1
 8004188:	e7ee      	b.n	8004168 <__libc_init_array+0xc>
 800418a:	f855 3b04 	ldr.w	r3, [r5], #4
 800418e:	4798      	blx	r3
 8004190:	3601      	adds	r6, #1
 8004192:	e7f2      	b.n	800417a <__libc_init_array+0x1e>
 8004194:	0800709c 	.word	0x0800709c
 8004198:	0800709c 	.word	0x0800709c
 800419c:	0800709c 	.word	0x0800709c
 80041a0:	080070a0 	.word	0x080070a0

080041a4 <memset>:
 80041a4:	4402      	add	r2, r0
 80041a6:	4603      	mov	r3, r0
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d100      	bne.n	80041ae <memset+0xa>
 80041ac:	4770      	bx	lr
 80041ae:	f803 1b01 	strb.w	r1, [r3], #1
 80041b2:	e7f9      	b.n	80041a8 <memset+0x4>

080041b4 <__cvt>:
 80041b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80041b8:	ec55 4b10 	vmov	r4, r5, d0
 80041bc:	2d00      	cmp	r5, #0
 80041be:	460e      	mov	r6, r1
 80041c0:	4619      	mov	r1, r3
 80041c2:	462b      	mov	r3, r5
 80041c4:	bfbb      	ittet	lt
 80041c6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80041ca:	461d      	movlt	r5, r3
 80041cc:	2300      	movge	r3, #0
 80041ce:	232d      	movlt	r3, #45	; 0x2d
 80041d0:	700b      	strb	r3, [r1, #0]
 80041d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80041d4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80041d8:	4691      	mov	r9, r2
 80041da:	f023 0820 	bic.w	r8, r3, #32
 80041de:	bfbc      	itt	lt
 80041e0:	4622      	movlt	r2, r4
 80041e2:	4614      	movlt	r4, r2
 80041e4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80041e8:	d005      	beq.n	80041f6 <__cvt+0x42>
 80041ea:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80041ee:	d100      	bne.n	80041f2 <__cvt+0x3e>
 80041f0:	3601      	adds	r6, #1
 80041f2:	2102      	movs	r1, #2
 80041f4:	e000      	b.n	80041f8 <__cvt+0x44>
 80041f6:	2103      	movs	r1, #3
 80041f8:	ab03      	add	r3, sp, #12
 80041fa:	9301      	str	r3, [sp, #4]
 80041fc:	ab02      	add	r3, sp, #8
 80041fe:	9300      	str	r3, [sp, #0]
 8004200:	ec45 4b10 	vmov	d0, r4, r5
 8004204:	4653      	mov	r3, sl
 8004206:	4632      	mov	r2, r6
 8004208:	f000 fce2 	bl	8004bd0 <_dtoa_r>
 800420c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004210:	4607      	mov	r7, r0
 8004212:	d102      	bne.n	800421a <__cvt+0x66>
 8004214:	f019 0f01 	tst.w	r9, #1
 8004218:	d022      	beq.n	8004260 <__cvt+0xac>
 800421a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800421e:	eb07 0906 	add.w	r9, r7, r6
 8004222:	d110      	bne.n	8004246 <__cvt+0x92>
 8004224:	783b      	ldrb	r3, [r7, #0]
 8004226:	2b30      	cmp	r3, #48	; 0x30
 8004228:	d10a      	bne.n	8004240 <__cvt+0x8c>
 800422a:	2200      	movs	r2, #0
 800422c:	2300      	movs	r3, #0
 800422e:	4620      	mov	r0, r4
 8004230:	4629      	mov	r1, r5
 8004232:	f7fc fc49 	bl	8000ac8 <__aeabi_dcmpeq>
 8004236:	b918      	cbnz	r0, 8004240 <__cvt+0x8c>
 8004238:	f1c6 0601 	rsb	r6, r6, #1
 800423c:	f8ca 6000 	str.w	r6, [sl]
 8004240:	f8da 3000 	ldr.w	r3, [sl]
 8004244:	4499      	add	r9, r3
 8004246:	2200      	movs	r2, #0
 8004248:	2300      	movs	r3, #0
 800424a:	4620      	mov	r0, r4
 800424c:	4629      	mov	r1, r5
 800424e:	f7fc fc3b 	bl	8000ac8 <__aeabi_dcmpeq>
 8004252:	b108      	cbz	r0, 8004258 <__cvt+0xa4>
 8004254:	f8cd 900c 	str.w	r9, [sp, #12]
 8004258:	2230      	movs	r2, #48	; 0x30
 800425a:	9b03      	ldr	r3, [sp, #12]
 800425c:	454b      	cmp	r3, r9
 800425e:	d307      	bcc.n	8004270 <__cvt+0xbc>
 8004260:	9b03      	ldr	r3, [sp, #12]
 8004262:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004264:	1bdb      	subs	r3, r3, r7
 8004266:	4638      	mov	r0, r7
 8004268:	6013      	str	r3, [r2, #0]
 800426a:	b004      	add	sp, #16
 800426c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004270:	1c59      	adds	r1, r3, #1
 8004272:	9103      	str	r1, [sp, #12]
 8004274:	701a      	strb	r2, [r3, #0]
 8004276:	e7f0      	b.n	800425a <__cvt+0xa6>

08004278 <__exponent>:
 8004278:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800427a:	4603      	mov	r3, r0
 800427c:	2900      	cmp	r1, #0
 800427e:	bfb8      	it	lt
 8004280:	4249      	neglt	r1, r1
 8004282:	f803 2b02 	strb.w	r2, [r3], #2
 8004286:	bfb4      	ite	lt
 8004288:	222d      	movlt	r2, #45	; 0x2d
 800428a:	222b      	movge	r2, #43	; 0x2b
 800428c:	2909      	cmp	r1, #9
 800428e:	7042      	strb	r2, [r0, #1]
 8004290:	dd2a      	ble.n	80042e8 <__exponent+0x70>
 8004292:	f10d 0407 	add.w	r4, sp, #7
 8004296:	46a4      	mov	ip, r4
 8004298:	270a      	movs	r7, #10
 800429a:	46a6      	mov	lr, r4
 800429c:	460a      	mov	r2, r1
 800429e:	fb91 f6f7 	sdiv	r6, r1, r7
 80042a2:	fb07 1516 	mls	r5, r7, r6, r1
 80042a6:	3530      	adds	r5, #48	; 0x30
 80042a8:	2a63      	cmp	r2, #99	; 0x63
 80042aa:	f104 34ff 	add.w	r4, r4, #4294967295
 80042ae:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80042b2:	4631      	mov	r1, r6
 80042b4:	dcf1      	bgt.n	800429a <__exponent+0x22>
 80042b6:	3130      	adds	r1, #48	; 0x30
 80042b8:	f1ae 0502 	sub.w	r5, lr, #2
 80042bc:	f804 1c01 	strb.w	r1, [r4, #-1]
 80042c0:	1c44      	adds	r4, r0, #1
 80042c2:	4629      	mov	r1, r5
 80042c4:	4561      	cmp	r1, ip
 80042c6:	d30a      	bcc.n	80042de <__exponent+0x66>
 80042c8:	f10d 0209 	add.w	r2, sp, #9
 80042cc:	eba2 020e 	sub.w	r2, r2, lr
 80042d0:	4565      	cmp	r5, ip
 80042d2:	bf88      	it	hi
 80042d4:	2200      	movhi	r2, #0
 80042d6:	4413      	add	r3, r2
 80042d8:	1a18      	subs	r0, r3, r0
 80042da:	b003      	add	sp, #12
 80042dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80042e2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80042e6:	e7ed      	b.n	80042c4 <__exponent+0x4c>
 80042e8:	2330      	movs	r3, #48	; 0x30
 80042ea:	3130      	adds	r1, #48	; 0x30
 80042ec:	7083      	strb	r3, [r0, #2]
 80042ee:	70c1      	strb	r1, [r0, #3]
 80042f0:	1d03      	adds	r3, r0, #4
 80042f2:	e7f1      	b.n	80042d8 <__exponent+0x60>

080042f4 <_printf_float>:
 80042f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042f8:	ed2d 8b02 	vpush	{d8}
 80042fc:	b08d      	sub	sp, #52	; 0x34
 80042fe:	460c      	mov	r4, r1
 8004300:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004304:	4616      	mov	r6, r2
 8004306:	461f      	mov	r7, r3
 8004308:	4605      	mov	r5, r0
 800430a:	f001 fb45 	bl	8005998 <_localeconv_r>
 800430e:	f8d0 a000 	ldr.w	sl, [r0]
 8004312:	4650      	mov	r0, sl
 8004314:	f7fb ff5c 	bl	80001d0 <strlen>
 8004318:	2300      	movs	r3, #0
 800431a:	930a      	str	r3, [sp, #40]	; 0x28
 800431c:	6823      	ldr	r3, [r4, #0]
 800431e:	9305      	str	r3, [sp, #20]
 8004320:	f8d8 3000 	ldr.w	r3, [r8]
 8004324:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004328:	3307      	adds	r3, #7
 800432a:	f023 0307 	bic.w	r3, r3, #7
 800432e:	f103 0208 	add.w	r2, r3, #8
 8004332:	f8c8 2000 	str.w	r2, [r8]
 8004336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800433a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800433e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004342:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004346:	9307      	str	r3, [sp, #28]
 8004348:	f8cd 8018 	str.w	r8, [sp, #24]
 800434c:	ee08 0a10 	vmov	s16, r0
 8004350:	4b9f      	ldr	r3, [pc, #636]	; (80045d0 <_printf_float+0x2dc>)
 8004352:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004356:	f04f 32ff 	mov.w	r2, #4294967295
 800435a:	f7fc fbe7 	bl	8000b2c <__aeabi_dcmpun>
 800435e:	bb88      	cbnz	r0, 80043c4 <_printf_float+0xd0>
 8004360:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004364:	4b9a      	ldr	r3, [pc, #616]	; (80045d0 <_printf_float+0x2dc>)
 8004366:	f04f 32ff 	mov.w	r2, #4294967295
 800436a:	f7fc fbc1 	bl	8000af0 <__aeabi_dcmple>
 800436e:	bb48      	cbnz	r0, 80043c4 <_printf_float+0xd0>
 8004370:	2200      	movs	r2, #0
 8004372:	2300      	movs	r3, #0
 8004374:	4640      	mov	r0, r8
 8004376:	4649      	mov	r1, r9
 8004378:	f7fc fbb0 	bl	8000adc <__aeabi_dcmplt>
 800437c:	b110      	cbz	r0, 8004384 <_printf_float+0x90>
 800437e:	232d      	movs	r3, #45	; 0x2d
 8004380:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004384:	4b93      	ldr	r3, [pc, #588]	; (80045d4 <_printf_float+0x2e0>)
 8004386:	4894      	ldr	r0, [pc, #592]	; (80045d8 <_printf_float+0x2e4>)
 8004388:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800438c:	bf94      	ite	ls
 800438e:	4698      	movls	r8, r3
 8004390:	4680      	movhi	r8, r0
 8004392:	2303      	movs	r3, #3
 8004394:	6123      	str	r3, [r4, #16]
 8004396:	9b05      	ldr	r3, [sp, #20]
 8004398:	f023 0204 	bic.w	r2, r3, #4
 800439c:	6022      	str	r2, [r4, #0]
 800439e:	f04f 0900 	mov.w	r9, #0
 80043a2:	9700      	str	r7, [sp, #0]
 80043a4:	4633      	mov	r3, r6
 80043a6:	aa0b      	add	r2, sp, #44	; 0x2c
 80043a8:	4621      	mov	r1, r4
 80043aa:	4628      	mov	r0, r5
 80043ac:	f000 f9d8 	bl	8004760 <_printf_common>
 80043b0:	3001      	adds	r0, #1
 80043b2:	f040 8090 	bne.w	80044d6 <_printf_float+0x1e2>
 80043b6:	f04f 30ff 	mov.w	r0, #4294967295
 80043ba:	b00d      	add	sp, #52	; 0x34
 80043bc:	ecbd 8b02 	vpop	{d8}
 80043c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043c4:	4642      	mov	r2, r8
 80043c6:	464b      	mov	r3, r9
 80043c8:	4640      	mov	r0, r8
 80043ca:	4649      	mov	r1, r9
 80043cc:	f7fc fbae 	bl	8000b2c <__aeabi_dcmpun>
 80043d0:	b140      	cbz	r0, 80043e4 <_printf_float+0xf0>
 80043d2:	464b      	mov	r3, r9
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	bfbc      	itt	lt
 80043d8:	232d      	movlt	r3, #45	; 0x2d
 80043da:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80043de:	487f      	ldr	r0, [pc, #508]	; (80045dc <_printf_float+0x2e8>)
 80043e0:	4b7f      	ldr	r3, [pc, #508]	; (80045e0 <_printf_float+0x2ec>)
 80043e2:	e7d1      	b.n	8004388 <_printf_float+0x94>
 80043e4:	6863      	ldr	r3, [r4, #4]
 80043e6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80043ea:	9206      	str	r2, [sp, #24]
 80043ec:	1c5a      	adds	r2, r3, #1
 80043ee:	d13f      	bne.n	8004470 <_printf_float+0x17c>
 80043f0:	2306      	movs	r3, #6
 80043f2:	6063      	str	r3, [r4, #4]
 80043f4:	9b05      	ldr	r3, [sp, #20]
 80043f6:	6861      	ldr	r1, [r4, #4]
 80043f8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80043fc:	2300      	movs	r3, #0
 80043fe:	9303      	str	r3, [sp, #12]
 8004400:	ab0a      	add	r3, sp, #40	; 0x28
 8004402:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004406:	ab09      	add	r3, sp, #36	; 0x24
 8004408:	ec49 8b10 	vmov	d0, r8, r9
 800440c:	9300      	str	r3, [sp, #0]
 800440e:	6022      	str	r2, [r4, #0]
 8004410:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004414:	4628      	mov	r0, r5
 8004416:	f7ff fecd 	bl	80041b4 <__cvt>
 800441a:	9b06      	ldr	r3, [sp, #24]
 800441c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800441e:	2b47      	cmp	r3, #71	; 0x47
 8004420:	4680      	mov	r8, r0
 8004422:	d108      	bne.n	8004436 <_printf_float+0x142>
 8004424:	1cc8      	adds	r0, r1, #3
 8004426:	db02      	blt.n	800442e <_printf_float+0x13a>
 8004428:	6863      	ldr	r3, [r4, #4]
 800442a:	4299      	cmp	r1, r3
 800442c:	dd41      	ble.n	80044b2 <_printf_float+0x1be>
 800442e:	f1ab 0b02 	sub.w	fp, fp, #2
 8004432:	fa5f fb8b 	uxtb.w	fp, fp
 8004436:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800443a:	d820      	bhi.n	800447e <_printf_float+0x18a>
 800443c:	3901      	subs	r1, #1
 800443e:	465a      	mov	r2, fp
 8004440:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004444:	9109      	str	r1, [sp, #36]	; 0x24
 8004446:	f7ff ff17 	bl	8004278 <__exponent>
 800444a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800444c:	1813      	adds	r3, r2, r0
 800444e:	2a01      	cmp	r2, #1
 8004450:	4681      	mov	r9, r0
 8004452:	6123      	str	r3, [r4, #16]
 8004454:	dc02      	bgt.n	800445c <_printf_float+0x168>
 8004456:	6822      	ldr	r2, [r4, #0]
 8004458:	07d2      	lsls	r2, r2, #31
 800445a:	d501      	bpl.n	8004460 <_printf_float+0x16c>
 800445c:	3301      	adds	r3, #1
 800445e:	6123      	str	r3, [r4, #16]
 8004460:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004464:	2b00      	cmp	r3, #0
 8004466:	d09c      	beq.n	80043a2 <_printf_float+0xae>
 8004468:	232d      	movs	r3, #45	; 0x2d
 800446a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800446e:	e798      	b.n	80043a2 <_printf_float+0xae>
 8004470:	9a06      	ldr	r2, [sp, #24]
 8004472:	2a47      	cmp	r2, #71	; 0x47
 8004474:	d1be      	bne.n	80043f4 <_printf_float+0x100>
 8004476:	2b00      	cmp	r3, #0
 8004478:	d1bc      	bne.n	80043f4 <_printf_float+0x100>
 800447a:	2301      	movs	r3, #1
 800447c:	e7b9      	b.n	80043f2 <_printf_float+0xfe>
 800447e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004482:	d118      	bne.n	80044b6 <_printf_float+0x1c2>
 8004484:	2900      	cmp	r1, #0
 8004486:	6863      	ldr	r3, [r4, #4]
 8004488:	dd0b      	ble.n	80044a2 <_printf_float+0x1ae>
 800448a:	6121      	str	r1, [r4, #16]
 800448c:	b913      	cbnz	r3, 8004494 <_printf_float+0x1a0>
 800448e:	6822      	ldr	r2, [r4, #0]
 8004490:	07d0      	lsls	r0, r2, #31
 8004492:	d502      	bpl.n	800449a <_printf_float+0x1a6>
 8004494:	3301      	adds	r3, #1
 8004496:	440b      	add	r3, r1
 8004498:	6123      	str	r3, [r4, #16]
 800449a:	65a1      	str	r1, [r4, #88]	; 0x58
 800449c:	f04f 0900 	mov.w	r9, #0
 80044a0:	e7de      	b.n	8004460 <_printf_float+0x16c>
 80044a2:	b913      	cbnz	r3, 80044aa <_printf_float+0x1b6>
 80044a4:	6822      	ldr	r2, [r4, #0]
 80044a6:	07d2      	lsls	r2, r2, #31
 80044a8:	d501      	bpl.n	80044ae <_printf_float+0x1ba>
 80044aa:	3302      	adds	r3, #2
 80044ac:	e7f4      	b.n	8004498 <_printf_float+0x1a4>
 80044ae:	2301      	movs	r3, #1
 80044b0:	e7f2      	b.n	8004498 <_printf_float+0x1a4>
 80044b2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80044b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80044b8:	4299      	cmp	r1, r3
 80044ba:	db05      	blt.n	80044c8 <_printf_float+0x1d4>
 80044bc:	6823      	ldr	r3, [r4, #0]
 80044be:	6121      	str	r1, [r4, #16]
 80044c0:	07d8      	lsls	r0, r3, #31
 80044c2:	d5ea      	bpl.n	800449a <_printf_float+0x1a6>
 80044c4:	1c4b      	adds	r3, r1, #1
 80044c6:	e7e7      	b.n	8004498 <_printf_float+0x1a4>
 80044c8:	2900      	cmp	r1, #0
 80044ca:	bfd4      	ite	le
 80044cc:	f1c1 0202 	rsble	r2, r1, #2
 80044d0:	2201      	movgt	r2, #1
 80044d2:	4413      	add	r3, r2
 80044d4:	e7e0      	b.n	8004498 <_printf_float+0x1a4>
 80044d6:	6823      	ldr	r3, [r4, #0]
 80044d8:	055a      	lsls	r2, r3, #21
 80044da:	d407      	bmi.n	80044ec <_printf_float+0x1f8>
 80044dc:	6923      	ldr	r3, [r4, #16]
 80044de:	4642      	mov	r2, r8
 80044e0:	4631      	mov	r1, r6
 80044e2:	4628      	mov	r0, r5
 80044e4:	47b8      	blx	r7
 80044e6:	3001      	adds	r0, #1
 80044e8:	d12c      	bne.n	8004544 <_printf_float+0x250>
 80044ea:	e764      	b.n	80043b6 <_printf_float+0xc2>
 80044ec:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80044f0:	f240 80e0 	bls.w	80046b4 <_printf_float+0x3c0>
 80044f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80044f8:	2200      	movs	r2, #0
 80044fa:	2300      	movs	r3, #0
 80044fc:	f7fc fae4 	bl	8000ac8 <__aeabi_dcmpeq>
 8004500:	2800      	cmp	r0, #0
 8004502:	d034      	beq.n	800456e <_printf_float+0x27a>
 8004504:	4a37      	ldr	r2, [pc, #220]	; (80045e4 <_printf_float+0x2f0>)
 8004506:	2301      	movs	r3, #1
 8004508:	4631      	mov	r1, r6
 800450a:	4628      	mov	r0, r5
 800450c:	47b8      	blx	r7
 800450e:	3001      	adds	r0, #1
 8004510:	f43f af51 	beq.w	80043b6 <_printf_float+0xc2>
 8004514:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004518:	429a      	cmp	r2, r3
 800451a:	db02      	blt.n	8004522 <_printf_float+0x22e>
 800451c:	6823      	ldr	r3, [r4, #0]
 800451e:	07d8      	lsls	r0, r3, #31
 8004520:	d510      	bpl.n	8004544 <_printf_float+0x250>
 8004522:	ee18 3a10 	vmov	r3, s16
 8004526:	4652      	mov	r2, sl
 8004528:	4631      	mov	r1, r6
 800452a:	4628      	mov	r0, r5
 800452c:	47b8      	blx	r7
 800452e:	3001      	adds	r0, #1
 8004530:	f43f af41 	beq.w	80043b6 <_printf_float+0xc2>
 8004534:	f04f 0800 	mov.w	r8, #0
 8004538:	f104 091a 	add.w	r9, r4, #26
 800453c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800453e:	3b01      	subs	r3, #1
 8004540:	4543      	cmp	r3, r8
 8004542:	dc09      	bgt.n	8004558 <_printf_float+0x264>
 8004544:	6823      	ldr	r3, [r4, #0]
 8004546:	079b      	lsls	r3, r3, #30
 8004548:	f100 8105 	bmi.w	8004756 <_printf_float+0x462>
 800454c:	68e0      	ldr	r0, [r4, #12]
 800454e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004550:	4298      	cmp	r0, r3
 8004552:	bfb8      	it	lt
 8004554:	4618      	movlt	r0, r3
 8004556:	e730      	b.n	80043ba <_printf_float+0xc6>
 8004558:	2301      	movs	r3, #1
 800455a:	464a      	mov	r2, r9
 800455c:	4631      	mov	r1, r6
 800455e:	4628      	mov	r0, r5
 8004560:	47b8      	blx	r7
 8004562:	3001      	adds	r0, #1
 8004564:	f43f af27 	beq.w	80043b6 <_printf_float+0xc2>
 8004568:	f108 0801 	add.w	r8, r8, #1
 800456c:	e7e6      	b.n	800453c <_printf_float+0x248>
 800456e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004570:	2b00      	cmp	r3, #0
 8004572:	dc39      	bgt.n	80045e8 <_printf_float+0x2f4>
 8004574:	4a1b      	ldr	r2, [pc, #108]	; (80045e4 <_printf_float+0x2f0>)
 8004576:	2301      	movs	r3, #1
 8004578:	4631      	mov	r1, r6
 800457a:	4628      	mov	r0, r5
 800457c:	47b8      	blx	r7
 800457e:	3001      	adds	r0, #1
 8004580:	f43f af19 	beq.w	80043b6 <_printf_float+0xc2>
 8004584:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004588:	4313      	orrs	r3, r2
 800458a:	d102      	bne.n	8004592 <_printf_float+0x29e>
 800458c:	6823      	ldr	r3, [r4, #0]
 800458e:	07d9      	lsls	r1, r3, #31
 8004590:	d5d8      	bpl.n	8004544 <_printf_float+0x250>
 8004592:	ee18 3a10 	vmov	r3, s16
 8004596:	4652      	mov	r2, sl
 8004598:	4631      	mov	r1, r6
 800459a:	4628      	mov	r0, r5
 800459c:	47b8      	blx	r7
 800459e:	3001      	adds	r0, #1
 80045a0:	f43f af09 	beq.w	80043b6 <_printf_float+0xc2>
 80045a4:	f04f 0900 	mov.w	r9, #0
 80045a8:	f104 0a1a 	add.w	sl, r4, #26
 80045ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045ae:	425b      	negs	r3, r3
 80045b0:	454b      	cmp	r3, r9
 80045b2:	dc01      	bgt.n	80045b8 <_printf_float+0x2c4>
 80045b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80045b6:	e792      	b.n	80044de <_printf_float+0x1ea>
 80045b8:	2301      	movs	r3, #1
 80045ba:	4652      	mov	r2, sl
 80045bc:	4631      	mov	r1, r6
 80045be:	4628      	mov	r0, r5
 80045c0:	47b8      	blx	r7
 80045c2:	3001      	adds	r0, #1
 80045c4:	f43f aef7 	beq.w	80043b6 <_printf_float+0xc2>
 80045c8:	f109 0901 	add.w	r9, r9, #1
 80045cc:	e7ee      	b.n	80045ac <_printf_float+0x2b8>
 80045ce:	bf00      	nop
 80045d0:	7fefffff 	.word	0x7fefffff
 80045d4:	08006cc0 	.word	0x08006cc0
 80045d8:	08006cc4 	.word	0x08006cc4
 80045dc:	08006ccc 	.word	0x08006ccc
 80045e0:	08006cc8 	.word	0x08006cc8
 80045e4:	08006cd0 	.word	0x08006cd0
 80045e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80045ea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80045ec:	429a      	cmp	r2, r3
 80045ee:	bfa8      	it	ge
 80045f0:	461a      	movge	r2, r3
 80045f2:	2a00      	cmp	r2, #0
 80045f4:	4691      	mov	r9, r2
 80045f6:	dc37      	bgt.n	8004668 <_printf_float+0x374>
 80045f8:	f04f 0b00 	mov.w	fp, #0
 80045fc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004600:	f104 021a 	add.w	r2, r4, #26
 8004604:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004606:	9305      	str	r3, [sp, #20]
 8004608:	eba3 0309 	sub.w	r3, r3, r9
 800460c:	455b      	cmp	r3, fp
 800460e:	dc33      	bgt.n	8004678 <_printf_float+0x384>
 8004610:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004614:	429a      	cmp	r2, r3
 8004616:	db3b      	blt.n	8004690 <_printf_float+0x39c>
 8004618:	6823      	ldr	r3, [r4, #0]
 800461a:	07da      	lsls	r2, r3, #31
 800461c:	d438      	bmi.n	8004690 <_printf_float+0x39c>
 800461e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004620:	9a05      	ldr	r2, [sp, #20]
 8004622:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004624:	1a9a      	subs	r2, r3, r2
 8004626:	eba3 0901 	sub.w	r9, r3, r1
 800462a:	4591      	cmp	r9, r2
 800462c:	bfa8      	it	ge
 800462e:	4691      	movge	r9, r2
 8004630:	f1b9 0f00 	cmp.w	r9, #0
 8004634:	dc35      	bgt.n	80046a2 <_printf_float+0x3ae>
 8004636:	f04f 0800 	mov.w	r8, #0
 800463a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800463e:	f104 0a1a 	add.w	sl, r4, #26
 8004642:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004646:	1a9b      	subs	r3, r3, r2
 8004648:	eba3 0309 	sub.w	r3, r3, r9
 800464c:	4543      	cmp	r3, r8
 800464e:	f77f af79 	ble.w	8004544 <_printf_float+0x250>
 8004652:	2301      	movs	r3, #1
 8004654:	4652      	mov	r2, sl
 8004656:	4631      	mov	r1, r6
 8004658:	4628      	mov	r0, r5
 800465a:	47b8      	blx	r7
 800465c:	3001      	adds	r0, #1
 800465e:	f43f aeaa 	beq.w	80043b6 <_printf_float+0xc2>
 8004662:	f108 0801 	add.w	r8, r8, #1
 8004666:	e7ec      	b.n	8004642 <_printf_float+0x34e>
 8004668:	4613      	mov	r3, r2
 800466a:	4631      	mov	r1, r6
 800466c:	4642      	mov	r2, r8
 800466e:	4628      	mov	r0, r5
 8004670:	47b8      	blx	r7
 8004672:	3001      	adds	r0, #1
 8004674:	d1c0      	bne.n	80045f8 <_printf_float+0x304>
 8004676:	e69e      	b.n	80043b6 <_printf_float+0xc2>
 8004678:	2301      	movs	r3, #1
 800467a:	4631      	mov	r1, r6
 800467c:	4628      	mov	r0, r5
 800467e:	9205      	str	r2, [sp, #20]
 8004680:	47b8      	blx	r7
 8004682:	3001      	adds	r0, #1
 8004684:	f43f ae97 	beq.w	80043b6 <_printf_float+0xc2>
 8004688:	9a05      	ldr	r2, [sp, #20]
 800468a:	f10b 0b01 	add.w	fp, fp, #1
 800468e:	e7b9      	b.n	8004604 <_printf_float+0x310>
 8004690:	ee18 3a10 	vmov	r3, s16
 8004694:	4652      	mov	r2, sl
 8004696:	4631      	mov	r1, r6
 8004698:	4628      	mov	r0, r5
 800469a:	47b8      	blx	r7
 800469c:	3001      	adds	r0, #1
 800469e:	d1be      	bne.n	800461e <_printf_float+0x32a>
 80046a0:	e689      	b.n	80043b6 <_printf_float+0xc2>
 80046a2:	9a05      	ldr	r2, [sp, #20]
 80046a4:	464b      	mov	r3, r9
 80046a6:	4442      	add	r2, r8
 80046a8:	4631      	mov	r1, r6
 80046aa:	4628      	mov	r0, r5
 80046ac:	47b8      	blx	r7
 80046ae:	3001      	adds	r0, #1
 80046b0:	d1c1      	bne.n	8004636 <_printf_float+0x342>
 80046b2:	e680      	b.n	80043b6 <_printf_float+0xc2>
 80046b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80046b6:	2a01      	cmp	r2, #1
 80046b8:	dc01      	bgt.n	80046be <_printf_float+0x3ca>
 80046ba:	07db      	lsls	r3, r3, #31
 80046bc:	d538      	bpl.n	8004730 <_printf_float+0x43c>
 80046be:	2301      	movs	r3, #1
 80046c0:	4642      	mov	r2, r8
 80046c2:	4631      	mov	r1, r6
 80046c4:	4628      	mov	r0, r5
 80046c6:	47b8      	blx	r7
 80046c8:	3001      	adds	r0, #1
 80046ca:	f43f ae74 	beq.w	80043b6 <_printf_float+0xc2>
 80046ce:	ee18 3a10 	vmov	r3, s16
 80046d2:	4652      	mov	r2, sl
 80046d4:	4631      	mov	r1, r6
 80046d6:	4628      	mov	r0, r5
 80046d8:	47b8      	blx	r7
 80046da:	3001      	adds	r0, #1
 80046dc:	f43f ae6b 	beq.w	80043b6 <_printf_float+0xc2>
 80046e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80046e4:	2200      	movs	r2, #0
 80046e6:	2300      	movs	r3, #0
 80046e8:	f7fc f9ee 	bl	8000ac8 <__aeabi_dcmpeq>
 80046ec:	b9d8      	cbnz	r0, 8004726 <_printf_float+0x432>
 80046ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80046f0:	f108 0201 	add.w	r2, r8, #1
 80046f4:	3b01      	subs	r3, #1
 80046f6:	4631      	mov	r1, r6
 80046f8:	4628      	mov	r0, r5
 80046fa:	47b8      	blx	r7
 80046fc:	3001      	adds	r0, #1
 80046fe:	d10e      	bne.n	800471e <_printf_float+0x42a>
 8004700:	e659      	b.n	80043b6 <_printf_float+0xc2>
 8004702:	2301      	movs	r3, #1
 8004704:	4652      	mov	r2, sl
 8004706:	4631      	mov	r1, r6
 8004708:	4628      	mov	r0, r5
 800470a:	47b8      	blx	r7
 800470c:	3001      	adds	r0, #1
 800470e:	f43f ae52 	beq.w	80043b6 <_printf_float+0xc2>
 8004712:	f108 0801 	add.w	r8, r8, #1
 8004716:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004718:	3b01      	subs	r3, #1
 800471a:	4543      	cmp	r3, r8
 800471c:	dcf1      	bgt.n	8004702 <_printf_float+0x40e>
 800471e:	464b      	mov	r3, r9
 8004720:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004724:	e6dc      	b.n	80044e0 <_printf_float+0x1ec>
 8004726:	f04f 0800 	mov.w	r8, #0
 800472a:	f104 0a1a 	add.w	sl, r4, #26
 800472e:	e7f2      	b.n	8004716 <_printf_float+0x422>
 8004730:	2301      	movs	r3, #1
 8004732:	4642      	mov	r2, r8
 8004734:	e7df      	b.n	80046f6 <_printf_float+0x402>
 8004736:	2301      	movs	r3, #1
 8004738:	464a      	mov	r2, r9
 800473a:	4631      	mov	r1, r6
 800473c:	4628      	mov	r0, r5
 800473e:	47b8      	blx	r7
 8004740:	3001      	adds	r0, #1
 8004742:	f43f ae38 	beq.w	80043b6 <_printf_float+0xc2>
 8004746:	f108 0801 	add.w	r8, r8, #1
 800474a:	68e3      	ldr	r3, [r4, #12]
 800474c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800474e:	1a5b      	subs	r3, r3, r1
 8004750:	4543      	cmp	r3, r8
 8004752:	dcf0      	bgt.n	8004736 <_printf_float+0x442>
 8004754:	e6fa      	b.n	800454c <_printf_float+0x258>
 8004756:	f04f 0800 	mov.w	r8, #0
 800475a:	f104 0919 	add.w	r9, r4, #25
 800475e:	e7f4      	b.n	800474a <_printf_float+0x456>

08004760 <_printf_common>:
 8004760:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004764:	4616      	mov	r6, r2
 8004766:	4699      	mov	r9, r3
 8004768:	688a      	ldr	r2, [r1, #8]
 800476a:	690b      	ldr	r3, [r1, #16]
 800476c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004770:	4293      	cmp	r3, r2
 8004772:	bfb8      	it	lt
 8004774:	4613      	movlt	r3, r2
 8004776:	6033      	str	r3, [r6, #0]
 8004778:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800477c:	4607      	mov	r7, r0
 800477e:	460c      	mov	r4, r1
 8004780:	b10a      	cbz	r2, 8004786 <_printf_common+0x26>
 8004782:	3301      	adds	r3, #1
 8004784:	6033      	str	r3, [r6, #0]
 8004786:	6823      	ldr	r3, [r4, #0]
 8004788:	0699      	lsls	r1, r3, #26
 800478a:	bf42      	ittt	mi
 800478c:	6833      	ldrmi	r3, [r6, #0]
 800478e:	3302      	addmi	r3, #2
 8004790:	6033      	strmi	r3, [r6, #0]
 8004792:	6825      	ldr	r5, [r4, #0]
 8004794:	f015 0506 	ands.w	r5, r5, #6
 8004798:	d106      	bne.n	80047a8 <_printf_common+0x48>
 800479a:	f104 0a19 	add.w	sl, r4, #25
 800479e:	68e3      	ldr	r3, [r4, #12]
 80047a0:	6832      	ldr	r2, [r6, #0]
 80047a2:	1a9b      	subs	r3, r3, r2
 80047a4:	42ab      	cmp	r3, r5
 80047a6:	dc26      	bgt.n	80047f6 <_printf_common+0x96>
 80047a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80047ac:	1e13      	subs	r3, r2, #0
 80047ae:	6822      	ldr	r2, [r4, #0]
 80047b0:	bf18      	it	ne
 80047b2:	2301      	movne	r3, #1
 80047b4:	0692      	lsls	r2, r2, #26
 80047b6:	d42b      	bmi.n	8004810 <_printf_common+0xb0>
 80047b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80047bc:	4649      	mov	r1, r9
 80047be:	4638      	mov	r0, r7
 80047c0:	47c0      	blx	r8
 80047c2:	3001      	adds	r0, #1
 80047c4:	d01e      	beq.n	8004804 <_printf_common+0xa4>
 80047c6:	6823      	ldr	r3, [r4, #0]
 80047c8:	68e5      	ldr	r5, [r4, #12]
 80047ca:	6832      	ldr	r2, [r6, #0]
 80047cc:	f003 0306 	and.w	r3, r3, #6
 80047d0:	2b04      	cmp	r3, #4
 80047d2:	bf08      	it	eq
 80047d4:	1aad      	subeq	r5, r5, r2
 80047d6:	68a3      	ldr	r3, [r4, #8]
 80047d8:	6922      	ldr	r2, [r4, #16]
 80047da:	bf0c      	ite	eq
 80047dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80047e0:	2500      	movne	r5, #0
 80047e2:	4293      	cmp	r3, r2
 80047e4:	bfc4      	itt	gt
 80047e6:	1a9b      	subgt	r3, r3, r2
 80047e8:	18ed      	addgt	r5, r5, r3
 80047ea:	2600      	movs	r6, #0
 80047ec:	341a      	adds	r4, #26
 80047ee:	42b5      	cmp	r5, r6
 80047f0:	d11a      	bne.n	8004828 <_printf_common+0xc8>
 80047f2:	2000      	movs	r0, #0
 80047f4:	e008      	b.n	8004808 <_printf_common+0xa8>
 80047f6:	2301      	movs	r3, #1
 80047f8:	4652      	mov	r2, sl
 80047fa:	4649      	mov	r1, r9
 80047fc:	4638      	mov	r0, r7
 80047fe:	47c0      	blx	r8
 8004800:	3001      	adds	r0, #1
 8004802:	d103      	bne.n	800480c <_printf_common+0xac>
 8004804:	f04f 30ff 	mov.w	r0, #4294967295
 8004808:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800480c:	3501      	adds	r5, #1
 800480e:	e7c6      	b.n	800479e <_printf_common+0x3e>
 8004810:	18e1      	adds	r1, r4, r3
 8004812:	1c5a      	adds	r2, r3, #1
 8004814:	2030      	movs	r0, #48	; 0x30
 8004816:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800481a:	4422      	add	r2, r4
 800481c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004820:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004824:	3302      	adds	r3, #2
 8004826:	e7c7      	b.n	80047b8 <_printf_common+0x58>
 8004828:	2301      	movs	r3, #1
 800482a:	4622      	mov	r2, r4
 800482c:	4649      	mov	r1, r9
 800482e:	4638      	mov	r0, r7
 8004830:	47c0      	blx	r8
 8004832:	3001      	adds	r0, #1
 8004834:	d0e6      	beq.n	8004804 <_printf_common+0xa4>
 8004836:	3601      	adds	r6, #1
 8004838:	e7d9      	b.n	80047ee <_printf_common+0x8e>
	...

0800483c <_printf_i>:
 800483c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004840:	7e0f      	ldrb	r7, [r1, #24]
 8004842:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004844:	2f78      	cmp	r7, #120	; 0x78
 8004846:	4691      	mov	r9, r2
 8004848:	4680      	mov	r8, r0
 800484a:	460c      	mov	r4, r1
 800484c:	469a      	mov	sl, r3
 800484e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004852:	d807      	bhi.n	8004864 <_printf_i+0x28>
 8004854:	2f62      	cmp	r7, #98	; 0x62
 8004856:	d80a      	bhi.n	800486e <_printf_i+0x32>
 8004858:	2f00      	cmp	r7, #0
 800485a:	f000 80d8 	beq.w	8004a0e <_printf_i+0x1d2>
 800485e:	2f58      	cmp	r7, #88	; 0x58
 8004860:	f000 80a3 	beq.w	80049aa <_printf_i+0x16e>
 8004864:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004868:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800486c:	e03a      	b.n	80048e4 <_printf_i+0xa8>
 800486e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004872:	2b15      	cmp	r3, #21
 8004874:	d8f6      	bhi.n	8004864 <_printf_i+0x28>
 8004876:	a101      	add	r1, pc, #4	; (adr r1, 800487c <_printf_i+0x40>)
 8004878:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800487c:	080048d5 	.word	0x080048d5
 8004880:	080048e9 	.word	0x080048e9
 8004884:	08004865 	.word	0x08004865
 8004888:	08004865 	.word	0x08004865
 800488c:	08004865 	.word	0x08004865
 8004890:	08004865 	.word	0x08004865
 8004894:	080048e9 	.word	0x080048e9
 8004898:	08004865 	.word	0x08004865
 800489c:	08004865 	.word	0x08004865
 80048a0:	08004865 	.word	0x08004865
 80048a4:	08004865 	.word	0x08004865
 80048a8:	080049f5 	.word	0x080049f5
 80048ac:	08004919 	.word	0x08004919
 80048b0:	080049d7 	.word	0x080049d7
 80048b4:	08004865 	.word	0x08004865
 80048b8:	08004865 	.word	0x08004865
 80048bc:	08004a17 	.word	0x08004a17
 80048c0:	08004865 	.word	0x08004865
 80048c4:	08004919 	.word	0x08004919
 80048c8:	08004865 	.word	0x08004865
 80048cc:	08004865 	.word	0x08004865
 80048d0:	080049df 	.word	0x080049df
 80048d4:	682b      	ldr	r3, [r5, #0]
 80048d6:	1d1a      	adds	r2, r3, #4
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	602a      	str	r2, [r5, #0]
 80048dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80048e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80048e4:	2301      	movs	r3, #1
 80048e6:	e0a3      	b.n	8004a30 <_printf_i+0x1f4>
 80048e8:	6820      	ldr	r0, [r4, #0]
 80048ea:	6829      	ldr	r1, [r5, #0]
 80048ec:	0606      	lsls	r6, r0, #24
 80048ee:	f101 0304 	add.w	r3, r1, #4
 80048f2:	d50a      	bpl.n	800490a <_printf_i+0xce>
 80048f4:	680e      	ldr	r6, [r1, #0]
 80048f6:	602b      	str	r3, [r5, #0]
 80048f8:	2e00      	cmp	r6, #0
 80048fa:	da03      	bge.n	8004904 <_printf_i+0xc8>
 80048fc:	232d      	movs	r3, #45	; 0x2d
 80048fe:	4276      	negs	r6, r6
 8004900:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004904:	485e      	ldr	r0, [pc, #376]	; (8004a80 <_printf_i+0x244>)
 8004906:	230a      	movs	r3, #10
 8004908:	e019      	b.n	800493e <_printf_i+0x102>
 800490a:	680e      	ldr	r6, [r1, #0]
 800490c:	602b      	str	r3, [r5, #0]
 800490e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004912:	bf18      	it	ne
 8004914:	b236      	sxthne	r6, r6
 8004916:	e7ef      	b.n	80048f8 <_printf_i+0xbc>
 8004918:	682b      	ldr	r3, [r5, #0]
 800491a:	6820      	ldr	r0, [r4, #0]
 800491c:	1d19      	adds	r1, r3, #4
 800491e:	6029      	str	r1, [r5, #0]
 8004920:	0601      	lsls	r1, r0, #24
 8004922:	d501      	bpl.n	8004928 <_printf_i+0xec>
 8004924:	681e      	ldr	r6, [r3, #0]
 8004926:	e002      	b.n	800492e <_printf_i+0xf2>
 8004928:	0646      	lsls	r6, r0, #25
 800492a:	d5fb      	bpl.n	8004924 <_printf_i+0xe8>
 800492c:	881e      	ldrh	r6, [r3, #0]
 800492e:	4854      	ldr	r0, [pc, #336]	; (8004a80 <_printf_i+0x244>)
 8004930:	2f6f      	cmp	r7, #111	; 0x6f
 8004932:	bf0c      	ite	eq
 8004934:	2308      	moveq	r3, #8
 8004936:	230a      	movne	r3, #10
 8004938:	2100      	movs	r1, #0
 800493a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800493e:	6865      	ldr	r5, [r4, #4]
 8004940:	60a5      	str	r5, [r4, #8]
 8004942:	2d00      	cmp	r5, #0
 8004944:	bfa2      	ittt	ge
 8004946:	6821      	ldrge	r1, [r4, #0]
 8004948:	f021 0104 	bicge.w	r1, r1, #4
 800494c:	6021      	strge	r1, [r4, #0]
 800494e:	b90e      	cbnz	r6, 8004954 <_printf_i+0x118>
 8004950:	2d00      	cmp	r5, #0
 8004952:	d04d      	beq.n	80049f0 <_printf_i+0x1b4>
 8004954:	4615      	mov	r5, r2
 8004956:	fbb6 f1f3 	udiv	r1, r6, r3
 800495a:	fb03 6711 	mls	r7, r3, r1, r6
 800495e:	5dc7      	ldrb	r7, [r0, r7]
 8004960:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004964:	4637      	mov	r7, r6
 8004966:	42bb      	cmp	r3, r7
 8004968:	460e      	mov	r6, r1
 800496a:	d9f4      	bls.n	8004956 <_printf_i+0x11a>
 800496c:	2b08      	cmp	r3, #8
 800496e:	d10b      	bne.n	8004988 <_printf_i+0x14c>
 8004970:	6823      	ldr	r3, [r4, #0]
 8004972:	07de      	lsls	r6, r3, #31
 8004974:	d508      	bpl.n	8004988 <_printf_i+0x14c>
 8004976:	6923      	ldr	r3, [r4, #16]
 8004978:	6861      	ldr	r1, [r4, #4]
 800497a:	4299      	cmp	r1, r3
 800497c:	bfde      	ittt	le
 800497e:	2330      	movle	r3, #48	; 0x30
 8004980:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004984:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004988:	1b52      	subs	r2, r2, r5
 800498a:	6122      	str	r2, [r4, #16]
 800498c:	f8cd a000 	str.w	sl, [sp]
 8004990:	464b      	mov	r3, r9
 8004992:	aa03      	add	r2, sp, #12
 8004994:	4621      	mov	r1, r4
 8004996:	4640      	mov	r0, r8
 8004998:	f7ff fee2 	bl	8004760 <_printf_common>
 800499c:	3001      	adds	r0, #1
 800499e:	d14c      	bne.n	8004a3a <_printf_i+0x1fe>
 80049a0:	f04f 30ff 	mov.w	r0, #4294967295
 80049a4:	b004      	add	sp, #16
 80049a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049aa:	4835      	ldr	r0, [pc, #212]	; (8004a80 <_printf_i+0x244>)
 80049ac:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80049b0:	6829      	ldr	r1, [r5, #0]
 80049b2:	6823      	ldr	r3, [r4, #0]
 80049b4:	f851 6b04 	ldr.w	r6, [r1], #4
 80049b8:	6029      	str	r1, [r5, #0]
 80049ba:	061d      	lsls	r5, r3, #24
 80049bc:	d514      	bpl.n	80049e8 <_printf_i+0x1ac>
 80049be:	07df      	lsls	r7, r3, #31
 80049c0:	bf44      	itt	mi
 80049c2:	f043 0320 	orrmi.w	r3, r3, #32
 80049c6:	6023      	strmi	r3, [r4, #0]
 80049c8:	b91e      	cbnz	r6, 80049d2 <_printf_i+0x196>
 80049ca:	6823      	ldr	r3, [r4, #0]
 80049cc:	f023 0320 	bic.w	r3, r3, #32
 80049d0:	6023      	str	r3, [r4, #0]
 80049d2:	2310      	movs	r3, #16
 80049d4:	e7b0      	b.n	8004938 <_printf_i+0xfc>
 80049d6:	6823      	ldr	r3, [r4, #0]
 80049d8:	f043 0320 	orr.w	r3, r3, #32
 80049dc:	6023      	str	r3, [r4, #0]
 80049de:	2378      	movs	r3, #120	; 0x78
 80049e0:	4828      	ldr	r0, [pc, #160]	; (8004a84 <_printf_i+0x248>)
 80049e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80049e6:	e7e3      	b.n	80049b0 <_printf_i+0x174>
 80049e8:	0659      	lsls	r1, r3, #25
 80049ea:	bf48      	it	mi
 80049ec:	b2b6      	uxthmi	r6, r6
 80049ee:	e7e6      	b.n	80049be <_printf_i+0x182>
 80049f0:	4615      	mov	r5, r2
 80049f2:	e7bb      	b.n	800496c <_printf_i+0x130>
 80049f4:	682b      	ldr	r3, [r5, #0]
 80049f6:	6826      	ldr	r6, [r4, #0]
 80049f8:	6961      	ldr	r1, [r4, #20]
 80049fa:	1d18      	adds	r0, r3, #4
 80049fc:	6028      	str	r0, [r5, #0]
 80049fe:	0635      	lsls	r5, r6, #24
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	d501      	bpl.n	8004a08 <_printf_i+0x1cc>
 8004a04:	6019      	str	r1, [r3, #0]
 8004a06:	e002      	b.n	8004a0e <_printf_i+0x1d2>
 8004a08:	0670      	lsls	r0, r6, #25
 8004a0a:	d5fb      	bpl.n	8004a04 <_printf_i+0x1c8>
 8004a0c:	8019      	strh	r1, [r3, #0]
 8004a0e:	2300      	movs	r3, #0
 8004a10:	6123      	str	r3, [r4, #16]
 8004a12:	4615      	mov	r5, r2
 8004a14:	e7ba      	b.n	800498c <_printf_i+0x150>
 8004a16:	682b      	ldr	r3, [r5, #0]
 8004a18:	1d1a      	adds	r2, r3, #4
 8004a1a:	602a      	str	r2, [r5, #0]
 8004a1c:	681d      	ldr	r5, [r3, #0]
 8004a1e:	6862      	ldr	r2, [r4, #4]
 8004a20:	2100      	movs	r1, #0
 8004a22:	4628      	mov	r0, r5
 8004a24:	f7fb fbdc 	bl	80001e0 <memchr>
 8004a28:	b108      	cbz	r0, 8004a2e <_printf_i+0x1f2>
 8004a2a:	1b40      	subs	r0, r0, r5
 8004a2c:	6060      	str	r0, [r4, #4]
 8004a2e:	6863      	ldr	r3, [r4, #4]
 8004a30:	6123      	str	r3, [r4, #16]
 8004a32:	2300      	movs	r3, #0
 8004a34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a38:	e7a8      	b.n	800498c <_printf_i+0x150>
 8004a3a:	6923      	ldr	r3, [r4, #16]
 8004a3c:	462a      	mov	r2, r5
 8004a3e:	4649      	mov	r1, r9
 8004a40:	4640      	mov	r0, r8
 8004a42:	47d0      	blx	sl
 8004a44:	3001      	adds	r0, #1
 8004a46:	d0ab      	beq.n	80049a0 <_printf_i+0x164>
 8004a48:	6823      	ldr	r3, [r4, #0]
 8004a4a:	079b      	lsls	r3, r3, #30
 8004a4c:	d413      	bmi.n	8004a76 <_printf_i+0x23a>
 8004a4e:	68e0      	ldr	r0, [r4, #12]
 8004a50:	9b03      	ldr	r3, [sp, #12]
 8004a52:	4298      	cmp	r0, r3
 8004a54:	bfb8      	it	lt
 8004a56:	4618      	movlt	r0, r3
 8004a58:	e7a4      	b.n	80049a4 <_printf_i+0x168>
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	4632      	mov	r2, r6
 8004a5e:	4649      	mov	r1, r9
 8004a60:	4640      	mov	r0, r8
 8004a62:	47d0      	blx	sl
 8004a64:	3001      	adds	r0, #1
 8004a66:	d09b      	beq.n	80049a0 <_printf_i+0x164>
 8004a68:	3501      	adds	r5, #1
 8004a6a:	68e3      	ldr	r3, [r4, #12]
 8004a6c:	9903      	ldr	r1, [sp, #12]
 8004a6e:	1a5b      	subs	r3, r3, r1
 8004a70:	42ab      	cmp	r3, r5
 8004a72:	dcf2      	bgt.n	8004a5a <_printf_i+0x21e>
 8004a74:	e7eb      	b.n	8004a4e <_printf_i+0x212>
 8004a76:	2500      	movs	r5, #0
 8004a78:	f104 0619 	add.w	r6, r4, #25
 8004a7c:	e7f5      	b.n	8004a6a <_printf_i+0x22e>
 8004a7e:	bf00      	nop
 8004a80:	08006cd2 	.word	0x08006cd2
 8004a84:	08006ce3 	.word	0x08006ce3

08004a88 <iprintf>:
 8004a88:	b40f      	push	{r0, r1, r2, r3}
 8004a8a:	4b0a      	ldr	r3, [pc, #40]	; (8004ab4 <iprintf+0x2c>)
 8004a8c:	b513      	push	{r0, r1, r4, lr}
 8004a8e:	681c      	ldr	r4, [r3, #0]
 8004a90:	b124      	cbz	r4, 8004a9c <iprintf+0x14>
 8004a92:	69a3      	ldr	r3, [r4, #24]
 8004a94:	b913      	cbnz	r3, 8004a9c <iprintf+0x14>
 8004a96:	4620      	mov	r0, r4
 8004a98:	f000 fee0 	bl	800585c <__sinit>
 8004a9c:	ab05      	add	r3, sp, #20
 8004a9e:	9a04      	ldr	r2, [sp, #16]
 8004aa0:	68a1      	ldr	r1, [r4, #8]
 8004aa2:	9301      	str	r3, [sp, #4]
 8004aa4:	4620      	mov	r0, r4
 8004aa6:	f001 fc39 	bl	800631c <_vfiprintf_r>
 8004aaa:	b002      	add	sp, #8
 8004aac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ab0:	b004      	add	sp, #16
 8004ab2:	4770      	bx	lr
 8004ab4:	2000000c 	.word	0x2000000c

08004ab8 <quorem>:
 8004ab8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004abc:	6903      	ldr	r3, [r0, #16]
 8004abe:	690c      	ldr	r4, [r1, #16]
 8004ac0:	42a3      	cmp	r3, r4
 8004ac2:	4607      	mov	r7, r0
 8004ac4:	f2c0 8081 	blt.w	8004bca <quorem+0x112>
 8004ac8:	3c01      	subs	r4, #1
 8004aca:	f101 0814 	add.w	r8, r1, #20
 8004ace:	f100 0514 	add.w	r5, r0, #20
 8004ad2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004ad6:	9301      	str	r3, [sp, #4]
 8004ad8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004adc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004ae0:	3301      	adds	r3, #1
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004ae8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004aec:	fbb2 f6f3 	udiv	r6, r2, r3
 8004af0:	d331      	bcc.n	8004b56 <quorem+0x9e>
 8004af2:	f04f 0e00 	mov.w	lr, #0
 8004af6:	4640      	mov	r0, r8
 8004af8:	46ac      	mov	ip, r5
 8004afa:	46f2      	mov	sl, lr
 8004afc:	f850 2b04 	ldr.w	r2, [r0], #4
 8004b00:	b293      	uxth	r3, r2
 8004b02:	fb06 e303 	mla	r3, r6, r3, lr
 8004b06:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004b0a:	b29b      	uxth	r3, r3
 8004b0c:	ebaa 0303 	sub.w	r3, sl, r3
 8004b10:	f8dc a000 	ldr.w	sl, [ip]
 8004b14:	0c12      	lsrs	r2, r2, #16
 8004b16:	fa13 f38a 	uxtah	r3, r3, sl
 8004b1a:	fb06 e202 	mla	r2, r6, r2, lr
 8004b1e:	9300      	str	r3, [sp, #0]
 8004b20:	9b00      	ldr	r3, [sp, #0]
 8004b22:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004b26:	b292      	uxth	r2, r2
 8004b28:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004b2c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004b30:	f8bd 3000 	ldrh.w	r3, [sp]
 8004b34:	4581      	cmp	r9, r0
 8004b36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004b3a:	f84c 3b04 	str.w	r3, [ip], #4
 8004b3e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004b42:	d2db      	bcs.n	8004afc <quorem+0x44>
 8004b44:	f855 300b 	ldr.w	r3, [r5, fp]
 8004b48:	b92b      	cbnz	r3, 8004b56 <quorem+0x9e>
 8004b4a:	9b01      	ldr	r3, [sp, #4]
 8004b4c:	3b04      	subs	r3, #4
 8004b4e:	429d      	cmp	r5, r3
 8004b50:	461a      	mov	r2, r3
 8004b52:	d32e      	bcc.n	8004bb2 <quorem+0xfa>
 8004b54:	613c      	str	r4, [r7, #16]
 8004b56:	4638      	mov	r0, r7
 8004b58:	f001 f9be 	bl	8005ed8 <__mcmp>
 8004b5c:	2800      	cmp	r0, #0
 8004b5e:	db24      	blt.n	8004baa <quorem+0xf2>
 8004b60:	3601      	adds	r6, #1
 8004b62:	4628      	mov	r0, r5
 8004b64:	f04f 0c00 	mov.w	ip, #0
 8004b68:	f858 2b04 	ldr.w	r2, [r8], #4
 8004b6c:	f8d0 e000 	ldr.w	lr, [r0]
 8004b70:	b293      	uxth	r3, r2
 8004b72:	ebac 0303 	sub.w	r3, ip, r3
 8004b76:	0c12      	lsrs	r2, r2, #16
 8004b78:	fa13 f38e 	uxtah	r3, r3, lr
 8004b7c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004b80:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004b84:	b29b      	uxth	r3, r3
 8004b86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004b8a:	45c1      	cmp	r9, r8
 8004b8c:	f840 3b04 	str.w	r3, [r0], #4
 8004b90:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004b94:	d2e8      	bcs.n	8004b68 <quorem+0xb0>
 8004b96:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004b9a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004b9e:	b922      	cbnz	r2, 8004baa <quorem+0xf2>
 8004ba0:	3b04      	subs	r3, #4
 8004ba2:	429d      	cmp	r5, r3
 8004ba4:	461a      	mov	r2, r3
 8004ba6:	d30a      	bcc.n	8004bbe <quorem+0x106>
 8004ba8:	613c      	str	r4, [r7, #16]
 8004baa:	4630      	mov	r0, r6
 8004bac:	b003      	add	sp, #12
 8004bae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bb2:	6812      	ldr	r2, [r2, #0]
 8004bb4:	3b04      	subs	r3, #4
 8004bb6:	2a00      	cmp	r2, #0
 8004bb8:	d1cc      	bne.n	8004b54 <quorem+0x9c>
 8004bba:	3c01      	subs	r4, #1
 8004bbc:	e7c7      	b.n	8004b4e <quorem+0x96>
 8004bbe:	6812      	ldr	r2, [r2, #0]
 8004bc0:	3b04      	subs	r3, #4
 8004bc2:	2a00      	cmp	r2, #0
 8004bc4:	d1f0      	bne.n	8004ba8 <quorem+0xf0>
 8004bc6:	3c01      	subs	r4, #1
 8004bc8:	e7eb      	b.n	8004ba2 <quorem+0xea>
 8004bca:	2000      	movs	r0, #0
 8004bcc:	e7ee      	b.n	8004bac <quorem+0xf4>
	...

08004bd0 <_dtoa_r>:
 8004bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bd4:	ed2d 8b04 	vpush	{d8-d9}
 8004bd8:	ec57 6b10 	vmov	r6, r7, d0
 8004bdc:	b093      	sub	sp, #76	; 0x4c
 8004bde:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004be0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004be4:	9106      	str	r1, [sp, #24]
 8004be6:	ee10 aa10 	vmov	sl, s0
 8004bea:	4604      	mov	r4, r0
 8004bec:	9209      	str	r2, [sp, #36]	; 0x24
 8004bee:	930c      	str	r3, [sp, #48]	; 0x30
 8004bf0:	46bb      	mov	fp, r7
 8004bf2:	b975      	cbnz	r5, 8004c12 <_dtoa_r+0x42>
 8004bf4:	2010      	movs	r0, #16
 8004bf6:	f000 fed7 	bl	80059a8 <malloc>
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	6260      	str	r0, [r4, #36]	; 0x24
 8004bfe:	b920      	cbnz	r0, 8004c0a <_dtoa_r+0x3a>
 8004c00:	4ba7      	ldr	r3, [pc, #668]	; (8004ea0 <_dtoa_r+0x2d0>)
 8004c02:	21ea      	movs	r1, #234	; 0xea
 8004c04:	48a7      	ldr	r0, [pc, #668]	; (8004ea4 <_dtoa_r+0x2d4>)
 8004c06:	f001 fddf 	bl	80067c8 <__assert_func>
 8004c0a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004c0e:	6005      	str	r5, [r0, #0]
 8004c10:	60c5      	str	r5, [r0, #12]
 8004c12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c14:	6819      	ldr	r1, [r3, #0]
 8004c16:	b151      	cbz	r1, 8004c2e <_dtoa_r+0x5e>
 8004c18:	685a      	ldr	r2, [r3, #4]
 8004c1a:	604a      	str	r2, [r1, #4]
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	4093      	lsls	r3, r2
 8004c20:	608b      	str	r3, [r1, #8]
 8004c22:	4620      	mov	r0, r4
 8004c24:	f000 ff16 	bl	8005a54 <_Bfree>
 8004c28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	601a      	str	r2, [r3, #0]
 8004c2e:	1e3b      	subs	r3, r7, #0
 8004c30:	bfaa      	itet	ge
 8004c32:	2300      	movge	r3, #0
 8004c34:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8004c38:	f8c8 3000 	strge.w	r3, [r8]
 8004c3c:	4b9a      	ldr	r3, [pc, #616]	; (8004ea8 <_dtoa_r+0x2d8>)
 8004c3e:	bfbc      	itt	lt
 8004c40:	2201      	movlt	r2, #1
 8004c42:	f8c8 2000 	strlt.w	r2, [r8]
 8004c46:	ea33 030b 	bics.w	r3, r3, fp
 8004c4a:	d11b      	bne.n	8004c84 <_dtoa_r+0xb4>
 8004c4c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004c4e:	f242 730f 	movw	r3, #9999	; 0x270f
 8004c52:	6013      	str	r3, [r2, #0]
 8004c54:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004c58:	4333      	orrs	r3, r6
 8004c5a:	f000 8592 	beq.w	8005782 <_dtoa_r+0xbb2>
 8004c5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004c60:	b963      	cbnz	r3, 8004c7c <_dtoa_r+0xac>
 8004c62:	4b92      	ldr	r3, [pc, #584]	; (8004eac <_dtoa_r+0x2dc>)
 8004c64:	e022      	b.n	8004cac <_dtoa_r+0xdc>
 8004c66:	4b92      	ldr	r3, [pc, #584]	; (8004eb0 <_dtoa_r+0x2e0>)
 8004c68:	9301      	str	r3, [sp, #4]
 8004c6a:	3308      	adds	r3, #8
 8004c6c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004c6e:	6013      	str	r3, [r2, #0]
 8004c70:	9801      	ldr	r0, [sp, #4]
 8004c72:	b013      	add	sp, #76	; 0x4c
 8004c74:	ecbd 8b04 	vpop	{d8-d9}
 8004c78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c7c:	4b8b      	ldr	r3, [pc, #556]	; (8004eac <_dtoa_r+0x2dc>)
 8004c7e:	9301      	str	r3, [sp, #4]
 8004c80:	3303      	adds	r3, #3
 8004c82:	e7f3      	b.n	8004c6c <_dtoa_r+0x9c>
 8004c84:	2200      	movs	r2, #0
 8004c86:	2300      	movs	r3, #0
 8004c88:	4650      	mov	r0, sl
 8004c8a:	4659      	mov	r1, fp
 8004c8c:	f7fb ff1c 	bl	8000ac8 <__aeabi_dcmpeq>
 8004c90:	ec4b ab19 	vmov	d9, sl, fp
 8004c94:	4680      	mov	r8, r0
 8004c96:	b158      	cbz	r0, 8004cb0 <_dtoa_r+0xe0>
 8004c98:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	6013      	str	r3, [r2, #0]
 8004c9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	f000 856b 	beq.w	800577c <_dtoa_r+0xbac>
 8004ca6:	4883      	ldr	r0, [pc, #524]	; (8004eb4 <_dtoa_r+0x2e4>)
 8004ca8:	6018      	str	r0, [r3, #0]
 8004caa:	1e43      	subs	r3, r0, #1
 8004cac:	9301      	str	r3, [sp, #4]
 8004cae:	e7df      	b.n	8004c70 <_dtoa_r+0xa0>
 8004cb0:	ec4b ab10 	vmov	d0, sl, fp
 8004cb4:	aa10      	add	r2, sp, #64	; 0x40
 8004cb6:	a911      	add	r1, sp, #68	; 0x44
 8004cb8:	4620      	mov	r0, r4
 8004cba:	f001 f9b3 	bl	8006024 <__d2b>
 8004cbe:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8004cc2:	ee08 0a10 	vmov	s16, r0
 8004cc6:	2d00      	cmp	r5, #0
 8004cc8:	f000 8084 	beq.w	8004dd4 <_dtoa_r+0x204>
 8004ccc:	ee19 3a90 	vmov	r3, s19
 8004cd0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004cd4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8004cd8:	4656      	mov	r6, sl
 8004cda:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8004cde:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004ce2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8004ce6:	4b74      	ldr	r3, [pc, #464]	; (8004eb8 <_dtoa_r+0x2e8>)
 8004ce8:	2200      	movs	r2, #0
 8004cea:	4630      	mov	r0, r6
 8004cec:	4639      	mov	r1, r7
 8004cee:	f7fb facb 	bl	8000288 <__aeabi_dsub>
 8004cf2:	a365      	add	r3, pc, #404	; (adr r3, 8004e88 <_dtoa_r+0x2b8>)
 8004cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cf8:	f7fb fc7e 	bl	80005f8 <__aeabi_dmul>
 8004cfc:	a364      	add	r3, pc, #400	; (adr r3, 8004e90 <_dtoa_r+0x2c0>)
 8004cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d02:	f7fb fac3 	bl	800028c <__adddf3>
 8004d06:	4606      	mov	r6, r0
 8004d08:	4628      	mov	r0, r5
 8004d0a:	460f      	mov	r7, r1
 8004d0c:	f7fb fc0a 	bl	8000524 <__aeabi_i2d>
 8004d10:	a361      	add	r3, pc, #388	; (adr r3, 8004e98 <_dtoa_r+0x2c8>)
 8004d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d16:	f7fb fc6f 	bl	80005f8 <__aeabi_dmul>
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	460b      	mov	r3, r1
 8004d1e:	4630      	mov	r0, r6
 8004d20:	4639      	mov	r1, r7
 8004d22:	f7fb fab3 	bl	800028c <__adddf3>
 8004d26:	4606      	mov	r6, r0
 8004d28:	460f      	mov	r7, r1
 8004d2a:	f7fb ff15 	bl	8000b58 <__aeabi_d2iz>
 8004d2e:	2200      	movs	r2, #0
 8004d30:	9000      	str	r0, [sp, #0]
 8004d32:	2300      	movs	r3, #0
 8004d34:	4630      	mov	r0, r6
 8004d36:	4639      	mov	r1, r7
 8004d38:	f7fb fed0 	bl	8000adc <__aeabi_dcmplt>
 8004d3c:	b150      	cbz	r0, 8004d54 <_dtoa_r+0x184>
 8004d3e:	9800      	ldr	r0, [sp, #0]
 8004d40:	f7fb fbf0 	bl	8000524 <__aeabi_i2d>
 8004d44:	4632      	mov	r2, r6
 8004d46:	463b      	mov	r3, r7
 8004d48:	f7fb febe 	bl	8000ac8 <__aeabi_dcmpeq>
 8004d4c:	b910      	cbnz	r0, 8004d54 <_dtoa_r+0x184>
 8004d4e:	9b00      	ldr	r3, [sp, #0]
 8004d50:	3b01      	subs	r3, #1
 8004d52:	9300      	str	r3, [sp, #0]
 8004d54:	9b00      	ldr	r3, [sp, #0]
 8004d56:	2b16      	cmp	r3, #22
 8004d58:	d85a      	bhi.n	8004e10 <_dtoa_r+0x240>
 8004d5a:	9a00      	ldr	r2, [sp, #0]
 8004d5c:	4b57      	ldr	r3, [pc, #348]	; (8004ebc <_dtoa_r+0x2ec>)
 8004d5e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d66:	ec51 0b19 	vmov	r0, r1, d9
 8004d6a:	f7fb feb7 	bl	8000adc <__aeabi_dcmplt>
 8004d6e:	2800      	cmp	r0, #0
 8004d70:	d050      	beq.n	8004e14 <_dtoa_r+0x244>
 8004d72:	9b00      	ldr	r3, [sp, #0]
 8004d74:	3b01      	subs	r3, #1
 8004d76:	9300      	str	r3, [sp, #0]
 8004d78:	2300      	movs	r3, #0
 8004d7a:	930b      	str	r3, [sp, #44]	; 0x2c
 8004d7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004d7e:	1b5d      	subs	r5, r3, r5
 8004d80:	1e6b      	subs	r3, r5, #1
 8004d82:	9305      	str	r3, [sp, #20]
 8004d84:	bf45      	ittet	mi
 8004d86:	f1c5 0301 	rsbmi	r3, r5, #1
 8004d8a:	9304      	strmi	r3, [sp, #16]
 8004d8c:	2300      	movpl	r3, #0
 8004d8e:	2300      	movmi	r3, #0
 8004d90:	bf4c      	ite	mi
 8004d92:	9305      	strmi	r3, [sp, #20]
 8004d94:	9304      	strpl	r3, [sp, #16]
 8004d96:	9b00      	ldr	r3, [sp, #0]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	db3d      	blt.n	8004e18 <_dtoa_r+0x248>
 8004d9c:	9b05      	ldr	r3, [sp, #20]
 8004d9e:	9a00      	ldr	r2, [sp, #0]
 8004da0:	920a      	str	r2, [sp, #40]	; 0x28
 8004da2:	4413      	add	r3, r2
 8004da4:	9305      	str	r3, [sp, #20]
 8004da6:	2300      	movs	r3, #0
 8004da8:	9307      	str	r3, [sp, #28]
 8004daa:	9b06      	ldr	r3, [sp, #24]
 8004dac:	2b09      	cmp	r3, #9
 8004dae:	f200 8089 	bhi.w	8004ec4 <_dtoa_r+0x2f4>
 8004db2:	2b05      	cmp	r3, #5
 8004db4:	bfc4      	itt	gt
 8004db6:	3b04      	subgt	r3, #4
 8004db8:	9306      	strgt	r3, [sp, #24]
 8004dba:	9b06      	ldr	r3, [sp, #24]
 8004dbc:	f1a3 0302 	sub.w	r3, r3, #2
 8004dc0:	bfcc      	ite	gt
 8004dc2:	2500      	movgt	r5, #0
 8004dc4:	2501      	movle	r5, #1
 8004dc6:	2b03      	cmp	r3, #3
 8004dc8:	f200 8087 	bhi.w	8004eda <_dtoa_r+0x30a>
 8004dcc:	e8df f003 	tbb	[pc, r3]
 8004dd0:	59383a2d 	.word	0x59383a2d
 8004dd4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8004dd8:	441d      	add	r5, r3
 8004dda:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8004dde:	2b20      	cmp	r3, #32
 8004de0:	bfc1      	itttt	gt
 8004de2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004de6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8004dea:	fa0b f303 	lslgt.w	r3, fp, r3
 8004dee:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004df2:	bfda      	itte	le
 8004df4:	f1c3 0320 	rsble	r3, r3, #32
 8004df8:	fa06 f003 	lslle.w	r0, r6, r3
 8004dfc:	4318      	orrgt	r0, r3
 8004dfe:	f7fb fb81 	bl	8000504 <__aeabi_ui2d>
 8004e02:	2301      	movs	r3, #1
 8004e04:	4606      	mov	r6, r0
 8004e06:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8004e0a:	3d01      	subs	r5, #1
 8004e0c:	930e      	str	r3, [sp, #56]	; 0x38
 8004e0e:	e76a      	b.n	8004ce6 <_dtoa_r+0x116>
 8004e10:	2301      	movs	r3, #1
 8004e12:	e7b2      	b.n	8004d7a <_dtoa_r+0x1aa>
 8004e14:	900b      	str	r0, [sp, #44]	; 0x2c
 8004e16:	e7b1      	b.n	8004d7c <_dtoa_r+0x1ac>
 8004e18:	9b04      	ldr	r3, [sp, #16]
 8004e1a:	9a00      	ldr	r2, [sp, #0]
 8004e1c:	1a9b      	subs	r3, r3, r2
 8004e1e:	9304      	str	r3, [sp, #16]
 8004e20:	4253      	negs	r3, r2
 8004e22:	9307      	str	r3, [sp, #28]
 8004e24:	2300      	movs	r3, #0
 8004e26:	930a      	str	r3, [sp, #40]	; 0x28
 8004e28:	e7bf      	b.n	8004daa <_dtoa_r+0x1da>
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	9308      	str	r3, [sp, #32]
 8004e2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	dc55      	bgt.n	8004ee0 <_dtoa_r+0x310>
 8004e34:	2301      	movs	r3, #1
 8004e36:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004e3a:	461a      	mov	r2, r3
 8004e3c:	9209      	str	r2, [sp, #36]	; 0x24
 8004e3e:	e00c      	b.n	8004e5a <_dtoa_r+0x28a>
 8004e40:	2301      	movs	r3, #1
 8004e42:	e7f3      	b.n	8004e2c <_dtoa_r+0x25c>
 8004e44:	2300      	movs	r3, #0
 8004e46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004e48:	9308      	str	r3, [sp, #32]
 8004e4a:	9b00      	ldr	r3, [sp, #0]
 8004e4c:	4413      	add	r3, r2
 8004e4e:	9302      	str	r3, [sp, #8]
 8004e50:	3301      	adds	r3, #1
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	9303      	str	r3, [sp, #12]
 8004e56:	bfb8      	it	lt
 8004e58:	2301      	movlt	r3, #1
 8004e5a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	6042      	str	r2, [r0, #4]
 8004e60:	2204      	movs	r2, #4
 8004e62:	f102 0614 	add.w	r6, r2, #20
 8004e66:	429e      	cmp	r6, r3
 8004e68:	6841      	ldr	r1, [r0, #4]
 8004e6a:	d93d      	bls.n	8004ee8 <_dtoa_r+0x318>
 8004e6c:	4620      	mov	r0, r4
 8004e6e:	f000 fdb1 	bl	80059d4 <_Balloc>
 8004e72:	9001      	str	r0, [sp, #4]
 8004e74:	2800      	cmp	r0, #0
 8004e76:	d13b      	bne.n	8004ef0 <_dtoa_r+0x320>
 8004e78:	4b11      	ldr	r3, [pc, #68]	; (8004ec0 <_dtoa_r+0x2f0>)
 8004e7a:	4602      	mov	r2, r0
 8004e7c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004e80:	e6c0      	b.n	8004c04 <_dtoa_r+0x34>
 8004e82:	2301      	movs	r3, #1
 8004e84:	e7df      	b.n	8004e46 <_dtoa_r+0x276>
 8004e86:	bf00      	nop
 8004e88:	636f4361 	.word	0x636f4361
 8004e8c:	3fd287a7 	.word	0x3fd287a7
 8004e90:	8b60c8b3 	.word	0x8b60c8b3
 8004e94:	3fc68a28 	.word	0x3fc68a28
 8004e98:	509f79fb 	.word	0x509f79fb
 8004e9c:	3fd34413 	.word	0x3fd34413
 8004ea0:	08006d01 	.word	0x08006d01
 8004ea4:	08006d18 	.word	0x08006d18
 8004ea8:	7ff00000 	.word	0x7ff00000
 8004eac:	08006cfd 	.word	0x08006cfd
 8004eb0:	08006cf4 	.word	0x08006cf4
 8004eb4:	08006cd1 	.word	0x08006cd1
 8004eb8:	3ff80000 	.word	0x3ff80000
 8004ebc:	08006e68 	.word	0x08006e68
 8004ec0:	08006d73 	.word	0x08006d73
 8004ec4:	2501      	movs	r5, #1
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	9306      	str	r3, [sp, #24]
 8004eca:	9508      	str	r5, [sp, #32]
 8004ecc:	f04f 33ff 	mov.w	r3, #4294967295
 8004ed0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	2312      	movs	r3, #18
 8004ed8:	e7b0      	b.n	8004e3c <_dtoa_r+0x26c>
 8004eda:	2301      	movs	r3, #1
 8004edc:	9308      	str	r3, [sp, #32]
 8004ede:	e7f5      	b.n	8004ecc <_dtoa_r+0x2fc>
 8004ee0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ee2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004ee6:	e7b8      	b.n	8004e5a <_dtoa_r+0x28a>
 8004ee8:	3101      	adds	r1, #1
 8004eea:	6041      	str	r1, [r0, #4]
 8004eec:	0052      	lsls	r2, r2, #1
 8004eee:	e7b8      	b.n	8004e62 <_dtoa_r+0x292>
 8004ef0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004ef2:	9a01      	ldr	r2, [sp, #4]
 8004ef4:	601a      	str	r2, [r3, #0]
 8004ef6:	9b03      	ldr	r3, [sp, #12]
 8004ef8:	2b0e      	cmp	r3, #14
 8004efa:	f200 809d 	bhi.w	8005038 <_dtoa_r+0x468>
 8004efe:	2d00      	cmp	r5, #0
 8004f00:	f000 809a 	beq.w	8005038 <_dtoa_r+0x468>
 8004f04:	9b00      	ldr	r3, [sp, #0]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	dd32      	ble.n	8004f70 <_dtoa_r+0x3a0>
 8004f0a:	4ab7      	ldr	r2, [pc, #732]	; (80051e8 <_dtoa_r+0x618>)
 8004f0c:	f003 030f 	and.w	r3, r3, #15
 8004f10:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004f14:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004f18:	9b00      	ldr	r3, [sp, #0]
 8004f1a:	05d8      	lsls	r0, r3, #23
 8004f1c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8004f20:	d516      	bpl.n	8004f50 <_dtoa_r+0x380>
 8004f22:	4bb2      	ldr	r3, [pc, #712]	; (80051ec <_dtoa_r+0x61c>)
 8004f24:	ec51 0b19 	vmov	r0, r1, d9
 8004f28:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004f2c:	f7fb fc8e 	bl	800084c <__aeabi_ddiv>
 8004f30:	f007 070f 	and.w	r7, r7, #15
 8004f34:	4682      	mov	sl, r0
 8004f36:	468b      	mov	fp, r1
 8004f38:	2503      	movs	r5, #3
 8004f3a:	4eac      	ldr	r6, [pc, #688]	; (80051ec <_dtoa_r+0x61c>)
 8004f3c:	b957      	cbnz	r7, 8004f54 <_dtoa_r+0x384>
 8004f3e:	4642      	mov	r2, r8
 8004f40:	464b      	mov	r3, r9
 8004f42:	4650      	mov	r0, sl
 8004f44:	4659      	mov	r1, fp
 8004f46:	f7fb fc81 	bl	800084c <__aeabi_ddiv>
 8004f4a:	4682      	mov	sl, r0
 8004f4c:	468b      	mov	fp, r1
 8004f4e:	e028      	b.n	8004fa2 <_dtoa_r+0x3d2>
 8004f50:	2502      	movs	r5, #2
 8004f52:	e7f2      	b.n	8004f3a <_dtoa_r+0x36a>
 8004f54:	07f9      	lsls	r1, r7, #31
 8004f56:	d508      	bpl.n	8004f6a <_dtoa_r+0x39a>
 8004f58:	4640      	mov	r0, r8
 8004f5a:	4649      	mov	r1, r9
 8004f5c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004f60:	f7fb fb4a 	bl	80005f8 <__aeabi_dmul>
 8004f64:	3501      	adds	r5, #1
 8004f66:	4680      	mov	r8, r0
 8004f68:	4689      	mov	r9, r1
 8004f6a:	107f      	asrs	r7, r7, #1
 8004f6c:	3608      	adds	r6, #8
 8004f6e:	e7e5      	b.n	8004f3c <_dtoa_r+0x36c>
 8004f70:	f000 809b 	beq.w	80050aa <_dtoa_r+0x4da>
 8004f74:	9b00      	ldr	r3, [sp, #0]
 8004f76:	4f9d      	ldr	r7, [pc, #628]	; (80051ec <_dtoa_r+0x61c>)
 8004f78:	425e      	negs	r6, r3
 8004f7a:	4b9b      	ldr	r3, [pc, #620]	; (80051e8 <_dtoa_r+0x618>)
 8004f7c:	f006 020f 	and.w	r2, r6, #15
 8004f80:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f88:	ec51 0b19 	vmov	r0, r1, d9
 8004f8c:	f7fb fb34 	bl	80005f8 <__aeabi_dmul>
 8004f90:	1136      	asrs	r6, r6, #4
 8004f92:	4682      	mov	sl, r0
 8004f94:	468b      	mov	fp, r1
 8004f96:	2300      	movs	r3, #0
 8004f98:	2502      	movs	r5, #2
 8004f9a:	2e00      	cmp	r6, #0
 8004f9c:	d17a      	bne.n	8005094 <_dtoa_r+0x4c4>
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d1d3      	bne.n	8004f4a <_dtoa_r+0x37a>
 8004fa2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	f000 8082 	beq.w	80050ae <_dtoa_r+0x4de>
 8004faa:	4b91      	ldr	r3, [pc, #580]	; (80051f0 <_dtoa_r+0x620>)
 8004fac:	2200      	movs	r2, #0
 8004fae:	4650      	mov	r0, sl
 8004fb0:	4659      	mov	r1, fp
 8004fb2:	f7fb fd93 	bl	8000adc <__aeabi_dcmplt>
 8004fb6:	2800      	cmp	r0, #0
 8004fb8:	d079      	beq.n	80050ae <_dtoa_r+0x4de>
 8004fba:	9b03      	ldr	r3, [sp, #12]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d076      	beq.n	80050ae <_dtoa_r+0x4de>
 8004fc0:	9b02      	ldr	r3, [sp, #8]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	dd36      	ble.n	8005034 <_dtoa_r+0x464>
 8004fc6:	9b00      	ldr	r3, [sp, #0]
 8004fc8:	4650      	mov	r0, sl
 8004fca:	4659      	mov	r1, fp
 8004fcc:	1e5f      	subs	r7, r3, #1
 8004fce:	2200      	movs	r2, #0
 8004fd0:	4b88      	ldr	r3, [pc, #544]	; (80051f4 <_dtoa_r+0x624>)
 8004fd2:	f7fb fb11 	bl	80005f8 <__aeabi_dmul>
 8004fd6:	9e02      	ldr	r6, [sp, #8]
 8004fd8:	4682      	mov	sl, r0
 8004fda:	468b      	mov	fp, r1
 8004fdc:	3501      	adds	r5, #1
 8004fde:	4628      	mov	r0, r5
 8004fe0:	f7fb faa0 	bl	8000524 <__aeabi_i2d>
 8004fe4:	4652      	mov	r2, sl
 8004fe6:	465b      	mov	r3, fp
 8004fe8:	f7fb fb06 	bl	80005f8 <__aeabi_dmul>
 8004fec:	4b82      	ldr	r3, [pc, #520]	; (80051f8 <_dtoa_r+0x628>)
 8004fee:	2200      	movs	r2, #0
 8004ff0:	f7fb f94c 	bl	800028c <__adddf3>
 8004ff4:	46d0      	mov	r8, sl
 8004ff6:	46d9      	mov	r9, fp
 8004ff8:	4682      	mov	sl, r0
 8004ffa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8004ffe:	2e00      	cmp	r6, #0
 8005000:	d158      	bne.n	80050b4 <_dtoa_r+0x4e4>
 8005002:	4b7e      	ldr	r3, [pc, #504]	; (80051fc <_dtoa_r+0x62c>)
 8005004:	2200      	movs	r2, #0
 8005006:	4640      	mov	r0, r8
 8005008:	4649      	mov	r1, r9
 800500a:	f7fb f93d 	bl	8000288 <__aeabi_dsub>
 800500e:	4652      	mov	r2, sl
 8005010:	465b      	mov	r3, fp
 8005012:	4680      	mov	r8, r0
 8005014:	4689      	mov	r9, r1
 8005016:	f7fb fd7f 	bl	8000b18 <__aeabi_dcmpgt>
 800501a:	2800      	cmp	r0, #0
 800501c:	f040 8295 	bne.w	800554a <_dtoa_r+0x97a>
 8005020:	4652      	mov	r2, sl
 8005022:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005026:	4640      	mov	r0, r8
 8005028:	4649      	mov	r1, r9
 800502a:	f7fb fd57 	bl	8000adc <__aeabi_dcmplt>
 800502e:	2800      	cmp	r0, #0
 8005030:	f040 8289 	bne.w	8005546 <_dtoa_r+0x976>
 8005034:	ec5b ab19 	vmov	sl, fp, d9
 8005038:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800503a:	2b00      	cmp	r3, #0
 800503c:	f2c0 8148 	blt.w	80052d0 <_dtoa_r+0x700>
 8005040:	9a00      	ldr	r2, [sp, #0]
 8005042:	2a0e      	cmp	r2, #14
 8005044:	f300 8144 	bgt.w	80052d0 <_dtoa_r+0x700>
 8005048:	4b67      	ldr	r3, [pc, #412]	; (80051e8 <_dtoa_r+0x618>)
 800504a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800504e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005052:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005054:	2b00      	cmp	r3, #0
 8005056:	f280 80d5 	bge.w	8005204 <_dtoa_r+0x634>
 800505a:	9b03      	ldr	r3, [sp, #12]
 800505c:	2b00      	cmp	r3, #0
 800505e:	f300 80d1 	bgt.w	8005204 <_dtoa_r+0x634>
 8005062:	f040 826f 	bne.w	8005544 <_dtoa_r+0x974>
 8005066:	4b65      	ldr	r3, [pc, #404]	; (80051fc <_dtoa_r+0x62c>)
 8005068:	2200      	movs	r2, #0
 800506a:	4640      	mov	r0, r8
 800506c:	4649      	mov	r1, r9
 800506e:	f7fb fac3 	bl	80005f8 <__aeabi_dmul>
 8005072:	4652      	mov	r2, sl
 8005074:	465b      	mov	r3, fp
 8005076:	f7fb fd45 	bl	8000b04 <__aeabi_dcmpge>
 800507a:	9e03      	ldr	r6, [sp, #12]
 800507c:	4637      	mov	r7, r6
 800507e:	2800      	cmp	r0, #0
 8005080:	f040 8245 	bne.w	800550e <_dtoa_r+0x93e>
 8005084:	9d01      	ldr	r5, [sp, #4]
 8005086:	2331      	movs	r3, #49	; 0x31
 8005088:	f805 3b01 	strb.w	r3, [r5], #1
 800508c:	9b00      	ldr	r3, [sp, #0]
 800508e:	3301      	adds	r3, #1
 8005090:	9300      	str	r3, [sp, #0]
 8005092:	e240      	b.n	8005516 <_dtoa_r+0x946>
 8005094:	07f2      	lsls	r2, r6, #31
 8005096:	d505      	bpl.n	80050a4 <_dtoa_r+0x4d4>
 8005098:	e9d7 2300 	ldrd	r2, r3, [r7]
 800509c:	f7fb faac 	bl	80005f8 <__aeabi_dmul>
 80050a0:	3501      	adds	r5, #1
 80050a2:	2301      	movs	r3, #1
 80050a4:	1076      	asrs	r6, r6, #1
 80050a6:	3708      	adds	r7, #8
 80050a8:	e777      	b.n	8004f9a <_dtoa_r+0x3ca>
 80050aa:	2502      	movs	r5, #2
 80050ac:	e779      	b.n	8004fa2 <_dtoa_r+0x3d2>
 80050ae:	9f00      	ldr	r7, [sp, #0]
 80050b0:	9e03      	ldr	r6, [sp, #12]
 80050b2:	e794      	b.n	8004fde <_dtoa_r+0x40e>
 80050b4:	9901      	ldr	r1, [sp, #4]
 80050b6:	4b4c      	ldr	r3, [pc, #304]	; (80051e8 <_dtoa_r+0x618>)
 80050b8:	4431      	add	r1, r6
 80050ba:	910d      	str	r1, [sp, #52]	; 0x34
 80050bc:	9908      	ldr	r1, [sp, #32]
 80050be:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80050c2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80050c6:	2900      	cmp	r1, #0
 80050c8:	d043      	beq.n	8005152 <_dtoa_r+0x582>
 80050ca:	494d      	ldr	r1, [pc, #308]	; (8005200 <_dtoa_r+0x630>)
 80050cc:	2000      	movs	r0, #0
 80050ce:	f7fb fbbd 	bl	800084c <__aeabi_ddiv>
 80050d2:	4652      	mov	r2, sl
 80050d4:	465b      	mov	r3, fp
 80050d6:	f7fb f8d7 	bl	8000288 <__aeabi_dsub>
 80050da:	9d01      	ldr	r5, [sp, #4]
 80050dc:	4682      	mov	sl, r0
 80050de:	468b      	mov	fp, r1
 80050e0:	4649      	mov	r1, r9
 80050e2:	4640      	mov	r0, r8
 80050e4:	f7fb fd38 	bl	8000b58 <__aeabi_d2iz>
 80050e8:	4606      	mov	r6, r0
 80050ea:	f7fb fa1b 	bl	8000524 <__aeabi_i2d>
 80050ee:	4602      	mov	r2, r0
 80050f0:	460b      	mov	r3, r1
 80050f2:	4640      	mov	r0, r8
 80050f4:	4649      	mov	r1, r9
 80050f6:	f7fb f8c7 	bl	8000288 <__aeabi_dsub>
 80050fa:	3630      	adds	r6, #48	; 0x30
 80050fc:	f805 6b01 	strb.w	r6, [r5], #1
 8005100:	4652      	mov	r2, sl
 8005102:	465b      	mov	r3, fp
 8005104:	4680      	mov	r8, r0
 8005106:	4689      	mov	r9, r1
 8005108:	f7fb fce8 	bl	8000adc <__aeabi_dcmplt>
 800510c:	2800      	cmp	r0, #0
 800510e:	d163      	bne.n	80051d8 <_dtoa_r+0x608>
 8005110:	4642      	mov	r2, r8
 8005112:	464b      	mov	r3, r9
 8005114:	4936      	ldr	r1, [pc, #216]	; (80051f0 <_dtoa_r+0x620>)
 8005116:	2000      	movs	r0, #0
 8005118:	f7fb f8b6 	bl	8000288 <__aeabi_dsub>
 800511c:	4652      	mov	r2, sl
 800511e:	465b      	mov	r3, fp
 8005120:	f7fb fcdc 	bl	8000adc <__aeabi_dcmplt>
 8005124:	2800      	cmp	r0, #0
 8005126:	f040 80b5 	bne.w	8005294 <_dtoa_r+0x6c4>
 800512a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800512c:	429d      	cmp	r5, r3
 800512e:	d081      	beq.n	8005034 <_dtoa_r+0x464>
 8005130:	4b30      	ldr	r3, [pc, #192]	; (80051f4 <_dtoa_r+0x624>)
 8005132:	2200      	movs	r2, #0
 8005134:	4650      	mov	r0, sl
 8005136:	4659      	mov	r1, fp
 8005138:	f7fb fa5e 	bl	80005f8 <__aeabi_dmul>
 800513c:	4b2d      	ldr	r3, [pc, #180]	; (80051f4 <_dtoa_r+0x624>)
 800513e:	4682      	mov	sl, r0
 8005140:	468b      	mov	fp, r1
 8005142:	4640      	mov	r0, r8
 8005144:	4649      	mov	r1, r9
 8005146:	2200      	movs	r2, #0
 8005148:	f7fb fa56 	bl	80005f8 <__aeabi_dmul>
 800514c:	4680      	mov	r8, r0
 800514e:	4689      	mov	r9, r1
 8005150:	e7c6      	b.n	80050e0 <_dtoa_r+0x510>
 8005152:	4650      	mov	r0, sl
 8005154:	4659      	mov	r1, fp
 8005156:	f7fb fa4f 	bl	80005f8 <__aeabi_dmul>
 800515a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800515c:	9d01      	ldr	r5, [sp, #4]
 800515e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005160:	4682      	mov	sl, r0
 8005162:	468b      	mov	fp, r1
 8005164:	4649      	mov	r1, r9
 8005166:	4640      	mov	r0, r8
 8005168:	f7fb fcf6 	bl	8000b58 <__aeabi_d2iz>
 800516c:	4606      	mov	r6, r0
 800516e:	f7fb f9d9 	bl	8000524 <__aeabi_i2d>
 8005172:	3630      	adds	r6, #48	; 0x30
 8005174:	4602      	mov	r2, r0
 8005176:	460b      	mov	r3, r1
 8005178:	4640      	mov	r0, r8
 800517a:	4649      	mov	r1, r9
 800517c:	f7fb f884 	bl	8000288 <__aeabi_dsub>
 8005180:	f805 6b01 	strb.w	r6, [r5], #1
 8005184:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005186:	429d      	cmp	r5, r3
 8005188:	4680      	mov	r8, r0
 800518a:	4689      	mov	r9, r1
 800518c:	f04f 0200 	mov.w	r2, #0
 8005190:	d124      	bne.n	80051dc <_dtoa_r+0x60c>
 8005192:	4b1b      	ldr	r3, [pc, #108]	; (8005200 <_dtoa_r+0x630>)
 8005194:	4650      	mov	r0, sl
 8005196:	4659      	mov	r1, fp
 8005198:	f7fb f878 	bl	800028c <__adddf3>
 800519c:	4602      	mov	r2, r0
 800519e:	460b      	mov	r3, r1
 80051a0:	4640      	mov	r0, r8
 80051a2:	4649      	mov	r1, r9
 80051a4:	f7fb fcb8 	bl	8000b18 <__aeabi_dcmpgt>
 80051a8:	2800      	cmp	r0, #0
 80051aa:	d173      	bne.n	8005294 <_dtoa_r+0x6c4>
 80051ac:	4652      	mov	r2, sl
 80051ae:	465b      	mov	r3, fp
 80051b0:	4913      	ldr	r1, [pc, #76]	; (8005200 <_dtoa_r+0x630>)
 80051b2:	2000      	movs	r0, #0
 80051b4:	f7fb f868 	bl	8000288 <__aeabi_dsub>
 80051b8:	4602      	mov	r2, r0
 80051ba:	460b      	mov	r3, r1
 80051bc:	4640      	mov	r0, r8
 80051be:	4649      	mov	r1, r9
 80051c0:	f7fb fc8c 	bl	8000adc <__aeabi_dcmplt>
 80051c4:	2800      	cmp	r0, #0
 80051c6:	f43f af35 	beq.w	8005034 <_dtoa_r+0x464>
 80051ca:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80051cc:	1e6b      	subs	r3, r5, #1
 80051ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80051d0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80051d4:	2b30      	cmp	r3, #48	; 0x30
 80051d6:	d0f8      	beq.n	80051ca <_dtoa_r+0x5fa>
 80051d8:	9700      	str	r7, [sp, #0]
 80051da:	e049      	b.n	8005270 <_dtoa_r+0x6a0>
 80051dc:	4b05      	ldr	r3, [pc, #20]	; (80051f4 <_dtoa_r+0x624>)
 80051de:	f7fb fa0b 	bl	80005f8 <__aeabi_dmul>
 80051e2:	4680      	mov	r8, r0
 80051e4:	4689      	mov	r9, r1
 80051e6:	e7bd      	b.n	8005164 <_dtoa_r+0x594>
 80051e8:	08006e68 	.word	0x08006e68
 80051ec:	08006e40 	.word	0x08006e40
 80051f0:	3ff00000 	.word	0x3ff00000
 80051f4:	40240000 	.word	0x40240000
 80051f8:	401c0000 	.word	0x401c0000
 80051fc:	40140000 	.word	0x40140000
 8005200:	3fe00000 	.word	0x3fe00000
 8005204:	9d01      	ldr	r5, [sp, #4]
 8005206:	4656      	mov	r6, sl
 8005208:	465f      	mov	r7, fp
 800520a:	4642      	mov	r2, r8
 800520c:	464b      	mov	r3, r9
 800520e:	4630      	mov	r0, r6
 8005210:	4639      	mov	r1, r7
 8005212:	f7fb fb1b 	bl	800084c <__aeabi_ddiv>
 8005216:	f7fb fc9f 	bl	8000b58 <__aeabi_d2iz>
 800521a:	4682      	mov	sl, r0
 800521c:	f7fb f982 	bl	8000524 <__aeabi_i2d>
 8005220:	4642      	mov	r2, r8
 8005222:	464b      	mov	r3, r9
 8005224:	f7fb f9e8 	bl	80005f8 <__aeabi_dmul>
 8005228:	4602      	mov	r2, r0
 800522a:	460b      	mov	r3, r1
 800522c:	4630      	mov	r0, r6
 800522e:	4639      	mov	r1, r7
 8005230:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8005234:	f7fb f828 	bl	8000288 <__aeabi_dsub>
 8005238:	f805 6b01 	strb.w	r6, [r5], #1
 800523c:	9e01      	ldr	r6, [sp, #4]
 800523e:	9f03      	ldr	r7, [sp, #12]
 8005240:	1bae      	subs	r6, r5, r6
 8005242:	42b7      	cmp	r7, r6
 8005244:	4602      	mov	r2, r0
 8005246:	460b      	mov	r3, r1
 8005248:	d135      	bne.n	80052b6 <_dtoa_r+0x6e6>
 800524a:	f7fb f81f 	bl	800028c <__adddf3>
 800524e:	4642      	mov	r2, r8
 8005250:	464b      	mov	r3, r9
 8005252:	4606      	mov	r6, r0
 8005254:	460f      	mov	r7, r1
 8005256:	f7fb fc5f 	bl	8000b18 <__aeabi_dcmpgt>
 800525a:	b9d0      	cbnz	r0, 8005292 <_dtoa_r+0x6c2>
 800525c:	4642      	mov	r2, r8
 800525e:	464b      	mov	r3, r9
 8005260:	4630      	mov	r0, r6
 8005262:	4639      	mov	r1, r7
 8005264:	f7fb fc30 	bl	8000ac8 <__aeabi_dcmpeq>
 8005268:	b110      	cbz	r0, 8005270 <_dtoa_r+0x6a0>
 800526a:	f01a 0f01 	tst.w	sl, #1
 800526e:	d110      	bne.n	8005292 <_dtoa_r+0x6c2>
 8005270:	4620      	mov	r0, r4
 8005272:	ee18 1a10 	vmov	r1, s16
 8005276:	f000 fbed 	bl	8005a54 <_Bfree>
 800527a:	2300      	movs	r3, #0
 800527c:	9800      	ldr	r0, [sp, #0]
 800527e:	702b      	strb	r3, [r5, #0]
 8005280:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005282:	3001      	adds	r0, #1
 8005284:	6018      	str	r0, [r3, #0]
 8005286:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005288:	2b00      	cmp	r3, #0
 800528a:	f43f acf1 	beq.w	8004c70 <_dtoa_r+0xa0>
 800528e:	601d      	str	r5, [r3, #0]
 8005290:	e4ee      	b.n	8004c70 <_dtoa_r+0xa0>
 8005292:	9f00      	ldr	r7, [sp, #0]
 8005294:	462b      	mov	r3, r5
 8005296:	461d      	mov	r5, r3
 8005298:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800529c:	2a39      	cmp	r2, #57	; 0x39
 800529e:	d106      	bne.n	80052ae <_dtoa_r+0x6de>
 80052a0:	9a01      	ldr	r2, [sp, #4]
 80052a2:	429a      	cmp	r2, r3
 80052a4:	d1f7      	bne.n	8005296 <_dtoa_r+0x6c6>
 80052a6:	9901      	ldr	r1, [sp, #4]
 80052a8:	2230      	movs	r2, #48	; 0x30
 80052aa:	3701      	adds	r7, #1
 80052ac:	700a      	strb	r2, [r1, #0]
 80052ae:	781a      	ldrb	r2, [r3, #0]
 80052b0:	3201      	adds	r2, #1
 80052b2:	701a      	strb	r2, [r3, #0]
 80052b4:	e790      	b.n	80051d8 <_dtoa_r+0x608>
 80052b6:	4ba6      	ldr	r3, [pc, #664]	; (8005550 <_dtoa_r+0x980>)
 80052b8:	2200      	movs	r2, #0
 80052ba:	f7fb f99d 	bl	80005f8 <__aeabi_dmul>
 80052be:	2200      	movs	r2, #0
 80052c0:	2300      	movs	r3, #0
 80052c2:	4606      	mov	r6, r0
 80052c4:	460f      	mov	r7, r1
 80052c6:	f7fb fbff 	bl	8000ac8 <__aeabi_dcmpeq>
 80052ca:	2800      	cmp	r0, #0
 80052cc:	d09d      	beq.n	800520a <_dtoa_r+0x63a>
 80052ce:	e7cf      	b.n	8005270 <_dtoa_r+0x6a0>
 80052d0:	9a08      	ldr	r2, [sp, #32]
 80052d2:	2a00      	cmp	r2, #0
 80052d4:	f000 80d7 	beq.w	8005486 <_dtoa_r+0x8b6>
 80052d8:	9a06      	ldr	r2, [sp, #24]
 80052da:	2a01      	cmp	r2, #1
 80052dc:	f300 80ba 	bgt.w	8005454 <_dtoa_r+0x884>
 80052e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80052e2:	2a00      	cmp	r2, #0
 80052e4:	f000 80b2 	beq.w	800544c <_dtoa_r+0x87c>
 80052e8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80052ec:	9e07      	ldr	r6, [sp, #28]
 80052ee:	9d04      	ldr	r5, [sp, #16]
 80052f0:	9a04      	ldr	r2, [sp, #16]
 80052f2:	441a      	add	r2, r3
 80052f4:	9204      	str	r2, [sp, #16]
 80052f6:	9a05      	ldr	r2, [sp, #20]
 80052f8:	2101      	movs	r1, #1
 80052fa:	441a      	add	r2, r3
 80052fc:	4620      	mov	r0, r4
 80052fe:	9205      	str	r2, [sp, #20]
 8005300:	f000 fc60 	bl	8005bc4 <__i2b>
 8005304:	4607      	mov	r7, r0
 8005306:	2d00      	cmp	r5, #0
 8005308:	dd0c      	ble.n	8005324 <_dtoa_r+0x754>
 800530a:	9b05      	ldr	r3, [sp, #20]
 800530c:	2b00      	cmp	r3, #0
 800530e:	dd09      	ble.n	8005324 <_dtoa_r+0x754>
 8005310:	42ab      	cmp	r3, r5
 8005312:	9a04      	ldr	r2, [sp, #16]
 8005314:	bfa8      	it	ge
 8005316:	462b      	movge	r3, r5
 8005318:	1ad2      	subs	r2, r2, r3
 800531a:	9204      	str	r2, [sp, #16]
 800531c:	9a05      	ldr	r2, [sp, #20]
 800531e:	1aed      	subs	r5, r5, r3
 8005320:	1ad3      	subs	r3, r2, r3
 8005322:	9305      	str	r3, [sp, #20]
 8005324:	9b07      	ldr	r3, [sp, #28]
 8005326:	b31b      	cbz	r3, 8005370 <_dtoa_r+0x7a0>
 8005328:	9b08      	ldr	r3, [sp, #32]
 800532a:	2b00      	cmp	r3, #0
 800532c:	f000 80af 	beq.w	800548e <_dtoa_r+0x8be>
 8005330:	2e00      	cmp	r6, #0
 8005332:	dd13      	ble.n	800535c <_dtoa_r+0x78c>
 8005334:	4639      	mov	r1, r7
 8005336:	4632      	mov	r2, r6
 8005338:	4620      	mov	r0, r4
 800533a:	f000 fd03 	bl	8005d44 <__pow5mult>
 800533e:	ee18 2a10 	vmov	r2, s16
 8005342:	4601      	mov	r1, r0
 8005344:	4607      	mov	r7, r0
 8005346:	4620      	mov	r0, r4
 8005348:	f000 fc52 	bl	8005bf0 <__multiply>
 800534c:	ee18 1a10 	vmov	r1, s16
 8005350:	4680      	mov	r8, r0
 8005352:	4620      	mov	r0, r4
 8005354:	f000 fb7e 	bl	8005a54 <_Bfree>
 8005358:	ee08 8a10 	vmov	s16, r8
 800535c:	9b07      	ldr	r3, [sp, #28]
 800535e:	1b9a      	subs	r2, r3, r6
 8005360:	d006      	beq.n	8005370 <_dtoa_r+0x7a0>
 8005362:	ee18 1a10 	vmov	r1, s16
 8005366:	4620      	mov	r0, r4
 8005368:	f000 fcec 	bl	8005d44 <__pow5mult>
 800536c:	ee08 0a10 	vmov	s16, r0
 8005370:	2101      	movs	r1, #1
 8005372:	4620      	mov	r0, r4
 8005374:	f000 fc26 	bl	8005bc4 <__i2b>
 8005378:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800537a:	2b00      	cmp	r3, #0
 800537c:	4606      	mov	r6, r0
 800537e:	f340 8088 	ble.w	8005492 <_dtoa_r+0x8c2>
 8005382:	461a      	mov	r2, r3
 8005384:	4601      	mov	r1, r0
 8005386:	4620      	mov	r0, r4
 8005388:	f000 fcdc 	bl	8005d44 <__pow5mult>
 800538c:	9b06      	ldr	r3, [sp, #24]
 800538e:	2b01      	cmp	r3, #1
 8005390:	4606      	mov	r6, r0
 8005392:	f340 8081 	ble.w	8005498 <_dtoa_r+0x8c8>
 8005396:	f04f 0800 	mov.w	r8, #0
 800539a:	6933      	ldr	r3, [r6, #16]
 800539c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80053a0:	6918      	ldr	r0, [r3, #16]
 80053a2:	f000 fbbf 	bl	8005b24 <__hi0bits>
 80053a6:	f1c0 0020 	rsb	r0, r0, #32
 80053aa:	9b05      	ldr	r3, [sp, #20]
 80053ac:	4418      	add	r0, r3
 80053ae:	f010 001f 	ands.w	r0, r0, #31
 80053b2:	f000 8092 	beq.w	80054da <_dtoa_r+0x90a>
 80053b6:	f1c0 0320 	rsb	r3, r0, #32
 80053ba:	2b04      	cmp	r3, #4
 80053bc:	f340 808a 	ble.w	80054d4 <_dtoa_r+0x904>
 80053c0:	f1c0 001c 	rsb	r0, r0, #28
 80053c4:	9b04      	ldr	r3, [sp, #16]
 80053c6:	4403      	add	r3, r0
 80053c8:	9304      	str	r3, [sp, #16]
 80053ca:	9b05      	ldr	r3, [sp, #20]
 80053cc:	4403      	add	r3, r0
 80053ce:	4405      	add	r5, r0
 80053d0:	9305      	str	r3, [sp, #20]
 80053d2:	9b04      	ldr	r3, [sp, #16]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	dd07      	ble.n	80053e8 <_dtoa_r+0x818>
 80053d8:	ee18 1a10 	vmov	r1, s16
 80053dc:	461a      	mov	r2, r3
 80053de:	4620      	mov	r0, r4
 80053e0:	f000 fd0a 	bl	8005df8 <__lshift>
 80053e4:	ee08 0a10 	vmov	s16, r0
 80053e8:	9b05      	ldr	r3, [sp, #20]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	dd05      	ble.n	80053fa <_dtoa_r+0x82a>
 80053ee:	4631      	mov	r1, r6
 80053f0:	461a      	mov	r2, r3
 80053f2:	4620      	mov	r0, r4
 80053f4:	f000 fd00 	bl	8005df8 <__lshift>
 80053f8:	4606      	mov	r6, r0
 80053fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d06e      	beq.n	80054de <_dtoa_r+0x90e>
 8005400:	ee18 0a10 	vmov	r0, s16
 8005404:	4631      	mov	r1, r6
 8005406:	f000 fd67 	bl	8005ed8 <__mcmp>
 800540a:	2800      	cmp	r0, #0
 800540c:	da67      	bge.n	80054de <_dtoa_r+0x90e>
 800540e:	9b00      	ldr	r3, [sp, #0]
 8005410:	3b01      	subs	r3, #1
 8005412:	ee18 1a10 	vmov	r1, s16
 8005416:	9300      	str	r3, [sp, #0]
 8005418:	220a      	movs	r2, #10
 800541a:	2300      	movs	r3, #0
 800541c:	4620      	mov	r0, r4
 800541e:	f000 fb3b 	bl	8005a98 <__multadd>
 8005422:	9b08      	ldr	r3, [sp, #32]
 8005424:	ee08 0a10 	vmov	s16, r0
 8005428:	2b00      	cmp	r3, #0
 800542a:	f000 81b1 	beq.w	8005790 <_dtoa_r+0xbc0>
 800542e:	2300      	movs	r3, #0
 8005430:	4639      	mov	r1, r7
 8005432:	220a      	movs	r2, #10
 8005434:	4620      	mov	r0, r4
 8005436:	f000 fb2f 	bl	8005a98 <__multadd>
 800543a:	9b02      	ldr	r3, [sp, #8]
 800543c:	2b00      	cmp	r3, #0
 800543e:	4607      	mov	r7, r0
 8005440:	f300 808e 	bgt.w	8005560 <_dtoa_r+0x990>
 8005444:	9b06      	ldr	r3, [sp, #24]
 8005446:	2b02      	cmp	r3, #2
 8005448:	dc51      	bgt.n	80054ee <_dtoa_r+0x91e>
 800544a:	e089      	b.n	8005560 <_dtoa_r+0x990>
 800544c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800544e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005452:	e74b      	b.n	80052ec <_dtoa_r+0x71c>
 8005454:	9b03      	ldr	r3, [sp, #12]
 8005456:	1e5e      	subs	r6, r3, #1
 8005458:	9b07      	ldr	r3, [sp, #28]
 800545a:	42b3      	cmp	r3, r6
 800545c:	bfbf      	itttt	lt
 800545e:	9b07      	ldrlt	r3, [sp, #28]
 8005460:	9607      	strlt	r6, [sp, #28]
 8005462:	1af2      	sublt	r2, r6, r3
 8005464:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005466:	bfb6      	itet	lt
 8005468:	189b      	addlt	r3, r3, r2
 800546a:	1b9e      	subge	r6, r3, r6
 800546c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800546e:	9b03      	ldr	r3, [sp, #12]
 8005470:	bfb8      	it	lt
 8005472:	2600      	movlt	r6, #0
 8005474:	2b00      	cmp	r3, #0
 8005476:	bfb7      	itett	lt
 8005478:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800547c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8005480:	1a9d      	sublt	r5, r3, r2
 8005482:	2300      	movlt	r3, #0
 8005484:	e734      	b.n	80052f0 <_dtoa_r+0x720>
 8005486:	9e07      	ldr	r6, [sp, #28]
 8005488:	9d04      	ldr	r5, [sp, #16]
 800548a:	9f08      	ldr	r7, [sp, #32]
 800548c:	e73b      	b.n	8005306 <_dtoa_r+0x736>
 800548e:	9a07      	ldr	r2, [sp, #28]
 8005490:	e767      	b.n	8005362 <_dtoa_r+0x792>
 8005492:	9b06      	ldr	r3, [sp, #24]
 8005494:	2b01      	cmp	r3, #1
 8005496:	dc18      	bgt.n	80054ca <_dtoa_r+0x8fa>
 8005498:	f1ba 0f00 	cmp.w	sl, #0
 800549c:	d115      	bne.n	80054ca <_dtoa_r+0x8fa>
 800549e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80054a2:	b993      	cbnz	r3, 80054ca <_dtoa_r+0x8fa>
 80054a4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80054a8:	0d1b      	lsrs	r3, r3, #20
 80054aa:	051b      	lsls	r3, r3, #20
 80054ac:	b183      	cbz	r3, 80054d0 <_dtoa_r+0x900>
 80054ae:	9b04      	ldr	r3, [sp, #16]
 80054b0:	3301      	adds	r3, #1
 80054b2:	9304      	str	r3, [sp, #16]
 80054b4:	9b05      	ldr	r3, [sp, #20]
 80054b6:	3301      	adds	r3, #1
 80054b8:	9305      	str	r3, [sp, #20]
 80054ba:	f04f 0801 	mov.w	r8, #1
 80054be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	f47f af6a 	bne.w	800539a <_dtoa_r+0x7ca>
 80054c6:	2001      	movs	r0, #1
 80054c8:	e76f      	b.n	80053aa <_dtoa_r+0x7da>
 80054ca:	f04f 0800 	mov.w	r8, #0
 80054ce:	e7f6      	b.n	80054be <_dtoa_r+0x8ee>
 80054d0:	4698      	mov	r8, r3
 80054d2:	e7f4      	b.n	80054be <_dtoa_r+0x8ee>
 80054d4:	f43f af7d 	beq.w	80053d2 <_dtoa_r+0x802>
 80054d8:	4618      	mov	r0, r3
 80054da:	301c      	adds	r0, #28
 80054dc:	e772      	b.n	80053c4 <_dtoa_r+0x7f4>
 80054de:	9b03      	ldr	r3, [sp, #12]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	dc37      	bgt.n	8005554 <_dtoa_r+0x984>
 80054e4:	9b06      	ldr	r3, [sp, #24]
 80054e6:	2b02      	cmp	r3, #2
 80054e8:	dd34      	ble.n	8005554 <_dtoa_r+0x984>
 80054ea:	9b03      	ldr	r3, [sp, #12]
 80054ec:	9302      	str	r3, [sp, #8]
 80054ee:	9b02      	ldr	r3, [sp, #8]
 80054f0:	b96b      	cbnz	r3, 800550e <_dtoa_r+0x93e>
 80054f2:	4631      	mov	r1, r6
 80054f4:	2205      	movs	r2, #5
 80054f6:	4620      	mov	r0, r4
 80054f8:	f000 face 	bl	8005a98 <__multadd>
 80054fc:	4601      	mov	r1, r0
 80054fe:	4606      	mov	r6, r0
 8005500:	ee18 0a10 	vmov	r0, s16
 8005504:	f000 fce8 	bl	8005ed8 <__mcmp>
 8005508:	2800      	cmp	r0, #0
 800550a:	f73f adbb 	bgt.w	8005084 <_dtoa_r+0x4b4>
 800550e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005510:	9d01      	ldr	r5, [sp, #4]
 8005512:	43db      	mvns	r3, r3
 8005514:	9300      	str	r3, [sp, #0]
 8005516:	f04f 0800 	mov.w	r8, #0
 800551a:	4631      	mov	r1, r6
 800551c:	4620      	mov	r0, r4
 800551e:	f000 fa99 	bl	8005a54 <_Bfree>
 8005522:	2f00      	cmp	r7, #0
 8005524:	f43f aea4 	beq.w	8005270 <_dtoa_r+0x6a0>
 8005528:	f1b8 0f00 	cmp.w	r8, #0
 800552c:	d005      	beq.n	800553a <_dtoa_r+0x96a>
 800552e:	45b8      	cmp	r8, r7
 8005530:	d003      	beq.n	800553a <_dtoa_r+0x96a>
 8005532:	4641      	mov	r1, r8
 8005534:	4620      	mov	r0, r4
 8005536:	f000 fa8d 	bl	8005a54 <_Bfree>
 800553a:	4639      	mov	r1, r7
 800553c:	4620      	mov	r0, r4
 800553e:	f000 fa89 	bl	8005a54 <_Bfree>
 8005542:	e695      	b.n	8005270 <_dtoa_r+0x6a0>
 8005544:	2600      	movs	r6, #0
 8005546:	4637      	mov	r7, r6
 8005548:	e7e1      	b.n	800550e <_dtoa_r+0x93e>
 800554a:	9700      	str	r7, [sp, #0]
 800554c:	4637      	mov	r7, r6
 800554e:	e599      	b.n	8005084 <_dtoa_r+0x4b4>
 8005550:	40240000 	.word	0x40240000
 8005554:	9b08      	ldr	r3, [sp, #32]
 8005556:	2b00      	cmp	r3, #0
 8005558:	f000 80ca 	beq.w	80056f0 <_dtoa_r+0xb20>
 800555c:	9b03      	ldr	r3, [sp, #12]
 800555e:	9302      	str	r3, [sp, #8]
 8005560:	2d00      	cmp	r5, #0
 8005562:	dd05      	ble.n	8005570 <_dtoa_r+0x9a0>
 8005564:	4639      	mov	r1, r7
 8005566:	462a      	mov	r2, r5
 8005568:	4620      	mov	r0, r4
 800556a:	f000 fc45 	bl	8005df8 <__lshift>
 800556e:	4607      	mov	r7, r0
 8005570:	f1b8 0f00 	cmp.w	r8, #0
 8005574:	d05b      	beq.n	800562e <_dtoa_r+0xa5e>
 8005576:	6879      	ldr	r1, [r7, #4]
 8005578:	4620      	mov	r0, r4
 800557a:	f000 fa2b 	bl	80059d4 <_Balloc>
 800557e:	4605      	mov	r5, r0
 8005580:	b928      	cbnz	r0, 800558e <_dtoa_r+0x9be>
 8005582:	4b87      	ldr	r3, [pc, #540]	; (80057a0 <_dtoa_r+0xbd0>)
 8005584:	4602      	mov	r2, r0
 8005586:	f240 21ea 	movw	r1, #746	; 0x2ea
 800558a:	f7ff bb3b 	b.w	8004c04 <_dtoa_r+0x34>
 800558e:	693a      	ldr	r2, [r7, #16]
 8005590:	3202      	adds	r2, #2
 8005592:	0092      	lsls	r2, r2, #2
 8005594:	f107 010c 	add.w	r1, r7, #12
 8005598:	300c      	adds	r0, #12
 800559a:	f000 fa0d 	bl	80059b8 <memcpy>
 800559e:	2201      	movs	r2, #1
 80055a0:	4629      	mov	r1, r5
 80055a2:	4620      	mov	r0, r4
 80055a4:	f000 fc28 	bl	8005df8 <__lshift>
 80055a8:	9b01      	ldr	r3, [sp, #4]
 80055aa:	f103 0901 	add.w	r9, r3, #1
 80055ae:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80055b2:	4413      	add	r3, r2
 80055b4:	9305      	str	r3, [sp, #20]
 80055b6:	f00a 0301 	and.w	r3, sl, #1
 80055ba:	46b8      	mov	r8, r7
 80055bc:	9304      	str	r3, [sp, #16]
 80055be:	4607      	mov	r7, r0
 80055c0:	4631      	mov	r1, r6
 80055c2:	ee18 0a10 	vmov	r0, s16
 80055c6:	f7ff fa77 	bl	8004ab8 <quorem>
 80055ca:	4641      	mov	r1, r8
 80055cc:	9002      	str	r0, [sp, #8]
 80055ce:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80055d2:	ee18 0a10 	vmov	r0, s16
 80055d6:	f000 fc7f 	bl	8005ed8 <__mcmp>
 80055da:	463a      	mov	r2, r7
 80055dc:	9003      	str	r0, [sp, #12]
 80055de:	4631      	mov	r1, r6
 80055e0:	4620      	mov	r0, r4
 80055e2:	f000 fc95 	bl	8005f10 <__mdiff>
 80055e6:	68c2      	ldr	r2, [r0, #12]
 80055e8:	f109 3bff 	add.w	fp, r9, #4294967295
 80055ec:	4605      	mov	r5, r0
 80055ee:	bb02      	cbnz	r2, 8005632 <_dtoa_r+0xa62>
 80055f0:	4601      	mov	r1, r0
 80055f2:	ee18 0a10 	vmov	r0, s16
 80055f6:	f000 fc6f 	bl	8005ed8 <__mcmp>
 80055fa:	4602      	mov	r2, r0
 80055fc:	4629      	mov	r1, r5
 80055fe:	4620      	mov	r0, r4
 8005600:	9207      	str	r2, [sp, #28]
 8005602:	f000 fa27 	bl	8005a54 <_Bfree>
 8005606:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800560a:	ea43 0102 	orr.w	r1, r3, r2
 800560e:	9b04      	ldr	r3, [sp, #16]
 8005610:	430b      	orrs	r3, r1
 8005612:	464d      	mov	r5, r9
 8005614:	d10f      	bne.n	8005636 <_dtoa_r+0xa66>
 8005616:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800561a:	d02a      	beq.n	8005672 <_dtoa_r+0xaa2>
 800561c:	9b03      	ldr	r3, [sp, #12]
 800561e:	2b00      	cmp	r3, #0
 8005620:	dd02      	ble.n	8005628 <_dtoa_r+0xa58>
 8005622:	9b02      	ldr	r3, [sp, #8]
 8005624:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8005628:	f88b a000 	strb.w	sl, [fp]
 800562c:	e775      	b.n	800551a <_dtoa_r+0x94a>
 800562e:	4638      	mov	r0, r7
 8005630:	e7ba      	b.n	80055a8 <_dtoa_r+0x9d8>
 8005632:	2201      	movs	r2, #1
 8005634:	e7e2      	b.n	80055fc <_dtoa_r+0xa2c>
 8005636:	9b03      	ldr	r3, [sp, #12]
 8005638:	2b00      	cmp	r3, #0
 800563a:	db04      	blt.n	8005646 <_dtoa_r+0xa76>
 800563c:	9906      	ldr	r1, [sp, #24]
 800563e:	430b      	orrs	r3, r1
 8005640:	9904      	ldr	r1, [sp, #16]
 8005642:	430b      	orrs	r3, r1
 8005644:	d122      	bne.n	800568c <_dtoa_r+0xabc>
 8005646:	2a00      	cmp	r2, #0
 8005648:	ddee      	ble.n	8005628 <_dtoa_r+0xa58>
 800564a:	ee18 1a10 	vmov	r1, s16
 800564e:	2201      	movs	r2, #1
 8005650:	4620      	mov	r0, r4
 8005652:	f000 fbd1 	bl	8005df8 <__lshift>
 8005656:	4631      	mov	r1, r6
 8005658:	ee08 0a10 	vmov	s16, r0
 800565c:	f000 fc3c 	bl	8005ed8 <__mcmp>
 8005660:	2800      	cmp	r0, #0
 8005662:	dc03      	bgt.n	800566c <_dtoa_r+0xa9c>
 8005664:	d1e0      	bne.n	8005628 <_dtoa_r+0xa58>
 8005666:	f01a 0f01 	tst.w	sl, #1
 800566a:	d0dd      	beq.n	8005628 <_dtoa_r+0xa58>
 800566c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005670:	d1d7      	bne.n	8005622 <_dtoa_r+0xa52>
 8005672:	2339      	movs	r3, #57	; 0x39
 8005674:	f88b 3000 	strb.w	r3, [fp]
 8005678:	462b      	mov	r3, r5
 800567a:	461d      	mov	r5, r3
 800567c:	3b01      	subs	r3, #1
 800567e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005682:	2a39      	cmp	r2, #57	; 0x39
 8005684:	d071      	beq.n	800576a <_dtoa_r+0xb9a>
 8005686:	3201      	adds	r2, #1
 8005688:	701a      	strb	r2, [r3, #0]
 800568a:	e746      	b.n	800551a <_dtoa_r+0x94a>
 800568c:	2a00      	cmp	r2, #0
 800568e:	dd07      	ble.n	80056a0 <_dtoa_r+0xad0>
 8005690:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005694:	d0ed      	beq.n	8005672 <_dtoa_r+0xaa2>
 8005696:	f10a 0301 	add.w	r3, sl, #1
 800569a:	f88b 3000 	strb.w	r3, [fp]
 800569e:	e73c      	b.n	800551a <_dtoa_r+0x94a>
 80056a0:	9b05      	ldr	r3, [sp, #20]
 80056a2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80056a6:	4599      	cmp	r9, r3
 80056a8:	d047      	beq.n	800573a <_dtoa_r+0xb6a>
 80056aa:	ee18 1a10 	vmov	r1, s16
 80056ae:	2300      	movs	r3, #0
 80056b0:	220a      	movs	r2, #10
 80056b2:	4620      	mov	r0, r4
 80056b4:	f000 f9f0 	bl	8005a98 <__multadd>
 80056b8:	45b8      	cmp	r8, r7
 80056ba:	ee08 0a10 	vmov	s16, r0
 80056be:	f04f 0300 	mov.w	r3, #0
 80056c2:	f04f 020a 	mov.w	r2, #10
 80056c6:	4641      	mov	r1, r8
 80056c8:	4620      	mov	r0, r4
 80056ca:	d106      	bne.n	80056da <_dtoa_r+0xb0a>
 80056cc:	f000 f9e4 	bl	8005a98 <__multadd>
 80056d0:	4680      	mov	r8, r0
 80056d2:	4607      	mov	r7, r0
 80056d4:	f109 0901 	add.w	r9, r9, #1
 80056d8:	e772      	b.n	80055c0 <_dtoa_r+0x9f0>
 80056da:	f000 f9dd 	bl	8005a98 <__multadd>
 80056de:	4639      	mov	r1, r7
 80056e0:	4680      	mov	r8, r0
 80056e2:	2300      	movs	r3, #0
 80056e4:	220a      	movs	r2, #10
 80056e6:	4620      	mov	r0, r4
 80056e8:	f000 f9d6 	bl	8005a98 <__multadd>
 80056ec:	4607      	mov	r7, r0
 80056ee:	e7f1      	b.n	80056d4 <_dtoa_r+0xb04>
 80056f0:	9b03      	ldr	r3, [sp, #12]
 80056f2:	9302      	str	r3, [sp, #8]
 80056f4:	9d01      	ldr	r5, [sp, #4]
 80056f6:	ee18 0a10 	vmov	r0, s16
 80056fa:	4631      	mov	r1, r6
 80056fc:	f7ff f9dc 	bl	8004ab8 <quorem>
 8005700:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005704:	9b01      	ldr	r3, [sp, #4]
 8005706:	f805 ab01 	strb.w	sl, [r5], #1
 800570a:	1aea      	subs	r2, r5, r3
 800570c:	9b02      	ldr	r3, [sp, #8]
 800570e:	4293      	cmp	r3, r2
 8005710:	dd09      	ble.n	8005726 <_dtoa_r+0xb56>
 8005712:	ee18 1a10 	vmov	r1, s16
 8005716:	2300      	movs	r3, #0
 8005718:	220a      	movs	r2, #10
 800571a:	4620      	mov	r0, r4
 800571c:	f000 f9bc 	bl	8005a98 <__multadd>
 8005720:	ee08 0a10 	vmov	s16, r0
 8005724:	e7e7      	b.n	80056f6 <_dtoa_r+0xb26>
 8005726:	9b02      	ldr	r3, [sp, #8]
 8005728:	2b00      	cmp	r3, #0
 800572a:	bfc8      	it	gt
 800572c:	461d      	movgt	r5, r3
 800572e:	9b01      	ldr	r3, [sp, #4]
 8005730:	bfd8      	it	le
 8005732:	2501      	movle	r5, #1
 8005734:	441d      	add	r5, r3
 8005736:	f04f 0800 	mov.w	r8, #0
 800573a:	ee18 1a10 	vmov	r1, s16
 800573e:	2201      	movs	r2, #1
 8005740:	4620      	mov	r0, r4
 8005742:	f000 fb59 	bl	8005df8 <__lshift>
 8005746:	4631      	mov	r1, r6
 8005748:	ee08 0a10 	vmov	s16, r0
 800574c:	f000 fbc4 	bl	8005ed8 <__mcmp>
 8005750:	2800      	cmp	r0, #0
 8005752:	dc91      	bgt.n	8005678 <_dtoa_r+0xaa8>
 8005754:	d102      	bne.n	800575c <_dtoa_r+0xb8c>
 8005756:	f01a 0f01 	tst.w	sl, #1
 800575a:	d18d      	bne.n	8005678 <_dtoa_r+0xaa8>
 800575c:	462b      	mov	r3, r5
 800575e:	461d      	mov	r5, r3
 8005760:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005764:	2a30      	cmp	r2, #48	; 0x30
 8005766:	d0fa      	beq.n	800575e <_dtoa_r+0xb8e>
 8005768:	e6d7      	b.n	800551a <_dtoa_r+0x94a>
 800576a:	9a01      	ldr	r2, [sp, #4]
 800576c:	429a      	cmp	r2, r3
 800576e:	d184      	bne.n	800567a <_dtoa_r+0xaaa>
 8005770:	9b00      	ldr	r3, [sp, #0]
 8005772:	3301      	adds	r3, #1
 8005774:	9300      	str	r3, [sp, #0]
 8005776:	2331      	movs	r3, #49	; 0x31
 8005778:	7013      	strb	r3, [r2, #0]
 800577a:	e6ce      	b.n	800551a <_dtoa_r+0x94a>
 800577c:	4b09      	ldr	r3, [pc, #36]	; (80057a4 <_dtoa_r+0xbd4>)
 800577e:	f7ff ba95 	b.w	8004cac <_dtoa_r+0xdc>
 8005782:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005784:	2b00      	cmp	r3, #0
 8005786:	f47f aa6e 	bne.w	8004c66 <_dtoa_r+0x96>
 800578a:	4b07      	ldr	r3, [pc, #28]	; (80057a8 <_dtoa_r+0xbd8>)
 800578c:	f7ff ba8e 	b.w	8004cac <_dtoa_r+0xdc>
 8005790:	9b02      	ldr	r3, [sp, #8]
 8005792:	2b00      	cmp	r3, #0
 8005794:	dcae      	bgt.n	80056f4 <_dtoa_r+0xb24>
 8005796:	9b06      	ldr	r3, [sp, #24]
 8005798:	2b02      	cmp	r3, #2
 800579a:	f73f aea8 	bgt.w	80054ee <_dtoa_r+0x91e>
 800579e:	e7a9      	b.n	80056f4 <_dtoa_r+0xb24>
 80057a0:	08006d73 	.word	0x08006d73
 80057a4:	08006cd0 	.word	0x08006cd0
 80057a8:	08006cf4 	.word	0x08006cf4

080057ac <std>:
 80057ac:	2300      	movs	r3, #0
 80057ae:	b510      	push	{r4, lr}
 80057b0:	4604      	mov	r4, r0
 80057b2:	e9c0 3300 	strd	r3, r3, [r0]
 80057b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80057ba:	6083      	str	r3, [r0, #8]
 80057bc:	8181      	strh	r1, [r0, #12]
 80057be:	6643      	str	r3, [r0, #100]	; 0x64
 80057c0:	81c2      	strh	r2, [r0, #14]
 80057c2:	6183      	str	r3, [r0, #24]
 80057c4:	4619      	mov	r1, r3
 80057c6:	2208      	movs	r2, #8
 80057c8:	305c      	adds	r0, #92	; 0x5c
 80057ca:	f7fe fceb 	bl	80041a4 <memset>
 80057ce:	4b05      	ldr	r3, [pc, #20]	; (80057e4 <std+0x38>)
 80057d0:	6263      	str	r3, [r4, #36]	; 0x24
 80057d2:	4b05      	ldr	r3, [pc, #20]	; (80057e8 <std+0x3c>)
 80057d4:	62a3      	str	r3, [r4, #40]	; 0x28
 80057d6:	4b05      	ldr	r3, [pc, #20]	; (80057ec <std+0x40>)
 80057d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80057da:	4b05      	ldr	r3, [pc, #20]	; (80057f0 <std+0x44>)
 80057dc:	6224      	str	r4, [r4, #32]
 80057de:	6323      	str	r3, [r4, #48]	; 0x30
 80057e0:	bd10      	pop	{r4, pc}
 80057e2:	bf00      	nop
 80057e4:	0800659d 	.word	0x0800659d
 80057e8:	080065bf 	.word	0x080065bf
 80057ec:	080065f7 	.word	0x080065f7
 80057f0:	0800661b 	.word	0x0800661b

080057f4 <_cleanup_r>:
 80057f4:	4901      	ldr	r1, [pc, #4]	; (80057fc <_cleanup_r+0x8>)
 80057f6:	f000 b8af 	b.w	8005958 <_fwalk_reent>
 80057fa:	bf00      	nop
 80057fc:	08006931 	.word	0x08006931

08005800 <__sfmoreglue>:
 8005800:	b570      	push	{r4, r5, r6, lr}
 8005802:	2268      	movs	r2, #104	; 0x68
 8005804:	1e4d      	subs	r5, r1, #1
 8005806:	4355      	muls	r5, r2
 8005808:	460e      	mov	r6, r1
 800580a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800580e:	f000 fce7 	bl	80061e0 <_malloc_r>
 8005812:	4604      	mov	r4, r0
 8005814:	b140      	cbz	r0, 8005828 <__sfmoreglue+0x28>
 8005816:	2100      	movs	r1, #0
 8005818:	e9c0 1600 	strd	r1, r6, [r0]
 800581c:	300c      	adds	r0, #12
 800581e:	60a0      	str	r0, [r4, #8]
 8005820:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005824:	f7fe fcbe 	bl	80041a4 <memset>
 8005828:	4620      	mov	r0, r4
 800582a:	bd70      	pop	{r4, r5, r6, pc}

0800582c <__sfp_lock_acquire>:
 800582c:	4801      	ldr	r0, [pc, #4]	; (8005834 <__sfp_lock_acquire+0x8>)
 800582e:	f000 b8b8 	b.w	80059a2 <__retarget_lock_acquire_recursive>
 8005832:	bf00      	nop
 8005834:	20000275 	.word	0x20000275

08005838 <__sfp_lock_release>:
 8005838:	4801      	ldr	r0, [pc, #4]	; (8005840 <__sfp_lock_release+0x8>)
 800583a:	f000 b8b3 	b.w	80059a4 <__retarget_lock_release_recursive>
 800583e:	bf00      	nop
 8005840:	20000275 	.word	0x20000275

08005844 <__sinit_lock_acquire>:
 8005844:	4801      	ldr	r0, [pc, #4]	; (800584c <__sinit_lock_acquire+0x8>)
 8005846:	f000 b8ac 	b.w	80059a2 <__retarget_lock_acquire_recursive>
 800584a:	bf00      	nop
 800584c:	20000276 	.word	0x20000276

08005850 <__sinit_lock_release>:
 8005850:	4801      	ldr	r0, [pc, #4]	; (8005858 <__sinit_lock_release+0x8>)
 8005852:	f000 b8a7 	b.w	80059a4 <__retarget_lock_release_recursive>
 8005856:	bf00      	nop
 8005858:	20000276 	.word	0x20000276

0800585c <__sinit>:
 800585c:	b510      	push	{r4, lr}
 800585e:	4604      	mov	r4, r0
 8005860:	f7ff fff0 	bl	8005844 <__sinit_lock_acquire>
 8005864:	69a3      	ldr	r3, [r4, #24]
 8005866:	b11b      	cbz	r3, 8005870 <__sinit+0x14>
 8005868:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800586c:	f7ff bff0 	b.w	8005850 <__sinit_lock_release>
 8005870:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005874:	6523      	str	r3, [r4, #80]	; 0x50
 8005876:	4b13      	ldr	r3, [pc, #76]	; (80058c4 <__sinit+0x68>)
 8005878:	4a13      	ldr	r2, [pc, #76]	; (80058c8 <__sinit+0x6c>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	62a2      	str	r2, [r4, #40]	; 0x28
 800587e:	42a3      	cmp	r3, r4
 8005880:	bf04      	itt	eq
 8005882:	2301      	moveq	r3, #1
 8005884:	61a3      	streq	r3, [r4, #24]
 8005886:	4620      	mov	r0, r4
 8005888:	f000 f820 	bl	80058cc <__sfp>
 800588c:	6060      	str	r0, [r4, #4]
 800588e:	4620      	mov	r0, r4
 8005890:	f000 f81c 	bl	80058cc <__sfp>
 8005894:	60a0      	str	r0, [r4, #8]
 8005896:	4620      	mov	r0, r4
 8005898:	f000 f818 	bl	80058cc <__sfp>
 800589c:	2200      	movs	r2, #0
 800589e:	60e0      	str	r0, [r4, #12]
 80058a0:	2104      	movs	r1, #4
 80058a2:	6860      	ldr	r0, [r4, #4]
 80058a4:	f7ff ff82 	bl	80057ac <std>
 80058a8:	68a0      	ldr	r0, [r4, #8]
 80058aa:	2201      	movs	r2, #1
 80058ac:	2109      	movs	r1, #9
 80058ae:	f7ff ff7d 	bl	80057ac <std>
 80058b2:	68e0      	ldr	r0, [r4, #12]
 80058b4:	2202      	movs	r2, #2
 80058b6:	2112      	movs	r1, #18
 80058b8:	f7ff ff78 	bl	80057ac <std>
 80058bc:	2301      	movs	r3, #1
 80058be:	61a3      	str	r3, [r4, #24]
 80058c0:	e7d2      	b.n	8005868 <__sinit+0xc>
 80058c2:	bf00      	nop
 80058c4:	08006cbc 	.word	0x08006cbc
 80058c8:	080057f5 	.word	0x080057f5

080058cc <__sfp>:
 80058cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058ce:	4607      	mov	r7, r0
 80058d0:	f7ff ffac 	bl	800582c <__sfp_lock_acquire>
 80058d4:	4b1e      	ldr	r3, [pc, #120]	; (8005950 <__sfp+0x84>)
 80058d6:	681e      	ldr	r6, [r3, #0]
 80058d8:	69b3      	ldr	r3, [r6, #24]
 80058da:	b913      	cbnz	r3, 80058e2 <__sfp+0x16>
 80058dc:	4630      	mov	r0, r6
 80058de:	f7ff ffbd 	bl	800585c <__sinit>
 80058e2:	3648      	adds	r6, #72	; 0x48
 80058e4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80058e8:	3b01      	subs	r3, #1
 80058ea:	d503      	bpl.n	80058f4 <__sfp+0x28>
 80058ec:	6833      	ldr	r3, [r6, #0]
 80058ee:	b30b      	cbz	r3, 8005934 <__sfp+0x68>
 80058f0:	6836      	ldr	r6, [r6, #0]
 80058f2:	e7f7      	b.n	80058e4 <__sfp+0x18>
 80058f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80058f8:	b9d5      	cbnz	r5, 8005930 <__sfp+0x64>
 80058fa:	4b16      	ldr	r3, [pc, #88]	; (8005954 <__sfp+0x88>)
 80058fc:	60e3      	str	r3, [r4, #12]
 80058fe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005902:	6665      	str	r5, [r4, #100]	; 0x64
 8005904:	f000 f84c 	bl	80059a0 <__retarget_lock_init_recursive>
 8005908:	f7ff ff96 	bl	8005838 <__sfp_lock_release>
 800590c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005910:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005914:	6025      	str	r5, [r4, #0]
 8005916:	61a5      	str	r5, [r4, #24]
 8005918:	2208      	movs	r2, #8
 800591a:	4629      	mov	r1, r5
 800591c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005920:	f7fe fc40 	bl	80041a4 <memset>
 8005924:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005928:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800592c:	4620      	mov	r0, r4
 800592e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005930:	3468      	adds	r4, #104	; 0x68
 8005932:	e7d9      	b.n	80058e8 <__sfp+0x1c>
 8005934:	2104      	movs	r1, #4
 8005936:	4638      	mov	r0, r7
 8005938:	f7ff ff62 	bl	8005800 <__sfmoreglue>
 800593c:	4604      	mov	r4, r0
 800593e:	6030      	str	r0, [r6, #0]
 8005940:	2800      	cmp	r0, #0
 8005942:	d1d5      	bne.n	80058f0 <__sfp+0x24>
 8005944:	f7ff ff78 	bl	8005838 <__sfp_lock_release>
 8005948:	230c      	movs	r3, #12
 800594a:	603b      	str	r3, [r7, #0]
 800594c:	e7ee      	b.n	800592c <__sfp+0x60>
 800594e:	bf00      	nop
 8005950:	08006cbc 	.word	0x08006cbc
 8005954:	ffff0001 	.word	0xffff0001

08005958 <_fwalk_reent>:
 8005958:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800595c:	4606      	mov	r6, r0
 800595e:	4688      	mov	r8, r1
 8005960:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005964:	2700      	movs	r7, #0
 8005966:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800596a:	f1b9 0901 	subs.w	r9, r9, #1
 800596e:	d505      	bpl.n	800597c <_fwalk_reent+0x24>
 8005970:	6824      	ldr	r4, [r4, #0]
 8005972:	2c00      	cmp	r4, #0
 8005974:	d1f7      	bne.n	8005966 <_fwalk_reent+0xe>
 8005976:	4638      	mov	r0, r7
 8005978:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800597c:	89ab      	ldrh	r3, [r5, #12]
 800597e:	2b01      	cmp	r3, #1
 8005980:	d907      	bls.n	8005992 <_fwalk_reent+0x3a>
 8005982:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005986:	3301      	adds	r3, #1
 8005988:	d003      	beq.n	8005992 <_fwalk_reent+0x3a>
 800598a:	4629      	mov	r1, r5
 800598c:	4630      	mov	r0, r6
 800598e:	47c0      	blx	r8
 8005990:	4307      	orrs	r7, r0
 8005992:	3568      	adds	r5, #104	; 0x68
 8005994:	e7e9      	b.n	800596a <_fwalk_reent+0x12>
	...

08005998 <_localeconv_r>:
 8005998:	4800      	ldr	r0, [pc, #0]	; (800599c <_localeconv_r+0x4>)
 800599a:	4770      	bx	lr
 800599c:	20000160 	.word	0x20000160

080059a0 <__retarget_lock_init_recursive>:
 80059a0:	4770      	bx	lr

080059a2 <__retarget_lock_acquire_recursive>:
 80059a2:	4770      	bx	lr

080059a4 <__retarget_lock_release_recursive>:
 80059a4:	4770      	bx	lr
	...

080059a8 <malloc>:
 80059a8:	4b02      	ldr	r3, [pc, #8]	; (80059b4 <malloc+0xc>)
 80059aa:	4601      	mov	r1, r0
 80059ac:	6818      	ldr	r0, [r3, #0]
 80059ae:	f000 bc17 	b.w	80061e0 <_malloc_r>
 80059b2:	bf00      	nop
 80059b4:	2000000c 	.word	0x2000000c

080059b8 <memcpy>:
 80059b8:	440a      	add	r2, r1
 80059ba:	4291      	cmp	r1, r2
 80059bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80059c0:	d100      	bne.n	80059c4 <memcpy+0xc>
 80059c2:	4770      	bx	lr
 80059c4:	b510      	push	{r4, lr}
 80059c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80059ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80059ce:	4291      	cmp	r1, r2
 80059d0:	d1f9      	bne.n	80059c6 <memcpy+0xe>
 80059d2:	bd10      	pop	{r4, pc}

080059d4 <_Balloc>:
 80059d4:	b570      	push	{r4, r5, r6, lr}
 80059d6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80059d8:	4604      	mov	r4, r0
 80059da:	460d      	mov	r5, r1
 80059dc:	b976      	cbnz	r6, 80059fc <_Balloc+0x28>
 80059de:	2010      	movs	r0, #16
 80059e0:	f7ff ffe2 	bl	80059a8 <malloc>
 80059e4:	4602      	mov	r2, r0
 80059e6:	6260      	str	r0, [r4, #36]	; 0x24
 80059e8:	b920      	cbnz	r0, 80059f4 <_Balloc+0x20>
 80059ea:	4b18      	ldr	r3, [pc, #96]	; (8005a4c <_Balloc+0x78>)
 80059ec:	4818      	ldr	r0, [pc, #96]	; (8005a50 <_Balloc+0x7c>)
 80059ee:	2166      	movs	r1, #102	; 0x66
 80059f0:	f000 feea 	bl	80067c8 <__assert_func>
 80059f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80059f8:	6006      	str	r6, [r0, #0]
 80059fa:	60c6      	str	r6, [r0, #12]
 80059fc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80059fe:	68f3      	ldr	r3, [r6, #12]
 8005a00:	b183      	cbz	r3, 8005a24 <_Balloc+0x50>
 8005a02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a04:	68db      	ldr	r3, [r3, #12]
 8005a06:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005a0a:	b9b8      	cbnz	r0, 8005a3c <_Balloc+0x68>
 8005a0c:	2101      	movs	r1, #1
 8005a0e:	fa01 f605 	lsl.w	r6, r1, r5
 8005a12:	1d72      	adds	r2, r6, #5
 8005a14:	0092      	lsls	r2, r2, #2
 8005a16:	4620      	mov	r0, r4
 8005a18:	f000 fb60 	bl	80060dc <_calloc_r>
 8005a1c:	b160      	cbz	r0, 8005a38 <_Balloc+0x64>
 8005a1e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005a22:	e00e      	b.n	8005a42 <_Balloc+0x6e>
 8005a24:	2221      	movs	r2, #33	; 0x21
 8005a26:	2104      	movs	r1, #4
 8005a28:	4620      	mov	r0, r4
 8005a2a:	f000 fb57 	bl	80060dc <_calloc_r>
 8005a2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a30:	60f0      	str	r0, [r6, #12]
 8005a32:	68db      	ldr	r3, [r3, #12]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d1e4      	bne.n	8005a02 <_Balloc+0x2e>
 8005a38:	2000      	movs	r0, #0
 8005a3a:	bd70      	pop	{r4, r5, r6, pc}
 8005a3c:	6802      	ldr	r2, [r0, #0]
 8005a3e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005a42:	2300      	movs	r3, #0
 8005a44:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005a48:	e7f7      	b.n	8005a3a <_Balloc+0x66>
 8005a4a:	bf00      	nop
 8005a4c:	08006d01 	.word	0x08006d01
 8005a50:	08006de4 	.word	0x08006de4

08005a54 <_Bfree>:
 8005a54:	b570      	push	{r4, r5, r6, lr}
 8005a56:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005a58:	4605      	mov	r5, r0
 8005a5a:	460c      	mov	r4, r1
 8005a5c:	b976      	cbnz	r6, 8005a7c <_Bfree+0x28>
 8005a5e:	2010      	movs	r0, #16
 8005a60:	f7ff ffa2 	bl	80059a8 <malloc>
 8005a64:	4602      	mov	r2, r0
 8005a66:	6268      	str	r0, [r5, #36]	; 0x24
 8005a68:	b920      	cbnz	r0, 8005a74 <_Bfree+0x20>
 8005a6a:	4b09      	ldr	r3, [pc, #36]	; (8005a90 <_Bfree+0x3c>)
 8005a6c:	4809      	ldr	r0, [pc, #36]	; (8005a94 <_Bfree+0x40>)
 8005a6e:	218a      	movs	r1, #138	; 0x8a
 8005a70:	f000 feaa 	bl	80067c8 <__assert_func>
 8005a74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005a78:	6006      	str	r6, [r0, #0]
 8005a7a:	60c6      	str	r6, [r0, #12]
 8005a7c:	b13c      	cbz	r4, 8005a8e <_Bfree+0x3a>
 8005a7e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005a80:	6862      	ldr	r2, [r4, #4]
 8005a82:	68db      	ldr	r3, [r3, #12]
 8005a84:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005a88:	6021      	str	r1, [r4, #0]
 8005a8a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005a8e:	bd70      	pop	{r4, r5, r6, pc}
 8005a90:	08006d01 	.word	0x08006d01
 8005a94:	08006de4 	.word	0x08006de4

08005a98 <__multadd>:
 8005a98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a9c:	690d      	ldr	r5, [r1, #16]
 8005a9e:	4607      	mov	r7, r0
 8005aa0:	460c      	mov	r4, r1
 8005aa2:	461e      	mov	r6, r3
 8005aa4:	f101 0c14 	add.w	ip, r1, #20
 8005aa8:	2000      	movs	r0, #0
 8005aaa:	f8dc 3000 	ldr.w	r3, [ip]
 8005aae:	b299      	uxth	r1, r3
 8005ab0:	fb02 6101 	mla	r1, r2, r1, r6
 8005ab4:	0c1e      	lsrs	r6, r3, #16
 8005ab6:	0c0b      	lsrs	r3, r1, #16
 8005ab8:	fb02 3306 	mla	r3, r2, r6, r3
 8005abc:	b289      	uxth	r1, r1
 8005abe:	3001      	adds	r0, #1
 8005ac0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005ac4:	4285      	cmp	r5, r0
 8005ac6:	f84c 1b04 	str.w	r1, [ip], #4
 8005aca:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005ace:	dcec      	bgt.n	8005aaa <__multadd+0x12>
 8005ad0:	b30e      	cbz	r6, 8005b16 <__multadd+0x7e>
 8005ad2:	68a3      	ldr	r3, [r4, #8]
 8005ad4:	42ab      	cmp	r3, r5
 8005ad6:	dc19      	bgt.n	8005b0c <__multadd+0x74>
 8005ad8:	6861      	ldr	r1, [r4, #4]
 8005ada:	4638      	mov	r0, r7
 8005adc:	3101      	adds	r1, #1
 8005ade:	f7ff ff79 	bl	80059d4 <_Balloc>
 8005ae2:	4680      	mov	r8, r0
 8005ae4:	b928      	cbnz	r0, 8005af2 <__multadd+0x5a>
 8005ae6:	4602      	mov	r2, r0
 8005ae8:	4b0c      	ldr	r3, [pc, #48]	; (8005b1c <__multadd+0x84>)
 8005aea:	480d      	ldr	r0, [pc, #52]	; (8005b20 <__multadd+0x88>)
 8005aec:	21b5      	movs	r1, #181	; 0xb5
 8005aee:	f000 fe6b 	bl	80067c8 <__assert_func>
 8005af2:	6922      	ldr	r2, [r4, #16]
 8005af4:	3202      	adds	r2, #2
 8005af6:	f104 010c 	add.w	r1, r4, #12
 8005afa:	0092      	lsls	r2, r2, #2
 8005afc:	300c      	adds	r0, #12
 8005afe:	f7ff ff5b 	bl	80059b8 <memcpy>
 8005b02:	4621      	mov	r1, r4
 8005b04:	4638      	mov	r0, r7
 8005b06:	f7ff ffa5 	bl	8005a54 <_Bfree>
 8005b0a:	4644      	mov	r4, r8
 8005b0c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005b10:	3501      	adds	r5, #1
 8005b12:	615e      	str	r6, [r3, #20]
 8005b14:	6125      	str	r5, [r4, #16]
 8005b16:	4620      	mov	r0, r4
 8005b18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b1c:	08006d73 	.word	0x08006d73
 8005b20:	08006de4 	.word	0x08006de4

08005b24 <__hi0bits>:
 8005b24:	0c03      	lsrs	r3, r0, #16
 8005b26:	041b      	lsls	r3, r3, #16
 8005b28:	b9d3      	cbnz	r3, 8005b60 <__hi0bits+0x3c>
 8005b2a:	0400      	lsls	r0, r0, #16
 8005b2c:	2310      	movs	r3, #16
 8005b2e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005b32:	bf04      	itt	eq
 8005b34:	0200      	lsleq	r0, r0, #8
 8005b36:	3308      	addeq	r3, #8
 8005b38:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005b3c:	bf04      	itt	eq
 8005b3e:	0100      	lsleq	r0, r0, #4
 8005b40:	3304      	addeq	r3, #4
 8005b42:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005b46:	bf04      	itt	eq
 8005b48:	0080      	lsleq	r0, r0, #2
 8005b4a:	3302      	addeq	r3, #2
 8005b4c:	2800      	cmp	r0, #0
 8005b4e:	db05      	blt.n	8005b5c <__hi0bits+0x38>
 8005b50:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005b54:	f103 0301 	add.w	r3, r3, #1
 8005b58:	bf08      	it	eq
 8005b5a:	2320      	moveq	r3, #32
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	4770      	bx	lr
 8005b60:	2300      	movs	r3, #0
 8005b62:	e7e4      	b.n	8005b2e <__hi0bits+0xa>

08005b64 <__lo0bits>:
 8005b64:	6803      	ldr	r3, [r0, #0]
 8005b66:	f013 0207 	ands.w	r2, r3, #7
 8005b6a:	4601      	mov	r1, r0
 8005b6c:	d00b      	beq.n	8005b86 <__lo0bits+0x22>
 8005b6e:	07da      	lsls	r2, r3, #31
 8005b70:	d423      	bmi.n	8005bba <__lo0bits+0x56>
 8005b72:	0798      	lsls	r0, r3, #30
 8005b74:	bf49      	itett	mi
 8005b76:	085b      	lsrmi	r3, r3, #1
 8005b78:	089b      	lsrpl	r3, r3, #2
 8005b7a:	2001      	movmi	r0, #1
 8005b7c:	600b      	strmi	r3, [r1, #0]
 8005b7e:	bf5c      	itt	pl
 8005b80:	600b      	strpl	r3, [r1, #0]
 8005b82:	2002      	movpl	r0, #2
 8005b84:	4770      	bx	lr
 8005b86:	b298      	uxth	r0, r3
 8005b88:	b9a8      	cbnz	r0, 8005bb6 <__lo0bits+0x52>
 8005b8a:	0c1b      	lsrs	r3, r3, #16
 8005b8c:	2010      	movs	r0, #16
 8005b8e:	b2da      	uxtb	r2, r3
 8005b90:	b90a      	cbnz	r2, 8005b96 <__lo0bits+0x32>
 8005b92:	3008      	adds	r0, #8
 8005b94:	0a1b      	lsrs	r3, r3, #8
 8005b96:	071a      	lsls	r2, r3, #28
 8005b98:	bf04      	itt	eq
 8005b9a:	091b      	lsreq	r3, r3, #4
 8005b9c:	3004      	addeq	r0, #4
 8005b9e:	079a      	lsls	r2, r3, #30
 8005ba0:	bf04      	itt	eq
 8005ba2:	089b      	lsreq	r3, r3, #2
 8005ba4:	3002      	addeq	r0, #2
 8005ba6:	07da      	lsls	r2, r3, #31
 8005ba8:	d403      	bmi.n	8005bb2 <__lo0bits+0x4e>
 8005baa:	085b      	lsrs	r3, r3, #1
 8005bac:	f100 0001 	add.w	r0, r0, #1
 8005bb0:	d005      	beq.n	8005bbe <__lo0bits+0x5a>
 8005bb2:	600b      	str	r3, [r1, #0]
 8005bb4:	4770      	bx	lr
 8005bb6:	4610      	mov	r0, r2
 8005bb8:	e7e9      	b.n	8005b8e <__lo0bits+0x2a>
 8005bba:	2000      	movs	r0, #0
 8005bbc:	4770      	bx	lr
 8005bbe:	2020      	movs	r0, #32
 8005bc0:	4770      	bx	lr
	...

08005bc4 <__i2b>:
 8005bc4:	b510      	push	{r4, lr}
 8005bc6:	460c      	mov	r4, r1
 8005bc8:	2101      	movs	r1, #1
 8005bca:	f7ff ff03 	bl	80059d4 <_Balloc>
 8005bce:	4602      	mov	r2, r0
 8005bd0:	b928      	cbnz	r0, 8005bde <__i2b+0x1a>
 8005bd2:	4b05      	ldr	r3, [pc, #20]	; (8005be8 <__i2b+0x24>)
 8005bd4:	4805      	ldr	r0, [pc, #20]	; (8005bec <__i2b+0x28>)
 8005bd6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005bda:	f000 fdf5 	bl	80067c8 <__assert_func>
 8005bde:	2301      	movs	r3, #1
 8005be0:	6144      	str	r4, [r0, #20]
 8005be2:	6103      	str	r3, [r0, #16]
 8005be4:	bd10      	pop	{r4, pc}
 8005be6:	bf00      	nop
 8005be8:	08006d73 	.word	0x08006d73
 8005bec:	08006de4 	.word	0x08006de4

08005bf0 <__multiply>:
 8005bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bf4:	4691      	mov	r9, r2
 8005bf6:	690a      	ldr	r2, [r1, #16]
 8005bf8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	bfb8      	it	lt
 8005c00:	460b      	movlt	r3, r1
 8005c02:	460c      	mov	r4, r1
 8005c04:	bfbc      	itt	lt
 8005c06:	464c      	movlt	r4, r9
 8005c08:	4699      	movlt	r9, r3
 8005c0a:	6927      	ldr	r7, [r4, #16]
 8005c0c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005c10:	68a3      	ldr	r3, [r4, #8]
 8005c12:	6861      	ldr	r1, [r4, #4]
 8005c14:	eb07 060a 	add.w	r6, r7, sl
 8005c18:	42b3      	cmp	r3, r6
 8005c1a:	b085      	sub	sp, #20
 8005c1c:	bfb8      	it	lt
 8005c1e:	3101      	addlt	r1, #1
 8005c20:	f7ff fed8 	bl	80059d4 <_Balloc>
 8005c24:	b930      	cbnz	r0, 8005c34 <__multiply+0x44>
 8005c26:	4602      	mov	r2, r0
 8005c28:	4b44      	ldr	r3, [pc, #272]	; (8005d3c <__multiply+0x14c>)
 8005c2a:	4845      	ldr	r0, [pc, #276]	; (8005d40 <__multiply+0x150>)
 8005c2c:	f240 115d 	movw	r1, #349	; 0x15d
 8005c30:	f000 fdca 	bl	80067c8 <__assert_func>
 8005c34:	f100 0514 	add.w	r5, r0, #20
 8005c38:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005c3c:	462b      	mov	r3, r5
 8005c3e:	2200      	movs	r2, #0
 8005c40:	4543      	cmp	r3, r8
 8005c42:	d321      	bcc.n	8005c88 <__multiply+0x98>
 8005c44:	f104 0314 	add.w	r3, r4, #20
 8005c48:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005c4c:	f109 0314 	add.w	r3, r9, #20
 8005c50:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005c54:	9202      	str	r2, [sp, #8]
 8005c56:	1b3a      	subs	r2, r7, r4
 8005c58:	3a15      	subs	r2, #21
 8005c5a:	f022 0203 	bic.w	r2, r2, #3
 8005c5e:	3204      	adds	r2, #4
 8005c60:	f104 0115 	add.w	r1, r4, #21
 8005c64:	428f      	cmp	r7, r1
 8005c66:	bf38      	it	cc
 8005c68:	2204      	movcc	r2, #4
 8005c6a:	9201      	str	r2, [sp, #4]
 8005c6c:	9a02      	ldr	r2, [sp, #8]
 8005c6e:	9303      	str	r3, [sp, #12]
 8005c70:	429a      	cmp	r2, r3
 8005c72:	d80c      	bhi.n	8005c8e <__multiply+0x9e>
 8005c74:	2e00      	cmp	r6, #0
 8005c76:	dd03      	ble.n	8005c80 <__multiply+0x90>
 8005c78:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d05a      	beq.n	8005d36 <__multiply+0x146>
 8005c80:	6106      	str	r6, [r0, #16]
 8005c82:	b005      	add	sp, #20
 8005c84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c88:	f843 2b04 	str.w	r2, [r3], #4
 8005c8c:	e7d8      	b.n	8005c40 <__multiply+0x50>
 8005c8e:	f8b3 a000 	ldrh.w	sl, [r3]
 8005c92:	f1ba 0f00 	cmp.w	sl, #0
 8005c96:	d024      	beq.n	8005ce2 <__multiply+0xf2>
 8005c98:	f104 0e14 	add.w	lr, r4, #20
 8005c9c:	46a9      	mov	r9, r5
 8005c9e:	f04f 0c00 	mov.w	ip, #0
 8005ca2:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005ca6:	f8d9 1000 	ldr.w	r1, [r9]
 8005caa:	fa1f fb82 	uxth.w	fp, r2
 8005cae:	b289      	uxth	r1, r1
 8005cb0:	fb0a 110b 	mla	r1, sl, fp, r1
 8005cb4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8005cb8:	f8d9 2000 	ldr.w	r2, [r9]
 8005cbc:	4461      	add	r1, ip
 8005cbe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005cc2:	fb0a c20b 	mla	r2, sl, fp, ip
 8005cc6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005cca:	b289      	uxth	r1, r1
 8005ccc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005cd0:	4577      	cmp	r7, lr
 8005cd2:	f849 1b04 	str.w	r1, [r9], #4
 8005cd6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005cda:	d8e2      	bhi.n	8005ca2 <__multiply+0xb2>
 8005cdc:	9a01      	ldr	r2, [sp, #4]
 8005cde:	f845 c002 	str.w	ip, [r5, r2]
 8005ce2:	9a03      	ldr	r2, [sp, #12]
 8005ce4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005ce8:	3304      	adds	r3, #4
 8005cea:	f1b9 0f00 	cmp.w	r9, #0
 8005cee:	d020      	beq.n	8005d32 <__multiply+0x142>
 8005cf0:	6829      	ldr	r1, [r5, #0]
 8005cf2:	f104 0c14 	add.w	ip, r4, #20
 8005cf6:	46ae      	mov	lr, r5
 8005cf8:	f04f 0a00 	mov.w	sl, #0
 8005cfc:	f8bc b000 	ldrh.w	fp, [ip]
 8005d00:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005d04:	fb09 220b 	mla	r2, r9, fp, r2
 8005d08:	4492      	add	sl, r2
 8005d0a:	b289      	uxth	r1, r1
 8005d0c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8005d10:	f84e 1b04 	str.w	r1, [lr], #4
 8005d14:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005d18:	f8be 1000 	ldrh.w	r1, [lr]
 8005d1c:	0c12      	lsrs	r2, r2, #16
 8005d1e:	fb09 1102 	mla	r1, r9, r2, r1
 8005d22:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8005d26:	4567      	cmp	r7, ip
 8005d28:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005d2c:	d8e6      	bhi.n	8005cfc <__multiply+0x10c>
 8005d2e:	9a01      	ldr	r2, [sp, #4]
 8005d30:	50a9      	str	r1, [r5, r2]
 8005d32:	3504      	adds	r5, #4
 8005d34:	e79a      	b.n	8005c6c <__multiply+0x7c>
 8005d36:	3e01      	subs	r6, #1
 8005d38:	e79c      	b.n	8005c74 <__multiply+0x84>
 8005d3a:	bf00      	nop
 8005d3c:	08006d73 	.word	0x08006d73
 8005d40:	08006de4 	.word	0x08006de4

08005d44 <__pow5mult>:
 8005d44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d48:	4615      	mov	r5, r2
 8005d4a:	f012 0203 	ands.w	r2, r2, #3
 8005d4e:	4606      	mov	r6, r0
 8005d50:	460f      	mov	r7, r1
 8005d52:	d007      	beq.n	8005d64 <__pow5mult+0x20>
 8005d54:	4c25      	ldr	r4, [pc, #148]	; (8005dec <__pow5mult+0xa8>)
 8005d56:	3a01      	subs	r2, #1
 8005d58:	2300      	movs	r3, #0
 8005d5a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005d5e:	f7ff fe9b 	bl	8005a98 <__multadd>
 8005d62:	4607      	mov	r7, r0
 8005d64:	10ad      	asrs	r5, r5, #2
 8005d66:	d03d      	beq.n	8005de4 <__pow5mult+0xa0>
 8005d68:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005d6a:	b97c      	cbnz	r4, 8005d8c <__pow5mult+0x48>
 8005d6c:	2010      	movs	r0, #16
 8005d6e:	f7ff fe1b 	bl	80059a8 <malloc>
 8005d72:	4602      	mov	r2, r0
 8005d74:	6270      	str	r0, [r6, #36]	; 0x24
 8005d76:	b928      	cbnz	r0, 8005d84 <__pow5mult+0x40>
 8005d78:	4b1d      	ldr	r3, [pc, #116]	; (8005df0 <__pow5mult+0xac>)
 8005d7a:	481e      	ldr	r0, [pc, #120]	; (8005df4 <__pow5mult+0xb0>)
 8005d7c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005d80:	f000 fd22 	bl	80067c8 <__assert_func>
 8005d84:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005d88:	6004      	str	r4, [r0, #0]
 8005d8a:	60c4      	str	r4, [r0, #12]
 8005d8c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005d90:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005d94:	b94c      	cbnz	r4, 8005daa <__pow5mult+0x66>
 8005d96:	f240 2171 	movw	r1, #625	; 0x271
 8005d9a:	4630      	mov	r0, r6
 8005d9c:	f7ff ff12 	bl	8005bc4 <__i2b>
 8005da0:	2300      	movs	r3, #0
 8005da2:	f8c8 0008 	str.w	r0, [r8, #8]
 8005da6:	4604      	mov	r4, r0
 8005da8:	6003      	str	r3, [r0, #0]
 8005daa:	f04f 0900 	mov.w	r9, #0
 8005dae:	07eb      	lsls	r3, r5, #31
 8005db0:	d50a      	bpl.n	8005dc8 <__pow5mult+0x84>
 8005db2:	4639      	mov	r1, r7
 8005db4:	4622      	mov	r2, r4
 8005db6:	4630      	mov	r0, r6
 8005db8:	f7ff ff1a 	bl	8005bf0 <__multiply>
 8005dbc:	4639      	mov	r1, r7
 8005dbe:	4680      	mov	r8, r0
 8005dc0:	4630      	mov	r0, r6
 8005dc2:	f7ff fe47 	bl	8005a54 <_Bfree>
 8005dc6:	4647      	mov	r7, r8
 8005dc8:	106d      	asrs	r5, r5, #1
 8005dca:	d00b      	beq.n	8005de4 <__pow5mult+0xa0>
 8005dcc:	6820      	ldr	r0, [r4, #0]
 8005dce:	b938      	cbnz	r0, 8005de0 <__pow5mult+0x9c>
 8005dd0:	4622      	mov	r2, r4
 8005dd2:	4621      	mov	r1, r4
 8005dd4:	4630      	mov	r0, r6
 8005dd6:	f7ff ff0b 	bl	8005bf0 <__multiply>
 8005dda:	6020      	str	r0, [r4, #0]
 8005ddc:	f8c0 9000 	str.w	r9, [r0]
 8005de0:	4604      	mov	r4, r0
 8005de2:	e7e4      	b.n	8005dae <__pow5mult+0x6a>
 8005de4:	4638      	mov	r0, r7
 8005de6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005dea:	bf00      	nop
 8005dec:	08006f30 	.word	0x08006f30
 8005df0:	08006d01 	.word	0x08006d01
 8005df4:	08006de4 	.word	0x08006de4

08005df8 <__lshift>:
 8005df8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005dfc:	460c      	mov	r4, r1
 8005dfe:	6849      	ldr	r1, [r1, #4]
 8005e00:	6923      	ldr	r3, [r4, #16]
 8005e02:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005e06:	68a3      	ldr	r3, [r4, #8]
 8005e08:	4607      	mov	r7, r0
 8005e0a:	4691      	mov	r9, r2
 8005e0c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005e10:	f108 0601 	add.w	r6, r8, #1
 8005e14:	42b3      	cmp	r3, r6
 8005e16:	db0b      	blt.n	8005e30 <__lshift+0x38>
 8005e18:	4638      	mov	r0, r7
 8005e1a:	f7ff fddb 	bl	80059d4 <_Balloc>
 8005e1e:	4605      	mov	r5, r0
 8005e20:	b948      	cbnz	r0, 8005e36 <__lshift+0x3e>
 8005e22:	4602      	mov	r2, r0
 8005e24:	4b2a      	ldr	r3, [pc, #168]	; (8005ed0 <__lshift+0xd8>)
 8005e26:	482b      	ldr	r0, [pc, #172]	; (8005ed4 <__lshift+0xdc>)
 8005e28:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005e2c:	f000 fccc 	bl	80067c8 <__assert_func>
 8005e30:	3101      	adds	r1, #1
 8005e32:	005b      	lsls	r3, r3, #1
 8005e34:	e7ee      	b.n	8005e14 <__lshift+0x1c>
 8005e36:	2300      	movs	r3, #0
 8005e38:	f100 0114 	add.w	r1, r0, #20
 8005e3c:	f100 0210 	add.w	r2, r0, #16
 8005e40:	4618      	mov	r0, r3
 8005e42:	4553      	cmp	r3, sl
 8005e44:	db37      	blt.n	8005eb6 <__lshift+0xbe>
 8005e46:	6920      	ldr	r0, [r4, #16]
 8005e48:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005e4c:	f104 0314 	add.w	r3, r4, #20
 8005e50:	f019 091f 	ands.w	r9, r9, #31
 8005e54:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005e58:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005e5c:	d02f      	beq.n	8005ebe <__lshift+0xc6>
 8005e5e:	f1c9 0e20 	rsb	lr, r9, #32
 8005e62:	468a      	mov	sl, r1
 8005e64:	f04f 0c00 	mov.w	ip, #0
 8005e68:	681a      	ldr	r2, [r3, #0]
 8005e6a:	fa02 f209 	lsl.w	r2, r2, r9
 8005e6e:	ea42 020c 	orr.w	r2, r2, ip
 8005e72:	f84a 2b04 	str.w	r2, [sl], #4
 8005e76:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e7a:	4298      	cmp	r0, r3
 8005e7c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8005e80:	d8f2      	bhi.n	8005e68 <__lshift+0x70>
 8005e82:	1b03      	subs	r3, r0, r4
 8005e84:	3b15      	subs	r3, #21
 8005e86:	f023 0303 	bic.w	r3, r3, #3
 8005e8a:	3304      	adds	r3, #4
 8005e8c:	f104 0215 	add.w	r2, r4, #21
 8005e90:	4290      	cmp	r0, r2
 8005e92:	bf38      	it	cc
 8005e94:	2304      	movcc	r3, #4
 8005e96:	f841 c003 	str.w	ip, [r1, r3]
 8005e9a:	f1bc 0f00 	cmp.w	ip, #0
 8005e9e:	d001      	beq.n	8005ea4 <__lshift+0xac>
 8005ea0:	f108 0602 	add.w	r6, r8, #2
 8005ea4:	3e01      	subs	r6, #1
 8005ea6:	4638      	mov	r0, r7
 8005ea8:	612e      	str	r6, [r5, #16]
 8005eaa:	4621      	mov	r1, r4
 8005eac:	f7ff fdd2 	bl	8005a54 <_Bfree>
 8005eb0:	4628      	mov	r0, r5
 8005eb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005eb6:	f842 0f04 	str.w	r0, [r2, #4]!
 8005eba:	3301      	adds	r3, #1
 8005ebc:	e7c1      	b.n	8005e42 <__lshift+0x4a>
 8005ebe:	3904      	subs	r1, #4
 8005ec0:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ec4:	f841 2f04 	str.w	r2, [r1, #4]!
 8005ec8:	4298      	cmp	r0, r3
 8005eca:	d8f9      	bhi.n	8005ec0 <__lshift+0xc8>
 8005ecc:	e7ea      	b.n	8005ea4 <__lshift+0xac>
 8005ece:	bf00      	nop
 8005ed0:	08006d73 	.word	0x08006d73
 8005ed4:	08006de4 	.word	0x08006de4

08005ed8 <__mcmp>:
 8005ed8:	b530      	push	{r4, r5, lr}
 8005eda:	6902      	ldr	r2, [r0, #16]
 8005edc:	690c      	ldr	r4, [r1, #16]
 8005ede:	1b12      	subs	r2, r2, r4
 8005ee0:	d10e      	bne.n	8005f00 <__mcmp+0x28>
 8005ee2:	f100 0314 	add.w	r3, r0, #20
 8005ee6:	3114      	adds	r1, #20
 8005ee8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005eec:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005ef0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005ef4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005ef8:	42a5      	cmp	r5, r4
 8005efa:	d003      	beq.n	8005f04 <__mcmp+0x2c>
 8005efc:	d305      	bcc.n	8005f0a <__mcmp+0x32>
 8005efe:	2201      	movs	r2, #1
 8005f00:	4610      	mov	r0, r2
 8005f02:	bd30      	pop	{r4, r5, pc}
 8005f04:	4283      	cmp	r3, r0
 8005f06:	d3f3      	bcc.n	8005ef0 <__mcmp+0x18>
 8005f08:	e7fa      	b.n	8005f00 <__mcmp+0x28>
 8005f0a:	f04f 32ff 	mov.w	r2, #4294967295
 8005f0e:	e7f7      	b.n	8005f00 <__mcmp+0x28>

08005f10 <__mdiff>:
 8005f10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f14:	460c      	mov	r4, r1
 8005f16:	4606      	mov	r6, r0
 8005f18:	4611      	mov	r1, r2
 8005f1a:	4620      	mov	r0, r4
 8005f1c:	4690      	mov	r8, r2
 8005f1e:	f7ff ffdb 	bl	8005ed8 <__mcmp>
 8005f22:	1e05      	subs	r5, r0, #0
 8005f24:	d110      	bne.n	8005f48 <__mdiff+0x38>
 8005f26:	4629      	mov	r1, r5
 8005f28:	4630      	mov	r0, r6
 8005f2a:	f7ff fd53 	bl	80059d4 <_Balloc>
 8005f2e:	b930      	cbnz	r0, 8005f3e <__mdiff+0x2e>
 8005f30:	4b3a      	ldr	r3, [pc, #232]	; (800601c <__mdiff+0x10c>)
 8005f32:	4602      	mov	r2, r0
 8005f34:	f240 2132 	movw	r1, #562	; 0x232
 8005f38:	4839      	ldr	r0, [pc, #228]	; (8006020 <__mdiff+0x110>)
 8005f3a:	f000 fc45 	bl	80067c8 <__assert_func>
 8005f3e:	2301      	movs	r3, #1
 8005f40:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005f44:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f48:	bfa4      	itt	ge
 8005f4a:	4643      	movge	r3, r8
 8005f4c:	46a0      	movge	r8, r4
 8005f4e:	4630      	mov	r0, r6
 8005f50:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005f54:	bfa6      	itte	ge
 8005f56:	461c      	movge	r4, r3
 8005f58:	2500      	movge	r5, #0
 8005f5a:	2501      	movlt	r5, #1
 8005f5c:	f7ff fd3a 	bl	80059d4 <_Balloc>
 8005f60:	b920      	cbnz	r0, 8005f6c <__mdiff+0x5c>
 8005f62:	4b2e      	ldr	r3, [pc, #184]	; (800601c <__mdiff+0x10c>)
 8005f64:	4602      	mov	r2, r0
 8005f66:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005f6a:	e7e5      	b.n	8005f38 <__mdiff+0x28>
 8005f6c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005f70:	6926      	ldr	r6, [r4, #16]
 8005f72:	60c5      	str	r5, [r0, #12]
 8005f74:	f104 0914 	add.w	r9, r4, #20
 8005f78:	f108 0514 	add.w	r5, r8, #20
 8005f7c:	f100 0e14 	add.w	lr, r0, #20
 8005f80:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8005f84:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005f88:	f108 0210 	add.w	r2, r8, #16
 8005f8c:	46f2      	mov	sl, lr
 8005f8e:	2100      	movs	r1, #0
 8005f90:	f859 3b04 	ldr.w	r3, [r9], #4
 8005f94:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8005f98:	fa1f f883 	uxth.w	r8, r3
 8005f9c:	fa11 f18b 	uxtah	r1, r1, fp
 8005fa0:	0c1b      	lsrs	r3, r3, #16
 8005fa2:	eba1 0808 	sub.w	r8, r1, r8
 8005fa6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005faa:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8005fae:	fa1f f888 	uxth.w	r8, r8
 8005fb2:	1419      	asrs	r1, r3, #16
 8005fb4:	454e      	cmp	r6, r9
 8005fb6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8005fba:	f84a 3b04 	str.w	r3, [sl], #4
 8005fbe:	d8e7      	bhi.n	8005f90 <__mdiff+0x80>
 8005fc0:	1b33      	subs	r3, r6, r4
 8005fc2:	3b15      	subs	r3, #21
 8005fc4:	f023 0303 	bic.w	r3, r3, #3
 8005fc8:	3304      	adds	r3, #4
 8005fca:	3415      	adds	r4, #21
 8005fcc:	42a6      	cmp	r6, r4
 8005fce:	bf38      	it	cc
 8005fd0:	2304      	movcc	r3, #4
 8005fd2:	441d      	add	r5, r3
 8005fd4:	4473      	add	r3, lr
 8005fd6:	469e      	mov	lr, r3
 8005fd8:	462e      	mov	r6, r5
 8005fda:	4566      	cmp	r6, ip
 8005fdc:	d30e      	bcc.n	8005ffc <__mdiff+0xec>
 8005fde:	f10c 0203 	add.w	r2, ip, #3
 8005fe2:	1b52      	subs	r2, r2, r5
 8005fe4:	f022 0203 	bic.w	r2, r2, #3
 8005fe8:	3d03      	subs	r5, #3
 8005fea:	45ac      	cmp	ip, r5
 8005fec:	bf38      	it	cc
 8005fee:	2200      	movcc	r2, #0
 8005ff0:	441a      	add	r2, r3
 8005ff2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8005ff6:	b17b      	cbz	r3, 8006018 <__mdiff+0x108>
 8005ff8:	6107      	str	r7, [r0, #16]
 8005ffa:	e7a3      	b.n	8005f44 <__mdiff+0x34>
 8005ffc:	f856 8b04 	ldr.w	r8, [r6], #4
 8006000:	fa11 f288 	uxtah	r2, r1, r8
 8006004:	1414      	asrs	r4, r2, #16
 8006006:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800600a:	b292      	uxth	r2, r2
 800600c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006010:	f84e 2b04 	str.w	r2, [lr], #4
 8006014:	1421      	asrs	r1, r4, #16
 8006016:	e7e0      	b.n	8005fda <__mdiff+0xca>
 8006018:	3f01      	subs	r7, #1
 800601a:	e7ea      	b.n	8005ff2 <__mdiff+0xe2>
 800601c:	08006d73 	.word	0x08006d73
 8006020:	08006de4 	.word	0x08006de4

08006024 <__d2b>:
 8006024:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006028:	4689      	mov	r9, r1
 800602a:	2101      	movs	r1, #1
 800602c:	ec57 6b10 	vmov	r6, r7, d0
 8006030:	4690      	mov	r8, r2
 8006032:	f7ff fccf 	bl	80059d4 <_Balloc>
 8006036:	4604      	mov	r4, r0
 8006038:	b930      	cbnz	r0, 8006048 <__d2b+0x24>
 800603a:	4602      	mov	r2, r0
 800603c:	4b25      	ldr	r3, [pc, #148]	; (80060d4 <__d2b+0xb0>)
 800603e:	4826      	ldr	r0, [pc, #152]	; (80060d8 <__d2b+0xb4>)
 8006040:	f240 310a 	movw	r1, #778	; 0x30a
 8006044:	f000 fbc0 	bl	80067c8 <__assert_func>
 8006048:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800604c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006050:	bb35      	cbnz	r5, 80060a0 <__d2b+0x7c>
 8006052:	2e00      	cmp	r6, #0
 8006054:	9301      	str	r3, [sp, #4]
 8006056:	d028      	beq.n	80060aa <__d2b+0x86>
 8006058:	4668      	mov	r0, sp
 800605a:	9600      	str	r6, [sp, #0]
 800605c:	f7ff fd82 	bl	8005b64 <__lo0bits>
 8006060:	9900      	ldr	r1, [sp, #0]
 8006062:	b300      	cbz	r0, 80060a6 <__d2b+0x82>
 8006064:	9a01      	ldr	r2, [sp, #4]
 8006066:	f1c0 0320 	rsb	r3, r0, #32
 800606a:	fa02 f303 	lsl.w	r3, r2, r3
 800606e:	430b      	orrs	r3, r1
 8006070:	40c2      	lsrs	r2, r0
 8006072:	6163      	str	r3, [r4, #20]
 8006074:	9201      	str	r2, [sp, #4]
 8006076:	9b01      	ldr	r3, [sp, #4]
 8006078:	61a3      	str	r3, [r4, #24]
 800607a:	2b00      	cmp	r3, #0
 800607c:	bf14      	ite	ne
 800607e:	2202      	movne	r2, #2
 8006080:	2201      	moveq	r2, #1
 8006082:	6122      	str	r2, [r4, #16]
 8006084:	b1d5      	cbz	r5, 80060bc <__d2b+0x98>
 8006086:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800608a:	4405      	add	r5, r0
 800608c:	f8c9 5000 	str.w	r5, [r9]
 8006090:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006094:	f8c8 0000 	str.w	r0, [r8]
 8006098:	4620      	mov	r0, r4
 800609a:	b003      	add	sp, #12
 800609c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80060a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80060a4:	e7d5      	b.n	8006052 <__d2b+0x2e>
 80060a6:	6161      	str	r1, [r4, #20]
 80060a8:	e7e5      	b.n	8006076 <__d2b+0x52>
 80060aa:	a801      	add	r0, sp, #4
 80060ac:	f7ff fd5a 	bl	8005b64 <__lo0bits>
 80060b0:	9b01      	ldr	r3, [sp, #4]
 80060b2:	6163      	str	r3, [r4, #20]
 80060b4:	2201      	movs	r2, #1
 80060b6:	6122      	str	r2, [r4, #16]
 80060b8:	3020      	adds	r0, #32
 80060ba:	e7e3      	b.n	8006084 <__d2b+0x60>
 80060bc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80060c0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80060c4:	f8c9 0000 	str.w	r0, [r9]
 80060c8:	6918      	ldr	r0, [r3, #16]
 80060ca:	f7ff fd2b 	bl	8005b24 <__hi0bits>
 80060ce:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80060d2:	e7df      	b.n	8006094 <__d2b+0x70>
 80060d4:	08006d73 	.word	0x08006d73
 80060d8:	08006de4 	.word	0x08006de4

080060dc <_calloc_r>:
 80060dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80060de:	fba1 2402 	umull	r2, r4, r1, r2
 80060e2:	b94c      	cbnz	r4, 80060f8 <_calloc_r+0x1c>
 80060e4:	4611      	mov	r1, r2
 80060e6:	9201      	str	r2, [sp, #4]
 80060e8:	f000 f87a 	bl	80061e0 <_malloc_r>
 80060ec:	9a01      	ldr	r2, [sp, #4]
 80060ee:	4605      	mov	r5, r0
 80060f0:	b930      	cbnz	r0, 8006100 <_calloc_r+0x24>
 80060f2:	4628      	mov	r0, r5
 80060f4:	b003      	add	sp, #12
 80060f6:	bd30      	pop	{r4, r5, pc}
 80060f8:	220c      	movs	r2, #12
 80060fa:	6002      	str	r2, [r0, #0]
 80060fc:	2500      	movs	r5, #0
 80060fe:	e7f8      	b.n	80060f2 <_calloc_r+0x16>
 8006100:	4621      	mov	r1, r4
 8006102:	f7fe f84f 	bl	80041a4 <memset>
 8006106:	e7f4      	b.n	80060f2 <_calloc_r+0x16>

08006108 <_free_r>:
 8006108:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800610a:	2900      	cmp	r1, #0
 800610c:	d044      	beq.n	8006198 <_free_r+0x90>
 800610e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006112:	9001      	str	r0, [sp, #4]
 8006114:	2b00      	cmp	r3, #0
 8006116:	f1a1 0404 	sub.w	r4, r1, #4
 800611a:	bfb8      	it	lt
 800611c:	18e4      	addlt	r4, r4, r3
 800611e:	f000 fcdf 	bl	8006ae0 <__malloc_lock>
 8006122:	4a1e      	ldr	r2, [pc, #120]	; (800619c <_free_r+0x94>)
 8006124:	9801      	ldr	r0, [sp, #4]
 8006126:	6813      	ldr	r3, [r2, #0]
 8006128:	b933      	cbnz	r3, 8006138 <_free_r+0x30>
 800612a:	6063      	str	r3, [r4, #4]
 800612c:	6014      	str	r4, [r2, #0]
 800612e:	b003      	add	sp, #12
 8006130:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006134:	f000 bcda 	b.w	8006aec <__malloc_unlock>
 8006138:	42a3      	cmp	r3, r4
 800613a:	d908      	bls.n	800614e <_free_r+0x46>
 800613c:	6825      	ldr	r5, [r4, #0]
 800613e:	1961      	adds	r1, r4, r5
 8006140:	428b      	cmp	r3, r1
 8006142:	bf01      	itttt	eq
 8006144:	6819      	ldreq	r1, [r3, #0]
 8006146:	685b      	ldreq	r3, [r3, #4]
 8006148:	1949      	addeq	r1, r1, r5
 800614a:	6021      	streq	r1, [r4, #0]
 800614c:	e7ed      	b.n	800612a <_free_r+0x22>
 800614e:	461a      	mov	r2, r3
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	b10b      	cbz	r3, 8006158 <_free_r+0x50>
 8006154:	42a3      	cmp	r3, r4
 8006156:	d9fa      	bls.n	800614e <_free_r+0x46>
 8006158:	6811      	ldr	r1, [r2, #0]
 800615a:	1855      	adds	r5, r2, r1
 800615c:	42a5      	cmp	r5, r4
 800615e:	d10b      	bne.n	8006178 <_free_r+0x70>
 8006160:	6824      	ldr	r4, [r4, #0]
 8006162:	4421      	add	r1, r4
 8006164:	1854      	adds	r4, r2, r1
 8006166:	42a3      	cmp	r3, r4
 8006168:	6011      	str	r1, [r2, #0]
 800616a:	d1e0      	bne.n	800612e <_free_r+0x26>
 800616c:	681c      	ldr	r4, [r3, #0]
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	6053      	str	r3, [r2, #4]
 8006172:	4421      	add	r1, r4
 8006174:	6011      	str	r1, [r2, #0]
 8006176:	e7da      	b.n	800612e <_free_r+0x26>
 8006178:	d902      	bls.n	8006180 <_free_r+0x78>
 800617a:	230c      	movs	r3, #12
 800617c:	6003      	str	r3, [r0, #0]
 800617e:	e7d6      	b.n	800612e <_free_r+0x26>
 8006180:	6825      	ldr	r5, [r4, #0]
 8006182:	1961      	adds	r1, r4, r5
 8006184:	428b      	cmp	r3, r1
 8006186:	bf04      	itt	eq
 8006188:	6819      	ldreq	r1, [r3, #0]
 800618a:	685b      	ldreq	r3, [r3, #4]
 800618c:	6063      	str	r3, [r4, #4]
 800618e:	bf04      	itt	eq
 8006190:	1949      	addeq	r1, r1, r5
 8006192:	6021      	streq	r1, [r4, #0]
 8006194:	6054      	str	r4, [r2, #4]
 8006196:	e7ca      	b.n	800612e <_free_r+0x26>
 8006198:	b003      	add	sp, #12
 800619a:	bd30      	pop	{r4, r5, pc}
 800619c:	20000278 	.word	0x20000278

080061a0 <sbrk_aligned>:
 80061a0:	b570      	push	{r4, r5, r6, lr}
 80061a2:	4e0e      	ldr	r6, [pc, #56]	; (80061dc <sbrk_aligned+0x3c>)
 80061a4:	460c      	mov	r4, r1
 80061a6:	6831      	ldr	r1, [r6, #0]
 80061a8:	4605      	mov	r5, r0
 80061aa:	b911      	cbnz	r1, 80061b2 <sbrk_aligned+0x12>
 80061ac:	f000 f9e6 	bl	800657c <_sbrk_r>
 80061b0:	6030      	str	r0, [r6, #0]
 80061b2:	4621      	mov	r1, r4
 80061b4:	4628      	mov	r0, r5
 80061b6:	f000 f9e1 	bl	800657c <_sbrk_r>
 80061ba:	1c43      	adds	r3, r0, #1
 80061bc:	d00a      	beq.n	80061d4 <sbrk_aligned+0x34>
 80061be:	1cc4      	adds	r4, r0, #3
 80061c0:	f024 0403 	bic.w	r4, r4, #3
 80061c4:	42a0      	cmp	r0, r4
 80061c6:	d007      	beq.n	80061d8 <sbrk_aligned+0x38>
 80061c8:	1a21      	subs	r1, r4, r0
 80061ca:	4628      	mov	r0, r5
 80061cc:	f000 f9d6 	bl	800657c <_sbrk_r>
 80061d0:	3001      	adds	r0, #1
 80061d2:	d101      	bne.n	80061d8 <sbrk_aligned+0x38>
 80061d4:	f04f 34ff 	mov.w	r4, #4294967295
 80061d8:	4620      	mov	r0, r4
 80061da:	bd70      	pop	{r4, r5, r6, pc}
 80061dc:	2000027c 	.word	0x2000027c

080061e0 <_malloc_r>:
 80061e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061e4:	1ccd      	adds	r5, r1, #3
 80061e6:	f025 0503 	bic.w	r5, r5, #3
 80061ea:	3508      	adds	r5, #8
 80061ec:	2d0c      	cmp	r5, #12
 80061ee:	bf38      	it	cc
 80061f0:	250c      	movcc	r5, #12
 80061f2:	2d00      	cmp	r5, #0
 80061f4:	4607      	mov	r7, r0
 80061f6:	db01      	blt.n	80061fc <_malloc_r+0x1c>
 80061f8:	42a9      	cmp	r1, r5
 80061fa:	d905      	bls.n	8006208 <_malloc_r+0x28>
 80061fc:	230c      	movs	r3, #12
 80061fe:	603b      	str	r3, [r7, #0]
 8006200:	2600      	movs	r6, #0
 8006202:	4630      	mov	r0, r6
 8006204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006208:	4e2e      	ldr	r6, [pc, #184]	; (80062c4 <_malloc_r+0xe4>)
 800620a:	f000 fc69 	bl	8006ae0 <__malloc_lock>
 800620e:	6833      	ldr	r3, [r6, #0]
 8006210:	461c      	mov	r4, r3
 8006212:	bb34      	cbnz	r4, 8006262 <_malloc_r+0x82>
 8006214:	4629      	mov	r1, r5
 8006216:	4638      	mov	r0, r7
 8006218:	f7ff ffc2 	bl	80061a0 <sbrk_aligned>
 800621c:	1c43      	adds	r3, r0, #1
 800621e:	4604      	mov	r4, r0
 8006220:	d14d      	bne.n	80062be <_malloc_r+0xde>
 8006222:	6834      	ldr	r4, [r6, #0]
 8006224:	4626      	mov	r6, r4
 8006226:	2e00      	cmp	r6, #0
 8006228:	d140      	bne.n	80062ac <_malloc_r+0xcc>
 800622a:	6823      	ldr	r3, [r4, #0]
 800622c:	4631      	mov	r1, r6
 800622e:	4638      	mov	r0, r7
 8006230:	eb04 0803 	add.w	r8, r4, r3
 8006234:	f000 f9a2 	bl	800657c <_sbrk_r>
 8006238:	4580      	cmp	r8, r0
 800623a:	d13a      	bne.n	80062b2 <_malloc_r+0xd2>
 800623c:	6821      	ldr	r1, [r4, #0]
 800623e:	3503      	adds	r5, #3
 8006240:	1a6d      	subs	r5, r5, r1
 8006242:	f025 0503 	bic.w	r5, r5, #3
 8006246:	3508      	adds	r5, #8
 8006248:	2d0c      	cmp	r5, #12
 800624a:	bf38      	it	cc
 800624c:	250c      	movcc	r5, #12
 800624e:	4629      	mov	r1, r5
 8006250:	4638      	mov	r0, r7
 8006252:	f7ff ffa5 	bl	80061a0 <sbrk_aligned>
 8006256:	3001      	adds	r0, #1
 8006258:	d02b      	beq.n	80062b2 <_malloc_r+0xd2>
 800625a:	6823      	ldr	r3, [r4, #0]
 800625c:	442b      	add	r3, r5
 800625e:	6023      	str	r3, [r4, #0]
 8006260:	e00e      	b.n	8006280 <_malloc_r+0xa0>
 8006262:	6822      	ldr	r2, [r4, #0]
 8006264:	1b52      	subs	r2, r2, r5
 8006266:	d41e      	bmi.n	80062a6 <_malloc_r+0xc6>
 8006268:	2a0b      	cmp	r2, #11
 800626a:	d916      	bls.n	800629a <_malloc_r+0xba>
 800626c:	1961      	adds	r1, r4, r5
 800626e:	42a3      	cmp	r3, r4
 8006270:	6025      	str	r5, [r4, #0]
 8006272:	bf18      	it	ne
 8006274:	6059      	strne	r1, [r3, #4]
 8006276:	6863      	ldr	r3, [r4, #4]
 8006278:	bf08      	it	eq
 800627a:	6031      	streq	r1, [r6, #0]
 800627c:	5162      	str	r2, [r4, r5]
 800627e:	604b      	str	r3, [r1, #4]
 8006280:	4638      	mov	r0, r7
 8006282:	f104 060b 	add.w	r6, r4, #11
 8006286:	f000 fc31 	bl	8006aec <__malloc_unlock>
 800628a:	f026 0607 	bic.w	r6, r6, #7
 800628e:	1d23      	adds	r3, r4, #4
 8006290:	1af2      	subs	r2, r6, r3
 8006292:	d0b6      	beq.n	8006202 <_malloc_r+0x22>
 8006294:	1b9b      	subs	r3, r3, r6
 8006296:	50a3      	str	r3, [r4, r2]
 8006298:	e7b3      	b.n	8006202 <_malloc_r+0x22>
 800629a:	6862      	ldr	r2, [r4, #4]
 800629c:	42a3      	cmp	r3, r4
 800629e:	bf0c      	ite	eq
 80062a0:	6032      	streq	r2, [r6, #0]
 80062a2:	605a      	strne	r2, [r3, #4]
 80062a4:	e7ec      	b.n	8006280 <_malloc_r+0xa0>
 80062a6:	4623      	mov	r3, r4
 80062a8:	6864      	ldr	r4, [r4, #4]
 80062aa:	e7b2      	b.n	8006212 <_malloc_r+0x32>
 80062ac:	4634      	mov	r4, r6
 80062ae:	6876      	ldr	r6, [r6, #4]
 80062b0:	e7b9      	b.n	8006226 <_malloc_r+0x46>
 80062b2:	230c      	movs	r3, #12
 80062b4:	603b      	str	r3, [r7, #0]
 80062b6:	4638      	mov	r0, r7
 80062b8:	f000 fc18 	bl	8006aec <__malloc_unlock>
 80062bc:	e7a1      	b.n	8006202 <_malloc_r+0x22>
 80062be:	6025      	str	r5, [r4, #0]
 80062c0:	e7de      	b.n	8006280 <_malloc_r+0xa0>
 80062c2:	bf00      	nop
 80062c4:	20000278 	.word	0x20000278

080062c8 <__sfputc_r>:
 80062c8:	6893      	ldr	r3, [r2, #8]
 80062ca:	3b01      	subs	r3, #1
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	b410      	push	{r4}
 80062d0:	6093      	str	r3, [r2, #8]
 80062d2:	da08      	bge.n	80062e6 <__sfputc_r+0x1e>
 80062d4:	6994      	ldr	r4, [r2, #24]
 80062d6:	42a3      	cmp	r3, r4
 80062d8:	db01      	blt.n	80062de <__sfputc_r+0x16>
 80062da:	290a      	cmp	r1, #10
 80062dc:	d103      	bne.n	80062e6 <__sfputc_r+0x1e>
 80062de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80062e2:	f000 b99f 	b.w	8006624 <__swbuf_r>
 80062e6:	6813      	ldr	r3, [r2, #0]
 80062e8:	1c58      	adds	r0, r3, #1
 80062ea:	6010      	str	r0, [r2, #0]
 80062ec:	7019      	strb	r1, [r3, #0]
 80062ee:	4608      	mov	r0, r1
 80062f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80062f4:	4770      	bx	lr

080062f6 <__sfputs_r>:
 80062f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062f8:	4606      	mov	r6, r0
 80062fa:	460f      	mov	r7, r1
 80062fc:	4614      	mov	r4, r2
 80062fe:	18d5      	adds	r5, r2, r3
 8006300:	42ac      	cmp	r4, r5
 8006302:	d101      	bne.n	8006308 <__sfputs_r+0x12>
 8006304:	2000      	movs	r0, #0
 8006306:	e007      	b.n	8006318 <__sfputs_r+0x22>
 8006308:	f814 1b01 	ldrb.w	r1, [r4], #1
 800630c:	463a      	mov	r2, r7
 800630e:	4630      	mov	r0, r6
 8006310:	f7ff ffda 	bl	80062c8 <__sfputc_r>
 8006314:	1c43      	adds	r3, r0, #1
 8006316:	d1f3      	bne.n	8006300 <__sfputs_r+0xa>
 8006318:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800631c <_vfiprintf_r>:
 800631c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006320:	460d      	mov	r5, r1
 8006322:	b09d      	sub	sp, #116	; 0x74
 8006324:	4614      	mov	r4, r2
 8006326:	4698      	mov	r8, r3
 8006328:	4606      	mov	r6, r0
 800632a:	b118      	cbz	r0, 8006334 <_vfiprintf_r+0x18>
 800632c:	6983      	ldr	r3, [r0, #24]
 800632e:	b90b      	cbnz	r3, 8006334 <_vfiprintf_r+0x18>
 8006330:	f7ff fa94 	bl	800585c <__sinit>
 8006334:	4b89      	ldr	r3, [pc, #548]	; (800655c <_vfiprintf_r+0x240>)
 8006336:	429d      	cmp	r5, r3
 8006338:	d11b      	bne.n	8006372 <_vfiprintf_r+0x56>
 800633a:	6875      	ldr	r5, [r6, #4]
 800633c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800633e:	07d9      	lsls	r1, r3, #31
 8006340:	d405      	bmi.n	800634e <_vfiprintf_r+0x32>
 8006342:	89ab      	ldrh	r3, [r5, #12]
 8006344:	059a      	lsls	r2, r3, #22
 8006346:	d402      	bmi.n	800634e <_vfiprintf_r+0x32>
 8006348:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800634a:	f7ff fb2a 	bl	80059a2 <__retarget_lock_acquire_recursive>
 800634e:	89ab      	ldrh	r3, [r5, #12]
 8006350:	071b      	lsls	r3, r3, #28
 8006352:	d501      	bpl.n	8006358 <_vfiprintf_r+0x3c>
 8006354:	692b      	ldr	r3, [r5, #16]
 8006356:	b9eb      	cbnz	r3, 8006394 <_vfiprintf_r+0x78>
 8006358:	4629      	mov	r1, r5
 800635a:	4630      	mov	r0, r6
 800635c:	f000 f9c6 	bl	80066ec <__swsetup_r>
 8006360:	b1c0      	cbz	r0, 8006394 <_vfiprintf_r+0x78>
 8006362:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006364:	07dc      	lsls	r4, r3, #31
 8006366:	d50e      	bpl.n	8006386 <_vfiprintf_r+0x6a>
 8006368:	f04f 30ff 	mov.w	r0, #4294967295
 800636c:	b01d      	add	sp, #116	; 0x74
 800636e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006372:	4b7b      	ldr	r3, [pc, #492]	; (8006560 <_vfiprintf_r+0x244>)
 8006374:	429d      	cmp	r5, r3
 8006376:	d101      	bne.n	800637c <_vfiprintf_r+0x60>
 8006378:	68b5      	ldr	r5, [r6, #8]
 800637a:	e7df      	b.n	800633c <_vfiprintf_r+0x20>
 800637c:	4b79      	ldr	r3, [pc, #484]	; (8006564 <_vfiprintf_r+0x248>)
 800637e:	429d      	cmp	r5, r3
 8006380:	bf08      	it	eq
 8006382:	68f5      	ldreq	r5, [r6, #12]
 8006384:	e7da      	b.n	800633c <_vfiprintf_r+0x20>
 8006386:	89ab      	ldrh	r3, [r5, #12]
 8006388:	0598      	lsls	r0, r3, #22
 800638a:	d4ed      	bmi.n	8006368 <_vfiprintf_r+0x4c>
 800638c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800638e:	f7ff fb09 	bl	80059a4 <__retarget_lock_release_recursive>
 8006392:	e7e9      	b.n	8006368 <_vfiprintf_r+0x4c>
 8006394:	2300      	movs	r3, #0
 8006396:	9309      	str	r3, [sp, #36]	; 0x24
 8006398:	2320      	movs	r3, #32
 800639a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800639e:	f8cd 800c 	str.w	r8, [sp, #12]
 80063a2:	2330      	movs	r3, #48	; 0x30
 80063a4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006568 <_vfiprintf_r+0x24c>
 80063a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80063ac:	f04f 0901 	mov.w	r9, #1
 80063b0:	4623      	mov	r3, r4
 80063b2:	469a      	mov	sl, r3
 80063b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80063b8:	b10a      	cbz	r2, 80063be <_vfiprintf_r+0xa2>
 80063ba:	2a25      	cmp	r2, #37	; 0x25
 80063bc:	d1f9      	bne.n	80063b2 <_vfiprintf_r+0x96>
 80063be:	ebba 0b04 	subs.w	fp, sl, r4
 80063c2:	d00b      	beq.n	80063dc <_vfiprintf_r+0xc0>
 80063c4:	465b      	mov	r3, fp
 80063c6:	4622      	mov	r2, r4
 80063c8:	4629      	mov	r1, r5
 80063ca:	4630      	mov	r0, r6
 80063cc:	f7ff ff93 	bl	80062f6 <__sfputs_r>
 80063d0:	3001      	adds	r0, #1
 80063d2:	f000 80aa 	beq.w	800652a <_vfiprintf_r+0x20e>
 80063d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80063d8:	445a      	add	r2, fp
 80063da:	9209      	str	r2, [sp, #36]	; 0x24
 80063dc:	f89a 3000 	ldrb.w	r3, [sl]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	f000 80a2 	beq.w	800652a <_vfiprintf_r+0x20e>
 80063e6:	2300      	movs	r3, #0
 80063e8:	f04f 32ff 	mov.w	r2, #4294967295
 80063ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80063f0:	f10a 0a01 	add.w	sl, sl, #1
 80063f4:	9304      	str	r3, [sp, #16]
 80063f6:	9307      	str	r3, [sp, #28]
 80063f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80063fc:	931a      	str	r3, [sp, #104]	; 0x68
 80063fe:	4654      	mov	r4, sl
 8006400:	2205      	movs	r2, #5
 8006402:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006406:	4858      	ldr	r0, [pc, #352]	; (8006568 <_vfiprintf_r+0x24c>)
 8006408:	f7f9 feea 	bl	80001e0 <memchr>
 800640c:	9a04      	ldr	r2, [sp, #16]
 800640e:	b9d8      	cbnz	r0, 8006448 <_vfiprintf_r+0x12c>
 8006410:	06d1      	lsls	r1, r2, #27
 8006412:	bf44      	itt	mi
 8006414:	2320      	movmi	r3, #32
 8006416:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800641a:	0713      	lsls	r3, r2, #28
 800641c:	bf44      	itt	mi
 800641e:	232b      	movmi	r3, #43	; 0x2b
 8006420:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006424:	f89a 3000 	ldrb.w	r3, [sl]
 8006428:	2b2a      	cmp	r3, #42	; 0x2a
 800642a:	d015      	beq.n	8006458 <_vfiprintf_r+0x13c>
 800642c:	9a07      	ldr	r2, [sp, #28]
 800642e:	4654      	mov	r4, sl
 8006430:	2000      	movs	r0, #0
 8006432:	f04f 0c0a 	mov.w	ip, #10
 8006436:	4621      	mov	r1, r4
 8006438:	f811 3b01 	ldrb.w	r3, [r1], #1
 800643c:	3b30      	subs	r3, #48	; 0x30
 800643e:	2b09      	cmp	r3, #9
 8006440:	d94e      	bls.n	80064e0 <_vfiprintf_r+0x1c4>
 8006442:	b1b0      	cbz	r0, 8006472 <_vfiprintf_r+0x156>
 8006444:	9207      	str	r2, [sp, #28]
 8006446:	e014      	b.n	8006472 <_vfiprintf_r+0x156>
 8006448:	eba0 0308 	sub.w	r3, r0, r8
 800644c:	fa09 f303 	lsl.w	r3, r9, r3
 8006450:	4313      	orrs	r3, r2
 8006452:	9304      	str	r3, [sp, #16]
 8006454:	46a2      	mov	sl, r4
 8006456:	e7d2      	b.n	80063fe <_vfiprintf_r+0xe2>
 8006458:	9b03      	ldr	r3, [sp, #12]
 800645a:	1d19      	adds	r1, r3, #4
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	9103      	str	r1, [sp, #12]
 8006460:	2b00      	cmp	r3, #0
 8006462:	bfbb      	ittet	lt
 8006464:	425b      	neglt	r3, r3
 8006466:	f042 0202 	orrlt.w	r2, r2, #2
 800646a:	9307      	strge	r3, [sp, #28]
 800646c:	9307      	strlt	r3, [sp, #28]
 800646e:	bfb8      	it	lt
 8006470:	9204      	strlt	r2, [sp, #16]
 8006472:	7823      	ldrb	r3, [r4, #0]
 8006474:	2b2e      	cmp	r3, #46	; 0x2e
 8006476:	d10c      	bne.n	8006492 <_vfiprintf_r+0x176>
 8006478:	7863      	ldrb	r3, [r4, #1]
 800647a:	2b2a      	cmp	r3, #42	; 0x2a
 800647c:	d135      	bne.n	80064ea <_vfiprintf_r+0x1ce>
 800647e:	9b03      	ldr	r3, [sp, #12]
 8006480:	1d1a      	adds	r2, r3, #4
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	9203      	str	r2, [sp, #12]
 8006486:	2b00      	cmp	r3, #0
 8006488:	bfb8      	it	lt
 800648a:	f04f 33ff 	movlt.w	r3, #4294967295
 800648e:	3402      	adds	r4, #2
 8006490:	9305      	str	r3, [sp, #20]
 8006492:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006578 <_vfiprintf_r+0x25c>
 8006496:	7821      	ldrb	r1, [r4, #0]
 8006498:	2203      	movs	r2, #3
 800649a:	4650      	mov	r0, sl
 800649c:	f7f9 fea0 	bl	80001e0 <memchr>
 80064a0:	b140      	cbz	r0, 80064b4 <_vfiprintf_r+0x198>
 80064a2:	2340      	movs	r3, #64	; 0x40
 80064a4:	eba0 000a 	sub.w	r0, r0, sl
 80064a8:	fa03 f000 	lsl.w	r0, r3, r0
 80064ac:	9b04      	ldr	r3, [sp, #16]
 80064ae:	4303      	orrs	r3, r0
 80064b0:	3401      	adds	r4, #1
 80064b2:	9304      	str	r3, [sp, #16]
 80064b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064b8:	482c      	ldr	r0, [pc, #176]	; (800656c <_vfiprintf_r+0x250>)
 80064ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80064be:	2206      	movs	r2, #6
 80064c0:	f7f9 fe8e 	bl	80001e0 <memchr>
 80064c4:	2800      	cmp	r0, #0
 80064c6:	d03f      	beq.n	8006548 <_vfiprintf_r+0x22c>
 80064c8:	4b29      	ldr	r3, [pc, #164]	; (8006570 <_vfiprintf_r+0x254>)
 80064ca:	bb1b      	cbnz	r3, 8006514 <_vfiprintf_r+0x1f8>
 80064cc:	9b03      	ldr	r3, [sp, #12]
 80064ce:	3307      	adds	r3, #7
 80064d0:	f023 0307 	bic.w	r3, r3, #7
 80064d4:	3308      	adds	r3, #8
 80064d6:	9303      	str	r3, [sp, #12]
 80064d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064da:	443b      	add	r3, r7
 80064dc:	9309      	str	r3, [sp, #36]	; 0x24
 80064de:	e767      	b.n	80063b0 <_vfiprintf_r+0x94>
 80064e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80064e4:	460c      	mov	r4, r1
 80064e6:	2001      	movs	r0, #1
 80064e8:	e7a5      	b.n	8006436 <_vfiprintf_r+0x11a>
 80064ea:	2300      	movs	r3, #0
 80064ec:	3401      	adds	r4, #1
 80064ee:	9305      	str	r3, [sp, #20]
 80064f0:	4619      	mov	r1, r3
 80064f2:	f04f 0c0a 	mov.w	ip, #10
 80064f6:	4620      	mov	r0, r4
 80064f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80064fc:	3a30      	subs	r2, #48	; 0x30
 80064fe:	2a09      	cmp	r2, #9
 8006500:	d903      	bls.n	800650a <_vfiprintf_r+0x1ee>
 8006502:	2b00      	cmp	r3, #0
 8006504:	d0c5      	beq.n	8006492 <_vfiprintf_r+0x176>
 8006506:	9105      	str	r1, [sp, #20]
 8006508:	e7c3      	b.n	8006492 <_vfiprintf_r+0x176>
 800650a:	fb0c 2101 	mla	r1, ip, r1, r2
 800650e:	4604      	mov	r4, r0
 8006510:	2301      	movs	r3, #1
 8006512:	e7f0      	b.n	80064f6 <_vfiprintf_r+0x1da>
 8006514:	ab03      	add	r3, sp, #12
 8006516:	9300      	str	r3, [sp, #0]
 8006518:	462a      	mov	r2, r5
 800651a:	4b16      	ldr	r3, [pc, #88]	; (8006574 <_vfiprintf_r+0x258>)
 800651c:	a904      	add	r1, sp, #16
 800651e:	4630      	mov	r0, r6
 8006520:	f7fd fee8 	bl	80042f4 <_printf_float>
 8006524:	4607      	mov	r7, r0
 8006526:	1c78      	adds	r0, r7, #1
 8006528:	d1d6      	bne.n	80064d8 <_vfiprintf_r+0x1bc>
 800652a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800652c:	07d9      	lsls	r1, r3, #31
 800652e:	d405      	bmi.n	800653c <_vfiprintf_r+0x220>
 8006530:	89ab      	ldrh	r3, [r5, #12]
 8006532:	059a      	lsls	r2, r3, #22
 8006534:	d402      	bmi.n	800653c <_vfiprintf_r+0x220>
 8006536:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006538:	f7ff fa34 	bl	80059a4 <__retarget_lock_release_recursive>
 800653c:	89ab      	ldrh	r3, [r5, #12]
 800653e:	065b      	lsls	r3, r3, #25
 8006540:	f53f af12 	bmi.w	8006368 <_vfiprintf_r+0x4c>
 8006544:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006546:	e711      	b.n	800636c <_vfiprintf_r+0x50>
 8006548:	ab03      	add	r3, sp, #12
 800654a:	9300      	str	r3, [sp, #0]
 800654c:	462a      	mov	r2, r5
 800654e:	4b09      	ldr	r3, [pc, #36]	; (8006574 <_vfiprintf_r+0x258>)
 8006550:	a904      	add	r1, sp, #16
 8006552:	4630      	mov	r0, r6
 8006554:	f7fe f972 	bl	800483c <_printf_i>
 8006558:	e7e4      	b.n	8006524 <_vfiprintf_r+0x208>
 800655a:	bf00      	nop
 800655c:	08006da4 	.word	0x08006da4
 8006560:	08006dc4 	.word	0x08006dc4
 8006564:	08006d84 	.word	0x08006d84
 8006568:	08006f3c 	.word	0x08006f3c
 800656c:	08006f46 	.word	0x08006f46
 8006570:	080042f5 	.word	0x080042f5
 8006574:	080062f7 	.word	0x080062f7
 8006578:	08006f42 	.word	0x08006f42

0800657c <_sbrk_r>:
 800657c:	b538      	push	{r3, r4, r5, lr}
 800657e:	4d06      	ldr	r5, [pc, #24]	; (8006598 <_sbrk_r+0x1c>)
 8006580:	2300      	movs	r3, #0
 8006582:	4604      	mov	r4, r0
 8006584:	4608      	mov	r0, r1
 8006586:	602b      	str	r3, [r5, #0]
 8006588:	f7fb fb62 	bl	8001c50 <_sbrk>
 800658c:	1c43      	adds	r3, r0, #1
 800658e:	d102      	bne.n	8006596 <_sbrk_r+0x1a>
 8006590:	682b      	ldr	r3, [r5, #0]
 8006592:	b103      	cbz	r3, 8006596 <_sbrk_r+0x1a>
 8006594:	6023      	str	r3, [r4, #0]
 8006596:	bd38      	pop	{r3, r4, r5, pc}
 8006598:	20000280 	.word	0x20000280

0800659c <__sread>:
 800659c:	b510      	push	{r4, lr}
 800659e:	460c      	mov	r4, r1
 80065a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065a4:	f000 faa8 	bl	8006af8 <_read_r>
 80065a8:	2800      	cmp	r0, #0
 80065aa:	bfab      	itete	ge
 80065ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80065ae:	89a3      	ldrhlt	r3, [r4, #12]
 80065b0:	181b      	addge	r3, r3, r0
 80065b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80065b6:	bfac      	ite	ge
 80065b8:	6563      	strge	r3, [r4, #84]	; 0x54
 80065ba:	81a3      	strhlt	r3, [r4, #12]
 80065bc:	bd10      	pop	{r4, pc}

080065be <__swrite>:
 80065be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065c2:	461f      	mov	r7, r3
 80065c4:	898b      	ldrh	r3, [r1, #12]
 80065c6:	05db      	lsls	r3, r3, #23
 80065c8:	4605      	mov	r5, r0
 80065ca:	460c      	mov	r4, r1
 80065cc:	4616      	mov	r6, r2
 80065ce:	d505      	bpl.n	80065dc <__swrite+0x1e>
 80065d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065d4:	2302      	movs	r3, #2
 80065d6:	2200      	movs	r2, #0
 80065d8:	f000 f9f8 	bl	80069cc <_lseek_r>
 80065dc:	89a3      	ldrh	r3, [r4, #12]
 80065de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80065e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80065e6:	81a3      	strh	r3, [r4, #12]
 80065e8:	4632      	mov	r2, r6
 80065ea:	463b      	mov	r3, r7
 80065ec:	4628      	mov	r0, r5
 80065ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80065f2:	f000 b869 	b.w	80066c8 <_write_r>

080065f6 <__sseek>:
 80065f6:	b510      	push	{r4, lr}
 80065f8:	460c      	mov	r4, r1
 80065fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065fe:	f000 f9e5 	bl	80069cc <_lseek_r>
 8006602:	1c43      	adds	r3, r0, #1
 8006604:	89a3      	ldrh	r3, [r4, #12]
 8006606:	bf15      	itete	ne
 8006608:	6560      	strne	r0, [r4, #84]	; 0x54
 800660a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800660e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006612:	81a3      	strheq	r3, [r4, #12]
 8006614:	bf18      	it	ne
 8006616:	81a3      	strhne	r3, [r4, #12]
 8006618:	bd10      	pop	{r4, pc}

0800661a <__sclose>:
 800661a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800661e:	f000 b8f1 	b.w	8006804 <_close_r>
	...

08006624 <__swbuf_r>:
 8006624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006626:	460e      	mov	r6, r1
 8006628:	4614      	mov	r4, r2
 800662a:	4605      	mov	r5, r0
 800662c:	b118      	cbz	r0, 8006636 <__swbuf_r+0x12>
 800662e:	6983      	ldr	r3, [r0, #24]
 8006630:	b90b      	cbnz	r3, 8006636 <__swbuf_r+0x12>
 8006632:	f7ff f913 	bl	800585c <__sinit>
 8006636:	4b21      	ldr	r3, [pc, #132]	; (80066bc <__swbuf_r+0x98>)
 8006638:	429c      	cmp	r4, r3
 800663a:	d12b      	bne.n	8006694 <__swbuf_r+0x70>
 800663c:	686c      	ldr	r4, [r5, #4]
 800663e:	69a3      	ldr	r3, [r4, #24]
 8006640:	60a3      	str	r3, [r4, #8]
 8006642:	89a3      	ldrh	r3, [r4, #12]
 8006644:	071a      	lsls	r2, r3, #28
 8006646:	d52f      	bpl.n	80066a8 <__swbuf_r+0x84>
 8006648:	6923      	ldr	r3, [r4, #16]
 800664a:	b36b      	cbz	r3, 80066a8 <__swbuf_r+0x84>
 800664c:	6923      	ldr	r3, [r4, #16]
 800664e:	6820      	ldr	r0, [r4, #0]
 8006650:	1ac0      	subs	r0, r0, r3
 8006652:	6963      	ldr	r3, [r4, #20]
 8006654:	b2f6      	uxtb	r6, r6
 8006656:	4283      	cmp	r3, r0
 8006658:	4637      	mov	r7, r6
 800665a:	dc04      	bgt.n	8006666 <__swbuf_r+0x42>
 800665c:	4621      	mov	r1, r4
 800665e:	4628      	mov	r0, r5
 8006660:	f000 f966 	bl	8006930 <_fflush_r>
 8006664:	bb30      	cbnz	r0, 80066b4 <__swbuf_r+0x90>
 8006666:	68a3      	ldr	r3, [r4, #8]
 8006668:	3b01      	subs	r3, #1
 800666a:	60a3      	str	r3, [r4, #8]
 800666c:	6823      	ldr	r3, [r4, #0]
 800666e:	1c5a      	adds	r2, r3, #1
 8006670:	6022      	str	r2, [r4, #0]
 8006672:	701e      	strb	r6, [r3, #0]
 8006674:	6963      	ldr	r3, [r4, #20]
 8006676:	3001      	adds	r0, #1
 8006678:	4283      	cmp	r3, r0
 800667a:	d004      	beq.n	8006686 <__swbuf_r+0x62>
 800667c:	89a3      	ldrh	r3, [r4, #12]
 800667e:	07db      	lsls	r3, r3, #31
 8006680:	d506      	bpl.n	8006690 <__swbuf_r+0x6c>
 8006682:	2e0a      	cmp	r6, #10
 8006684:	d104      	bne.n	8006690 <__swbuf_r+0x6c>
 8006686:	4621      	mov	r1, r4
 8006688:	4628      	mov	r0, r5
 800668a:	f000 f951 	bl	8006930 <_fflush_r>
 800668e:	b988      	cbnz	r0, 80066b4 <__swbuf_r+0x90>
 8006690:	4638      	mov	r0, r7
 8006692:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006694:	4b0a      	ldr	r3, [pc, #40]	; (80066c0 <__swbuf_r+0x9c>)
 8006696:	429c      	cmp	r4, r3
 8006698:	d101      	bne.n	800669e <__swbuf_r+0x7a>
 800669a:	68ac      	ldr	r4, [r5, #8]
 800669c:	e7cf      	b.n	800663e <__swbuf_r+0x1a>
 800669e:	4b09      	ldr	r3, [pc, #36]	; (80066c4 <__swbuf_r+0xa0>)
 80066a0:	429c      	cmp	r4, r3
 80066a2:	bf08      	it	eq
 80066a4:	68ec      	ldreq	r4, [r5, #12]
 80066a6:	e7ca      	b.n	800663e <__swbuf_r+0x1a>
 80066a8:	4621      	mov	r1, r4
 80066aa:	4628      	mov	r0, r5
 80066ac:	f000 f81e 	bl	80066ec <__swsetup_r>
 80066b0:	2800      	cmp	r0, #0
 80066b2:	d0cb      	beq.n	800664c <__swbuf_r+0x28>
 80066b4:	f04f 37ff 	mov.w	r7, #4294967295
 80066b8:	e7ea      	b.n	8006690 <__swbuf_r+0x6c>
 80066ba:	bf00      	nop
 80066bc:	08006da4 	.word	0x08006da4
 80066c0:	08006dc4 	.word	0x08006dc4
 80066c4:	08006d84 	.word	0x08006d84

080066c8 <_write_r>:
 80066c8:	b538      	push	{r3, r4, r5, lr}
 80066ca:	4d07      	ldr	r5, [pc, #28]	; (80066e8 <_write_r+0x20>)
 80066cc:	4604      	mov	r4, r0
 80066ce:	4608      	mov	r0, r1
 80066d0:	4611      	mov	r1, r2
 80066d2:	2200      	movs	r2, #0
 80066d4:	602a      	str	r2, [r5, #0]
 80066d6:	461a      	mov	r2, r3
 80066d8:	f7fa ff90 	bl	80015fc <_write>
 80066dc:	1c43      	adds	r3, r0, #1
 80066de:	d102      	bne.n	80066e6 <_write_r+0x1e>
 80066e0:	682b      	ldr	r3, [r5, #0]
 80066e2:	b103      	cbz	r3, 80066e6 <_write_r+0x1e>
 80066e4:	6023      	str	r3, [r4, #0]
 80066e6:	bd38      	pop	{r3, r4, r5, pc}
 80066e8:	20000280 	.word	0x20000280

080066ec <__swsetup_r>:
 80066ec:	4b32      	ldr	r3, [pc, #200]	; (80067b8 <__swsetup_r+0xcc>)
 80066ee:	b570      	push	{r4, r5, r6, lr}
 80066f0:	681d      	ldr	r5, [r3, #0]
 80066f2:	4606      	mov	r6, r0
 80066f4:	460c      	mov	r4, r1
 80066f6:	b125      	cbz	r5, 8006702 <__swsetup_r+0x16>
 80066f8:	69ab      	ldr	r3, [r5, #24]
 80066fa:	b913      	cbnz	r3, 8006702 <__swsetup_r+0x16>
 80066fc:	4628      	mov	r0, r5
 80066fe:	f7ff f8ad 	bl	800585c <__sinit>
 8006702:	4b2e      	ldr	r3, [pc, #184]	; (80067bc <__swsetup_r+0xd0>)
 8006704:	429c      	cmp	r4, r3
 8006706:	d10f      	bne.n	8006728 <__swsetup_r+0x3c>
 8006708:	686c      	ldr	r4, [r5, #4]
 800670a:	89a3      	ldrh	r3, [r4, #12]
 800670c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006710:	0719      	lsls	r1, r3, #28
 8006712:	d42c      	bmi.n	800676e <__swsetup_r+0x82>
 8006714:	06dd      	lsls	r5, r3, #27
 8006716:	d411      	bmi.n	800673c <__swsetup_r+0x50>
 8006718:	2309      	movs	r3, #9
 800671a:	6033      	str	r3, [r6, #0]
 800671c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006720:	81a3      	strh	r3, [r4, #12]
 8006722:	f04f 30ff 	mov.w	r0, #4294967295
 8006726:	e03e      	b.n	80067a6 <__swsetup_r+0xba>
 8006728:	4b25      	ldr	r3, [pc, #148]	; (80067c0 <__swsetup_r+0xd4>)
 800672a:	429c      	cmp	r4, r3
 800672c:	d101      	bne.n	8006732 <__swsetup_r+0x46>
 800672e:	68ac      	ldr	r4, [r5, #8]
 8006730:	e7eb      	b.n	800670a <__swsetup_r+0x1e>
 8006732:	4b24      	ldr	r3, [pc, #144]	; (80067c4 <__swsetup_r+0xd8>)
 8006734:	429c      	cmp	r4, r3
 8006736:	bf08      	it	eq
 8006738:	68ec      	ldreq	r4, [r5, #12]
 800673a:	e7e6      	b.n	800670a <__swsetup_r+0x1e>
 800673c:	0758      	lsls	r0, r3, #29
 800673e:	d512      	bpl.n	8006766 <__swsetup_r+0x7a>
 8006740:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006742:	b141      	cbz	r1, 8006756 <__swsetup_r+0x6a>
 8006744:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006748:	4299      	cmp	r1, r3
 800674a:	d002      	beq.n	8006752 <__swsetup_r+0x66>
 800674c:	4630      	mov	r0, r6
 800674e:	f7ff fcdb 	bl	8006108 <_free_r>
 8006752:	2300      	movs	r3, #0
 8006754:	6363      	str	r3, [r4, #52]	; 0x34
 8006756:	89a3      	ldrh	r3, [r4, #12]
 8006758:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800675c:	81a3      	strh	r3, [r4, #12]
 800675e:	2300      	movs	r3, #0
 8006760:	6063      	str	r3, [r4, #4]
 8006762:	6923      	ldr	r3, [r4, #16]
 8006764:	6023      	str	r3, [r4, #0]
 8006766:	89a3      	ldrh	r3, [r4, #12]
 8006768:	f043 0308 	orr.w	r3, r3, #8
 800676c:	81a3      	strh	r3, [r4, #12]
 800676e:	6923      	ldr	r3, [r4, #16]
 8006770:	b94b      	cbnz	r3, 8006786 <__swsetup_r+0x9a>
 8006772:	89a3      	ldrh	r3, [r4, #12]
 8006774:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006778:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800677c:	d003      	beq.n	8006786 <__swsetup_r+0x9a>
 800677e:	4621      	mov	r1, r4
 8006780:	4630      	mov	r0, r6
 8006782:	f000 f95b 	bl	8006a3c <__smakebuf_r>
 8006786:	89a0      	ldrh	r0, [r4, #12]
 8006788:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800678c:	f010 0301 	ands.w	r3, r0, #1
 8006790:	d00a      	beq.n	80067a8 <__swsetup_r+0xbc>
 8006792:	2300      	movs	r3, #0
 8006794:	60a3      	str	r3, [r4, #8]
 8006796:	6963      	ldr	r3, [r4, #20]
 8006798:	425b      	negs	r3, r3
 800679a:	61a3      	str	r3, [r4, #24]
 800679c:	6923      	ldr	r3, [r4, #16]
 800679e:	b943      	cbnz	r3, 80067b2 <__swsetup_r+0xc6>
 80067a0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80067a4:	d1ba      	bne.n	800671c <__swsetup_r+0x30>
 80067a6:	bd70      	pop	{r4, r5, r6, pc}
 80067a8:	0781      	lsls	r1, r0, #30
 80067aa:	bf58      	it	pl
 80067ac:	6963      	ldrpl	r3, [r4, #20]
 80067ae:	60a3      	str	r3, [r4, #8]
 80067b0:	e7f4      	b.n	800679c <__swsetup_r+0xb0>
 80067b2:	2000      	movs	r0, #0
 80067b4:	e7f7      	b.n	80067a6 <__swsetup_r+0xba>
 80067b6:	bf00      	nop
 80067b8:	2000000c 	.word	0x2000000c
 80067bc:	08006da4 	.word	0x08006da4
 80067c0:	08006dc4 	.word	0x08006dc4
 80067c4:	08006d84 	.word	0x08006d84

080067c8 <__assert_func>:
 80067c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80067ca:	4614      	mov	r4, r2
 80067cc:	461a      	mov	r2, r3
 80067ce:	4b09      	ldr	r3, [pc, #36]	; (80067f4 <__assert_func+0x2c>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4605      	mov	r5, r0
 80067d4:	68d8      	ldr	r0, [r3, #12]
 80067d6:	b14c      	cbz	r4, 80067ec <__assert_func+0x24>
 80067d8:	4b07      	ldr	r3, [pc, #28]	; (80067f8 <__assert_func+0x30>)
 80067da:	9100      	str	r1, [sp, #0]
 80067dc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80067e0:	4906      	ldr	r1, [pc, #24]	; (80067fc <__assert_func+0x34>)
 80067e2:	462b      	mov	r3, r5
 80067e4:	f000 f8e0 	bl	80069a8 <fiprintf>
 80067e8:	f000 f9a5 	bl	8006b36 <abort>
 80067ec:	4b04      	ldr	r3, [pc, #16]	; (8006800 <__assert_func+0x38>)
 80067ee:	461c      	mov	r4, r3
 80067f0:	e7f3      	b.n	80067da <__assert_func+0x12>
 80067f2:	bf00      	nop
 80067f4:	2000000c 	.word	0x2000000c
 80067f8:	08006f4d 	.word	0x08006f4d
 80067fc:	08006f5a 	.word	0x08006f5a
 8006800:	08006f88 	.word	0x08006f88

08006804 <_close_r>:
 8006804:	b538      	push	{r3, r4, r5, lr}
 8006806:	4d06      	ldr	r5, [pc, #24]	; (8006820 <_close_r+0x1c>)
 8006808:	2300      	movs	r3, #0
 800680a:	4604      	mov	r4, r0
 800680c:	4608      	mov	r0, r1
 800680e:	602b      	str	r3, [r5, #0]
 8006810:	f7fb f9e9 	bl	8001be6 <_close>
 8006814:	1c43      	adds	r3, r0, #1
 8006816:	d102      	bne.n	800681e <_close_r+0x1a>
 8006818:	682b      	ldr	r3, [r5, #0]
 800681a:	b103      	cbz	r3, 800681e <_close_r+0x1a>
 800681c:	6023      	str	r3, [r4, #0]
 800681e:	bd38      	pop	{r3, r4, r5, pc}
 8006820:	20000280 	.word	0x20000280

08006824 <__sflush_r>:
 8006824:	898a      	ldrh	r2, [r1, #12]
 8006826:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800682a:	4605      	mov	r5, r0
 800682c:	0710      	lsls	r0, r2, #28
 800682e:	460c      	mov	r4, r1
 8006830:	d458      	bmi.n	80068e4 <__sflush_r+0xc0>
 8006832:	684b      	ldr	r3, [r1, #4]
 8006834:	2b00      	cmp	r3, #0
 8006836:	dc05      	bgt.n	8006844 <__sflush_r+0x20>
 8006838:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800683a:	2b00      	cmp	r3, #0
 800683c:	dc02      	bgt.n	8006844 <__sflush_r+0x20>
 800683e:	2000      	movs	r0, #0
 8006840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006844:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006846:	2e00      	cmp	r6, #0
 8006848:	d0f9      	beq.n	800683e <__sflush_r+0x1a>
 800684a:	2300      	movs	r3, #0
 800684c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006850:	682f      	ldr	r7, [r5, #0]
 8006852:	602b      	str	r3, [r5, #0]
 8006854:	d032      	beq.n	80068bc <__sflush_r+0x98>
 8006856:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006858:	89a3      	ldrh	r3, [r4, #12]
 800685a:	075a      	lsls	r2, r3, #29
 800685c:	d505      	bpl.n	800686a <__sflush_r+0x46>
 800685e:	6863      	ldr	r3, [r4, #4]
 8006860:	1ac0      	subs	r0, r0, r3
 8006862:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006864:	b10b      	cbz	r3, 800686a <__sflush_r+0x46>
 8006866:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006868:	1ac0      	subs	r0, r0, r3
 800686a:	2300      	movs	r3, #0
 800686c:	4602      	mov	r2, r0
 800686e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006870:	6a21      	ldr	r1, [r4, #32]
 8006872:	4628      	mov	r0, r5
 8006874:	47b0      	blx	r6
 8006876:	1c43      	adds	r3, r0, #1
 8006878:	89a3      	ldrh	r3, [r4, #12]
 800687a:	d106      	bne.n	800688a <__sflush_r+0x66>
 800687c:	6829      	ldr	r1, [r5, #0]
 800687e:	291d      	cmp	r1, #29
 8006880:	d82c      	bhi.n	80068dc <__sflush_r+0xb8>
 8006882:	4a2a      	ldr	r2, [pc, #168]	; (800692c <__sflush_r+0x108>)
 8006884:	40ca      	lsrs	r2, r1
 8006886:	07d6      	lsls	r6, r2, #31
 8006888:	d528      	bpl.n	80068dc <__sflush_r+0xb8>
 800688a:	2200      	movs	r2, #0
 800688c:	6062      	str	r2, [r4, #4]
 800688e:	04d9      	lsls	r1, r3, #19
 8006890:	6922      	ldr	r2, [r4, #16]
 8006892:	6022      	str	r2, [r4, #0]
 8006894:	d504      	bpl.n	80068a0 <__sflush_r+0x7c>
 8006896:	1c42      	adds	r2, r0, #1
 8006898:	d101      	bne.n	800689e <__sflush_r+0x7a>
 800689a:	682b      	ldr	r3, [r5, #0]
 800689c:	b903      	cbnz	r3, 80068a0 <__sflush_r+0x7c>
 800689e:	6560      	str	r0, [r4, #84]	; 0x54
 80068a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80068a2:	602f      	str	r7, [r5, #0]
 80068a4:	2900      	cmp	r1, #0
 80068a6:	d0ca      	beq.n	800683e <__sflush_r+0x1a>
 80068a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80068ac:	4299      	cmp	r1, r3
 80068ae:	d002      	beq.n	80068b6 <__sflush_r+0x92>
 80068b0:	4628      	mov	r0, r5
 80068b2:	f7ff fc29 	bl	8006108 <_free_r>
 80068b6:	2000      	movs	r0, #0
 80068b8:	6360      	str	r0, [r4, #52]	; 0x34
 80068ba:	e7c1      	b.n	8006840 <__sflush_r+0x1c>
 80068bc:	6a21      	ldr	r1, [r4, #32]
 80068be:	2301      	movs	r3, #1
 80068c0:	4628      	mov	r0, r5
 80068c2:	47b0      	blx	r6
 80068c4:	1c41      	adds	r1, r0, #1
 80068c6:	d1c7      	bne.n	8006858 <__sflush_r+0x34>
 80068c8:	682b      	ldr	r3, [r5, #0]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d0c4      	beq.n	8006858 <__sflush_r+0x34>
 80068ce:	2b1d      	cmp	r3, #29
 80068d0:	d001      	beq.n	80068d6 <__sflush_r+0xb2>
 80068d2:	2b16      	cmp	r3, #22
 80068d4:	d101      	bne.n	80068da <__sflush_r+0xb6>
 80068d6:	602f      	str	r7, [r5, #0]
 80068d8:	e7b1      	b.n	800683e <__sflush_r+0x1a>
 80068da:	89a3      	ldrh	r3, [r4, #12]
 80068dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068e0:	81a3      	strh	r3, [r4, #12]
 80068e2:	e7ad      	b.n	8006840 <__sflush_r+0x1c>
 80068e4:	690f      	ldr	r7, [r1, #16]
 80068e6:	2f00      	cmp	r7, #0
 80068e8:	d0a9      	beq.n	800683e <__sflush_r+0x1a>
 80068ea:	0793      	lsls	r3, r2, #30
 80068ec:	680e      	ldr	r6, [r1, #0]
 80068ee:	bf08      	it	eq
 80068f0:	694b      	ldreq	r3, [r1, #20]
 80068f2:	600f      	str	r7, [r1, #0]
 80068f4:	bf18      	it	ne
 80068f6:	2300      	movne	r3, #0
 80068f8:	eba6 0807 	sub.w	r8, r6, r7
 80068fc:	608b      	str	r3, [r1, #8]
 80068fe:	f1b8 0f00 	cmp.w	r8, #0
 8006902:	dd9c      	ble.n	800683e <__sflush_r+0x1a>
 8006904:	6a21      	ldr	r1, [r4, #32]
 8006906:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006908:	4643      	mov	r3, r8
 800690a:	463a      	mov	r2, r7
 800690c:	4628      	mov	r0, r5
 800690e:	47b0      	blx	r6
 8006910:	2800      	cmp	r0, #0
 8006912:	dc06      	bgt.n	8006922 <__sflush_r+0xfe>
 8006914:	89a3      	ldrh	r3, [r4, #12]
 8006916:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800691a:	81a3      	strh	r3, [r4, #12]
 800691c:	f04f 30ff 	mov.w	r0, #4294967295
 8006920:	e78e      	b.n	8006840 <__sflush_r+0x1c>
 8006922:	4407      	add	r7, r0
 8006924:	eba8 0800 	sub.w	r8, r8, r0
 8006928:	e7e9      	b.n	80068fe <__sflush_r+0xda>
 800692a:	bf00      	nop
 800692c:	20400001 	.word	0x20400001

08006930 <_fflush_r>:
 8006930:	b538      	push	{r3, r4, r5, lr}
 8006932:	690b      	ldr	r3, [r1, #16]
 8006934:	4605      	mov	r5, r0
 8006936:	460c      	mov	r4, r1
 8006938:	b913      	cbnz	r3, 8006940 <_fflush_r+0x10>
 800693a:	2500      	movs	r5, #0
 800693c:	4628      	mov	r0, r5
 800693e:	bd38      	pop	{r3, r4, r5, pc}
 8006940:	b118      	cbz	r0, 800694a <_fflush_r+0x1a>
 8006942:	6983      	ldr	r3, [r0, #24]
 8006944:	b90b      	cbnz	r3, 800694a <_fflush_r+0x1a>
 8006946:	f7fe ff89 	bl	800585c <__sinit>
 800694a:	4b14      	ldr	r3, [pc, #80]	; (800699c <_fflush_r+0x6c>)
 800694c:	429c      	cmp	r4, r3
 800694e:	d11b      	bne.n	8006988 <_fflush_r+0x58>
 8006950:	686c      	ldr	r4, [r5, #4]
 8006952:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d0ef      	beq.n	800693a <_fflush_r+0xa>
 800695a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800695c:	07d0      	lsls	r0, r2, #31
 800695e:	d404      	bmi.n	800696a <_fflush_r+0x3a>
 8006960:	0599      	lsls	r1, r3, #22
 8006962:	d402      	bmi.n	800696a <_fflush_r+0x3a>
 8006964:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006966:	f7ff f81c 	bl	80059a2 <__retarget_lock_acquire_recursive>
 800696a:	4628      	mov	r0, r5
 800696c:	4621      	mov	r1, r4
 800696e:	f7ff ff59 	bl	8006824 <__sflush_r>
 8006972:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006974:	07da      	lsls	r2, r3, #31
 8006976:	4605      	mov	r5, r0
 8006978:	d4e0      	bmi.n	800693c <_fflush_r+0xc>
 800697a:	89a3      	ldrh	r3, [r4, #12]
 800697c:	059b      	lsls	r3, r3, #22
 800697e:	d4dd      	bmi.n	800693c <_fflush_r+0xc>
 8006980:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006982:	f7ff f80f 	bl	80059a4 <__retarget_lock_release_recursive>
 8006986:	e7d9      	b.n	800693c <_fflush_r+0xc>
 8006988:	4b05      	ldr	r3, [pc, #20]	; (80069a0 <_fflush_r+0x70>)
 800698a:	429c      	cmp	r4, r3
 800698c:	d101      	bne.n	8006992 <_fflush_r+0x62>
 800698e:	68ac      	ldr	r4, [r5, #8]
 8006990:	e7df      	b.n	8006952 <_fflush_r+0x22>
 8006992:	4b04      	ldr	r3, [pc, #16]	; (80069a4 <_fflush_r+0x74>)
 8006994:	429c      	cmp	r4, r3
 8006996:	bf08      	it	eq
 8006998:	68ec      	ldreq	r4, [r5, #12]
 800699a:	e7da      	b.n	8006952 <_fflush_r+0x22>
 800699c:	08006da4 	.word	0x08006da4
 80069a0:	08006dc4 	.word	0x08006dc4
 80069a4:	08006d84 	.word	0x08006d84

080069a8 <fiprintf>:
 80069a8:	b40e      	push	{r1, r2, r3}
 80069aa:	b503      	push	{r0, r1, lr}
 80069ac:	4601      	mov	r1, r0
 80069ae:	ab03      	add	r3, sp, #12
 80069b0:	4805      	ldr	r0, [pc, #20]	; (80069c8 <fiprintf+0x20>)
 80069b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80069b6:	6800      	ldr	r0, [r0, #0]
 80069b8:	9301      	str	r3, [sp, #4]
 80069ba:	f7ff fcaf 	bl	800631c <_vfiprintf_r>
 80069be:	b002      	add	sp, #8
 80069c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80069c4:	b003      	add	sp, #12
 80069c6:	4770      	bx	lr
 80069c8:	2000000c 	.word	0x2000000c

080069cc <_lseek_r>:
 80069cc:	b538      	push	{r3, r4, r5, lr}
 80069ce:	4d07      	ldr	r5, [pc, #28]	; (80069ec <_lseek_r+0x20>)
 80069d0:	4604      	mov	r4, r0
 80069d2:	4608      	mov	r0, r1
 80069d4:	4611      	mov	r1, r2
 80069d6:	2200      	movs	r2, #0
 80069d8:	602a      	str	r2, [r5, #0]
 80069da:	461a      	mov	r2, r3
 80069dc:	f7fb f92a 	bl	8001c34 <_lseek>
 80069e0:	1c43      	adds	r3, r0, #1
 80069e2:	d102      	bne.n	80069ea <_lseek_r+0x1e>
 80069e4:	682b      	ldr	r3, [r5, #0]
 80069e6:	b103      	cbz	r3, 80069ea <_lseek_r+0x1e>
 80069e8:	6023      	str	r3, [r4, #0]
 80069ea:	bd38      	pop	{r3, r4, r5, pc}
 80069ec:	20000280 	.word	0x20000280

080069f0 <__swhatbuf_r>:
 80069f0:	b570      	push	{r4, r5, r6, lr}
 80069f2:	460e      	mov	r6, r1
 80069f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069f8:	2900      	cmp	r1, #0
 80069fa:	b096      	sub	sp, #88	; 0x58
 80069fc:	4614      	mov	r4, r2
 80069fe:	461d      	mov	r5, r3
 8006a00:	da08      	bge.n	8006a14 <__swhatbuf_r+0x24>
 8006a02:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006a06:	2200      	movs	r2, #0
 8006a08:	602a      	str	r2, [r5, #0]
 8006a0a:	061a      	lsls	r2, r3, #24
 8006a0c:	d410      	bmi.n	8006a30 <__swhatbuf_r+0x40>
 8006a0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a12:	e00e      	b.n	8006a32 <__swhatbuf_r+0x42>
 8006a14:	466a      	mov	r2, sp
 8006a16:	f000 f895 	bl	8006b44 <_fstat_r>
 8006a1a:	2800      	cmp	r0, #0
 8006a1c:	dbf1      	blt.n	8006a02 <__swhatbuf_r+0x12>
 8006a1e:	9a01      	ldr	r2, [sp, #4]
 8006a20:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006a24:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006a28:	425a      	negs	r2, r3
 8006a2a:	415a      	adcs	r2, r3
 8006a2c:	602a      	str	r2, [r5, #0]
 8006a2e:	e7ee      	b.n	8006a0e <__swhatbuf_r+0x1e>
 8006a30:	2340      	movs	r3, #64	; 0x40
 8006a32:	2000      	movs	r0, #0
 8006a34:	6023      	str	r3, [r4, #0]
 8006a36:	b016      	add	sp, #88	; 0x58
 8006a38:	bd70      	pop	{r4, r5, r6, pc}
	...

08006a3c <__smakebuf_r>:
 8006a3c:	898b      	ldrh	r3, [r1, #12]
 8006a3e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006a40:	079d      	lsls	r5, r3, #30
 8006a42:	4606      	mov	r6, r0
 8006a44:	460c      	mov	r4, r1
 8006a46:	d507      	bpl.n	8006a58 <__smakebuf_r+0x1c>
 8006a48:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006a4c:	6023      	str	r3, [r4, #0]
 8006a4e:	6123      	str	r3, [r4, #16]
 8006a50:	2301      	movs	r3, #1
 8006a52:	6163      	str	r3, [r4, #20]
 8006a54:	b002      	add	sp, #8
 8006a56:	bd70      	pop	{r4, r5, r6, pc}
 8006a58:	ab01      	add	r3, sp, #4
 8006a5a:	466a      	mov	r2, sp
 8006a5c:	f7ff ffc8 	bl	80069f0 <__swhatbuf_r>
 8006a60:	9900      	ldr	r1, [sp, #0]
 8006a62:	4605      	mov	r5, r0
 8006a64:	4630      	mov	r0, r6
 8006a66:	f7ff fbbb 	bl	80061e0 <_malloc_r>
 8006a6a:	b948      	cbnz	r0, 8006a80 <__smakebuf_r+0x44>
 8006a6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a70:	059a      	lsls	r2, r3, #22
 8006a72:	d4ef      	bmi.n	8006a54 <__smakebuf_r+0x18>
 8006a74:	f023 0303 	bic.w	r3, r3, #3
 8006a78:	f043 0302 	orr.w	r3, r3, #2
 8006a7c:	81a3      	strh	r3, [r4, #12]
 8006a7e:	e7e3      	b.n	8006a48 <__smakebuf_r+0xc>
 8006a80:	4b0d      	ldr	r3, [pc, #52]	; (8006ab8 <__smakebuf_r+0x7c>)
 8006a82:	62b3      	str	r3, [r6, #40]	; 0x28
 8006a84:	89a3      	ldrh	r3, [r4, #12]
 8006a86:	6020      	str	r0, [r4, #0]
 8006a88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a8c:	81a3      	strh	r3, [r4, #12]
 8006a8e:	9b00      	ldr	r3, [sp, #0]
 8006a90:	6163      	str	r3, [r4, #20]
 8006a92:	9b01      	ldr	r3, [sp, #4]
 8006a94:	6120      	str	r0, [r4, #16]
 8006a96:	b15b      	cbz	r3, 8006ab0 <__smakebuf_r+0x74>
 8006a98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a9c:	4630      	mov	r0, r6
 8006a9e:	f000 f863 	bl	8006b68 <_isatty_r>
 8006aa2:	b128      	cbz	r0, 8006ab0 <__smakebuf_r+0x74>
 8006aa4:	89a3      	ldrh	r3, [r4, #12]
 8006aa6:	f023 0303 	bic.w	r3, r3, #3
 8006aaa:	f043 0301 	orr.w	r3, r3, #1
 8006aae:	81a3      	strh	r3, [r4, #12]
 8006ab0:	89a0      	ldrh	r0, [r4, #12]
 8006ab2:	4305      	orrs	r5, r0
 8006ab4:	81a5      	strh	r5, [r4, #12]
 8006ab6:	e7cd      	b.n	8006a54 <__smakebuf_r+0x18>
 8006ab8:	080057f5 	.word	0x080057f5

08006abc <__ascii_mbtowc>:
 8006abc:	b082      	sub	sp, #8
 8006abe:	b901      	cbnz	r1, 8006ac2 <__ascii_mbtowc+0x6>
 8006ac0:	a901      	add	r1, sp, #4
 8006ac2:	b142      	cbz	r2, 8006ad6 <__ascii_mbtowc+0x1a>
 8006ac4:	b14b      	cbz	r3, 8006ada <__ascii_mbtowc+0x1e>
 8006ac6:	7813      	ldrb	r3, [r2, #0]
 8006ac8:	600b      	str	r3, [r1, #0]
 8006aca:	7812      	ldrb	r2, [r2, #0]
 8006acc:	1e10      	subs	r0, r2, #0
 8006ace:	bf18      	it	ne
 8006ad0:	2001      	movne	r0, #1
 8006ad2:	b002      	add	sp, #8
 8006ad4:	4770      	bx	lr
 8006ad6:	4610      	mov	r0, r2
 8006ad8:	e7fb      	b.n	8006ad2 <__ascii_mbtowc+0x16>
 8006ada:	f06f 0001 	mvn.w	r0, #1
 8006ade:	e7f8      	b.n	8006ad2 <__ascii_mbtowc+0x16>

08006ae0 <__malloc_lock>:
 8006ae0:	4801      	ldr	r0, [pc, #4]	; (8006ae8 <__malloc_lock+0x8>)
 8006ae2:	f7fe bf5e 	b.w	80059a2 <__retarget_lock_acquire_recursive>
 8006ae6:	bf00      	nop
 8006ae8:	20000274 	.word	0x20000274

08006aec <__malloc_unlock>:
 8006aec:	4801      	ldr	r0, [pc, #4]	; (8006af4 <__malloc_unlock+0x8>)
 8006aee:	f7fe bf59 	b.w	80059a4 <__retarget_lock_release_recursive>
 8006af2:	bf00      	nop
 8006af4:	20000274 	.word	0x20000274

08006af8 <_read_r>:
 8006af8:	b538      	push	{r3, r4, r5, lr}
 8006afa:	4d07      	ldr	r5, [pc, #28]	; (8006b18 <_read_r+0x20>)
 8006afc:	4604      	mov	r4, r0
 8006afe:	4608      	mov	r0, r1
 8006b00:	4611      	mov	r1, r2
 8006b02:	2200      	movs	r2, #0
 8006b04:	602a      	str	r2, [r5, #0]
 8006b06:	461a      	mov	r2, r3
 8006b08:	f7fb f850 	bl	8001bac <_read>
 8006b0c:	1c43      	adds	r3, r0, #1
 8006b0e:	d102      	bne.n	8006b16 <_read_r+0x1e>
 8006b10:	682b      	ldr	r3, [r5, #0]
 8006b12:	b103      	cbz	r3, 8006b16 <_read_r+0x1e>
 8006b14:	6023      	str	r3, [r4, #0]
 8006b16:	bd38      	pop	{r3, r4, r5, pc}
 8006b18:	20000280 	.word	0x20000280

08006b1c <__ascii_wctomb>:
 8006b1c:	b149      	cbz	r1, 8006b32 <__ascii_wctomb+0x16>
 8006b1e:	2aff      	cmp	r2, #255	; 0xff
 8006b20:	bf85      	ittet	hi
 8006b22:	238a      	movhi	r3, #138	; 0x8a
 8006b24:	6003      	strhi	r3, [r0, #0]
 8006b26:	700a      	strbls	r2, [r1, #0]
 8006b28:	f04f 30ff 	movhi.w	r0, #4294967295
 8006b2c:	bf98      	it	ls
 8006b2e:	2001      	movls	r0, #1
 8006b30:	4770      	bx	lr
 8006b32:	4608      	mov	r0, r1
 8006b34:	4770      	bx	lr

08006b36 <abort>:
 8006b36:	b508      	push	{r3, lr}
 8006b38:	2006      	movs	r0, #6
 8006b3a:	f000 f84d 	bl	8006bd8 <raise>
 8006b3e:	2001      	movs	r0, #1
 8006b40:	f7fb f82a 	bl	8001b98 <_exit>

08006b44 <_fstat_r>:
 8006b44:	b538      	push	{r3, r4, r5, lr}
 8006b46:	4d07      	ldr	r5, [pc, #28]	; (8006b64 <_fstat_r+0x20>)
 8006b48:	2300      	movs	r3, #0
 8006b4a:	4604      	mov	r4, r0
 8006b4c:	4608      	mov	r0, r1
 8006b4e:	4611      	mov	r1, r2
 8006b50:	602b      	str	r3, [r5, #0]
 8006b52:	f7fb f854 	bl	8001bfe <_fstat>
 8006b56:	1c43      	adds	r3, r0, #1
 8006b58:	d102      	bne.n	8006b60 <_fstat_r+0x1c>
 8006b5a:	682b      	ldr	r3, [r5, #0]
 8006b5c:	b103      	cbz	r3, 8006b60 <_fstat_r+0x1c>
 8006b5e:	6023      	str	r3, [r4, #0]
 8006b60:	bd38      	pop	{r3, r4, r5, pc}
 8006b62:	bf00      	nop
 8006b64:	20000280 	.word	0x20000280

08006b68 <_isatty_r>:
 8006b68:	b538      	push	{r3, r4, r5, lr}
 8006b6a:	4d06      	ldr	r5, [pc, #24]	; (8006b84 <_isatty_r+0x1c>)
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	4604      	mov	r4, r0
 8006b70:	4608      	mov	r0, r1
 8006b72:	602b      	str	r3, [r5, #0]
 8006b74:	f7fb f853 	bl	8001c1e <_isatty>
 8006b78:	1c43      	adds	r3, r0, #1
 8006b7a:	d102      	bne.n	8006b82 <_isatty_r+0x1a>
 8006b7c:	682b      	ldr	r3, [r5, #0]
 8006b7e:	b103      	cbz	r3, 8006b82 <_isatty_r+0x1a>
 8006b80:	6023      	str	r3, [r4, #0]
 8006b82:	bd38      	pop	{r3, r4, r5, pc}
 8006b84:	20000280 	.word	0x20000280

08006b88 <_raise_r>:
 8006b88:	291f      	cmp	r1, #31
 8006b8a:	b538      	push	{r3, r4, r5, lr}
 8006b8c:	4604      	mov	r4, r0
 8006b8e:	460d      	mov	r5, r1
 8006b90:	d904      	bls.n	8006b9c <_raise_r+0x14>
 8006b92:	2316      	movs	r3, #22
 8006b94:	6003      	str	r3, [r0, #0]
 8006b96:	f04f 30ff 	mov.w	r0, #4294967295
 8006b9a:	bd38      	pop	{r3, r4, r5, pc}
 8006b9c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006b9e:	b112      	cbz	r2, 8006ba6 <_raise_r+0x1e>
 8006ba0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006ba4:	b94b      	cbnz	r3, 8006bba <_raise_r+0x32>
 8006ba6:	4620      	mov	r0, r4
 8006ba8:	f000 f830 	bl	8006c0c <_getpid_r>
 8006bac:	462a      	mov	r2, r5
 8006bae:	4601      	mov	r1, r0
 8006bb0:	4620      	mov	r0, r4
 8006bb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006bb6:	f000 b817 	b.w	8006be8 <_kill_r>
 8006bba:	2b01      	cmp	r3, #1
 8006bbc:	d00a      	beq.n	8006bd4 <_raise_r+0x4c>
 8006bbe:	1c59      	adds	r1, r3, #1
 8006bc0:	d103      	bne.n	8006bca <_raise_r+0x42>
 8006bc2:	2316      	movs	r3, #22
 8006bc4:	6003      	str	r3, [r0, #0]
 8006bc6:	2001      	movs	r0, #1
 8006bc8:	e7e7      	b.n	8006b9a <_raise_r+0x12>
 8006bca:	2400      	movs	r4, #0
 8006bcc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006bd0:	4628      	mov	r0, r5
 8006bd2:	4798      	blx	r3
 8006bd4:	2000      	movs	r0, #0
 8006bd6:	e7e0      	b.n	8006b9a <_raise_r+0x12>

08006bd8 <raise>:
 8006bd8:	4b02      	ldr	r3, [pc, #8]	; (8006be4 <raise+0xc>)
 8006bda:	4601      	mov	r1, r0
 8006bdc:	6818      	ldr	r0, [r3, #0]
 8006bde:	f7ff bfd3 	b.w	8006b88 <_raise_r>
 8006be2:	bf00      	nop
 8006be4:	2000000c 	.word	0x2000000c

08006be8 <_kill_r>:
 8006be8:	b538      	push	{r3, r4, r5, lr}
 8006bea:	4d07      	ldr	r5, [pc, #28]	; (8006c08 <_kill_r+0x20>)
 8006bec:	2300      	movs	r3, #0
 8006bee:	4604      	mov	r4, r0
 8006bf0:	4608      	mov	r0, r1
 8006bf2:	4611      	mov	r1, r2
 8006bf4:	602b      	str	r3, [r5, #0]
 8006bf6:	f7fa ffbf 	bl	8001b78 <_kill>
 8006bfa:	1c43      	adds	r3, r0, #1
 8006bfc:	d102      	bne.n	8006c04 <_kill_r+0x1c>
 8006bfe:	682b      	ldr	r3, [r5, #0]
 8006c00:	b103      	cbz	r3, 8006c04 <_kill_r+0x1c>
 8006c02:	6023      	str	r3, [r4, #0]
 8006c04:	bd38      	pop	{r3, r4, r5, pc}
 8006c06:	bf00      	nop
 8006c08:	20000280 	.word	0x20000280

08006c0c <_getpid_r>:
 8006c0c:	f7fa bfac 	b.w	8001b68 <_getpid>

08006c10 <_init>:
 8006c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c12:	bf00      	nop
 8006c14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c16:	bc08      	pop	{r3}
 8006c18:	469e      	mov	lr, r3
 8006c1a:	4770      	bx	lr

08006c1c <_fini>:
 8006c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c1e:	bf00      	nop
 8006c20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c22:	bc08      	pop	{r3}
 8006c24:	469e      	mov	lr, r3
 8006c26:	4770      	bx	lr
