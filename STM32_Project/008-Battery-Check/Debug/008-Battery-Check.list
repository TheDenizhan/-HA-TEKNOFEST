
008-Battery-Check.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ff0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000046c  0800a180  0800a180  0001a180  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a5ec  0800a5ec  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800a5ec  0800a5ec  0001a5ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a5f4  0800a5f4  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a5f4  0800a5f4  0001a5f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a5f8  0800a5f8  0001a5f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800a5fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e0  200001dc  0800a7d8  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003bc  0800a7d8  000203bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015da4  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003721  00000000  00000000  00035fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013b8  00000000  00000000  000396d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001240  00000000  00000000  0003aa90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027666  00000000  00000000  0003bcd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001725d  00000000  00000000  00063336  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e81b9  00000000  00000000  0007a593  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016274c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000062d8  00000000  00000000  0016279c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a168 	.word	0x0800a168

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	0800a168 	.word	0x0800a168

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b974 	b.w	8000ee8 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468e      	mov	lr, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14d      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4694      	mov	ip, r2
 8000c2a:	d969      	bls.n	8000d00 <__udivmoddi4+0xe8>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b152      	cbz	r2, 8000c48 <__udivmoddi4+0x30>
 8000c32:	fa01 f302 	lsl.w	r3, r1, r2
 8000c36:	f1c2 0120 	rsb	r1, r2, #32
 8000c3a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c3e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c42:	ea41 0e03 	orr.w	lr, r1, r3
 8000c46:	4094      	lsls	r4, r2
 8000c48:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c4c:	0c21      	lsrs	r1, r4, #16
 8000c4e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c52:	fa1f f78c 	uxth.w	r7, ip
 8000c56:	fb08 e316 	mls	r3, r8, r6, lr
 8000c5a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c5e:	fb06 f107 	mul.w	r1, r6, r7
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6e:	f080 811f 	bcs.w	8000eb0 <__udivmoddi4+0x298>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 811c 	bls.w	8000eb0 <__udivmoddi4+0x298>
 8000c78:	3e02      	subs	r6, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a5b      	subs	r3, r3, r1
 8000c7e:	b2a4      	uxth	r4, r4
 8000c80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c84:	fb08 3310 	mls	r3, r8, r0, r3
 8000c88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c8c:	fb00 f707 	mul.w	r7, r0, r7
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	d90a      	bls.n	8000caa <__udivmoddi4+0x92>
 8000c94:	eb1c 0404 	adds.w	r4, ip, r4
 8000c98:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c9c:	f080 810a 	bcs.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	f240 8107 	bls.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca6:	4464      	add	r4, ip
 8000ca8:	3802      	subs	r0, #2
 8000caa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cae:	1be4      	subs	r4, r4, r7
 8000cb0:	2600      	movs	r6, #0
 8000cb2:	b11d      	cbz	r5, 8000cbc <__udivmoddi4+0xa4>
 8000cb4:	40d4      	lsrs	r4, r2
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0xc2>
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	f000 80ef 	beq.w	8000eaa <__udivmoddi4+0x292>
 8000ccc:	2600      	movs	r6, #0
 8000cce:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	4631      	mov	r1, r6
 8000cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cda:	fab3 f683 	clz	r6, r3
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	d14a      	bne.n	8000d78 <__udivmoddi4+0x160>
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xd4>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 80f9 	bhi.w	8000ede <__udivmoddi4+0x2c6>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb61 0303 	sbc.w	r3, r1, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	469e      	mov	lr, r3
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e0      	beq.n	8000cbc <__udivmoddi4+0xa4>
 8000cfa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cfe:	e7dd      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000d00:	b902      	cbnz	r2, 8000d04 <__udivmoddi4+0xec>
 8000d02:	deff      	udf	#255	; 0xff
 8000d04:	fab2 f282 	clz	r2, r2
 8000d08:	2a00      	cmp	r2, #0
 8000d0a:	f040 8092 	bne.w	8000e32 <__udivmoddi4+0x21a>
 8000d0e:	eba1 010c 	sub.w	r1, r1, ip
 8000d12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d16:	fa1f fe8c 	uxth.w	lr, ip
 8000d1a:	2601      	movs	r6, #1
 8000d1c:	0c20      	lsrs	r0, r4, #16
 8000d1e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d22:	fb07 1113 	mls	r1, r7, r3, r1
 8000d26:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d2a:	fb0e f003 	mul.w	r0, lr, r3
 8000d2e:	4288      	cmp	r0, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x12c>
 8000d32:	eb1c 0101 	adds.w	r1, ip, r1
 8000d36:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x12a>
 8000d3c:	4288      	cmp	r0, r1
 8000d3e:	f200 80cb 	bhi.w	8000ed8 <__udivmoddi4+0x2c0>
 8000d42:	4643      	mov	r3, r8
 8000d44:	1a09      	subs	r1, r1, r0
 8000d46:	b2a4      	uxth	r4, r4
 8000d48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d4c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d50:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d54:	fb0e fe00 	mul.w	lr, lr, r0
 8000d58:	45a6      	cmp	lr, r4
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x156>
 8000d5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d64:	d202      	bcs.n	8000d6c <__udivmoddi4+0x154>
 8000d66:	45a6      	cmp	lr, r4
 8000d68:	f200 80bb 	bhi.w	8000ee2 <__udivmoddi4+0x2ca>
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	eba4 040e 	sub.w	r4, r4, lr
 8000d72:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d76:	e79c      	b.n	8000cb2 <__udivmoddi4+0x9a>
 8000d78:	f1c6 0720 	rsb	r7, r6, #32
 8000d7c:	40b3      	lsls	r3, r6
 8000d7e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d82:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d86:	fa20 f407 	lsr.w	r4, r0, r7
 8000d8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d8e:	431c      	orrs	r4, r3
 8000d90:	40f9      	lsrs	r1, r7
 8000d92:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d96:	fa00 f306 	lsl.w	r3, r0, r6
 8000d9a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d9e:	0c20      	lsrs	r0, r4, #16
 8000da0:	fa1f fe8c 	uxth.w	lr, ip
 8000da4:	fb09 1118 	mls	r1, r9, r8, r1
 8000da8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dac:	fb08 f00e 	mul.w	r0, r8, lr
 8000db0:	4288      	cmp	r0, r1
 8000db2:	fa02 f206 	lsl.w	r2, r2, r6
 8000db6:	d90b      	bls.n	8000dd0 <__udivmoddi4+0x1b8>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc0:	f080 8088 	bcs.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dc4:	4288      	cmp	r0, r1
 8000dc6:	f240 8085 	bls.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dca:	f1a8 0802 	sub.w	r8, r8, #2
 8000dce:	4461      	add	r1, ip
 8000dd0:	1a09      	subs	r1, r1, r0
 8000dd2:	b2a4      	uxth	r4, r4
 8000dd4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dd8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ddc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000de0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de4:	458e      	cmp	lr, r1
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x1e2>
 8000de8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dec:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df0:	d26c      	bcs.n	8000ecc <__udivmoddi4+0x2b4>
 8000df2:	458e      	cmp	lr, r1
 8000df4:	d96a      	bls.n	8000ecc <__udivmoddi4+0x2b4>
 8000df6:	3802      	subs	r0, #2
 8000df8:	4461      	add	r1, ip
 8000dfa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dfe:	fba0 9402 	umull	r9, r4, r0, r2
 8000e02:	eba1 010e 	sub.w	r1, r1, lr
 8000e06:	42a1      	cmp	r1, r4
 8000e08:	46c8      	mov	r8, r9
 8000e0a:	46a6      	mov	lr, r4
 8000e0c:	d356      	bcc.n	8000ebc <__udivmoddi4+0x2a4>
 8000e0e:	d053      	beq.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e10:	b15d      	cbz	r5, 8000e2a <__udivmoddi4+0x212>
 8000e12:	ebb3 0208 	subs.w	r2, r3, r8
 8000e16:	eb61 010e 	sbc.w	r1, r1, lr
 8000e1a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e1e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e22:	40f1      	lsrs	r1, r6
 8000e24:	431f      	orrs	r7, r3
 8000e26:	e9c5 7100 	strd	r7, r1, [r5]
 8000e2a:	2600      	movs	r6, #0
 8000e2c:	4631      	mov	r1, r6
 8000e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e32:	f1c2 0320 	rsb	r3, r2, #32
 8000e36:	40d8      	lsrs	r0, r3
 8000e38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e3c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e40:	4091      	lsls	r1, r2
 8000e42:	4301      	orrs	r1, r0
 8000e44:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e48:	fa1f fe8c 	uxth.w	lr, ip
 8000e4c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e50:	fb07 3610 	mls	r6, r7, r0, r3
 8000e54:	0c0b      	lsrs	r3, r1, #16
 8000e56:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e5a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e5e:	429e      	cmp	r6, r3
 8000e60:	fa04 f402 	lsl.w	r4, r4, r2
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x260>
 8000e66:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e6e:	d22f      	bcs.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e70:	429e      	cmp	r6, r3
 8000e72:	d92d      	bls.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e74:	3802      	subs	r0, #2
 8000e76:	4463      	add	r3, ip
 8000e78:	1b9b      	subs	r3, r3, r6
 8000e7a:	b289      	uxth	r1, r1
 8000e7c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e80:	fb07 3316 	mls	r3, r7, r6, r3
 8000e84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e88:	fb06 f30e 	mul.w	r3, r6, lr
 8000e8c:	428b      	cmp	r3, r1
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x28a>
 8000e90:	eb1c 0101 	adds.w	r1, ip, r1
 8000e94:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e98:	d216      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d914      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9e:	3e02      	subs	r6, #2
 8000ea0:	4461      	add	r1, ip
 8000ea2:	1ac9      	subs	r1, r1, r3
 8000ea4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ea8:	e738      	b.n	8000d1c <__udivmoddi4+0x104>
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e705      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e3      	b.n	8000c7c <__udivmoddi4+0x64>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6f8      	b.n	8000caa <__udivmoddi4+0x92>
 8000eb8:	454b      	cmp	r3, r9
 8000eba:	d2a9      	bcs.n	8000e10 <__udivmoddi4+0x1f8>
 8000ebc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7a3      	b.n	8000e10 <__udivmoddi4+0x1f8>
 8000ec8:	4646      	mov	r6, r8
 8000eca:	e7ea      	b.n	8000ea2 <__udivmoddi4+0x28a>
 8000ecc:	4620      	mov	r0, r4
 8000ece:	e794      	b.n	8000dfa <__udivmoddi4+0x1e2>
 8000ed0:	4640      	mov	r0, r8
 8000ed2:	e7d1      	b.n	8000e78 <__udivmoddi4+0x260>
 8000ed4:	46d0      	mov	r8, sl
 8000ed6:	e77b      	b.n	8000dd0 <__udivmoddi4+0x1b8>
 8000ed8:	3b02      	subs	r3, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	e732      	b.n	8000d44 <__udivmoddi4+0x12c>
 8000ede:	4630      	mov	r0, r6
 8000ee0:	e709      	b.n	8000cf6 <__udivmoddi4+0xde>
 8000ee2:	4464      	add	r4, ip
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	e742      	b.n	8000d6e <__udivmoddi4+0x156>

08000ee8 <__aeabi_idiv0>:
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop

08000eec <iBus_Check_CHKSUM>:
#include"FS-iA10B.h"

FSiA10B_iBus iBus;

unsigned char iBus_Check_CHKSUM(unsigned char* data, unsigned char len)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b085      	sub	sp, #20
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
 8000ef4:	460b      	mov	r3, r1
 8000ef6:	70fb      	strb	r3, [r7, #3]
	unsigned short chksum = 0xffff;
 8000ef8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000efc:	81fb      	strh	r3, [r7, #14]
	for (int i=0; i<len-2;i++)
 8000efe:	2300      	movs	r3, #0
 8000f00:	60bb      	str	r3, [r7, #8]
 8000f02:	e00a      	b.n	8000f1a <iBus_Check_CHKSUM+0x2e>
	{
		chksum = chksum - data[i];
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	687a      	ldr	r2, [r7, #4]
 8000f08:	4413      	add	r3, r2
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	b29b      	uxth	r3, r3
 8000f0e:	89fa      	ldrh	r2, [r7, #14]
 8000f10:	1ad3      	subs	r3, r2, r3
 8000f12:	81fb      	strh	r3, [r7, #14]
	for (int i=0; i<len-2;i++)
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	3301      	adds	r3, #1
 8000f18:	60bb      	str	r3, [r7, #8]
 8000f1a:	78fb      	ldrb	r3, [r7, #3]
 8000f1c:	3b02      	subs	r3, #2
 8000f1e:	68ba      	ldr	r2, [r7, #8]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	dbef      	blt.n	8000f04 <iBus_Check_CHKSUM+0x18>
	}

	return ((chksum&0x00ff)==data[30]) && ((chksum>>8) == data[31]);
 8000f24:	89fb      	ldrh	r3, [r7, #14]
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	687a      	ldr	r2, [r7, #4]
 8000f2a:	321e      	adds	r2, #30
 8000f2c:	7812      	ldrb	r2, [r2, #0]
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d10a      	bne.n	8000f48 <iBus_Check_CHKSUM+0x5c>
 8000f32:	89fb      	ldrh	r3, [r7, #14]
 8000f34:	0a1b      	lsrs	r3, r3, #8
 8000f36:	b29a      	uxth	r2, r3
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	331f      	adds	r3, #31
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	b29b      	uxth	r3, r3
 8000f40:	429a      	cmp	r2, r3
 8000f42:	d101      	bne.n	8000f48 <iBus_Check_CHKSUM+0x5c>
 8000f44:	2301      	movs	r3, #1
 8000f46:	e000      	b.n	8000f4a <iBus_Check_CHKSUM+0x5e>
 8000f48:	2300      	movs	r3, #0
 8000f4a:	b2db      	uxtb	r3, r3

};
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	3714      	adds	r7, #20
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr

08000f58 <iBus_Parsing>:

void iBus_Parsing(unsigned char* data, FSiA10B_iBus* iBus)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	6039      	str	r1, [r7, #0]
	iBus->RH =(data[2] | data[3] << 8) & 0x0fff;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	3302      	adds	r3, #2
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	b21a      	sxth	r2, r3
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	3303      	adds	r3, #3
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	021b      	lsls	r3, r3, #8
 8000f72:	b21b      	sxth	r3, r3
 8000f74:	4313      	orrs	r3, r2
 8000f76:	b21b      	sxth	r3, r3
 8000f78:	b29b      	uxth	r3, r3
 8000f7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f7e:	b29a      	uxth	r2, r3
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	801a      	strh	r2, [r3, #0]
	iBus->RV =(data[4] | data[5] << 8) & 0x0fff;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	3304      	adds	r3, #4
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	b21a      	sxth	r2, r3
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	3305      	adds	r3, #5
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	021b      	lsls	r3, r3, #8
 8000f94:	b21b      	sxth	r3, r3
 8000f96:	4313      	orrs	r3, r2
 8000f98:	b21b      	sxth	r3, r3
 8000f9a:	b29b      	uxth	r3, r3
 8000f9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000fa0:	b29a      	uxth	r2, r3
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	805a      	strh	r2, [r3, #2]
	iBus->LV =(data[6] | data[7] << 8) & 0x0fff;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	3306      	adds	r3, #6
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	b21a      	sxth	r2, r3
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	3307      	adds	r3, #7
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	021b      	lsls	r3, r3, #8
 8000fb6:	b21b      	sxth	r3, r3
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	b21b      	sxth	r3, r3
 8000fbc:	b29b      	uxth	r3, r3
 8000fbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000fc2:	b29a      	uxth	r2, r3
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	809a      	strh	r2, [r3, #4]
	iBus->LH =(data[8] | data[9] << 8) & 0x0fff;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	3308      	adds	r3, #8
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	b21a      	sxth	r2, r3
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	3309      	adds	r3, #9
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	021b      	lsls	r3, r3, #8
 8000fd8:	b21b      	sxth	r3, r3
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	b21b      	sxth	r3, r3
 8000fde:	b29b      	uxth	r3, r3
 8000fe0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000fe4:	b29a      	uxth	r2, r3
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	80da      	strh	r2, [r3, #6]
	iBus->SwA =(data[10] | data[11] << 8) & 0x0fff;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	330a      	adds	r3, #10
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	b21a      	sxth	r2, r3
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	330b      	adds	r3, #11
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	021b      	lsls	r3, r3, #8
 8000ffa:	b21b      	sxth	r3, r3
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	b21b      	sxth	r3, r3
 8001000:	b29b      	uxth	r3, r3
 8001002:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001006:	b29a      	uxth	r2, r3
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	811a      	strh	r2, [r3, #8]
	iBus->SwC =(data[12] | data[13] << 8) & 0x0fff;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	330c      	adds	r3, #12
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	b21a      	sxth	r2, r3
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	330d      	adds	r3, #13
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	021b      	lsls	r3, r3, #8
 800101c:	b21b      	sxth	r3, r3
 800101e:	4313      	orrs	r3, r2
 8001020:	b21b      	sxth	r3, r3
 8001022:	b29b      	uxth	r3, r3
 8001024:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001028:	b29a      	uxth	r2, r3
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	819a      	strh	r2, [r3, #12]

	iBus->SwD =(data[14] | data[15] << 8) & 0x0fff;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	330e      	adds	r3, #14
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	b21a      	sxth	r2, r3
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	330f      	adds	r3, #15
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	021b      	lsls	r3, r3, #8
 800103e:	b21b      	sxth	r3, r3
 8001040:	4313      	orrs	r3, r2
 8001042:	b21b      	sxth	r3, r3
 8001044:	b29b      	uxth	r3, r3
 8001046:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800104a:	b29a      	uxth	r2, r3
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	81da      	strh	r2, [r3, #14]
	iBus->SwB =(data[16] | data[17] << 8) & 0x0fff;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	3310      	adds	r3, #16
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	b21a      	sxth	r2, r3
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	3311      	adds	r3, #17
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	021b      	lsls	r3, r3, #8
 8001060:	b21b      	sxth	r3, r3
 8001062:	4313      	orrs	r3, r2
 8001064:	b21b      	sxth	r3, r3
 8001066:	b29b      	uxth	r3, r3
 8001068:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800106c:	b29a      	uxth	r2, r3
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	815a      	strh	r2, [r3, #10]
	iBus->VrA =(data[18] | data[19] << 8) & 0x0fff;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	3312      	adds	r3, #18
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	b21a      	sxth	r2, r3
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	3313      	adds	r3, #19
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	021b      	lsls	r3, r3, #8
 8001082:	b21b      	sxth	r3, r3
 8001084:	4313      	orrs	r3, r2
 8001086:	b21b      	sxth	r3, r3
 8001088:	b29b      	uxth	r3, r3
 800108a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800108e:	b29a      	uxth	r2, r3
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	821a      	strh	r2, [r3, #16]
	iBus->VrB =(data[20] | data[21] << 8) & 0x0fff;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	3314      	adds	r3, #20
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	b21a      	sxth	r2, r3
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	3315      	adds	r3, #21
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	021b      	lsls	r3, r3, #8
 80010a4:	b21b      	sxth	r3, r3
 80010a6:	4313      	orrs	r3, r2
 80010a8:	b21b      	sxth	r3, r3
 80010aa:	b29b      	uxth	r3, r3
 80010ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80010b0:	b29a      	uxth	r2, r3
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	825a      	strh	r2, [r3, #18]


	iBus->FailSafe =iBus->SwD == 1500;
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	89db      	ldrh	r3, [r3, #14]
 80010ba:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80010be:	4293      	cmp	r3, r2
 80010c0:	bf0c      	ite	eq
 80010c2:	2301      	moveq	r3, #1
 80010c4:	2300      	movne	r3, #0
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	461a      	mov	r2, r3
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	f883 2020 	strb.w	r2, [r3, #32]





}
 80010d0:	bf00      	nop
 80010d2:	370c      	adds	r7, #12
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr

080010dc <iBus_isActiveFailSafe>:

unsigned char iBus_isActiveFailSafe(FSiA10B_iBus* iBus)
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
	return iBus->FailSafe !=0;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	bf14      	ite	ne
 80010ee:	2301      	movne	r3, #1
 80010f0:	2300      	moveq	r3, #0
 80010f2:	b2db      	uxtb	r3, r3

}
 80010f4:	4618      	mov	r0, r3
 80010f6:	370c      	adds	r7, #12
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr

08001100 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001104:	4b04      	ldr	r3, [pc, #16]	; (8001118 <__NVIC_GetPriorityGrouping+0x18>)
 8001106:	68db      	ldr	r3, [r3, #12]
 8001108:	0a1b      	lsrs	r3, r3, #8
 800110a:	f003 0307 	and.w	r3, r3, #7
}
 800110e:	4618      	mov	r0, r3
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr
 8001118:	e000ed00 	.word	0xe000ed00

0800111c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	4603      	mov	r3, r0
 8001124:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112a:	2b00      	cmp	r3, #0
 800112c:	db0b      	blt.n	8001146 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800112e:	79fb      	ldrb	r3, [r7, #7]
 8001130:	f003 021f 	and.w	r2, r3, #31
 8001134:	4907      	ldr	r1, [pc, #28]	; (8001154 <__NVIC_EnableIRQ+0x38>)
 8001136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113a:	095b      	lsrs	r3, r3, #5
 800113c:	2001      	movs	r0, #1
 800113e:	fa00 f202 	lsl.w	r2, r0, r2
 8001142:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001146:	bf00      	nop
 8001148:	370c      	adds	r7, #12
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	e000e100 	.word	0xe000e100

08001158 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	6039      	str	r1, [r7, #0]
 8001162:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001164:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001168:	2b00      	cmp	r3, #0
 800116a:	db0a      	blt.n	8001182 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	b2da      	uxtb	r2, r3
 8001170:	490c      	ldr	r1, [pc, #48]	; (80011a4 <__NVIC_SetPriority+0x4c>)
 8001172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001176:	0112      	lsls	r2, r2, #4
 8001178:	b2d2      	uxtb	r2, r2
 800117a:	440b      	add	r3, r1
 800117c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001180:	e00a      	b.n	8001198 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	b2da      	uxtb	r2, r3
 8001186:	4908      	ldr	r1, [pc, #32]	; (80011a8 <__NVIC_SetPriority+0x50>)
 8001188:	79fb      	ldrb	r3, [r7, #7]
 800118a:	f003 030f 	and.w	r3, r3, #15
 800118e:	3b04      	subs	r3, #4
 8001190:	0112      	lsls	r2, r2, #4
 8001192:	b2d2      	uxtb	r2, r2
 8001194:	440b      	add	r3, r1
 8001196:	761a      	strb	r2, [r3, #24]
}
 8001198:	bf00      	nop
 800119a:	370c      	adds	r7, #12
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr
 80011a4:	e000e100 	.word	0xe000e100
 80011a8:	e000ed00 	.word	0xe000ed00

080011ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b089      	sub	sp, #36	; 0x24
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	60f8      	str	r0, [r7, #12]
 80011b4:	60b9      	str	r1, [r7, #8]
 80011b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	f003 0307 	and.w	r3, r3, #7
 80011be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	f1c3 0307 	rsb	r3, r3, #7
 80011c6:	2b04      	cmp	r3, #4
 80011c8:	bf28      	it	cs
 80011ca:	2304      	movcs	r3, #4
 80011cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	3304      	adds	r3, #4
 80011d2:	2b06      	cmp	r3, #6
 80011d4:	d902      	bls.n	80011dc <NVIC_EncodePriority+0x30>
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	3b03      	subs	r3, #3
 80011da:	e000      	b.n	80011de <NVIC_EncodePriority+0x32>
 80011dc:	2300      	movs	r3, #0
 80011de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e0:	f04f 32ff 	mov.w	r2, #4294967295
 80011e4:	69bb      	ldr	r3, [r7, #24]
 80011e6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ea:	43da      	mvns	r2, r3
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	401a      	ands	r2, r3
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011f4:	f04f 31ff 	mov.w	r1, #4294967295
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	fa01 f303 	lsl.w	r3, r1, r3
 80011fe:	43d9      	mvns	r1, r3
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001204:	4313      	orrs	r3, r2
         );
}
 8001206:	4618      	mov	r0, r3
 8001208:	3724      	adds	r7, #36	; 0x24
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr

08001212 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8001212:	b480      	push	{r7}
 8001214:	b083      	sub	sp, #12
 8001216:	af00      	add	r7, sp, #0
 8001218:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	68db      	ldr	r3, [r3, #12]
 800121e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	60da      	str	r2, [r3, #12]
}
 8001226:	bf00      	nop
 8001228:	370c      	adds	r7, #12
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr

08001232 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8001232:	b480      	push	{r7}
 8001234:	b083      	sub	sp, #12
 8001236:	af00      	add	r7, sp, #0
 8001238:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	691b      	ldr	r3, [r3, #16]
 800123e:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	695b      	ldr	r3, [r3, #20]
 800124a:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	615a      	str	r2, [r3, #20]
}
 8001252:	bf00      	nop
 8001254:	370c      	adds	r7, #12
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr

0800125e <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 800125e:	b480      	push	{r7}
 8001260:	b083      	sub	sp, #12
 8001262:	af00      	add	r7, sp, #0
 8001264:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800126e:	2b80      	cmp	r3, #128	; 0x80
 8001270:	bf0c      	ite	eq
 8001272:	2301      	moveq	r3, #1
 8001274:	2300      	movne	r3, #0
 8001276:	b2db      	uxtb	r3, r3
}
 8001278:	4618      	mov	r0, r3
 800127a:	370c      	adds	r7, #12
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr

08001284 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	460b      	mov	r3, r1
 800128e:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8001290:	78fa      	ldrb	r2, [r7, #3]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	605a      	str	r2, [r3, #4]
}
 8001296:	bf00      	nop
 8001298:	370c      	adds	r7, #12
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
	...

080012a4 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b085      	sub	sp, #20
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80012ac:	4b08      	ldr	r3, [pc, #32]	; (80012d0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80012ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012b0:	4907      	ldr	r1, [pc, #28]	; (80012d0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80012b8:	4b05      	ldr	r3, [pc, #20]	; (80012d0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80012ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	4013      	ands	r3, r2
 80012c0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80012c2:	68fb      	ldr	r3, [r7, #12]
}
 80012c4:	bf00      	nop
 80012c6:	3714      	adds	r7, #20
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr
 80012d0:	40023800 	.word	0x40023800

080012d4 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b085      	sub	sp, #20
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80012dc:	4b08      	ldr	r3, [pc, #32]	; (8001300 <LL_APB1_GRP1_EnableClock+0x2c>)
 80012de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012e0:	4907      	ldr	r1, [pc, #28]	; (8001300 <LL_APB1_GRP1_EnableClock+0x2c>)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80012e8:	4b05      	ldr	r3, [pc, #20]	; (8001300 <LL_APB1_GRP1_EnableClock+0x2c>)
 80012ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	4013      	ands	r3, r2
 80012f0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80012f2:	68fb      	ldr	r3, [r7, #12]
}
 80012f4:	bf00      	nop
 80012f6:	3714      	adds	r7, #20
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr
 8001300:	40023800 	.word	0x40023800

08001304 <M8N_TransimiData>:
0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x17,0x31,
0xBF
};

void M8N_TransimiData(unsigned char* data, unsigned char len)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	460b      	mov	r3, r1
 800130e:	70fb      	strb	r3, [r7, #3]
for(int i=0;i<len;i++)
 8001310:	2300      	movs	r3, #0
 8001312:	60fb      	str	r3, [r7, #12]
 8001314:	e011      	b.n	800133a <M8N_TransimiData+0x36>
{
while(!LL_USART_IsActiveFlag_TXE(UART4));
 8001316:	bf00      	nop
 8001318:	480c      	ldr	r0, [pc, #48]	; (800134c <M8N_TransimiData+0x48>)
 800131a:	f7ff ffa0 	bl	800125e <LL_USART_IsActiveFlag_TXE>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d0f9      	beq.n	8001318 <M8N_TransimiData+0x14>
LL_USART_TransmitData8(UART4, *(data+i));
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	687a      	ldr	r2, [r7, #4]
 8001328:	4413      	add	r3, r2
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	4619      	mov	r1, r3
 800132e:	4807      	ldr	r0, [pc, #28]	; (800134c <M8N_TransimiData+0x48>)
 8001330:	f7ff ffa8 	bl	8001284 <LL_USART_TransmitData8>
for(int i=0;i<len;i++)
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	3301      	adds	r3, #1
 8001338:	60fb      	str	r3, [r7, #12]
 800133a:	78fb      	ldrb	r3, [r7, #3]
 800133c:	68fa      	ldr	r2, [r7, #12]
 800133e:	429a      	cmp	r2, r3
 8001340:	dbe9      	blt.n	8001316 <M8N_TransimiData+0x12>
}
}
 8001342:	bf00      	nop
 8001344:	bf00      	nop
 8001346:	3710      	adds	r7, #16
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	40004c00 	.word	0x40004c00

08001350 <M8N_UART4_Initialization>:

void M8N_UART4_Initialization(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b08e      	sub	sp, #56	; 0x38
 8001354:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001356:	f107 031c 	add.w	r3, r7, #28
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	605a      	str	r2, [r3, #4]
 8001360:	609a      	str	r2, [r3, #8]
 8001362:	60da      	str	r2, [r3, #12]
 8001364:	611a      	str	r2, [r3, #16]
 8001366:	615a      	str	r2, [r3, #20]
 8001368:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800136a:	1d3b      	adds	r3, r7, #4
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	605a      	str	r2, [r3, #4]
 8001372:	609a      	str	r2, [r3, #8]
 8001374:	60da      	str	r2, [r3, #12]
 8001376:	611a      	str	r2, [r3, #16]
 8001378:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART4);
 800137a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800137e:	f7ff ffa9 	bl	80012d4 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001382:	2004      	movs	r0, #4
 8001384:	f7ff ff8e 	bl	80012a4 <LL_AHB1_GRP1_EnableClock>
  /**UART4 GPIO Configuration
  PC10   ------> UART4_TX
  PC11   ------> UART4_RX
  */
  GPIO_InitStruct.Pin = GPS_UART4_TX_Pin|GPS_UART4_RX_Pin;
 8001388:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800138c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800138e:	2302      	movs	r3, #2
 8001390:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001392:	2303      	movs	r3, #3
 8001394:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001396:	2300      	movs	r3, #0
 8001398:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800139a:	2301      	movs	r3, #1
 800139c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 800139e:	2308      	movs	r3, #8
 80013a0:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013a2:	1d3b      	adds	r3, r7, #4
 80013a4:	4619      	mov	r1, r3
 80013a6:	4819      	ldr	r0, [pc, #100]	; (800140c <M8N_UART4_Initialization+0xbc>)
 80013a8:	f005 f9f7 	bl	800679a <LL_GPIO_Init>

  /* UART4 interrupt Init */
  NVIC_SetPriority(UART4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80013ac:	f7ff fea8 	bl	8001100 <__NVIC_GetPriorityGrouping>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2200      	movs	r2, #0
 80013b4:	2100      	movs	r1, #0
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff fef8 	bl	80011ac <NVIC_EncodePriority>
 80013bc:	4603      	mov	r3, r0
 80013be:	4619      	mov	r1, r3
 80013c0:	2034      	movs	r0, #52	; 0x34
 80013c2:	f7ff fec9 	bl	8001158 <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART4_IRQn);
 80013c6:	2034      	movs	r0, #52	; 0x34
 80013c8:	f7ff fea8 	bl	800111c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  USART_InitStruct.BaudRate = 9600;
 80013cc:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80013d0:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80013d2:	2300      	movs	r3, #0
 80013d4:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80013d6:	2300      	movs	r3, #0
 80013d8:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80013da:	2300      	movs	r3, #0
 80013dc:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80013de:	230c      	movs	r3, #12
 80013e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80013e2:	2300      	movs	r3, #0
 80013e4:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80013e6:	2300      	movs	r3, #0
 80013e8:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(UART4, &USART_InitStruct);
 80013ea:	f107 031c 	add.w	r3, r7, #28
 80013ee:	4619      	mov	r1, r3
 80013f0:	4807      	ldr	r0, [pc, #28]	; (8001410 <M8N_UART4_Initialization+0xc0>)
 80013f2:	f006 f8d7 	bl	80075a4 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART4);
 80013f6:	4806      	ldr	r0, [pc, #24]	; (8001410 <M8N_UART4_Initialization+0xc0>)
 80013f8:	f7ff ff1b 	bl	8001232 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART4);
 80013fc:	4804      	ldr	r0, [pc, #16]	; (8001410 <M8N_UART4_Initialization+0xc0>)
 80013fe:	f7ff ff08 	bl	8001212 <LL_USART_Enable>
}
 8001402:	bf00      	nop
 8001404:	3738      	adds	r7, #56	; 0x38
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	40020800 	.word	0x40020800
 8001410:	40004c00 	.word	0x40004c00

08001414 <M8N_Initialization>:

void M8N_Initialization(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
M8N_UART4_Initialization();
 8001418:	f7ff ff9a 	bl	8001350 <M8N_UART4_Initialization>

M8N_TransimiData(&UBX_CFG_PRT[0],sizeof(UBX_CFG_PRT));
 800141c:	211c      	movs	r1, #28
 800141e:	480d      	ldr	r0, [pc, #52]	; (8001454 <M8N_Initialization+0x40>)
 8001420:	f7ff ff70 	bl	8001304 <M8N_TransimiData>
HAL_Delay(100);
 8001424:	2064      	movs	r0, #100	; 0x64
 8001426:	f001 fc89 	bl	8002d3c <HAL_Delay>
M8N_TransimiData(&UBX_CFG_MSG[0],sizeof(UBX_CFG_MSG));
 800142a:	2110      	movs	r1, #16
 800142c:	480a      	ldr	r0, [pc, #40]	; (8001458 <M8N_Initialization+0x44>)
 800142e:	f7ff ff69 	bl	8001304 <M8N_TransimiData>
HAL_Delay(100);
 8001432:	2064      	movs	r0, #100	; 0x64
 8001434:	f001 fc82 	bl	8002d3c <HAL_Delay>
M8N_TransimiData(&UBX_CFG_RATE[0],sizeof(UBX_CFG_RATE));
 8001438:	210e      	movs	r1, #14
 800143a:	4808      	ldr	r0, [pc, #32]	; (800145c <M8N_Initialization+0x48>)
 800143c:	f7ff ff62 	bl	8001304 <M8N_TransimiData>
HAL_Delay(100);
 8001440:	2064      	movs	r0, #100	; 0x64
 8001442:	f001 fc7b 	bl	8002d3c <HAL_Delay>
M8N_TransimiData(&UBX_CFG_CFG[0],sizeof(UBX_CFG_CFG));
 8001446:	2115      	movs	r1, #21
 8001448:	4805      	ldr	r0, [pc, #20]	; (8001460 <M8N_Initialization+0x4c>)
 800144a:	f7ff ff5b 	bl	8001304 <M8N_TransimiData>
}
 800144e:	bf00      	nop
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	0800a18c 	.word	0x0800a18c
 8001458:	0800a1a8 	.word	0x0800a1a8
 800145c:	0800a1b8 	.word	0x0800a1b8
 8001460:	0800a1c8 	.word	0x0800a1c8

08001464 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800146a:	463b      	mov	r3, r7
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	605a      	str	r2, [r3, #4]
 8001472:	609a      	str	r2, [r3, #8]
 8001474:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001476:	4b21      	ldr	r3, [pc, #132]	; (80014fc <MX_ADC1_Init+0x98>)
 8001478:	4a21      	ldr	r2, [pc, #132]	; (8001500 <MX_ADC1_Init+0x9c>)
 800147a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 800147c:	4b1f      	ldr	r3, [pc, #124]	; (80014fc <MX_ADC1_Init+0x98>)
 800147e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001482:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001484:	4b1d      	ldr	r3, [pc, #116]	; (80014fc <MX_ADC1_Init+0x98>)
 8001486:	2200      	movs	r2, #0
 8001488:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800148a:	4b1c      	ldr	r3, [pc, #112]	; (80014fc <MX_ADC1_Init+0x98>)
 800148c:	2200      	movs	r2, #0
 800148e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001490:	4b1a      	ldr	r3, [pc, #104]	; (80014fc <MX_ADC1_Init+0x98>)
 8001492:	2201      	movs	r2, #1
 8001494:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001496:	4b19      	ldr	r3, [pc, #100]	; (80014fc <MX_ADC1_Init+0x98>)
 8001498:	2200      	movs	r2, #0
 800149a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800149e:	4b17      	ldr	r3, [pc, #92]	; (80014fc <MX_ADC1_Init+0x98>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014a4:	4b15      	ldr	r3, [pc, #84]	; (80014fc <MX_ADC1_Init+0x98>)
 80014a6:	4a17      	ldr	r2, [pc, #92]	; (8001504 <MX_ADC1_Init+0xa0>)
 80014a8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014aa:	4b14      	ldr	r3, [pc, #80]	; (80014fc <MX_ADC1_Init+0x98>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80014b0:	4b12      	ldr	r3, [pc, #72]	; (80014fc <MX_ADC1_Init+0x98>)
 80014b2:	2201      	movs	r2, #1
 80014b4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80014b6:	4b11      	ldr	r3, [pc, #68]	; (80014fc <MX_ADC1_Init+0x98>)
 80014b8:	2201      	movs	r2, #1
 80014ba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014be:	4b0f      	ldr	r3, [pc, #60]	; (80014fc <MX_ADC1_Init+0x98>)
 80014c0:	2201      	movs	r2, #1
 80014c2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80014c4:	480d      	ldr	r0, [pc, #52]	; (80014fc <MX_ADC1_Init+0x98>)
 80014c6:	f001 fc5d 	bl	8002d84 <HAL_ADC_Init>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80014d0:	f000 fc80 	bl	8001dd4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80014d4:	2308      	movs	r3, #8
 80014d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80014d8:	2301      	movs	r3, #1
 80014da:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80014dc:	2307      	movs	r3, #7
 80014de:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014e0:	463b      	mov	r3, r7
 80014e2:	4619      	mov	r1, r3
 80014e4:	4805      	ldr	r0, [pc, #20]	; (80014fc <MX_ADC1_Init+0x98>)
 80014e6:	f001 fdbf 	bl	8003068 <HAL_ADC_ConfigChannel>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80014f0:	f000 fc70 	bl	8001dd4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80014f4:	bf00      	nop
 80014f6:	3710      	adds	r7, #16
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	2000021c 	.word	0x2000021c
 8001500:	40012000 	.word	0x40012000
 8001504:	0f000001 	.word	0x0f000001

08001508 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b08a      	sub	sp, #40	; 0x28
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001510:	f107 0314 	add.w	r3, r7, #20
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	605a      	str	r2, [r3, #4]
 800151a:	609a      	str	r2, [r3, #8]
 800151c:	60da      	str	r2, [r3, #12]
 800151e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a2e      	ldr	r2, [pc, #184]	; (80015e0 <HAL_ADC_MspInit+0xd8>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d156      	bne.n	80015d8 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800152a:	2300      	movs	r3, #0
 800152c:	613b      	str	r3, [r7, #16]
 800152e:	4b2d      	ldr	r3, [pc, #180]	; (80015e4 <HAL_ADC_MspInit+0xdc>)
 8001530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001532:	4a2c      	ldr	r2, [pc, #176]	; (80015e4 <HAL_ADC_MspInit+0xdc>)
 8001534:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001538:	6453      	str	r3, [r2, #68]	; 0x44
 800153a:	4b2a      	ldr	r3, [pc, #168]	; (80015e4 <HAL_ADC_MspInit+0xdc>)
 800153c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800153e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001542:	613b      	str	r3, [r7, #16]
 8001544:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001546:	2300      	movs	r3, #0
 8001548:	60fb      	str	r3, [r7, #12]
 800154a:	4b26      	ldr	r3, [pc, #152]	; (80015e4 <HAL_ADC_MspInit+0xdc>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	4a25      	ldr	r2, [pc, #148]	; (80015e4 <HAL_ADC_MspInit+0xdc>)
 8001550:	f043 0302 	orr.w	r3, r3, #2
 8001554:	6313      	str	r3, [r2, #48]	; 0x30
 8001556:	4b23      	ldr	r3, [pc, #140]	; (80015e4 <HAL_ADC_MspInit+0xdc>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155a:	f003 0302 	and.w	r3, r3, #2
 800155e:	60fb      	str	r3, [r7, #12]
 8001560:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001562:	2301      	movs	r3, #1
 8001564:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001566:	2303      	movs	r3, #3
 8001568:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156a:	2300      	movs	r3, #0
 800156c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800156e:	f107 0314 	add.w	r3, r7, #20
 8001572:	4619      	mov	r1, r3
 8001574:	481c      	ldr	r0, [pc, #112]	; (80015e8 <HAL_ADC_MspInit+0xe0>)
 8001576:	f002 fd2b 	bl	8003fd0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800157a:	4b1c      	ldr	r3, [pc, #112]	; (80015ec <HAL_ADC_MspInit+0xe4>)
 800157c:	4a1c      	ldr	r2, [pc, #112]	; (80015f0 <HAL_ADC_MspInit+0xe8>)
 800157e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001580:	4b1a      	ldr	r3, [pc, #104]	; (80015ec <HAL_ADC_MspInit+0xe4>)
 8001582:	2200      	movs	r2, #0
 8001584:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001586:	4b19      	ldr	r3, [pc, #100]	; (80015ec <HAL_ADC_MspInit+0xe4>)
 8001588:	2200      	movs	r2, #0
 800158a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800158c:	4b17      	ldr	r3, [pc, #92]	; (80015ec <HAL_ADC_MspInit+0xe4>)
 800158e:	2200      	movs	r2, #0
 8001590:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_DISABLE;
 8001592:	4b16      	ldr	r3, [pc, #88]	; (80015ec <HAL_ADC_MspInit+0xe4>)
 8001594:	2200      	movs	r2, #0
 8001596:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001598:	4b14      	ldr	r3, [pc, #80]	; (80015ec <HAL_ADC_MspInit+0xe4>)
 800159a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800159e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80015a0:	4b12      	ldr	r3, [pc, #72]	; (80015ec <HAL_ADC_MspInit+0xe4>)
 80015a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015a6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80015a8:	4b10      	ldr	r3, [pc, #64]	; (80015ec <HAL_ADC_MspInit+0xe4>)
 80015aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015ae:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80015b0:	4b0e      	ldr	r3, [pc, #56]	; (80015ec <HAL_ADC_MspInit+0xe4>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015b6:	4b0d      	ldr	r3, [pc, #52]	; (80015ec <HAL_ADC_MspInit+0xe4>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80015bc:	480b      	ldr	r0, [pc, #44]	; (80015ec <HAL_ADC_MspInit+0xe4>)
 80015be:	f002 f905 	bl	80037cc <HAL_DMA_Init>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 80015c8:	f000 fc04 	bl	8001dd4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	4a07      	ldr	r2, [pc, #28]	; (80015ec <HAL_ADC_MspInit+0xe4>)
 80015d0:	639a      	str	r2, [r3, #56]	; 0x38
 80015d2:	4a06      	ldr	r2, [pc, #24]	; (80015ec <HAL_ADC_MspInit+0xe4>)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80015d8:	bf00      	nop
 80015da:	3728      	adds	r7, #40	; 0x28
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	40012000 	.word	0x40012000
 80015e4:	40023800 	.word	0x40023800
 80015e8:	40020400 	.word	0x40020400
 80015ec:	20000264 	.word	0x20000264
 80015f0:	40026410 	.word	0x40026410

080015f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	607b      	str	r3, [r7, #4]
 80015fe:	4b0c      	ldr	r3, [pc, #48]	; (8001630 <MX_DMA_Init+0x3c>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	4a0b      	ldr	r2, [pc, #44]	; (8001630 <MX_DMA_Init+0x3c>)
 8001604:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001608:	6313      	str	r3, [r2, #48]	; 0x30
 800160a:	4b09      	ldr	r3, [pc, #36]	; (8001630 <MX_DMA_Init+0x3c>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001612:	607b      	str	r3, [r7, #4]
 8001614:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001616:	2200      	movs	r2, #0
 8001618:	2100      	movs	r1, #0
 800161a:	2038      	movs	r0, #56	; 0x38
 800161c:	f002 f89f 	bl	800375e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001620:	2038      	movs	r0, #56	; 0x38
 8001622:	f002 f8b8 	bl	8003796 <HAL_NVIC_EnableIRQ>

}
 8001626:	bf00      	nop
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	40023800 	.word	0x40023800

08001634 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	041a      	lsls	r2, r3, #16
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	619a      	str	r2, [r3, #24]
}
 8001646:	bf00      	nop
 8001648:	370c      	adds	r7, #12
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
	...

08001654 <LL_AHB1_GRP1_EnableClock>:
{
 8001654:	b480      	push	{r7}
 8001656:	b085      	sub	sp, #20
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800165c:	4b08      	ldr	r3, [pc, #32]	; (8001680 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800165e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001660:	4907      	ldr	r1, [pc, #28]	; (8001680 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4313      	orrs	r3, r2
 8001666:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001668:	4b05      	ldr	r3, [pc, #20]	; (8001680 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800166a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	4013      	ands	r3, r2
 8001670:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001672:	68fb      	ldr	r3, [r7, #12]
}
 8001674:	bf00      	nop
 8001676:	3714      	adds	r7, #20
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr
 8001680:	40023800 	.word	0x40023800

08001684 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b086      	sub	sp, #24
 8001688:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800168a:	463b      	mov	r3, r7
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]
 8001690:	605a      	str	r2, [r3, #4]
 8001692:	609a      	str	r2, [r3, #8]
 8001694:	60da      	str	r2, [r3, #12]
 8001696:	611a      	str	r2, [r3, #16]
 8001698:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 800169a:	2080      	movs	r0, #128	; 0x80
 800169c:	f7ff ffda 	bl	8001654 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80016a0:	2001      	movs	r0, #1
 80016a2:	f7ff ffd7 	bl	8001654 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80016a6:	2002      	movs	r0, #2
 80016a8:	f7ff ffd4 	bl	8001654 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 80016ac:	2008      	movs	r0, #8
 80016ae:	f7ff ffd1 	bl	8001654 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80016b2:	2004      	movs	r0, #4
 80016b4:	f7ff ffce 	bl	8001654 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOD, LL_GPIO_PIN_14);
 80016b8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016bc:	480b      	ldr	r0, [pc, #44]	; (80016ec <MX_GPIO_Init+0x68>)
 80016be:	f7ff ffb9 	bl	8001634 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_14;
 80016c2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80016c6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80016c8:	2301      	movs	r3, #1
 80016ca:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80016cc:	2300      	movs	r3, #0
 80016ce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80016d0:	2300      	movs	r3, #0
 80016d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80016d4:	2300      	movs	r3, #0
 80016d6:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016d8:	463b      	mov	r3, r7
 80016da:	4619      	mov	r1, r3
 80016dc:	4803      	ldr	r0, [pc, #12]	; (80016ec <MX_GPIO_Init+0x68>)
 80016de:	f005 f85c 	bl	800679a <LL_GPIO_Init>

}
 80016e2:	bf00      	nop
 80016e4:	3718      	adds	r7, #24
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	40020c00 	.word	0x40020c00

080016f0 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f043 0201 	orr.w	r2, r3, #1
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	601a      	str	r2, [r3, #0]
}
 8001704:	bf00      	nop
 8001706:	370c      	adds	r7, #12
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr

08001710 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6a1a      	ldr	r2, [r3, #32]
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	431a      	orrs	r2, r3
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	621a      	str	r2, [r3, #32]
}
 8001726:	bf00      	nop
 8001728:	370c      	adds	r7, #12
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr

08001732 <LL_TIM_CC_DisableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_DisableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8001732:	b480      	push	{r7}
 8001734:	b083      	sub	sp, #12
 8001736:	af00      	add	r7, sp, #0
 8001738:	6078      	str	r0, [r7, #4]
 800173a:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6a1a      	ldr	r2, [r3, #32]
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	43db      	mvns	r3, r3
 8001744:	401a      	ands	r2, r3
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	621a      	str	r2, [r3, #32]
}
 800174a:	bf00      	nop
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr

08001756 <LL_USART_IsActiveFlag_TXE>:
{
 8001756:	b480      	push	{r7}
 8001758:	b083      	sub	sp, #12
 800175a:	af00      	add	r7, sp, #0
 800175c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001766:	2b80      	cmp	r3, #128	; 0x80
 8001768:	bf0c      	ite	eq
 800176a:	2301      	moveq	r3, #1
 800176c:	2300      	movne	r3, #0
 800176e:	b2db      	uxtb	r3, r3
}
 8001770:	4618      	mov	r0, r3
 8001772:	370c      	adds	r7, #12
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr

0800177c <LL_USART_EnableIT_RXNE>:
{
 800177c:	b480      	push	{r7}
 800177e:	b089      	sub	sp, #36	; 0x24
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	330c      	adds	r3, #12
 8001788:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	e853 3f00 	ldrex	r3, [r3]
 8001790:	60bb      	str	r3, [r7, #8]
   return(result);
 8001792:	68bb      	ldr	r3, [r7, #8]
 8001794:	f043 0320 	orr.w	r3, r3, #32
 8001798:	61fb      	str	r3, [r7, #28]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	330c      	adds	r3, #12
 800179e:	69fa      	ldr	r2, [r7, #28]
 80017a0:	61ba      	str	r2, [r7, #24]
 80017a2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80017a4:	6979      	ldr	r1, [r7, #20]
 80017a6:	69ba      	ldr	r2, [r7, #24]
 80017a8:	e841 2300 	strex	r3, r2, [r1]
 80017ac:	613b      	str	r3, [r7, #16]
   return(result);
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d1e7      	bne.n	8001784 <LL_USART_EnableIT_RXNE+0x8>
}
 80017b4:	bf00      	nop
 80017b6:	bf00      	nop
 80017b8:	3724      	adds	r7, #36	; 0x24
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr

080017c2 <LL_USART_TransmitData8>:
{
 80017c2:	b480      	push	{r7}
 80017c4:	b083      	sub	sp, #12
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	6078      	str	r0, [r7, #4]
 80017ca:	460b      	mov	r3, r1
 80017cc:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 80017ce:	78fa      	ldrb	r2, [r7, #3]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	605a      	str	r2, [r3, #4]
}
 80017d4:	bf00      	nop
 80017d6:	370c      	adds	r7, #12
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr

080017e0 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b085      	sub	sp, #20
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	695b      	ldr	r3, [r3, #20]
 80017ee:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 80017f0:	68fa      	ldr	r2, [r7, #12]
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	4013      	ands	r3, r2
 80017f6:	041a      	lsls	r2, r3, #16
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	43d9      	mvns	r1, r3
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	400b      	ands	r3, r1
 8001800:	431a      	orrs	r2, r3
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	619a      	str	r2, [r3, #24]
}
 8001806:	bf00      	nop
 8001808:	3714      	adds	r7, #20
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
	...

08001814 <_write>:
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
int _write(int file, char* p,int len)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b086      	sub	sp, #24
 8001818:	af00      	add	r7, sp, #0
 800181a:	60f8      	str	r0, [r7, #12]
 800181c:	60b9      	str	r1, [r7, #8]
 800181e:	607a      	str	r2, [r7, #4]
	for(int i=0;i<len;i++)
 8001820:	2300      	movs	r3, #0
 8001822:	617b      	str	r3, [r7, #20]
 8001824:	e011      	b.n	800184a <_write+0x36>
	{
		while(!LL_USART_IsActiveFlag_TXE(USART6));
 8001826:	bf00      	nop
 8001828:	480c      	ldr	r0, [pc, #48]	; (800185c <_write+0x48>)
 800182a:	f7ff ff94 	bl	8001756 <LL_USART_IsActiveFlag_TXE>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d0f9      	beq.n	8001828 <_write+0x14>
		LL_USART_TransmitData8(USART6, *(p+i));
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	68ba      	ldr	r2, [r7, #8]
 8001838:	4413      	add	r3, r2
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	4619      	mov	r1, r3
 800183e:	4807      	ldr	r0, [pc, #28]	; (800185c <_write+0x48>)
 8001840:	f7ff ffbf 	bl	80017c2 <LL_USART_TransmitData8>
	for(int i=0;i<len;i++)
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	3301      	adds	r3, #1
 8001848:	617b      	str	r3, [r7, #20]
 800184a:	697a      	ldr	r2, [r7, #20]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	429a      	cmp	r2, r3
 8001850:	dbe9      	blt.n	8001826 <_write+0x12>
	}
}
 8001852:	bf00      	nop
 8001854:	4618      	mov	r0, r3
 8001856:	3718      	adds	r7, #24
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	40011400 	.word	0x40011400

08001860 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001860:	b590      	push	{r4, r7, lr}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001866:	f001 f9f7 	bl	8002c58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800186a:	f000 f9d5 	bl	8001c18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800186e:	f7ff ff09 	bl	8001684 <MX_GPIO_Init>
  MX_TIM3_Init();
 8001872:	f000 fe09 	bl	8002488 <MX_TIM3_Init>
  MX_USART6_UART_Init();
 8001876:	f001 f8f5 	bl	8002a64 <MX_USART6_UART_Init>
  MX_UART4_Init();
 800187a:	f001 f867 	bl	800294c <MX_UART4_Init>
  MX_DMA_Init();
 800187e:	f7ff feb9 	bl	80015f4 <MX_DMA_Init>
  MX_TIM5_Init();
 8001882:	f000 fe73 	bl	800256c <MX_TIM5_Init>
  MX_ADC1_Init();
 8001886:	f7ff fded 	bl	8001464 <MX_ADC1_Init>
  MX_UART5_Init();
 800188a:	f001 f8c1 	bl	8002a10 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  LL_TIM_EnableCounter(TIM3);
 800188e:	4890      	ldr	r0, [pc, #576]	; (8001ad0 <main+0x270>)
 8001890:	f7ff ff2e 	bl	80016f0 <LL_TIM_EnableCounter>
//  TIM3->PSC = 1000;
//  HAL_Delay(100);
//
//  LL_TIM_CC_DisableChannel(TIM3,LL_TIM_CHANNEL_CH4);  // buzzer disable

  LL_USART_EnableIT_RXNE(USART6); //interrupt olarak cagiracagiz
 8001894:	488f      	ldr	r0, [pc, #572]	; (8001ad4 <main+0x274>)
 8001896:	f7ff ff71 	bl	800177c <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_RXNE(UART4); //interrupt olarak cagiracagiz
 800189a:	488f      	ldr	r0, [pc, #572]	; (8001ad8 <main+0x278>)
 800189c:	f7ff ff6e 	bl	800177c <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_RXNE(UART5); //interrupt olarak cagiracagiz
 80018a0:	488e      	ldr	r0, [pc, #568]	; (8001adc <main+0x27c>)
 80018a2:	f7ff ff6b 	bl	800177c <LL_USART_EnableIT_RXNE>

  M8N_Initialization();
 80018a6:	f7ff fdb5 	bl	8001414 <M8N_Initialization>

  LL_TIM_EnableCounter(TIM5);
 80018aa:	488d      	ldr	r0, [pc, #564]	; (8001ae0 <main+0x280>)
 80018ac:	f7ff ff20 	bl	80016f0 <LL_TIM_EnableCounter>
  LL_TIM_CC_EnableChannel(TIM5,LL_TIM_CHANNEL_CH1);
 80018b0:	2101      	movs	r1, #1
 80018b2:	488b      	ldr	r0, [pc, #556]	; (8001ae0 <main+0x280>)
 80018b4:	f7ff ff2c 	bl	8001710 <LL_TIM_CC_EnableChannel>
  LL_TIM_CC_EnableChannel(TIM5,LL_TIM_CHANNEL_CH2);
 80018b8:	2110      	movs	r1, #16
 80018ba:	4889      	ldr	r0, [pc, #548]	; (8001ae0 <main+0x280>)
 80018bc:	f7ff ff28 	bl	8001710 <LL_TIM_CC_EnableChannel>
  LL_TIM_CC_EnableChannel(TIM5,LL_TIM_CHANNEL_CH3);
 80018c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018c4:	4886      	ldr	r0, [pc, #536]	; (8001ae0 <main+0x280>)
 80018c6:	f7ff ff23 	bl	8001710 <LL_TIM_CC_EnableChannel>
  LL_TIM_CC_EnableChannel(TIM5,LL_TIM_CHANNEL_CH4);
 80018ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018ce:	4884      	ldr	r0, [pc, #528]	; (8001ae0 <main+0x280>)
 80018d0:	f7ff ff1e 	bl	8001710 <LL_TIM_CC_EnableChannel>

  HAL_ADC_Start_DMA(&hadc1, &adcVal, 1);
 80018d4:	1cbb      	adds	r3, r7, #2
 80018d6:	2201      	movs	r2, #1
 80018d8:	4619      	mov	r1, r3
 80018da:	4882      	ldr	r0, [pc, #520]	; (8001ae4 <main+0x284>)
 80018dc:	f001 fa96 	bl	8002e0c <HAL_ADC_Start_DMA>
//
//  adcVal= ADC1->DR;

  while(Is_iBus_Received() == 0){
 80018e0:	e013      	b.n	800190a <main+0xaa>
	  LL_TIM_CC_EnableChannel(TIM3,LL_TIM_CHANNEL_CH4); // buzzer enable
 80018e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018e6:	487a      	ldr	r0, [pc, #488]	; (8001ad0 <main+0x270>)
 80018e8:	f7ff ff12 	bl	8001710 <LL_TIM_CC_EnableChannel>
	     TIM3->PSC = 3000;
 80018ec:	4b78      	ldr	r3, [pc, #480]	; (8001ad0 <main+0x270>)
 80018ee:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80018f2:	629a      	str	r2, [r3, #40]	; 0x28
	     HAL_Delay(200);
 80018f4:	20c8      	movs	r0, #200	; 0xc8
 80018f6:	f001 fa21 	bl	8002d3c <HAL_Delay>
	     LL_TIM_CC_DisableChannel(TIM3,LL_TIM_CHANNEL_CH4);  // b
 80018fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018fe:	4874      	ldr	r0, [pc, #464]	; (8001ad0 <main+0x270>)
 8001900:	f7ff ff17 	bl	8001732 <LL_TIM_CC_DisableChannel>
	     HAL_Delay(200);
 8001904:	20c8      	movs	r0, #200	; 0xc8
 8001906:	f001 fa19 	bl	8002d3c <HAL_Delay>
  while(Is_iBus_Received() == 0){
 800190a:	f000 fa43 	bl	8001d94 <Is_iBus_Received>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d0e6      	beq.n	80018e2 <main+0x82>
  }

  if(iBus.SwC == 2000){
 8001914:	4b74      	ldr	r3, [pc, #464]	; (8001ae8 <main+0x288>)
 8001916:	899b      	ldrh	r3, [r3, #12]
 8001918:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800191c:	d15f      	bne.n	80019de <main+0x17e>
	 LL_TIM_CC_EnableChannel(TIM3,LL_TIM_CHANNEL_CH4); // buzzer enable
 800191e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001922:	486b      	ldr	r0, [pc, #428]	; (8001ad0 <main+0x270>)
 8001924:	f7ff fef4 	bl	8001710 <LL_TIM_CC_EnableChannel>
	 TIM3->PSC = 1500;
 8001928:	4b69      	ldr	r3, [pc, #420]	; (8001ad0 <main+0x270>)
 800192a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800192e:	629a      	str	r2, [r3, #40]	; 0x28
	 HAL_Delay(200);
 8001930:	20c8      	movs	r0, #200	; 0xc8
 8001932:	f001 fa03 	bl	8002d3c <HAL_Delay>
	 TIM3->PSC = 2000;
 8001936:	4b66      	ldr	r3, [pc, #408]	; (8001ad0 <main+0x270>)
 8001938:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800193c:	629a      	str	r2, [r3, #40]	; 0x28
	 HAL_Delay(200);
 800193e:	20c8      	movs	r0, #200	; 0xc8
 8001940:	f001 f9fc 	bl	8002d3c <HAL_Delay>
	 TIM3->PSC = 1500;
 8001944:	4b62      	ldr	r3, [pc, #392]	; (8001ad0 <main+0x270>)
 8001946:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800194a:	629a      	str	r2, [r3, #40]	; 0x28
	 HAL_Delay(200);
 800194c:	20c8      	movs	r0, #200	; 0xc8
 800194e:	f001 f9f5 	bl	8002d3c <HAL_Delay>
	 TIM3->PSC = 2000;
 8001952:	4b5f      	ldr	r3, [pc, #380]	; (8001ad0 <main+0x270>)
 8001954:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001958:	629a      	str	r2, [r3, #40]	; 0x28
	 HAL_Delay(200);
 800195a:	20c8      	movs	r0, #200	; 0xc8
 800195c:	f001 f9ee 	bl	8002d3c <HAL_Delay>
	 LL_TIM_CC_DisableChannel(TIM3,LL_TIM_CHANNEL_CH4);  // b
 8001960:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001964:	485a      	ldr	r0, [pc, #360]	; (8001ad0 <main+0x270>)
 8001966:	f7ff fee4 	bl	8001732 <LL_TIM_CC_DisableChannel>
	 HAL_Delay(200);
 800196a:	20c8      	movs	r0, #200	; 0xc8
 800196c:	f001 f9e6 	bl	8002d3c <HAL_Delay>

  ESC_Calibration();
 8001970:	f000 f9e2 	bl	8001d38 <ESC_Calibration>
  while(iBus.SwC != 1000){
 8001974:	e019      	b.n	80019aa <main+0x14a>
	  Is_iBus_Received();
 8001976:	f000 fa0d 	bl	8001d94 <Is_iBus_Received>

	  LL_TIM_CC_EnableChannel(TIM3,LL_TIM_CHANNEL_CH4); // buzzer enable
 800197a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800197e:	4854      	ldr	r0, [pc, #336]	; (8001ad0 <main+0x270>)
 8001980:	f7ff fec6 	bl	8001710 <LL_TIM_CC_EnableChannel>

	 	 TIM3->PSC = 1500;
 8001984:	4b52      	ldr	r3, [pc, #328]	; (8001ad0 <main+0x270>)
 8001986:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800198a:	629a      	str	r2, [r3, #40]	; 0x28
	 	 HAL_Delay(200);
 800198c:	20c8      	movs	r0, #200	; 0xc8
 800198e:	f001 f9d5 	bl	8002d3c <HAL_Delay>
	 	 TIM3->PSC = 2000;
 8001992:	4b4f      	ldr	r3, [pc, #316]	; (8001ad0 <main+0x270>)
 8001994:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001998:	629a      	str	r2, [r3, #40]	; 0x28
	 	 HAL_Delay(200);
 800199a:	20c8      	movs	r0, #200	; 0xc8
 800199c:	f001 f9ce 	bl	8002d3c <HAL_Delay>

	 	 LL_TIM_CC_DisableChannel(TIM3,LL_TIM_CHANNEL_CH4);  // b
 80019a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019a4:	484a      	ldr	r0, [pc, #296]	; (8001ad0 <main+0x270>)
 80019a6:	f7ff fec4 	bl	8001732 <LL_TIM_CC_DisableChannel>
  while(iBus.SwC != 1000){
 80019aa:	4b4f      	ldr	r3, [pc, #316]	; (8001ae8 <main+0x288>)
 80019ac:	899b      	ldrh	r3, [r3, #12]
 80019ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80019b2:	d1e0      	bne.n	8001976 <main+0x116>

  	  }
  }
   while(Is_iBus_Throttle_Min() == 0){
 80019b4:	e013      	b.n	80019de <main+0x17e>
	   LL_TIM_CC_EnableChannel(TIM3,LL_TIM_CHANNEL_CH4); // buzzer enable
 80019b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019ba:	4845      	ldr	r0, [pc, #276]	; (8001ad0 <main+0x270>)
 80019bc:	f7ff fea8 	bl	8001710 <LL_TIM_CC_EnableChannel>
	 	     TIM3->PSC = 1000;
 80019c0:	4b43      	ldr	r3, [pc, #268]	; (8001ad0 <main+0x270>)
 80019c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80019c6:	629a      	str	r2, [r3, #40]	; 0x28
	 	     HAL_Delay(70);
 80019c8:	2046      	movs	r0, #70	; 0x46
 80019ca:	f001 f9b7 	bl	8002d3c <HAL_Delay>
	 	     LL_TIM_CC_DisableChannel(TIM3,LL_TIM_CHANNEL_CH4);  // b
 80019ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019d2:	483f      	ldr	r0, [pc, #252]	; (8001ad0 <main+0x270>)
 80019d4:	f7ff fead 	bl	8001732 <LL_TIM_CC_DisableChannel>
	 	     HAL_Delay(70);
 80019d8:	2046      	movs	r0, #70	; 0x46
 80019da:	f001 f9af 	bl	8002d3c <HAL_Delay>
   while(Is_iBus_Throttle_Min() == 0){
 80019de:	f000 f985 	bl	8001cec <Is_iBus_Throttle_Min>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d0e6      	beq.n	80019b6 <main+0x156>





   LL_TIM_CC_EnableChannel(TIM3,LL_TIM_CHANNEL_CH4); // buzzer enable
 80019e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019ec:	4838      	ldr	r0, [pc, #224]	; (8001ad0 <main+0x270>)
 80019ee:	f7ff fe8f 	bl	8001710 <LL_TIM_CC_EnableChannel>
   TIM3->PSC = 2000;
 80019f2:	4b37      	ldr	r3, [pc, #220]	; (8001ad0 <main+0x270>)
 80019f4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80019f8:	629a      	str	r2, [r3, #40]	; 0x28
   HAL_Delay(100);
 80019fa:	2064      	movs	r0, #100	; 0x64
 80019fc:	f001 f99e 	bl	8002d3c <HAL_Delay>
   TIM3->PSC = 1500; 							//burayı kopyaladı nedenini anlamadım
 8001a00:	4b33      	ldr	r3, [pc, #204]	; (8001ad0 <main+0x270>)
 8001a02:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001a06:	629a      	str	r2, [r3, #40]	; 0x28
   HAL_Delay(100);
 8001a08:	2064      	movs	r0, #100	; 0x64
 8001a0a:	f001 f997 	bl	8002d3c <HAL_Delay>
   TIM3->PSC = 1000;
 8001a0e:	4b30      	ldr	r3, [pc, #192]	; (8001ad0 <main+0x270>)
 8001a10:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a14:	629a      	str	r2, [r3, #40]	; 0x28
   HAL_Delay(100);
 8001a16:	2064      	movs	r0, #100	; 0x64
 8001a18:	f001 f990 	bl	8002d3c <HAL_Delay>

   LL_TIM_CC_DisableChannel(TIM3,LL_TIM_CHANNEL_CH4);  // buzzer disable
 8001a1c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a20:	482b      	ldr	r0, [pc, #172]	; (8001ad0 <main+0x270>)
 8001a22:	f7ff fe86 	bl	8001732 <LL_TIM_CC_DisableChannel>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  batVolt=adcVal * 0.003619f;
 8001a26:	887b      	ldrh	r3, [r7, #2]
 8001a28:	ee07 3a90 	vmov	s15, r3
 8001a2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a30:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8001aec <main+0x28c>
 8001a34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a38:	edc7 7a01 	vstr	s15, [r7, #4]
	  printf("%d\t%.2f\n", adcVal,batVolt);
 8001a3c:	887b      	ldrh	r3, [r7, #2]
 8001a3e:	461c      	mov	r4, r3
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	f7fe fd81 	bl	8000548 <__aeabi_f2d>
 8001a46:	4602      	mov	r2, r0
 8001a48:	460b      	mov	r3, r1
 8001a4a:	4621      	mov	r1, r4
 8001a4c:	4828      	ldr	r0, [pc, #160]	; (8001af0 <main+0x290>)
 8001a4e:	f006 fac5 	bl	8007fdc <iprintf>
	  if(batVolt <10.0f){
 8001a52:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a56:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001a5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a62:	d509      	bpl.n	8001a78 <main+0x218>
		  TIM3->PSC = 1000;
 8001a64:	4b1a      	ldr	r3, [pc, #104]	; (8001ad0 <main+0x270>)
 8001a66:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a6a:	629a      	str	r2, [r3, #40]	; 0x28
		  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8001a6c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a70:	4817      	ldr	r0, [pc, #92]	; (8001ad0 <main+0x270>)
 8001a72:	f7ff fe4d 	bl	8001710 <LL_TIM_CC_EnableChannel>
 8001a76:	e004      	b.n	8001a82 <main+0x222>
	  }
	  else{
		   LL_TIM_CC_DisableChannel(TIM3,LL_TIM_CHANNEL_CH4);
 8001a78:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a7c:	4814      	ldr	r0, [pc, #80]	; (8001ad0 <main+0x270>)
 8001a7e:	f7ff fe58 	bl	8001732 <LL_TIM_CC_DisableChannel>

	  }
	  HAL_Delay(100);
 8001a82:	2064      	movs	r0, #100	; 0x64
 8001a84:	f001 f95a 	bl	8002d3c <HAL_Delay>

	  }

	  */

	  if(ibus_rx_cplt_flag == 1)
 8001a88:	4b1a      	ldr	r3, [pc, #104]	; (8001af4 <main+0x294>)
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d13c      	bne.n	8001b0a <main+0x2aa>
	  	  {
	  		  ibus_rx_cplt_flag = 0;
 8001a90:	4b18      	ldr	r3, [pc, #96]	; (8001af4 <main+0x294>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	701a      	strb	r2, [r3, #0]
	  		  if(iBus_Check_CHKSUM(&ibus_rxbuff[0],32)==1)
 8001a96:	2120      	movs	r1, #32
 8001a98:	4817      	ldr	r0, [pc, #92]	; (8001af8 <main+0x298>)
 8001a9a:	f7ff fa27 	bl	8000eec <iBus_Check_CHKSUM>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d132      	bne.n	8001b0a <main+0x2aa>
	  		  {
	  			LL_GPIO_TogglePin(GPIOD, LL_GPIO_PIN_14);
 8001aa4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001aa8:	4814      	ldr	r0, [pc, #80]	; (8001afc <main+0x29c>)
 8001aaa:	f7ff fe99 	bl	80017e0 <LL_GPIO_TogglePin>
	  			iBus_Parsing(&ibus_rxbuff[0], &iBus);
 8001aae:	490e      	ldr	r1, [pc, #56]	; (8001ae8 <main+0x288>)
 8001ab0:	4811      	ldr	r0, [pc, #68]	; (8001af8 <main+0x298>)
 8001ab2:	f7ff fa51 	bl	8000f58 <iBus_Parsing>
	  			if(iBus_isActiveFailSafe(&iBus) ==1)
 8001ab6:	480c      	ldr	r0, [pc, #48]	; (8001ae8 <main+0x288>)
 8001ab8:	f7ff fb10 	bl	80010dc <iBus_isActiveFailSafe>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d11e      	bne.n	8001b00 <main+0x2a0>
	  			{
	  				LL_TIM_CC_EnableChannel(TIM3,LL_TIM_CHANNEL_CH4);
 8001ac2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ac6:	4802      	ldr	r0, [pc, #8]	; (8001ad0 <main+0x270>)
 8001ac8:	f7ff fe22 	bl	8001710 <LL_TIM_CC_EnableChannel>
 8001acc:	e01d      	b.n	8001b0a <main+0x2aa>
 8001ace:	bf00      	nop
 8001ad0:	40000400 	.word	0x40000400
 8001ad4:	40011400 	.word	0x40011400
 8001ad8:	40004c00 	.word	0x40004c00
 8001adc:	40005000 	.word	0x40005000
 8001ae0:	40000c00 	.word	0x40000c00
 8001ae4:	2000021c 	.word	0x2000021c
 8001ae8:	200001f8 	.word	0x200001f8
 8001aec:	3b6d2cbf 	.word	0x3b6d2cbf
 8001af0:	0800a180 	.word	0x0800a180
 8001af4:	200002ec 	.word	0x200002ec
 8001af8:	200002cc 	.word	0x200002cc
 8001afc:	40020c00 	.word	0x40020c00
	  			}
	  			else
	  			{
	  				LL_TIM_CC_DisableChannel(TIM3,LL_TIM_CHANNEL_CH4);
 8001b00:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b04:	4840      	ldr	r0, [pc, #256]	; (8001c08 <main+0x3a8>)
 8001b06:	f7ff fe14 	bl	8001732 <LL_TIM_CC_DisableChannel>
//	  			HAL_Delay(100);
	  		  }

	  	  }

	  TIM5->CCR1 = 10500 +(iBus.LV -1000)*10.5;
 8001b0a:	4b40      	ldr	r3, [pc, #256]	; (8001c0c <main+0x3ac>)
 8001b0c:	889b      	ldrh	r3, [r3, #4]
 8001b0e:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7fe fd06 	bl	8000524 <__aeabi_i2d>
 8001b18:	f04f 0200 	mov.w	r2, #0
 8001b1c:	4b3c      	ldr	r3, [pc, #240]	; (8001c10 <main+0x3b0>)
 8001b1e:	f7fe fd6b 	bl	80005f8 <__aeabi_dmul>
 8001b22:	4602      	mov	r2, r0
 8001b24:	460b      	mov	r3, r1
 8001b26:	4610      	mov	r0, r2
 8001b28:	4619      	mov	r1, r3
 8001b2a:	a335      	add	r3, pc, #212	; (adr r3, 8001c00 <main+0x3a0>)
 8001b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b30:	f7fe fbac 	bl	800028c <__adddf3>
 8001b34:	4602      	mov	r2, r0
 8001b36:	460b      	mov	r3, r1
 8001b38:	4c36      	ldr	r4, [pc, #216]	; (8001c14 <main+0x3b4>)
 8001b3a:	4610      	mov	r0, r2
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	f7ff f833 	bl	8000ba8 <__aeabi_d2uiz>
 8001b42:	4603      	mov	r3, r0
 8001b44:	6363      	str	r3, [r4, #52]	; 0x34
	  TIM5->CCR2 = 10500 +(iBus.LV -1000)*10.5;
 8001b46:	4b31      	ldr	r3, [pc, #196]	; (8001c0c <main+0x3ac>)
 8001b48:	889b      	ldrh	r3, [r3, #4]
 8001b4a:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7fe fce8 	bl	8000524 <__aeabi_i2d>
 8001b54:	f04f 0200 	mov.w	r2, #0
 8001b58:	4b2d      	ldr	r3, [pc, #180]	; (8001c10 <main+0x3b0>)
 8001b5a:	f7fe fd4d 	bl	80005f8 <__aeabi_dmul>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	460b      	mov	r3, r1
 8001b62:	4610      	mov	r0, r2
 8001b64:	4619      	mov	r1, r3
 8001b66:	a326      	add	r3, pc, #152	; (adr r3, 8001c00 <main+0x3a0>)
 8001b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b6c:	f7fe fb8e 	bl	800028c <__adddf3>
 8001b70:	4602      	mov	r2, r0
 8001b72:	460b      	mov	r3, r1
 8001b74:	4c27      	ldr	r4, [pc, #156]	; (8001c14 <main+0x3b4>)
 8001b76:	4610      	mov	r0, r2
 8001b78:	4619      	mov	r1, r3
 8001b7a:	f7ff f815 	bl	8000ba8 <__aeabi_d2uiz>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	63a3      	str	r3, [r4, #56]	; 0x38
	  TIM5->CCR3 = 10500 +(iBus.LV -1000)*10.5;
 8001b82:	4b22      	ldr	r3, [pc, #136]	; (8001c0c <main+0x3ac>)
 8001b84:	889b      	ldrh	r3, [r3, #4]
 8001b86:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7fe fcca 	bl	8000524 <__aeabi_i2d>
 8001b90:	f04f 0200 	mov.w	r2, #0
 8001b94:	4b1e      	ldr	r3, [pc, #120]	; (8001c10 <main+0x3b0>)
 8001b96:	f7fe fd2f 	bl	80005f8 <__aeabi_dmul>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	460b      	mov	r3, r1
 8001b9e:	4610      	mov	r0, r2
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	a317      	add	r3, pc, #92	; (adr r3, 8001c00 <main+0x3a0>)
 8001ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ba8:	f7fe fb70 	bl	800028c <__adddf3>
 8001bac:	4602      	mov	r2, r0
 8001bae:	460b      	mov	r3, r1
 8001bb0:	4c18      	ldr	r4, [pc, #96]	; (8001c14 <main+0x3b4>)
 8001bb2:	4610      	mov	r0, r2
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	f7fe fff7 	bl	8000ba8 <__aeabi_d2uiz>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	63e3      	str	r3, [r4, #60]	; 0x3c
	  TIM5->CCR4 = 10500 +(iBus.LV -1000)*10.5;
 8001bbe:	4b13      	ldr	r3, [pc, #76]	; (8001c0c <main+0x3ac>)
 8001bc0:	889b      	ldrh	r3, [r3, #4]
 8001bc2:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7fe fcac 	bl	8000524 <__aeabi_i2d>
 8001bcc:	f04f 0200 	mov.w	r2, #0
 8001bd0:	4b0f      	ldr	r3, [pc, #60]	; (8001c10 <main+0x3b0>)
 8001bd2:	f7fe fd11 	bl	80005f8 <__aeabi_dmul>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	460b      	mov	r3, r1
 8001bda:	4610      	mov	r0, r2
 8001bdc:	4619      	mov	r1, r3
 8001bde:	a308      	add	r3, pc, #32	; (adr r3, 8001c00 <main+0x3a0>)
 8001be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001be4:	f7fe fb52 	bl	800028c <__adddf3>
 8001be8:	4602      	mov	r2, r0
 8001bea:	460b      	mov	r3, r1
 8001bec:	4c09      	ldr	r4, [pc, #36]	; (8001c14 <main+0x3b4>)
 8001bee:	4610      	mov	r0, r2
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	f7fe ffd9 	bl	8000ba8 <__aeabi_d2uiz>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	6423      	str	r3, [r4, #64]	; 0x40
	  batVolt=adcVal * 0.003619f;
 8001bfa:	e714      	b.n	8001a26 <main+0x1c6>
 8001bfc:	f3af 8000 	nop.w
 8001c00:	00000000 	.word	0x00000000
 8001c04:	40c48200 	.word	0x40c48200
 8001c08:	40000400 	.word	0x40000400
 8001c0c:	200001f8 	.word	0x200001f8
 8001c10:	40250000 	.word	0x40250000
 8001c14:	40000c00 	.word	0x40000c00

08001c18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b094      	sub	sp, #80	; 0x50
 8001c1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c1e:	f107 0320 	add.w	r3, r7, #32
 8001c22:	2230      	movs	r2, #48	; 0x30
 8001c24:	2100      	movs	r1, #0
 8001c26:	4618      	mov	r0, r3
 8001c28:	f005 fd66 	bl	80076f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c2c:	f107 030c 	add.w	r3, r7, #12
 8001c30:	2200      	movs	r2, #0
 8001c32:	601a      	str	r2, [r3, #0]
 8001c34:	605a      	str	r2, [r3, #4]
 8001c36:	609a      	str	r2, [r3, #8]
 8001c38:	60da      	str	r2, [r3, #12]
 8001c3a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	60bb      	str	r3, [r7, #8]
 8001c40:	4b28      	ldr	r3, [pc, #160]	; (8001ce4 <SystemClock_Config+0xcc>)
 8001c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c44:	4a27      	ldr	r2, [pc, #156]	; (8001ce4 <SystemClock_Config+0xcc>)
 8001c46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c4a:	6413      	str	r3, [r2, #64]	; 0x40
 8001c4c:	4b25      	ldr	r3, [pc, #148]	; (8001ce4 <SystemClock_Config+0xcc>)
 8001c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c54:	60bb      	str	r3, [r7, #8]
 8001c56:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c58:	2300      	movs	r3, #0
 8001c5a:	607b      	str	r3, [r7, #4]
 8001c5c:	4b22      	ldr	r3, [pc, #136]	; (8001ce8 <SystemClock_Config+0xd0>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a21      	ldr	r2, [pc, #132]	; (8001ce8 <SystemClock_Config+0xd0>)
 8001c62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c66:	6013      	str	r3, [r2, #0]
 8001c68:	4b1f      	ldr	r3, [pc, #124]	; (8001ce8 <SystemClock_Config+0xd0>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c70:	607b      	str	r3, [r7, #4]
 8001c72:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c74:	2301      	movs	r3, #1
 8001c76:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c78:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c7c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c7e:	2302      	movs	r3, #2
 8001c80:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c82:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c86:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001c88:	2304      	movs	r3, #4
 8001c8a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001c8c:	23a8      	movs	r3, #168	; 0xa8
 8001c8e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c90:	2302      	movs	r3, #2
 8001c92:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001c94:	2304      	movs	r3, #4
 8001c96:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c98:	f107 0320 	add.w	r3, r7, #32
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f002 fb33 	bl	8004308 <HAL_RCC_OscConfig>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d001      	beq.n	8001cac <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001ca8:	f000 f894 	bl	8001dd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cac:	230f      	movs	r3, #15
 8001cae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cb0:	2302      	movs	r3, #2
 8001cb2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001cb8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001cbc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001cbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cc2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001cc4:	f107 030c 	add.w	r3, r7, #12
 8001cc8:	2105      	movs	r1, #5
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f002 fd94 	bl	80047f8 <HAL_RCC_ClockConfig>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001cd6:	f000 f87d 	bl	8001dd4 <Error_Handler>
  }
}
 8001cda:	bf00      	nop
 8001cdc:	3750      	adds	r7, #80	; 0x50
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	40023800 	.word	0x40023800
 8001ce8:	40007000 	.word	0x40007000

08001cec <Is_iBus_Throttle_Min>:

/* USER CODE BEGIN 4 */
int Is_iBus_Throttle_Min(void){
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0

	  if(ibus_rx_cplt_flag == 1)
 8001cf0:	4b0e      	ldr	r3, [pc, #56]	; (8001d2c <Is_iBus_Throttle_Min+0x40>)
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d115      	bne.n	8001d24 <Is_iBus_Throttle_Min+0x38>
		  	  {
		  		  ibus_rx_cplt_flag = 0;
 8001cf8:	4b0c      	ldr	r3, [pc, #48]	; (8001d2c <Is_iBus_Throttle_Min+0x40>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	701a      	strb	r2, [r3, #0]
		  		  if(iBus_Check_CHKSUM(&ibus_rxbuff[0],32)==1)
 8001cfe:	2120      	movs	r1, #32
 8001d00:	480b      	ldr	r0, [pc, #44]	; (8001d30 <Is_iBus_Throttle_Min+0x44>)
 8001d02:	f7ff f8f3 	bl	8000eec <iBus_Check_CHKSUM>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d10b      	bne.n	8001d24 <Is_iBus_Throttle_Min+0x38>
		  		  {
		  				iBus_Parsing(&ibus_rxbuff[0], &iBus);
 8001d0c:	4909      	ldr	r1, [pc, #36]	; (8001d34 <Is_iBus_Throttle_Min+0x48>)
 8001d0e:	4808      	ldr	r0, [pc, #32]	; (8001d30 <Is_iBus_Throttle_Min+0x44>)
 8001d10:	f7ff f922 	bl	8000f58 <iBus_Parsing>
		  				if(iBus.LV < 1010) return 1;
 8001d14:	4b07      	ldr	r3, [pc, #28]	; (8001d34 <Is_iBus_Throttle_Min+0x48>)
 8001d16:	889b      	ldrh	r3, [r3, #4]
 8001d18:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d801      	bhi.n	8001d24 <Is_iBus_Throttle_Min+0x38>
 8001d20:	2301      	movs	r3, #1
 8001d22:	e000      	b.n	8001d26 <Is_iBus_Throttle_Min+0x3a>

		  		  }

		  	  }
	  return 0;
 8001d24:	2300      	movs	r3, #0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	200002ec 	.word	0x200002ec
 8001d30:	200002cc 	.word	0x200002cc
 8001d34:	200001f8 	.word	0x200001f8

08001d38 <ESC_Calibration>:

void ESC_Calibration(void){
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0

	  TIM5->CCR1 = 21000;
 8001d3c:	4b14      	ldr	r3, [pc, #80]	; (8001d90 <ESC_Calibration+0x58>)
 8001d3e:	f245 2208 	movw	r2, #21000	; 0x5208
 8001d42:	635a      	str	r2, [r3, #52]	; 0x34
	  TIM5->CCR2 = 21000;
 8001d44:	4b12      	ldr	r3, [pc, #72]	; (8001d90 <ESC_Calibration+0x58>)
 8001d46:	f245 2208 	movw	r2, #21000	; 0x5208
 8001d4a:	639a      	str	r2, [r3, #56]	; 0x38
	  TIM5->CCR3 = 21000;
 8001d4c:	4b10      	ldr	r3, [pc, #64]	; (8001d90 <ESC_Calibration+0x58>)
 8001d4e:	f245 2208 	movw	r2, #21000	; 0x5208
 8001d52:	63da      	str	r2, [r3, #60]	; 0x3c
	  TIM5->CCR4 = 21000;
 8001d54:	4b0e      	ldr	r3, [pc, #56]	; (8001d90 <ESC_Calibration+0x58>)
 8001d56:	f245 2208 	movw	r2, #21000	; 0x5208
 8001d5a:	641a      	str	r2, [r3, #64]	; 0x40
	  HAL_Delay(7000);
 8001d5c:	f641 3058 	movw	r0, #7000	; 0x1b58
 8001d60:	f000 ffec 	bl	8002d3c <HAL_Delay>

	  TIM5->CCR1 = 10500;
 8001d64:	4b0a      	ldr	r3, [pc, #40]	; (8001d90 <ESC_Calibration+0x58>)
 8001d66:	f642 1204 	movw	r2, #10500	; 0x2904
 8001d6a:	635a      	str	r2, [r3, #52]	; 0x34
	  TIM5->CCR2 = 10500;
 8001d6c:	4b08      	ldr	r3, [pc, #32]	; (8001d90 <ESC_Calibration+0x58>)
 8001d6e:	f642 1204 	movw	r2, #10500	; 0x2904
 8001d72:	639a      	str	r2, [r3, #56]	; 0x38
	  TIM5->CCR3 = 10500;
 8001d74:	4b06      	ldr	r3, [pc, #24]	; (8001d90 <ESC_Calibration+0x58>)
 8001d76:	f642 1204 	movw	r2, #10500	; 0x2904
 8001d7a:	63da      	str	r2, [r3, #60]	; 0x3c
	  TIM5->CCR4 = 10500;
 8001d7c:	4b04      	ldr	r3, [pc, #16]	; (8001d90 <ESC_Calibration+0x58>)
 8001d7e:	f642 1204 	movw	r2, #10500	; 0x2904
 8001d82:	641a      	str	r2, [r3, #64]	; 0x40
	   HAL_Delay(8000);
 8001d84:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8001d88:	f000 ffd8 	bl	8002d3c <HAL_Delay>
}
 8001d8c:	bf00      	nop
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	40000c00 	.word	0x40000c00

08001d94 <Is_iBus_Received>:

int Is_iBus_Received(void){
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
	if(ibus_rx_cplt_flag == 1)
 8001d98:	4b0b      	ldr	r3, [pc, #44]	; (8001dc8 <Is_iBus_Received+0x34>)
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d10f      	bne.n	8001dc0 <Is_iBus_Received+0x2c>
			  	  {
			  		  ibus_rx_cplt_flag = 0;
 8001da0:	4b09      	ldr	r3, [pc, #36]	; (8001dc8 <Is_iBus_Received+0x34>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	701a      	strb	r2, [r3, #0]
			  		  if(iBus_Check_CHKSUM(&ibus_rxbuff[0],32)==1)
 8001da6:	2120      	movs	r1, #32
 8001da8:	4808      	ldr	r0, [pc, #32]	; (8001dcc <Is_iBus_Received+0x38>)
 8001daa:	f7ff f89f 	bl	8000eec <iBus_Check_CHKSUM>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d105      	bne.n	8001dc0 <Is_iBus_Received+0x2c>
			  		  {
			  				iBus_Parsing(&ibus_rxbuff[0], &iBus);
 8001db4:	4906      	ldr	r1, [pc, #24]	; (8001dd0 <Is_iBus_Received+0x3c>)
 8001db6:	4805      	ldr	r0, [pc, #20]	; (8001dcc <Is_iBus_Received+0x38>)
 8001db8:	f7ff f8ce 	bl	8000f58 <iBus_Parsing>
			  				return 1;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e000      	b.n	8001dc2 <Is_iBus_Received+0x2e>
			  		  }

			  	  }
		  return 0;
 8001dc0:	2300      	movs	r3, #0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	200002ec 	.word	0x200002ec
 8001dcc:	200002cc 	.word	0x200002cc
 8001dd0:	200001f8 	.word	0x200001f8

08001dd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001dd8:	b672      	cpsid	i
}
 8001dda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ddc:	e7fe      	b.n	8001ddc <Error_Handler+0x8>
	...

08001de0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001de6:	2300      	movs	r3, #0
 8001de8:	607b      	str	r3, [r7, #4]
 8001dea:	4b10      	ldr	r3, [pc, #64]	; (8001e2c <HAL_MspInit+0x4c>)
 8001dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dee:	4a0f      	ldr	r2, [pc, #60]	; (8001e2c <HAL_MspInit+0x4c>)
 8001df0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001df4:	6453      	str	r3, [r2, #68]	; 0x44
 8001df6:	4b0d      	ldr	r3, [pc, #52]	; (8001e2c <HAL_MspInit+0x4c>)
 8001df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dfe:	607b      	str	r3, [r7, #4]
 8001e00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e02:	2300      	movs	r3, #0
 8001e04:	603b      	str	r3, [r7, #0]
 8001e06:	4b09      	ldr	r3, [pc, #36]	; (8001e2c <HAL_MspInit+0x4c>)
 8001e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0a:	4a08      	ldr	r2, [pc, #32]	; (8001e2c <HAL_MspInit+0x4c>)
 8001e0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e10:	6413      	str	r3, [r2, #64]	; 0x40
 8001e12:	4b06      	ldr	r3, [pc, #24]	; (8001e2c <HAL_MspInit+0x4c>)
 8001e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e1a:	603b      	str	r3, [r7, #0]
 8001e1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e1e:	bf00      	nop
 8001e20:	370c      	adds	r7, #12
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	40023800 	.word	0x40023800

08001e30 <LL_USART_IsActiveFlag_RXNE>:
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 0320 	and.w	r3, r3, #32
 8001e40:	2b20      	cmp	r3, #32
 8001e42:	bf0c      	ite	eq
 8001e44:	2301      	moveq	r3, #1
 8001e46:	2300      	movne	r3, #0
 8001e48:	b2db      	uxtb	r3, r3
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	370c      	adds	r7, #12
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr

08001e56 <LL_USART_ClearFlag_RXNE>:
{
 8001e56:	b480      	push	{r7}
 8001e58:	b083      	sub	sp, #12
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_RXNE));
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	f06f 0220 	mvn.w	r2, #32
 8001e64:	601a      	str	r2, [r3, #0]
}
 8001e66:	bf00      	nop
 8001e68:	370c      	adds	r7, #12
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr

08001e72 <LL_USART_ReceiveData8>:
{
 8001e72:	b480      	push	{r7}
 8001e74:	b083      	sub	sp, #12
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	b2db      	uxtb	r3, r3
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr

08001e8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e90:	e7fe      	b.n	8001e90 <NMI_Handler+0x4>

08001e92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e92:	b480      	push	{r7}
 8001e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e96:	e7fe      	b.n	8001e96 <HardFault_Handler+0x4>

08001e98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e9c:	e7fe      	b.n	8001e9c <MemManage_Handler+0x4>

08001e9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e9e:	b480      	push	{r7}
 8001ea0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ea2:	e7fe      	b.n	8001ea2 <BusFault_Handler+0x4>

08001ea4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ea8:	e7fe      	b.n	8001ea8 <UsageFault_Handler+0x4>

08001eaa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001eaa:	b480      	push	{r7}
 8001eac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001eae:	bf00      	nop
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr

08001eb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ebc:	bf00      	nop
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr

08001ec6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ec6:	b480      	push	{r7}
 8001ec8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001eca:	bf00      	nop
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr

08001ed4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ed8:	f000 ff10 	bl	8002cfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001edc:	bf00      	nop
 8001ede:	bd80      	pop	{r7, pc}

08001ee0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */
	static unsigned char cnt = 0;
	if(LL_USART_IsActiveFlag_RXNE(UART4)) // bu bir receive işlemi mi?
 8001ee4:	4833      	ldr	r0, [pc, #204]	; (8001fb4 <UART4_IRQHandler+0xd4>)
 8001ee6:	f7ff ffa3 	bl	8001e30 <LL_USART_IsActiveFlag_RXNE>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d05b      	beq.n	8001fa8 <UART4_IRQHandler+0xc8>
		{
			LL_USART_ClearFlag_RXNE(UART4); // bayragı temizle
 8001ef0:	4830      	ldr	r0, [pc, #192]	; (8001fb4 <UART4_IRQHandler+0xd4>)
 8001ef2:	f7ff ffb0 	bl	8001e56 <LL_USART_ClearFlag_RXNE>
			uart4_rx_data = LL_USART_ReceiveData8(UART4); // veriyi alalım
 8001ef6:	482f      	ldr	r0, [pc, #188]	; (8001fb4 <UART4_IRQHandler+0xd4>)
 8001ef8:	f7ff ffbb 	bl	8001e72 <LL_USART_ReceiveData8>
 8001efc:	4603      	mov	r3, r0
 8001efe:	461a      	mov	r2, r3
 8001f00:	4b2d      	ldr	r3, [pc, #180]	; (8001fb8 <UART4_IRQHandler+0xd8>)
 8001f02:	701a      	strb	r2, [r3, #0]
			uart4_rx_flag = 1; // once main icerisindeki while kodu okunacak
 8001f04:	4b2d      	ldr	r3, [pc, #180]	; (8001fbc <UART4_IRQHandler+0xdc>)
 8001f06:	2201      	movs	r2, #1
 8001f08:	701a      	strb	r2, [r3, #0]

			//LL_USART_TransmitData8(USART6, uart4_rx_data);

			switch(cnt)
 8001f0a:	4b2d      	ldr	r3, [pc, #180]	; (8001fc0 <UART4_IRQHandler+0xe0>)
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	2b23      	cmp	r3, #35	; 0x23
 8001f10:	d02e      	beq.n	8001f70 <UART4_IRQHandler+0x90>
 8001f12:	2b23      	cmp	r3, #35	; 0x23
 8001f14:	dc3a      	bgt.n	8001f8c <UART4_IRQHandler+0xac>
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d002      	beq.n	8001f20 <UART4_IRQHandler+0x40>
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d012      	beq.n	8001f44 <UART4_IRQHandler+0x64>
 8001f1e:	e035      	b.n	8001f8c <UART4_IRQHandler+0xac>
			{
			case 0:
				if(uart4_rx_data == 0xb5)
 8001f20:	4b25      	ldr	r3, [pc, #148]	; (8001fb8 <UART4_IRQHandler+0xd8>)
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	2bb5      	cmp	r3, #181	; 0xb5
 8001f26:	d141      	bne.n	8001fac <UART4_IRQHandler+0xcc>
				{
					m8n_rxbuff[cnt] = uart4_rx_data;
 8001f28:	4b25      	ldr	r3, [pc, #148]	; (8001fc0 <UART4_IRQHandler+0xe0>)
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	4b22      	ldr	r3, [pc, #136]	; (8001fb8 <UART4_IRQHandler+0xd8>)
 8001f30:	7819      	ldrb	r1, [r3, #0]
 8001f32:	4b24      	ldr	r3, [pc, #144]	; (8001fc4 <UART4_IRQHandler+0xe4>)
 8001f34:	5499      	strb	r1, [r3, r2]
					cnt++;
 8001f36:	4b22      	ldr	r3, [pc, #136]	; (8001fc0 <UART4_IRQHandler+0xe0>)
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	b2da      	uxtb	r2, r3
 8001f3e:	4b20      	ldr	r3, [pc, #128]	; (8001fc0 <UART4_IRQHandler+0xe0>)
 8001f40:	701a      	strb	r2, [r3, #0]
				}
				break;
 8001f42:	e033      	b.n	8001fac <UART4_IRQHandler+0xcc>
			case 1:
				if(uart4_rx_data == 0x62)
 8001f44:	4b1c      	ldr	r3, [pc, #112]	; (8001fb8 <UART4_IRQHandler+0xd8>)
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	2b62      	cmp	r3, #98	; 0x62
 8001f4a:	d10d      	bne.n	8001f68 <UART4_IRQHandler+0x88>
				{
					m8n_rxbuff[cnt] = uart4_rx_data;
 8001f4c:	4b1c      	ldr	r3, [pc, #112]	; (8001fc0 <UART4_IRQHandler+0xe0>)
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	461a      	mov	r2, r3
 8001f52:	4b19      	ldr	r3, [pc, #100]	; (8001fb8 <UART4_IRQHandler+0xd8>)
 8001f54:	7819      	ldrb	r1, [r3, #0]
 8001f56:	4b1b      	ldr	r3, [pc, #108]	; (8001fc4 <UART4_IRQHandler+0xe4>)
 8001f58:	5499      	strb	r1, [r3, r2]
					cnt++;
 8001f5a:	4b19      	ldr	r3, [pc, #100]	; (8001fc0 <UART4_IRQHandler+0xe0>)
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	3301      	adds	r3, #1
 8001f60:	b2da      	uxtb	r2, r3
 8001f62:	4b17      	ldr	r3, [pc, #92]	; (8001fc0 <UART4_IRQHandler+0xe0>)
 8001f64:	701a      	strb	r2, [r3, #0]
				}
				else
					cnt = 0;
				break;
 8001f66:	e022      	b.n	8001fae <UART4_IRQHandler+0xce>
					cnt = 0;
 8001f68:	4b15      	ldr	r3, [pc, #84]	; (8001fc0 <UART4_IRQHandler+0xe0>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	701a      	strb	r2, [r3, #0]
				break;
 8001f6e:	e01e      	b.n	8001fae <UART4_IRQHandler+0xce>
			case 35:
				m8n_rxbuff[cnt] = uart4_rx_data;
 8001f70:	4b13      	ldr	r3, [pc, #76]	; (8001fc0 <UART4_IRQHandler+0xe0>)
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	461a      	mov	r2, r3
 8001f76:	4b10      	ldr	r3, [pc, #64]	; (8001fb8 <UART4_IRQHandler+0xd8>)
 8001f78:	7819      	ldrb	r1, [r3, #0]
 8001f7a:	4b12      	ldr	r3, [pc, #72]	; (8001fc4 <UART4_IRQHandler+0xe4>)
 8001f7c:	5499      	strb	r1, [r3, r2]
				cnt=0;
 8001f7e:	4b10      	ldr	r3, [pc, #64]	; (8001fc0 <UART4_IRQHandler+0xe0>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	701a      	strb	r2, [r3, #0]
				m8n_rx_cplt_flag = 1;
 8001f84:	4b10      	ldr	r3, [pc, #64]	; (8001fc8 <UART4_IRQHandler+0xe8>)
 8001f86:	2201      	movs	r2, #1
 8001f88:	701a      	strb	r2, [r3, #0]
				break;
 8001f8a:	e010      	b.n	8001fae <UART4_IRQHandler+0xce>
			default:
				m8n_rxbuff[cnt] = uart4_rx_data;
 8001f8c:	4b0c      	ldr	r3, [pc, #48]	; (8001fc0 <UART4_IRQHandler+0xe0>)
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	461a      	mov	r2, r3
 8001f92:	4b09      	ldr	r3, [pc, #36]	; (8001fb8 <UART4_IRQHandler+0xd8>)
 8001f94:	7819      	ldrb	r1, [r3, #0]
 8001f96:	4b0b      	ldr	r3, [pc, #44]	; (8001fc4 <UART4_IRQHandler+0xe4>)
 8001f98:	5499      	strb	r1, [r3, r2]
				cnt++;
 8001f9a:	4b09      	ldr	r3, [pc, #36]	; (8001fc0 <UART4_IRQHandler+0xe0>)
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	b2da      	uxtb	r2, r3
 8001fa2:	4b07      	ldr	r3, [pc, #28]	; (8001fc0 <UART4_IRQHandler+0xe0>)
 8001fa4:	701a      	strb	r2, [r3, #0]
				break;
 8001fa6:	e002      	b.n	8001fae <UART4_IRQHandler+0xce>
			}
		}
 8001fa8:	bf00      	nop
 8001faa:	e000      	b.n	8001fae <UART4_IRQHandler+0xce>
				break;
 8001fac:	bf00      	nop
  /* USER CODE END UART4_IRQn 0 */
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001fae:	bf00      	nop
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	40004c00 	.word	0x40004c00
 8001fb8:	200002c7 	.word	0x200002c7
 8001fbc:	200002c6 	.word	0x200002c6
 8001fc0:	20000315 	.word	0x20000315
 8001fc4:	200002f0 	.word	0x200002f0
 8001fc8:	20000314 	.word	0x20000314

08001fcc <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */
	static unsigned char cnt2 = 0;
		if(LL_USART_IsActiveFlag_RXNE(UART5)) // bu bir receive işlemi mi?
 8001fd0:	4834      	ldr	r0, [pc, #208]	; (80020a4 <UART5_IRQHandler+0xd8>)
 8001fd2:	f7ff ff2d 	bl	8001e30 <LL_USART_IsActiveFlag_RXNE>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d05b      	beq.n	8002094 <UART5_IRQHandler+0xc8>
			{
				LL_USART_ClearFlag_RXNE(UART5); // bayragı temizle
 8001fdc:	4831      	ldr	r0, [pc, #196]	; (80020a4 <UART5_IRQHandler+0xd8>)
 8001fde:	f7ff ff3a 	bl	8001e56 <LL_USART_ClearFlag_RXNE>
				uart5_rx_data = LL_USART_ReceiveData8(UART5); // veriyi alalım
 8001fe2:	4830      	ldr	r0, [pc, #192]	; (80020a4 <UART5_IRQHandler+0xd8>)
 8001fe4:	f7ff ff45 	bl	8001e72 <LL_USART_ReceiveData8>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	461a      	mov	r2, r3
 8001fec:	4b2e      	ldr	r3, [pc, #184]	; (80020a8 <UART5_IRQHandler+0xdc>)
 8001fee:	701a      	strb	r2, [r3, #0]
				uart5_rx_flag = 1; // once main icerisindeki while kodu okunacak
 8001ff0:	4b2e      	ldr	r3, [pc, #184]	; (80020ac <UART5_IRQHandler+0xe0>)
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	701a      	strb	r2, [r3, #0]

				switch(cnt2)
 8001ff6:	4b2e      	ldr	r3, [pc, #184]	; (80020b0 <UART5_IRQHandler+0xe4>)
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	2b1f      	cmp	r3, #31
 8001ffc:	d02e      	beq.n	800205c <UART5_IRQHandler+0x90>
 8001ffe:	2b1f      	cmp	r3, #31
 8002000:	dc3a      	bgt.n	8002078 <UART5_IRQHandler+0xac>
 8002002:	2b00      	cmp	r3, #0
 8002004:	d002      	beq.n	800200c <UART5_IRQHandler+0x40>
 8002006:	2b01      	cmp	r3, #1
 8002008:	d012      	beq.n	8002030 <UART5_IRQHandler+0x64>
 800200a:	e035      	b.n	8002078 <UART5_IRQHandler+0xac>
				{
				case 0:
					if(uart5_rx_data == 0x20)
 800200c:	4b26      	ldr	r3, [pc, #152]	; (80020a8 <UART5_IRQHandler+0xdc>)
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	2b20      	cmp	r3, #32
 8002012:	d141      	bne.n	8002098 <UART5_IRQHandler+0xcc>
					{
						ibus_rxbuff[cnt2] = uart5_rx_data;
 8002014:	4b26      	ldr	r3, [pc, #152]	; (80020b0 <UART5_IRQHandler+0xe4>)
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	461a      	mov	r2, r3
 800201a:	4b23      	ldr	r3, [pc, #140]	; (80020a8 <UART5_IRQHandler+0xdc>)
 800201c:	7819      	ldrb	r1, [r3, #0]
 800201e:	4b25      	ldr	r3, [pc, #148]	; (80020b4 <UART5_IRQHandler+0xe8>)
 8002020:	5499      	strb	r1, [r3, r2]
						cnt2++;
 8002022:	4b23      	ldr	r3, [pc, #140]	; (80020b0 <UART5_IRQHandler+0xe4>)
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	3301      	adds	r3, #1
 8002028:	b2da      	uxtb	r2, r3
 800202a:	4b21      	ldr	r3, [pc, #132]	; (80020b0 <UART5_IRQHandler+0xe4>)
 800202c:	701a      	strb	r2, [r3, #0]

					}
					break;
 800202e:	e033      	b.n	8002098 <UART5_IRQHandler+0xcc>
				case 1:
					if(uart5_rx_data == 0x40)
 8002030:	4b1d      	ldr	r3, [pc, #116]	; (80020a8 <UART5_IRQHandler+0xdc>)
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	2b40      	cmp	r3, #64	; 0x40
 8002036:	d10d      	bne.n	8002054 <UART5_IRQHandler+0x88>
					{
						ibus_rxbuff[cnt2] = uart5_rx_data;
 8002038:	4b1d      	ldr	r3, [pc, #116]	; (80020b0 <UART5_IRQHandler+0xe4>)
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	461a      	mov	r2, r3
 800203e:	4b1a      	ldr	r3, [pc, #104]	; (80020a8 <UART5_IRQHandler+0xdc>)
 8002040:	7819      	ldrb	r1, [r3, #0]
 8002042:	4b1c      	ldr	r3, [pc, #112]	; (80020b4 <UART5_IRQHandler+0xe8>)
 8002044:	5499      	strb	r1, [r3, r2]
						cnt2++;
 8002046:	4b1a      	ldr	r3, [pc, #104]	; (80020b0 <UART5_IRQHandler+0xe4>)
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	3301      	adds	r3, #1
 800204c:	b2da      	uxtb	r2, r3
 800204e:	4b18      	ldr	r3, [pc, #96]	; (80020b0 <UART5_IRQHandler+0xe4>)
 8002050:	701a      	strb	r2, [r3, #0]
					}
					else
						cnt2 = 0;
					break;
 8002052:	e022      	b.n	800209a <UART5_IRQHandler+0xce>
						cnt2 = 0;
 8002054:	4b16      	ldr	r3, [pc, #88]	; (80020b0 <UART5_IRQHandler+0xe4>)
 8002056:	2200      	movs	r2, #0
 8002058:	701a      	strb	r2, [r3, #0]
					break;
 800205a:	e01e      	b.n	800209a <UART5_IRQHandler+0xce>
					ibus_rxbuff[cnt2] = uart5_rx_data;
					cnt2++;
					break;
					*/
				case 31:
					ibus_rxbuff[cnt2] = uart5_rx_data;
 800205c:	4b14      	ldr	r3, [pc, #80]	; (80020b0 <UART5_IRQHandler+0xe4>)
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	461a      	mov	r2, r3
 8002062:	4b11      	ldr	r3, [pc, #68]	; (80020a8 <UART5_IRQHandler+0xdc>)
 8002064:	7819      	ldrb	r1, [r3, #0]
 8002066:	4b13      	ldr	r3, [pc, #76]	; (80020b4 <UART5_IRQHandler+0xe8>)
 8002068:	5499      	strb	r1, [r3, r2]
					cnt2=0;
 800206a:	4b11      	ldr	r3, [pc, #68]	; (80020b0 <UART5_IRQHandler+0xe4>)
 800206c:	2200      	movs	r2, #0
 800206e:	701a      	strb	r2, [r3, #0]
					ibus_rx_cplt_flag = 1;
 8002070:	4b11      	ldr	r3, [pc, #68]	; (80020b8 <UART5_IRQHandler+0xec>)
 8002072:	2201      	movs	r2, #1
 8002074:	701a      	strb	r2, [r3, #0]
					break;
 8002076:	e010      	b.n	800209a <UART5_IRQHandler+0xce>
				default:
					ibus_rxbuff[cnt2] = uart5_rx_data;
 8002078:	4b0d      	ldr	r3, [pc, #52]	; (80020b0 <UART5_IRQHandler+0xe4>)
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	461a      	mov	r2, r3
 800207e:	4b0a      	ldr	r3, [pc, #40]	; (80020a8 <UART5_IRQHandler+0xdc>)
 8002080:	7819      	ldrb	r1, [r3, #0]
 8002082:	4b0c      	ldr	r3, [pc, #48]	; (80020b4 <UART5_IRQHandler+0xe8>)
 8002084:	5499      	strb	r1, [r3, r2]
					cnt2++;
 8002086:	4b0a      	ldr	r3, [pc, #40]	; (80020b0 <UART5_IRQHandler+0xe4>)
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	3301      	adds	r3, #1
 800208c:	b2da      	uxtb	r2, r3
 800208e:	4b08      	ldr	r3, [pc, #32]	; (80020b0 <UART5_IRQHandler+0xe4>)
 8002090:	701a      	strb	r2, [r3, #0]
					break;
 8002092:	e002      	b.n	800209a <UART5_IRQHandler+0xce>

				}
			}
 8002094:	bf00      	nop
 8002096:	e000      	b.n	800209a <UART5_IRQHandler+0xce>
					break;
 8002098:	bf00      	nop

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 800209a:	4808      	ldr	r0, [pc, #32]	; (80020bc <UART5_IRQHandler+0xf0>)
 800209c:	f003 fbb2 	bl	8005804 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80020a0:	bf00      	nop
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	40005000 	.word	0x40005000
 80020a8:	200002c9 	.word	0x200002c9
 80020ac:	200002c8 	.word	0x200002c8
 80020b0:	20000316 	.word	0x20000316
 80020b4:	200002cc 	.word	0x200002cc
 80020b8:	200002ec 	.word	0x200002ec
 80020bc:	20000364 	.word	0x20000364

080020c0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80020c4:	4802      	ldr	r0, [pc, #8]	; (80020d0 <DMA2_Stream0_IRQHandler+0x10>)
 80020c6:	f001 fd19 	bl	8003afc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80020ca:	bf00      	nop
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	20000264 	.word	0x20000264

080020d4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	if(LL_USART_IsActiveFlag_RXNE(USART6)) // bu bir receive işlemi mi?
 80020d8:	480a      	ldr	r0, [pc, #40]	; (8002104 <USART6_IRQHandler+0x30>)
 80020da:	f7ff fea9 	bl	8001e30 <LL_USART_IsActiveFlag_RXNE>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d00c      	beq.n	80020fe <USART6_IRQHandler+0x2a>
	{
		LL_USART_ClearFlag_RXNE(USART6); // bayragı temizle
 80020e4:	4807      	ldr	r0, [pc, #28]	; (8002104 <USART6_IRQHandler+0x30>)
 80020e6:	f7ff feb6 	bl	8001e56 <LL_USART_ClearFlag_RXNE>
		uart6_rx_data = LL_USART_ReceiveData8(USART6); // veriyi alalım
 80020ea:	4806      	ldr	r0, [pc, #24]	; (8002104 <USART6_IRQHandler+0x30>)
 80020ec:	f7ff fec1 	bl	8001e72 <LL_USART_ReceiveData8>
 80020f0:	4603      	mov	r3, r0
 80020f2:	461a      	mov	r2, r3
 80020f4:	4b04      	ldr	r3, [pc, #16]	; (8002108 <USART6_IRQHandler+0x34>)
 80020f6:	701a      	strb	r2, [r3, #0]
		uart6_rx_flag = 1; // once main icerisindeki while kodu okunacak
 80020f8:	4b04      	ldr	r3, [pc, #16]	; (800210c <USART6_IRQHandler+0x38>)
 80020fa:	2201      	movs	r2, #1
 80020fc:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END USART6_IRQn 0 */
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80020fe:	bf00      	nop
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	40011400 	.word	0x40011400
 8002108:	200002c5 	.word	0x200002c5
 800210c:	200002c4 	.word	0x200002c4

08002110 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
	return 1;
 8002114:	2301      	movs	r3, #1
}
 8002116:	4618      	mov	r0, r3
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <_kill>:

int _kill(int pid, int sig)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800212a:	f005 fabb 	bl	80076a4 <__errno>
 800212e:	4603      	mov	r3, r0
 8002130:	2216      	movs	r2, #22
 8002132:	601a      	str	r2, [r3, #0]
	return -1;
 8002134:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002138:	4618      	mov	r0, r3
 800213a:	3708      	adds	r7, #8
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}

08002140 <_exit>:

void _exit (int status)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002148:	f04f 31ff 	mov.w	r1, #4294967295
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	f7ff ffe7 	bl	8002120 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002152:	e7fe      	b.n	8002152 <_exit+0x12>

08002154 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b086      	sub	sp, #24
 8002158:	af00      	add	r7, sp, #0
 800215a:	60f8      	str	r0, [r7, #12]
 800215c:	60b9      	str	r1, [r7, #8]
 800215e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002160:	2300      	movs	r3, #0
 8002162:	617b      	str	r3, [r7, #20]
 8002164:	e00a      	b.n	800217c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002166:	f3af 8000 	nop.w
 800216a:	4601      	mov	r1, r0
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	1c5a      	adds	r2, r3, #1
 8002170:	60ba      	str	r2, [r7, #8]
 8002172:	b2ca      	uxtb	r2, r1
 8002174:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	3301      	adds	r3, #1
 800217a:	617b      	str	r3, [r7, #20]
 800217c:	697a      	ldr	r2, [r7, #20]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	429a      	cmp	r2, r3
 8002182:	dbf0      	blt.n	8002166 <_read+0x12>
	}

return len;
 8002184:	687b      	ldr	r3, [r7, #4]
}
 8002186:	4618      	mov	r0, r3
 8002188:	3718      	adds	r7, #24
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}

0800218e <_close>:
	}
	return len;
}

int _close(int file)
{
 800218e:	b480      	push	{r7}
 8002190:	b083      	sub	sp, #12
 8002192:	af00      	add	r7, sp, #0
 8002194:	6078      	str	r0, [r7, #4]
	return -1;
 8002196:	f04f 33ff 	mov.w	r3, #4294967295
}
 800219a:	4618      	mov	r0, r3
 800219c:	370c      	adds	r7, #12
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr

080021a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021a6:	b480      	push	{r7}
 80021a8:	b083      	sub	sp, #12
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	6078      	str	r0, [r7, #4]
 80021ae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021b6:	605a      	str	r2, [r3, #4]
	return 0;
 80021b8:	2300      	movs	r3, #0
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	370c      	adds	r7, #12
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr

080021c6 <_isatty>:

int _isatty(int file)
{
 80021c6:	b480      	push	{r7}
 80021c8:	b083      	sub	sp, #12
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]
	return 1;
 80021ce:	2301      	movs	r3, #1
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	370c      	adds	r7, #12
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr

080021dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021dc:	b480      	push	{r7}
 80021de:	b085      	sub	sp, #20
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	60f8      	str	r0, [r7, #12]
 80021e4:	60b9      	str	r1, [r7, #8]
 80021e6:	607a      	str	r2, [r7, #4]
	return 0;
 80021e8:	2300      	movs	r3, #0
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3714      	adds	r7, #20
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
	...

080021f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b086      	sub	sp, #24
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002200:	4a14      	ldr	r2, [pc, #80]	; (8002254 <_sbrk+0x5c>)
 8002202:	4b15      	ldr	r3, [pc, #84]	; (8002258 <_sbrk+0x60>)
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800220c:	4b13      	ldr	r3, [pc, #76]	; (800225c <_sbrk+0x64>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d102      	bne.n	800221a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002214:	4b11      	ldr	r3, [pc, #68]	; (800225c <_sbrk+0x64>)
 8002216:	4a12      	ldr	r2, [pc, #72]	; (8002260 <_sbrk+0x68>)
 8002218:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800221a:	4b10      	ldr	r3, [pc, #64]	; (800225c <_sbrk+0x64>)
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4413      	add	r3, r2
 8002222:	693a      	ldr	r2, [r7, #16]
 8002224:	429a      	cmp	r2, r3
 8002226:	d207      	bcs.n	8002238 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002228:	f005 fa3c 	bl	80076a4 <__errno>
 800222c:	4603      	mov	r3, r0
 800222e:	220c      	movs	r2, #12
 8002230:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002232:	f04f 33ff 	mov.w	r3, #4294967295
 8002236:	e009      	b.n	800224c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002238:	4b08      	ldr	r3, [pc, #32]	; (800225c <_sbrk+0x64>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800223e:	4b07      	ldr	r3, [pc, #28]	; (800225c <_sbrk+0x64>)
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4413      	add	r3, r2
 8002246:	4a05      	ldr	r2, [pc, #20]	; (800225c <_sbrk+0x64>)
 8002248:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800224a:	68fb      	ldr	r3, [r7, #12]
}
 800224c:	4618      	mov	r0, r3
 800224e:	3718      	adds	r7, #24
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	20020000 	.word	0x20020000
 8002258:	00000400 	.word	0x00000400
 800225c:	20000318 	.word	0x20000318
 8002260:	200003c0 	.word	0x200003c0

08002264 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002268:	4b06      	ldr	r3, [pc, #24]	; (8002284 <SystemInit+0x20>)
 800226a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800226e:	4a05      	ldr	r2, [pc, #20]	; (8002284 <SystemInit+0x20>)
 8002270:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002274:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002278:	bf00      	nop
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	e000ed00 	.word	0xe000ed00

08002288 <LL_TIM_EnableARRPreload>:
{
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	601a      	str	r2, [r3, #0]
}
 800229c:	bf00      	nop
 800229e:	370c      	adds	r7, #12
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr

080022a8 <LL_TIM_OC_EnableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b085      	sub	sp, #20
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d01c      	beq.n	80022f2 <LL_TIM_OC_EnableFast+0x4a>
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	2b04      	cmp	r3, #4
 80022bc:	d017      	beq.n	80022ee <LL_TIM_OC_EnableFast+0x46>
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	2b10      	cmp	r3, #16
 80022c2:	d012      	beq.n	80022ea <LL_TIM_OC_EnableFast+0x42>
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	2b40      	cmp	r3, #64	; 0x40
 80022c8:	d00d      	beq.n	80022e6 <LL_TIM_OC_EnableFast+0x3e>
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022d0:	d007      	beq.n	80022e2 <LL_TIM_OC_EnableFast+0x3a>
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022d8:	d101      	bne.n	80022de <LL_TIM_OC_EnableFast+0x36>
 80022da:	2305      	movs	r3, #5
 80022dc:	e00a      	b.n	80022f4 <LL_TIM_OC_EnableFast+0x4c>
 80022de:	2306      	movs	r3, #6
 80022e0:	e008      	b.n	80022f4 <LL_TIM_OC_EnableFast+0x4c>
 80022e2:	2304      	movs	r3, #4
 80022e4:	e006      	b.n	80022f4 <LL_TIM_OC_EnableFast+0x4c>
 80022e6:	2303      	movs	r3, #3
 80022e8:	e004      	b.n	80022f4 <LL_TIM_OC_EnableFast+0x4c>
 80022ea:	2302      	movs	r3, #2
 80022ec:	e002      	b.n	80022f4 <LL_TIM_OC_EnableFast+0x4c>
 80022ee:	2301      	movs	r3, #1
 80022f0:	e000      	b.n	80022f4 <LL_TIM_OC_EnableFast+0x4c>
 80022f2:	2300      	movs	r3, #0
 80022f4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	3318      	adds	r3, #24
 80022fa:	4619      	mov	r1, r3
 80022fc:	7bfb      	ldrb	r3, [r7, #15]
 80022fe:	4a0a      	ldr	r2, [pc, #40]	; (8002328 <LL_TIM_OC_EnableFast+0x80>)
 8002300:	5cd3      	ldrb	r3, [r2, r3]
 8002302:	440b      	add	r3, r1
 8002304:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	7bfb      	ldrb	r3, [r7, #15]
 800230c:	4907      	ldr	r1, [pc, #28]	; (800232c <LL_TIM_OC_EnableFast+0x84>)
 800230e:	5ccb      	ldrb	r3, [r1, r3]
 8002310:	4619      	mov	r1, r3
 8002312:	2304      	movs	r3, #4
 8002314:	408b      	lsls	r3, r1
 8002316:	431a      	orrs	r2, r3
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	601a      	str	r2, [r3, #0]

}
 800231c:	bf00      	nop
 800231e:	3714      	adds	r7, #20
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr
 8002328:	0800a1f8 	.word	0x0800a1f8
 800232c:	0800a200 	.word	0x0800a200

08002330 <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8002330:	b480      	push	{r7}
 8002332:	b085      	sub	sp, #20
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	2b01      	cmp	r3, #1
 800233e:	d01c      	beq.n	800237a <LL_TIM_OC_EnablePreload+0x4a>
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	2b04      	cmp	r3, #4
 8002344:	d017      	beq.n	8002376 <LL_TIM_OC_EnablePreload+0x46>
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	2b10      	cmp	r3, #16
 800234a:	d012      	beq.n	8002372 <LL_TIM_OC_EnablePreload+0x42>
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	2b40      	cmp	r3, #64	; 0x40
 8002350:	d00d      	beq.n	800236e <LL_TIM_OC_EnablePreload+0x3e>
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002358:	d007      	beq.n	800236a <LL_TIM_OC_EnablePreload+0x3a>
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002360:	d101      	bne.n	8002366 <LL_TIM_OC_EnablePreload+0x36>
 8002362:	2305      	movs	r3, #5
 8002364:	e00a      	b.n	800237c <LL_TIM_OC_EnablePreload+0x4c>
 8002366:	2306      	movs	r3, #6
 8002368:	e008      	b.n	800237c <LL_TIM_OC_EnablePreload+0x4c>
 800236a:	2304      	movs	r3, #4
 800236c:	e006      	b.n	800237c <LL_TIM_OC_EnablePreload+0x4c>
 800236e:	2303      	movs	r3, #3
 8002370:	e004      	b.n	800237c <LL_TIM_OC_EnablePreload+0x4c>
 8002372:	2302      	movs	r3, #2
 8002374:	e002      	b.n	800237c <LL_TIM_OC_EnablePreload+0x4c>
 8002376:	2301      	movs	r3, #1
 8002378:	e000      	b.n	800237c <LL_TIM_OC_EnablePreload+0x4c>
 800237a:	2300      	movs	r3, #0
 800237c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	3318      	adds	r3, #24
 8002382:	4619      	mov	r1, r3
 8002384:	7bfb      	ldrb	r3, [r7, #15]
 8002386:	4a0a      	ldr	r2, [pc, #40]	; (80023b0 <LL_TIM_OC_EnablePreload+0x80>)
 8002388:	5cd3      	ldrb	r3, [r2, r3]
 800238a:	440b      	add	r3, r1
 800238c:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	7bfb      	ldrb	r3, [r7, #15]
 8002394:	4907      	ldr	r1, [pc, #28]	; (80023b4 <LL_TIM_OC_EnablePreload+0x84>)
 8002396:	5ccb      	ldrb	r3, [r1, r3]
 8002398:	4619      	mov	r1, r3
 800239a:	2308      	movs	r3, #8
 800239c:	408b      	lsls	r3, r1
 800239e:	431a      	orrs	r2, r3
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	601a      	str	r2, [r3, #0]
}
 80023a4:	bf00      	nop
 80023a6:	3714      	adds	r7, #20
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr
 80023b0:	0800a1f8 	.word	0x0800a1f8
 80023b4:	0800a200 	.word	0x0800a200

080023b8 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80023ca:	f023 0307 	bic.w	r3, r3, #7
 80023ce:	683a      	ldr	r2, [r7, #0]
 80023d0:	431a      	orrs	r2, r3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	609a      	str	r2, [r3, #8]
}
 80023d6:	bf00      	nop
 80023d8:	370c      	adds	r7, #12
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr

080023e2 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 80023e2:	b480      	push	{r7}
 80023e4:	b083      	sub	sp, #12
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	6078      	str	r0, [r7, #4]
 80023ea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	431a      	orrs	r2, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	605a      	str	r2, [r3, #4]
}
 80023fc:	bf00      	nop
 80023fe:	370c      	adds	r7, #12
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr

08002408 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	609a      	str	r2, [r3, #8]
}
 800241c:	bf00      	nop
 800241e:	370c      	adds	r7, #12
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr

08002428 <LL_AHB1_GRP1_EnableClock>:
{
 8002428:	b480      	push	{r7}
 800242a:	b085      	sub	sp, #20
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002430:	4b08      	ldr	r3, [pc, #32]	; (8002454 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002432:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002434:	4907      	ldr	r1, [pc, #28]	; (8002454 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4313      	orrs	r3, r2
 800243a:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800243c:	4b05      	ldr	r3, [pc, #20]	; (8002454 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800243e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	4013      	ands	r3, r2
 8002444:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002446:	68fb      	ldr	r3, [r7, #12]
}
 8002448:	bf00      	nop
 800244a:	3714      	adds	r7, #20
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr
 8002454:	40023800 	.word	0x40023800

08002458 <LL_APB1_GRP1_EnableClock>:
{
 8002458:	b480      	push	{r7}
 800245a:	b085      	sub	sp, #20
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002460:	4b08      	ldr	r3, [pc, #32]	; (8002484 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002462:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002464:	4907      	ldr	r1, [pc, #28]	; (8002484 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4313      	orrs	r3, r2
 800246a:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800246c:	4b05      	ldr	r3, [pc, #20]	; (8002484 <LL_APB1_GRP1_EnableClock+0x2c>)
 800246e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	4013      	ands	r3, r2
 8002474:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002476:	68fb      	ldr	r3, [r7, #12]
}
 8002478:	bf00      	nop
 800247a:	3714      	adds	r7, #20
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr
 8002484:	40023800 	.word	0x40023800

08002488 <MX_TIM3_Init>:

TIM_HandleTypeDef htim5;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b094      	sub	sp, #80	; 0x50
 800248c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800248e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002492:	2200      	movs	r2, #0
 8002494:	601a      	str	r2, [r3, #0]
 8002496:	605a      	str	r2, [r3, #4]
 8002498:	609a      	str	r2, [r3, #8]
 800249a:	60da      	str	r2, [r3, #12]
 800249c:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800249e:	f107 031c 	add.w	r3, r7, #28
 80024a2:	2220      	movs	r2, #32
 80024a4:	2100      	movs	r1, #0
 80024a6:	4618      	mov	r0, r3
 80024a8:	f005 f926 	bl	80076f8 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024ac:	1d3b      	adds	r3, r7, #4
 80024ae:	2200      	movs	r2, #0
 80024b0:	601a      	str	r2, [r3, #0]
 80024b2:	605a      	str	r2, [r3, #4]
 80024b4:	609a      	str	r2, [r3, #8]
 80024b6:	60da      	str	r2, [r3, #12]
 80024b8:	611a      	str	r2, [r3, #16]
 80024ba:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 80024bc:	2002      	movs	r0, #2
 80024be:	f7ff ffcb 	bl	8002458 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 999;
 80024c2:	f240 33e7 	movw	r3, #999	; 0x3e7
 80024c6:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80024c8:	2300      	movs	r3, #0
 80024ca:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 20;
 80024cc:	2314      	movs	r3, #20
 80024ce:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80024d0:	2300      	movs	r3, #0
 80024d2:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 80024d4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80024d8:	4619      	mov	r1, r3
 80024da:	4822      	ldr	r0, [pc, #136]	; (8002564 <MX_TIM3_Init+0xdc>)
 80024dc:	f004 fb7c 	bl	8006bd8 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM3);
 80024e0:	4820      	ldr	r0, [pc, #128]	; (8002564 <MX_TIM3_Init+0xdc>)
 80024e2:	f7ff fed1 	bl	8002288 <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 80024e6:	2100      	movs	r1, #0
 80024e8:	481e      	ldr	r0, [pc, #120]	; (8002564 <MX_TIM3_Init+0xdc>)
 80024ea:	f7ff ff65 	bl	80023b8 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH4);
 80024ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80024f2:	481c      	ldr	r0, [pc, #112]	; (8002564 <MX_TIM3_Init+0xdc>)
 80024f4:	f7ff ff1c 	bl	8002330 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 80024f8:	2360      	movs	r3, #96	; 0x60
 80024fa:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80024fc:	2300      	movs	r3, #0
 80024fe:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8002500:	2300      	movs	r3, #0
 8002502:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 10;
 8002504:	230a      	movs	r3, #10
 8002506:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8002508:	2300      	movs	r3, #0
 800250a:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 800250c:	f107 031c 	add.w	r3, r7, #28
 8002510:	461a      	mov	r2, r3
 8002512:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002516:	4813      	ldr	r0, [pc, #76]	; (8002564 <MX_TIM3_Init+0xdc>)
 8002518:	f004 fbf8 	bl	8006d0c <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM3, LL_TIM_CHANNEL_CH4);
 800251c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002520:	4810      	ldr	r0, [pc, #64]	; (8002564 <MX_TIM3_Init+0xdc>)
 8002522:	f7ff fec1 	bl	80022a8 <LL_TIM_OC_EnableFast>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8002526:	2100      	movs	r1, #0
 8002528:	480e      	ldr	r0, [pc, #56]	; (8002564 <MX_TIM3_Init+0xdc>)
 800252a:	f7ff ff5a 	bl	80023e2 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 800252e:	480d      	ldr	r0, [pc, #52]	; (8002564 <MX_TIM3_Init+0xdc>)
 8002530:	f7ff ff6a 	bl	8002408 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8002534:	2002      	movs	r0, #2
 8002536:	f7ff ff77 	bl	8002428 <LL_AHB1_GRP1_EnableClock>
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
  GPIO_InitStruct.Pin = BUZZER_TIM3_CH4_Pin;
 800253a:	2302      	movs	r3, #2
 800253c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800253e:	2302      	movs	r3, #2
 8002540:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002542:	2300      	movs	r3, #0
 8002544:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002546:	2300      	movs	r3, #0
 8002548:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800254a:	2300      	movs	r3, #0
 800254c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 800254e:	2302      	movs	r3, #2
 8002550:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(BUZZER_TIM3_CH4_GPIO_Port, &GPIO_InitStruct);
 8002552:	1d3b      	adds	r3, r7, #4
 8002554:	4619      	mov	r1, r3
 8002556:	4804      	ldr	r0, [pc, #16]	; (8002568 <MX_TIM3_Init+0xe0>)
 8002558:	f004 f91f 	bl	800679a <LL_GPIO_Init>

}
 800255c:	bf00      	nop
 800255e:	3750      	adds	r7, #80	; 0x50
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	40000400 	.word	0x40000400
 8002568:	40020400 	.word	0x40020400

0800256c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b08e      	sub	sp, #56	; 0x38
 8002570:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002572:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002576:	2200      	movs	r2, #0
 8002578:	601a      	str	r2, [r3, #0]
 800257a:	605a      	str	r2, [r3, #4]
 800257c:	609a      	str	r2, [r3, #8]
 800257e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002580:	f107 0320 	add.w	r3, r7, #32
 8002584:	2200      	movs	r2, #0
 8002586:	601a      	str	r2, [r3, #0]
 8002588:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800258a:	1d3b      	adds	r3, r7, #4
 800258c:	2200      	movs	r2, #0
 800258e:	601a      	str	r2, [r3, #0]
 8002590:	605a      	str	r2, [r3, #4]
 8002592:	609a      	str	r2, [r3, #8]
 8002594:	60da      	str	r2, [r3, #12]
 8002596:	611a      	str	r2, [r3, #16]
 8002598:	615a      	str	r2, [r3, #20]
 800259a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800259c:	4b3f      	ldr	r3, [pc, #252]	; (800269c <MX_TIM5_Init+0x130>)
 800259e:	4a40      	ldr	r2, [pc, #256]	; (80026a0 <MX_TIM5_Init+0x134>)
 80025a0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80025a2:	4b3e      	ldr	r3, [pc, #248]	; (800269c <MX_TIM5_Init+0x130>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025a8:	4b3c      	ldr	r3, [pc, #240]	; (800269c <MX_TIM5_Init+0x130>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 41999;
 80025ae:	4b3b      	ldr	r3, [pc, #236]	; (800269c <MX_TIM5_Init+0x130>)
 80025b0:	f24a 420f 	movw	r2, #41999	; 0xa40f
 80025b4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025b6:	4b39      	ldr	r3, [pc, #228]	; (800269c <MX_TIM5_Init+0x130>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80025bc:	4b37      	ldr	r3, [pc, #220]	; (800269c <MX_TIM5_Init+0x130>)
 80025be:	2280      	movs	r2, #128	; 0x80
 80025c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80025c2:	4836      	ldr	r0, [pc, #216]	; (800269c <MX_TIM5_Init+0x130>)
 80025c4:	f002 fb38 	bl	8004c38 <HAL_TIM_Base_Init>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d001      	beq.n	80025d2 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 80025ce:	f7ff fc01 	bl	8001dd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025d6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80025d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80025dc:	4619      	mov	r1, r3
 80025de:	482f      	ldr	r0, [pc, #188]	; (800269c <MX_TIM5_Init+0x130>)
 80025e0:	f002 fc94 	bl	8004f0c <HAL_TIM_ConfigClockSource>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d001      	beq.n	80025ee <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 80025ea:	f7ff fbf3 	bl	8001dd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80025ee:	482b      	ldr	r0, [pc, #172]	; (800269c <MX_TIM5_Init+0x130>)
 80025f0:	f002 fb71 	bl	8004cd6 <HAL_TIM_PWM_Init>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d001      	beq.n	80025fe <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 80025fa:	f7ff fbeb 	bl	8001dd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025fe:	2300      	movs	r3, #0
 8002600:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002602:	2300      	movs	r3, #0
 8002604:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002606:	f107 0320 	add.w	r3, r7, #32
 800260a:	4619      	mov	r1, r3
 800260c:	4823      	ldr	r0, [pc, #140]	; (800269c <MX_TIM5_Init+0x130>)
 800260e:	f003 f82f 	bl	8005670 <HAL_TIMEx_MasterConfigSynchronization>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d001      	beq.n	800261c <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8002618:	f7ff fbdc 	bl	8001dd4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800261c:	2360      	movs	r3, #96	; 0x60
 800261e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002620:	2300      	movs	r3, #0
 8002622:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002624:	2300      	movs	r3, #0
 8002626:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8002628:	2304      	movs	r3, #4
 800262a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800262c:	1d3b      	adds	r3, r7, #4
 800262e:	2200      	movs	r2, #0
 8002630:	4619      	mov	r1, r3
 8002632:	481a      	ldr	r0, [pc, #104]	; (800269c <MX_TIM5_Init+0x130>)
 8002634:	f002 fba8 	bl	8004d88 <HAL_TIM_PWM_ConfigChannel>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d001      	beq.n	8002642 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 800263e:	f7ff fbc9 	bl	8001dd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002642:	1d3b      	adds	r3, r7, #4
 8002644:	2204      	movs	r2, #4
 8002646:	4619      	mov	r1, r3
 8002648:	4814      	ldr	r0, [pc, #80]	; (800269c <MX_TIM5_Init+0x130>)
 800264a:	f002 fb9d 	bl	8004d88 <HAL_TIM_PWM_ConfigChannel>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d001      	beq.n	8002658 <MX_TIM5_Init+0xec>
  {
    Error_Handler();
 8002654:	f7ff fbbe 	bl	8001dd4 <Error_Handler>
  }
  sConfigOC.Pulse = 31500;
 8002658:	f647 330c 	movw	r3, #31500	; 0x7b0c
 800265c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800265e:	1d3b      	adds	r3, r7, #4
 8002660:	2208      	movs	r2, #8
 8002662:	4619      	mov	r1, r3
 8002664:	480d      	ldr	r0, [pc, #52]	; (800269c <MX_TIM5_Init+0x130>)
 8002666:	f002 fb8f 	bl	8004d88 <HAL_TIM_PWM_ConfigChannel>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d001      	beq.n	8002674 <MX_TIM5_Init+0x108>
  {
    Error_Handler();
 8002670:	f7ff fbb0 	bl	8001dd4 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8002674:	2300      	movs	r3, #0
 8002676:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002678:	1d3b      	adds	r3, r7, #4
 800267a:	220c      	movs	r2, #12
 800267c:	4619      	mov	r1, r3
 800267e:	4807      	ldr	r0, [pc, #28]	; (800269c <MX_TIM5_Init+0x130>)
 8002680:	f002 fb82 	bl	8004d88 <HAL_TIM_PWM_ConfigChannel>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d001      	beq.n	800268e <MX_TIM5_Init+0x122>
  {
    Error_Handler();
 800268a:	f7ff fba3 	bl	8001dd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800268e:	4803      	ldr	r0, [pc, #12]	; (800269c <MX_TIM5_Init+0x130>)
 8002690:	f000 f82a 	bl	80026e8 <HAL_TIM_MspPostInit>

}
 8002694:	bf00      	nop
 8002696:	3738      	adds	r7, #56	; 0x38
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	2000031c 	.word	0x2000031c
 80026a0:	40000c00 	.word	0x40000c00

080026a4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b085      	sub	sp, #20
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM5)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a0b      	ldr	r2, [pc, #44]	; (80026e0 <HAL_TIM_Base_MspInit+0x3c>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d10d      	bne.n	80026d2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80026b6:	2300      	movs	r3, #0
 80026b8:	60fb      	str	r3, [r7, #12]
 80026ba:	4b0a      	ldr	r3, [pc, #40]	; (80026e4 <HAL_TIM_Base_MspInit+0x40>)
 80026bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026be:	4a09      	ldr	r2, [pc, #36]	; (80026e4 <HAL_TIM_Base_MspInit+0x40>)
 80026c0:	f043 0308 	orr.w	r3, r3, #8
 80026c4:	6413      	str	r3, [r2, #64]	; 0x40
 80026c6:	4b07      	ldr	r3, [pc, #28]	; (80026e4 <HAL_TIM_Base_MspInit+0x40>)
 80026c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ca:	f003 0308 	and.w	r3, r3, #8
 80026ce:	60fb      	str	r3, [r7, #12]
 80026d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 80026d2:	bf00      	nop
 80026d4:	3714      	adds	r7, #20
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	40000c00 	.word	0x40000c00
 80026e4:	40023800 	.word	0x40023800

080026e8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b088      	sub	sp, #32
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026f0:	f107 030c 	add.w	r3, r7, #12
 80026f4:	2200      	movs	r2, #0
 80026f6:	601a      	str	r2, [r3, #0]
 80026f8:	605a      	str	r2, [r3, #4]
 80026fa:	609a      	str	r2, [r3, #8]
 80026fc:	60da      	str	r2, [r3, #12]
 80026fe:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM5)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a12      	ldr	r2, [pc, #72]	; (8002750 <HAL_TIM_MspPostInit+0x68>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d11d      	bne.n	8002746 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800270a:	2300      	movs	r3, #0
 800270c:	60bb      	str	r3, [r7, #8]
 800270e:	4b11      	ldr	r3, [pc, #68]	; (8002754 <HAL_TIM_MspPostInit+0x6c>)
 8002710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002712:	4a10      	ldr	r2, [pc, #64]	; (8002754 <HAL_TIM_MspPostInit+0x6c>)
 8002714:	f043 0301 	orr.w	r3, r3, #1
 8002718:	6313      	str	r3, [r2, #48]	; 0x30
 800271a:	4b0e      	ldr	r3, [pc, #56]	; (8002754 <HAL_TIM_MspPostInit+0x6c>)
 800271c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271e:	f003 0301 	and.w	r3, r3, #1
 8002722:	60bb      	str	r3, [r7, #8]
 8002724:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    PA2     ------> TIM5_CH3
    PA3     ------> TIM5_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002726:	230f      	movs	r3, #15
 8002728:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800272a:	2302      	movs	r3, #2
 800272c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800272e:	2300      	movs	r3, #0
 8002730:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002732:	2300      	movs	r3, #0
 8002734:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002736:	2302      	movs	r3, #2
 8002738:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800273a:	f107 030c 	add.w	r3, r7, #12
 800273e:	4619      	mov	r1, r3
 8002740:	4805      	ldr	r0, [pc, #20]	; (8002758 <HAL_TIM_MspPostInit+0x70>)
 8002742:	f001 fc45 	bl	8003fd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8002746:	bf00      	nop
 8002748:	3720      	adds	r7, #32
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	40000c00 	.word	0x40000c00
 8002754:	40023800 	.word	0x40023800
 8002758:	40020000 	.word	0x40020000

0800275c <__NVIC_GetPriorityGrouping>:
{
 800275c:	b480      	push	{r7}
 800275e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002760:	4b04      	ldr	r3, [pc, #16]	; (8002774 <__NVIC_GetPriorityGrouping+0x18>)
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	0a1b      	lsrs	r3, r3, #8
 8002766:	f003 0307 	and.w	r3, r3, #7
}
 800276a:	4618      	mov	r0, r3
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr
 8002774:	e000ed00 	.word	0xe000ed00

08002778 <__NVIC_EnableIRQ>:
{
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	4603      	mov	r3, r0
 8002780:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002786:	2b00      	cmp	r3, #0
 8002788:	db0b      	blt.n	80027a2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800278a:	79fb      	ldrb	r3, [r7, #7]
 800278c:	f003 021f 	and.w	r2, r3, #31
 8002790:	4907      	ldr	r1, [pc, #28]	; (80027b0 <__NVIC_EnableIRQ+0x38>)
 8002792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002796:	095b      	lsrs	r3, r3, #5
 8002798:	2001      	movs	r0, #1
 800279a:	fa00 f202 	lsl.w	r2, r0, r2
 800279e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80027a2:	bf00      	nop
 80027a4:	370c      	adds	r7, #12
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr
 80027ae:	bf00      	nop
 80027b0:	e000e100 	.word	0xe000e100

080027b4 <__NVIC_SetPriority>:
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	4603      	mov	r3, r0
 80027bc:	6039      	str	r1, [r7, #0]
 80027be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	db0a      	blt.n	80027de <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	b2da      	uxtb	r2, r3
 80027cc:	490c      	ldr	r1, [pc, #48]	; (8002800 <__NVIC_SetPriority+0x4c>)
 80027ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d2:	0112      	lsls	r2, r2, #4
 80027d4:	b2d2      	uxtb	r2, r2
 80027d6:	440b      	add	r3, r1
 80027d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80027dc:	e00a      	b.n	80027f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	b2da      	uxtb	r2, r3
 80027e2:	4908      	ldr	r1, [pc, #32]	; (8002804 <__NVIC_SetPriority+0x50>)
 80027e4:	79fb      	ldrb	r3, [r7, #7]
 80027e6:	f003 030f 	and.w	r3, r3, #15
 80027ea:	3b04      	subs	r3, #4
 80027ec:	0112      	lsls	r2, r2, #4
 80027ee:	b2d2      	uxtb	r2, r2
 80027f0:	440b      	add	r3, r1
 80027f2:	761a      	strb	r2, [r3, #24]
}
 80027f4:	bf00      	nop
 80027f6:	370c      	adds	r7, #12
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr
 8002800:	e000e100 	.word	0xe000e100
 8002804:	e000ed00 	.word	0xe000ed00

08002808 <NVIC_EncodePriority>:
{
 8002808:	b480      	push	{r7}
 800280a:	b089      	sub	sp, #36	; 0x24
 800280c:	af00      	add	r7, sp, #0
 800280e:	60f8      	str	r0, [r7, #12]
 8002810:	60b9      	str	r1, [r7, #8]
 8002812:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	f003 0307 	and.w	r3, r3, #7
 800281a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800281c:	69fb      	ldr	r3, [r7, #28]
 800281e:	f1c3 0307 	rsb	r3, r3, #7
 8002822:	2b04      	cmp	r3, #4
 8002824:	bf28      	it	cs
 8002826:	2304      	movcs	r3, #4
 8002828:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	3304      	adds	r3, #4
 800282e:	2b06      	cmp	r3, #6
 8002830:	d902      	bls.n	8002838 <NVIC_EncodePriority+0x30>
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	3b03      	subs	r3, #3
 8002836:	e000      	b.n	800283a <NVIC_EncodePriority+0x32>
 8002838:	2300      	movs	r3, #0
 800283a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800283c:	f04f 32ff 	mov.w	r2, #4294967295
 8002840:	69bb      	ldr	r3, [r7, #24]
 8002842:	fa02 f303 	lsl.w	r3, r2, r3
 8002846:	43da      	mvns	r2, r3
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	401a      	ands	r2, r3
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002850:	f04f 31ff 	mov.w	r1, #4294967295
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	fa01 f303 	lsl.w	r3, r1, r3
 800285a:	43d9      	mvns	r1, r3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002860:	4313      	orrs	r3, r2
}
 8002862:	4618      	mov	r0, r3
 8002864:	3724      	adds	r7, #36	; 0x24
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr

0800286e <LL_USART_Enable>:
{
 800286e:	b480      	push	{r7}
 8002870:	b083      	sub	sp, #12
 8002872:	af00      	add	r7, sp, #0
 8002874:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	60da      	str	r2, [r3, #12]
}
 8002882:	bf00      	nop
 8002884:	370c      	adds	r7, #12
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr

0800288e <LL_USART_ConfigAsyncMode>:
{
 800288e:	b480      	push	{r7}
 8002890:	b083      	sub	sp, #12
 8002892:	af00      	add	r7, sp, #0
 8002894:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	691b      	ldr	r3, [r3, #16]
 800289a:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	695b      	ldr	r3, [r3, #20]
 80028a6:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	615a      	str	r2, [r3, #20]
}
 80028ae:	bf00      	nop
 80028b0:	370c      	adds	r7, #12
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr
	...

080028bc <LL_AHB1_GRP1_EnableClock>:
{
 80028bc:	b480      	push	{r7}
 80028be:	b085      	sub	sp, #20
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80028c4:	4b08      	ldr	r3, [pc, #32]	; (80028e8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80028c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028c8:	4907      	ldr	r1, [pc, #28]	; (80028e8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80028d0:	4b05      	ldr	r3, [pc, #20]	; (80028e8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80028d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	4013      	ands	r3, r2
 80028d8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80028da:	68fb      	ldr	r3, [r7, #12]
}
 80028dc:	bf00      	nop
 80028de:	3714      	adds	r7, #20
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr
 80028e8:	40023800 	.word	0x40023800

080028ec <LL_APB1_GRP1_EnableClock>:
{
 80028ec:	b480      	push	{r7}
 80028ee:	b085      	sub	sp, #20
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80028f4:	4b08      	ldr	r3, [pc, #32]	; (8002918 <LL_APB1_GRP1_EnableClock+0x2c>)
 80028f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028f8:	4907      	ldr	r1, [pc, #28]	; (8002918 <LL_APB1_GRP1_EnableClock+0x2c>)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002900:	4b05      	ldr	r3, [pc, #20]	; (8002918 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002902:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	4013      	ands	r3, r2
 8002908:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800290a:	68fb      	ldr	r3, [r7, #12]
}
 800290c:	bf00      	nop
 800290e:	3714      	adds	r7, #20
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr
 8002918:	40023800 	.word	0x40023800

0800291c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800291c:	b480      	push	{r7}
 800291e:	b085      	sub	sp, #20
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002924:	4b08      	ldr	r3, [pc, #32]	; (8002948 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002926:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002928:	4907      	ldr	r1, [pc, #28]	; (8002948 <LL_APB2_GRP1_EnableClock+0x2c>)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4313      	orrs	r3, r2
 800292e:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002930:	4b05      	ldr	r3, [pc, #20]	; (8002948 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002932:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	4013      	ands	r3, r2
 8002938:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800293a:	68fb      	ldr	r3, [r7, #12]
}
 800293c:	bf00      	nop
 800293e:	3714      	adds	r7, #20
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr
 8002948:	40023800 	.word	0x40023800

0800294c <MX_UART4_Init>:

UART_HandleTypeDef huart5;

/* UART4 init function */
void MX_UART4_Init(void)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b08e      	sub	sp, #56	; 0x38
 8002950:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART4_Init 0 */

  /* USER CODE END UART4_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8002952:	f107 031c 	add.w	r3, r7, #28
 8002956:	2200      	movs	r2, #0
 8002958:	601a      	str	r2, [r3, #0]
 800295a:	605a      	str	r2, [r3, #4]
 800295c:	609a      	str	r2, [r3, #8]
 800295e:	60da      	str	r2, [r3, #12]
 8002960:	611a      	str	r2, [r3, #16]
 8002962:	615a      	str	r2, [r3, #20]
 8002964:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002966:	1d3b      	adds	r3, r7, #4
 8002968:	2200      	movs	r2, #0
 800296a:	601a      	str	r2, [r3, #0]
 800296c:	605a      	str	r2, [r3, #4]
 800296e:	609a      	str	r2, [r3, #8]
 8002970:	60da      	str	r2, [r3, #12]
 8002972:	611a      	str	r2, [r3, #16]
 8002974:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART4);
 8002976:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800297a:	f7ff ffb7 	bl	80028ec <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800297e:	2004      	movs	r0, #4
 8002980:	f7ff ff9c 	bl	80028bc <LL_AHB1_GRP1_EnableClock>
  /**UART4 GPIO Configuration
  PC10   ------> UART4_TX
  PC11   ------> UART4_RX
  */
  GPIO_InitStruct.Pin = GPS_UART4_TX_Pin|GPS_UART4_RX_Pin;
 8002984:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002988:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800298a:	2302      	movs	r3, #2
 800298c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800298e:	2303      	movs	r3, #3
 8002990:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002992:	2300      	movs	r3, #0
 8002994:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002996:	2300      	movs	r3, #0
 8002998:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 800299a:	2308      	movs	r3, #8
 800299c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800299e:	1d3b      	adds	r3, r7, #4
 80029a0:	4619      	mov	r1, r3
 80029a2:	4819      	ldr	r0, [pc, #100]	; (8002a08 <MX_UART4_Init+0xbc>)
 80029a4:	f003 fef9 	bl	800679a <LL_GPIO_Init>

  /* UART4 interrupt Init */
  NVIC_SetPriority(UART4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80029a8:	f7ff fed8 	bl	800275c <__NVIC_GetPriorityGrouping>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2200      	movs	r2, #0
 80029b0:	2100      	movs	r1, #0
 80029b2:	4618      	mov	r0, r3
 80029b4:	f7ff ff28 	bl	8002808 <NVIC_EncodePriority>
 80029b8:	4603      	mov	r3, r0
 80029ba:	4619      	mov	r1, r3
 80029bc:	2034      	movs	r0, #52	; 0x34
 80029be:	f7ff fef9 	bl	80027b4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART4_IRQn);
 80029c2:	2034      	movs	r0, #52	; 0x34
 80029c4:	f7ff fed8 	bl	8002778 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  USART_InitStruct.BaudRate = 9600;
 80029c8:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80029cc:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80029ce:	2300      	movs	r3, #0
 80029d0:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80029d2:	2300      	movs	r3, #0
 80029d4:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80029d6:	2300      	movs	r3, #0
 80029d8:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80029da:	230c      	movs	r3, #12
 80029dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80029de:	2300      	movs	r3, #0
 80029e0:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80029e2:	2300      	movs	r3, #0
 80029e4:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(UART4, &USART_InitStruct);
 80029e6:	f107 031c 	add.w	r3, r7, #28
 80029ea:	4619      	mov	r1, r3
 80029ec:	4807      	ldr	r0, [pc, #28]	; (8002a0c <MX_UART4_Init+0xc0>)
 80029ee:	f004 fdd9 	bl	80075a4 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART4);
 80029f2:	4806      	ldr	r0, [pc, #24]	; (8002a0c <MX_UART4_Init+0xc0>)
 80029f4:	f7ff ff4b 	bl	800288e <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART4);
 80029f8:	4804      	ldr	r0, [pc, #16]	; (8002a0c <MX_UART4_Init+0xc0>)
 80029fa:	f7ff ff38 	bl	800286e <LL_USART_Enable>
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80029fe:	bf00      	nop
 8002a00:	3738      	adds	r7, #56	; 0x38
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	40020800 	.word	0x40020800
 8002a0c:	40004c00 	.word	0x40004c00

08002a10 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002a14:	4b11      	ldr	r3, [pc, #68]	; (8002a5c <MX_UART5_Init+0x4c>)
 8002a16:	4a12      	ldr	r2, [pc, #72]	; (8002a60 <MX_UART5_Init+0x50>)
 8002a18:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8002a1a:	4b10      	ldr	r3, [pc, #64]	; (8002a5c <MX_UART5_Init+0x4c>)
 8002a1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002a20:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002a22:	4b0e      	ldr	r3, [pc, #56]	; (8002a5c <MX_UART5_Init+0x4c>)
 8002a24:	2200      	movs	r2, #0
 8002a26:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002a28:	4b0c      	ldr	r3, [pc, #48]	; (8002a5c <MX_UART5_Init+0x4c>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002a2e:	4b0b      	ldr	r3, [pc, #44]	; (8002a5c <MX_UART5_Init+0x4c>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_RX;
 8002a34:	4b09      	ldr	r3, [pc, #36]	; (8002a5c <MX_UART5_Init+0x4c>)
 8002a36:	2204      	movs	r2, #4
 8002a38:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a3a:	4b08      	ldr	r3, [pc, #32]	; (8002a5c <MX_UART5_Init+0x4c>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a40:	4b06      	ldr	r3, [pc, #24]	; (8002a5c <MX_UART5_Init+0x4c>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002a46:	4805      	ldr	r0, [pc, #20]	; (8002a5c <MX_UART5_Init+0x4c>)
 8002a48:	f002 fe8e 	bl	8005768 <HAL_UART_Init>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d001      	beq.n	8002a56 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8002a52:	f7ff f9bf 	bl	8001dd4 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8002a56:	bf00      	nop
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	20000364 	.word	0x20000364
 8002a60:	40005000 	.word	0x40005000

08002a64 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b08e      	sub	sp, #56	; 0x38
 8002a68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART6_Init 0 */

  /* USER CODE END USART6_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8002a6a:	f107 031c 	add.w	r3, r7, #28
 8002a6e:	2200      	movs	r2, #0
 8002a70:	601a      	str	r2, [r3, #0]
 8002a72:	605a      	str	r2, [r3, #4]
 8002a74:	609a      	str	r2, [r3, #8]
 8002a76:	60da      	str	r2, [r3, #12]
 8002a78:	611a      	str	r2, [r3, #16]
 8002a7a:	615a      	str	r2, [r3, #20]
 8002a7c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a7e:	1d3b      	adds	r3, r7, #4
 8002a80:	2200      	movs	r2, #0
 8002a82:	601a      	str	r2, [r3, #0]
 8002a84:	605a      	str	r2, [r3, #4]
 8002a86:	609a      	str	r2, [r3, #8]
 8002a88:	60da      	str	r2, [r3, #12]
 8002a8a:	611a      	str	r2, [r3, #16]
 8002a8c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART6);
 8002a8e:	2020      	movs	r0, #32
 8002a90:	f7ff ff44 	bl	800291c <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8002a94:	2004      	movs	r0, #4
 8002a96:	f7ff ff11 	bl	80028bc <LL_AHB1_GRP1_EnableClock>
  /**USART6 GPIO Configuration
  PC6   ------> USART6_TX
  PC7   ------> USART6_RX
  */
  GPIO_InitStruct.Pin = TELEMETRI_USART6_TX_Pin|TELEMETRI_USART6_RX_Pin;
 8002a9a:	23c0      	movs	r3, #192	; 0xc0
 8002a9c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002a9e:	2302      	movs	r3, #2
 8002aa0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8002aae:	2308      	movs	r3, #8
 8002ab0:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ab2:	1d3b      	adds	r3, r7, #4
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	4819      	ldr	r0, [pc, #100]	; (8002b1c <MX_USART6_UART_Init+0xb8>)
 8002ab8:	f003 fe6f 	bl	800679a <LL_GPIO_Init>

  /* USART6 interrupt Init */
  NVIC_SetPriority(USART6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002abc:	f7ff fe4e 	bl	800275c <__NVIC_GetPriorityGrouping>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	2100      	movs	r1, #0
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f7ff fe9e 	bl	8002808 <NVIC_EncodePriority>
 8002acc:	4603      	mov	r3, r0
 8002ace:	4619      	mov	r1, r3
 8002ad0:	2047      	movs	r0, #71	; 0x47
 8002ad2:	f7ff fe6f 	bl	80027b4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART6_IRQn);
 8002ad6:	2047      	movs	r0, #71	; 0x47
 8002ad8:	f7ff fe4e 	bl	8002778 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  USART_InitStruct.BaudRate = 57600;
 8002adc:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8002ae0:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002aea:	2300      	movs	r3, #0
 8002aec:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002aee:	230c      	movs	r3, #12
 8002af0:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002af2:	2300      	movs	r3, #0
 8002af4:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002af6:	2300      	movs	r3, #0
 8002af8:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART6, &USART_InitStruct);
 8002afa:	f107 031c 	add.w	r3, r7, #28
 8002afe:	4619      	mov	r1, r3
 8002b00:	4807      	ldr	r0, [pc, #28]	; (8002b20 <MX_USART6_UART_Init+0xbc>)
 8002b02:	f004 fd4f 	bl	80075a4 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART6);
 8002b06:	4806      	ldr	r0, [pc, #24]	; (8002b20 <MX_USART6_UART_Init+0xbc>)
 8002b08:	f7ff fec1 	bl	800288e <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART6);
 8002b0c:	4804      	ldr	r0, [pc, #16]	; (8002b20 <MX_USART6_UART_Init+0xbc>)
 8002b0e:	f7ff feae 	bl	800286e <LL_USART_Enable>
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002b12:	bf00      	nop
 8002b14:	3738      	adds	r7, #56	; 0x38
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	40020800 	.word	0x40020800
 8002b20:	40011400 	.word	0x40011400

08002b24 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b08a      	sub	sp, #40	; 0x28
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b2c:	f107 0314 	add.w	r3, r7, #20
 8002b30:	2200      	movs	r2, #0
 8002b32:	601a      	str	r2, [r3, #0]
 8002b34:	605a      	str	r2, [r3, #4]
 8002b36:	609a      	str	r2, [r3, #8]
 8002b38:	60da      	str	r2, [r3, #12]
 8002b3a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a2c      	ldr	r2, [pc, #176]	; (8002bf4 <HAL_UART_MspInit+0xd0>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d152      	bne.n	8002bec <HAL_UART_MspInit+0xc8>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8002b46:	2300      	movs	r3, #0
 8002b48:	613b      	str	r3, [r7, #16]
 8002b4a:	4b2b      	ldr	r3, [pc, #172]	; (8002bf8 <HAL_UART_MspInit+0xd4>)
 8002b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4e:	4a2a      	ldr	r2, [pc, #168]	; (8002bf8 <HAL_UART_MspInit+0xd4>)
 8002b50:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b54:	6413      	str	r3, [r2, #64]	; 0x40
 8002b56:	4b28      	ldr	r3, [pc, #160]	; (8002bf8 <HAL_UART_MspInit+0xd4>)
 8002b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b5e:	613b      	str	r3, [r7, #16]
 8002b60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b62:	2300      	movs	r3, #0
 8002b64:	60fb      	str	r3, [r7, #12]
 8002b66:	4b24      	ldr	r3, [pc, #144]	; (8002bf8 <HAL_UART_MspInit+0xd4>)
 8002b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6a:	4a23      	ldr	r2, [pc, #140]	; (8002bf8 <HAL_UART_MspInit+0xd4>)
 8002b6c:	f043 0304 	orr.w	r3, r3, #4
 8002b70:	6313      	str	r3, [r2, #48]	; 0x30
 8002b72:	4b21      	ldr	r3, [pc, #132]	; (8002bf8 <HAL_UART_MspInit+0xd4>)
 8002b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b76:	f003 0304 	and.w	r3, r3, #4
 8002b7a:	60fb      	str	r3, [r7, #12]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b7e:	2300      	movs	r3, #0
 8002b80:	60bb      	str	r3, [r7, #8]
 8002b82:	4b1d      	ldr	r3, [pc, #116]	; (8002bf8 <HAL_UART_MspInit+0xd4>)
 8002b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b86:	4a1c      	ldr	r2, [pc, #112]	; (8002bf8 <HAL_UART_MspInit+0xd4>)
 8002b88:	f043 0308 	orr.w	r3, r3, #8
 8002b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b8e:	4b1a      	ldr	r3, [pc, #104]	; (8002bf8 <HAL_UART_MspInit+0xd4>)
 8002b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b92:	f003 0308 	and.w	r3, r3, #8
 8002b96:	60bb      	str	r3, [r7, #8]
 8002b98:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002b9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ba0:	2302      	movs	r3, #2
 8002ba2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ba8:	2303      	movs	r3, #3
 8002baa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002bac:	2308      	movs	r3, #8
 8002bae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bb0:	f107 0314 	add.w	r3, r7, #20
 8002bb4:	4619      	mov	r1, r3
 8002bb6:	4811      	ldr	r0, [pc, #68]	; (8002bfc <HAL_UART_MspInit+0xd8>)
 8002bb8:	f001 fa0a 	bl	8003fd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002bbc:	2304      	movs	r3, #4
 8002bbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bc0:	2302      	movs	r3, #2
 8002bc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bc8:	2303      	movs	r3, #3
 8002bca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002bcc:	2308      	movs	r3, #8
 8002bce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002bd0:	f107 0314 	add.w	r3, r7, #20
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	480a      	ldr	r0, [pc, #40]	; (8002c00 <HAL_UART_MspInit+0xdc>)
 8002bd8:	f001 f9fa 	bl	8003fd0 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8002bdc:	2200      	movs	r2, #0
 8002bde:	2100      	movs	r1, #0
 8002be0:	2035      	movs	r0, #53	; 0x35
 8002be2:	f000 fdbc 	bl	800375e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8002be6:	2035      	movs	r0, #53	; 0x35
 8002be8:	f000 fdd5 	bl	8003796 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
}
 8002bec:	bf00      	nop
 8002bee:	3728      	adds	r7, #40	; 0x28
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	40005000 	.word	0x40005000
 8002bf8:	40023800 	.word	0x40023800
 8002bfc:	40020800 	.word	0x40020800
 8002c00:	40020c00 	.word	0x40020c00

08002c04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002c04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c3c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002c08:	480d      	ldr	r0, [pc, #52]	; (8002c40 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002c0a:	490e      	ldr	r1, [pc, #56]	; (8002c44 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002c0c:	4a0e      	ldr	r2, [pc, #56]	; (8002c48 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002c0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c10:	e002      	b.n	8002c18 <LoopCopyDataInit>

08002c12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c16:	3304      	adds	r3, #4

08002c18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c1c:	d3f9      	bcc.n	8002c12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c1e:	4a0b      	ldr	r2, [pc, #44]	; (8002c4c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002c20:	4c0b      	ldr	r4, [pc, #44]	; (8002c50 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002c22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c24:	e001      	b.n	8002c2a <LoopFillZerobss>

08002c26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c28:	3204      	adds	r2, #4

08002c2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c2c:	d3fb      	bcc.n	8002c26 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002c2e:	f7ff fb19 	bl	8002264 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c32:	f004 fd3d 	bl	80076b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c36:	f7fe fe13 	bl	8001860 <main>
  bx  lr    
 8002c3a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002c3c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002c40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c44:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002c48:	0800a5fc 	.word	0x0800a5fc
  ldr r2, =_sbss
 8002c4c:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002c50:	200003bc 	.word	0x200003bc

08002c54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c54:	e7fe      	b.n	8002c54 <ADC_IRQHandler>
	...

08002c58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c5c:	4b0e      	ldr	r3, [pc, #56]	; (8002c98 <HAL_Init+0x40>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a0d      	ldr	r2, [pc, #52]	; (8002c98 <HAL_Init+0x40>)
 8002c62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c68:	4b0b      	ldr	r3, [pc, #44]	; (8002c98 <HAL_Init+0x40>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a0a      	ldr	r2, [pc, #40]	; (8002c98 <HAL_Init+0x40>)
 8002c6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c74:	4b08      	ldr	r3, [pc, #32]	; (8002c98 <HAL_Init+0x40>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a07      	ldr	r2, [pc, #28]	; (8002c98 <HAL_Init+0x40>)
 8002c7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c80:	2003      	movs	r0, #3
 8002c82:	f000 fd61 	bl	8003748 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c86:	2000      	movs	r0, #0
 8002c88:	f000 f808 	bl	8002c9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c8c:	f7ff f8a8 	bl	8001de0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c90:	2300      	movs	r3, #0
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	40023c00 	.word	0x40023c00

08002c9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b082      	sub	sp, #8
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ca4:	4b12      	ldr	r3, [pc, #72]	; (8002cf0 <HAL_InitTick+0x54>)
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	4b12      	ldr	r3, [pc, #72]	; (8002cf4 <HAL_InitTick+0x58>)
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	4619      	mov	r1, r3
 8002cae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002cb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002cb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f000 fd79 	bl	80037b2 <HAL_SYSTICK_Config>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d001      	beq.n	8002cca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e00e      	b.n	8002ce8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2b0f      	cmp	r3, #15
 8002cce:	d80a      	bhi.n	8002ce6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	6879      	ldr	r1, [r7, #4]
 8002cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8002cd8:	f000 fd41 	bl	800375e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002cdc:	4a06      	ldr	r2, [pc, #24]	; (8002cf8 <HAL_InitTick+0x5c>)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	e000      	b.n	8002ce8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3708      	adds	r7, #8
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	20000000 	.word	0x20000000
 8002cf4:	20000008 	.word	0x20000008
 8002cf8:	20000004 	.word	0x20000004

08002cfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d00:	4b06      	ldr	r3, [pc, #24]	; (8002d1c <HAL_IncTick+0x20>)
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	461a      	mov	r2, r3
 8002d06:	4b06      	ldr	r3, [pc, #24]	; (8002d20 <HAL_IncTick+0x24>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4413      	add	r3, r2
 8002d0c:	4a04      	ldr	r2, [pc, #16]	; (8002d20 <HAL_IncTick+0x24>)
 8002d0e:	6013      	str	r3, [r2, #0]
}
 8002d10:	bf00      	nop
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr
 8002d1a:	bf00      	nop
 8002d1c:	20000008 	.word	0x20000008
 8002d20:	200003a8 	.word	0x200003a8

08002d24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d24:	b480      	push	{r7}
 8002d26:	af00      	add	r7, sp, #0
  return uwTick;
 8002d28:	4b03      	ldr	r3, [pc, #12]	; (8002d38 <HAL_GetTick+0x14>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr
 8002d36:	bf00      	nop
 8002d38:	200003a8 	.word	0x200003a8

08002d3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b084      	sub	sp, #16
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d44:	f7ff ffee 	bl	8002d24 <HAL_GetTick>
 8002d48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d54:	d005      	beq.n	8002d62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d56:	4b0a      	ldr	r3, [pc, #40]	; (8002d80 <HAL_Delay+0x44>)
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	4413      	add	r3, r2
 8002d60:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002d62:	bf00      	nop
 8002d64:	f7ff ffde 	bl	8002d24 <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	68fa      	ldr	r2, [r7, #12]
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d8f7      	bhi.n	8002d64 <HAL_Delay+0x28>
  {
  }
}
 8002d74:	bf00      	nop
 8002d76:	bf00      	nop
 8002d78:	3710      	adds	r7, #16
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	20000008 	.word	0x20000008

08002d84 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b084      	sub	sp, #16
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d101      	bne.n	8002d9a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e033      	b.n	8002e02 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d109      	bne.n	8002db6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f7fe fbb0 	bl	8001508 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2200      	movs	r2, #0
 8002db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dba:	f003 0310 	and.w	r3, r3, #16
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d118      	bne.n	8002df4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002dca:	f023 0302 	bic.w	r3, r3, #2
 8002dce:	f043 0202 	orr.w	r2, r3, #2
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f000 fa68 	bl	80032ac <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2200      	movs	r2, #0
 8002de0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de6:	f023 0303 	bic.w	r3, r3, #3
 8002dea:	f043 0201 	orr.w	r2, r3, #1
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	641a      	str	r2, [r3, #64]	; 0x40
 8002df2:	e001      	b.n	8002df8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3710      	adds	r7, #16
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
	...

08002e0c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b086      	sub	sp, #24
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	60f8      	str	r0, [r7, #12]
 8002e14:	60b9      	str	r1, [r7, #8]
 8002e16:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d101      	bne.n	8002e2a <HAL_ADC_Start_DMA+0x1e>
 8002e26:	2302      	movs	r3, #2
 8002e28:	e0e9      	b.n	8002ffe <HAL_ADC_Start_DMA+0x1f2>
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	f003 0301 	and.w	r3, r3, #1
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d018      	beq.n	8002e72 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	689a      	ldr	r2, [r3, #8]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f042 0201 	orr.w	r2, r2, #1
 8002e4e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002e50:	4b6d      	ldr	r3, [pc, #436]	; (8003008 <HAL_ADC_Start_DMA+0x1fc>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a6d      	ldr	r2, [pc, #436]	; (800300c <HAL_ADC_Start_DMA+0x200>)
 8002e56:	fba2 2303 	umull	r2, r3, r2, r3
 8002e5a:	0c9a      	lsrs	r2, r3, #18
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	005b      	lsls	r3, r3, #1
 8002e60:	4413      	add	r3, r2
 8002e62:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002e64:	e002      	b.n	8002e6c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	3b01      	subs	r3, #1
 8002e6a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d1f9      	bne.n	8002e66 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e80:	d107      	bne.n	8002e92 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	689a      	ldr	r2, [r3, #8]
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e90:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	f003 0301 	and.w	r3, r3, #1
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	f040 80a1 	bne.w	8002fe4 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002eaa:	f023 0301 	bic.w	r3, r3, #1
 8002eae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d007      	beq.n	8002ed4 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002ecc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002edc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ee0:	d106      	bne.n	8002ef0 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ee6:	f023 0206 	bic.w	r2, r3, #6
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	645a      	str	r2, [r3, #68]	; 0x44
 8002eee:	e002      	b.n	8002ef6 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002efe:	4b44      	ldr	r3, [pc, #272]	; (8003010 <HAL_ADC_Start_DMA+0x204>)
 8002f00:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f06:	4a43      	ldr	r2, [pc, #268]	; (8003014 <HAL_ADC_Start_DMA+0x208>)
 8002f08:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f0e:	4a42      	ldr	r2, [pc, #264]	; (8003018 <HAL_ADC_Start_DMA+0x20c>)
 8002f10:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f16:	4a41      	ldr	r2, [pc, #260]	; (800301c <HAL_ADC_Start_DMA+0x210>)
 8002f18:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002f22:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	685a      	ldr	r2, [r3, #4]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002f32:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	689a      	ldr	r2, [r3, #8]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f42:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	334c      	adds	r3, #76	; 0x4c
 8002f4e:	4619      	mov	r1, r3
 8002f50:	68ba      	ldr	r2, [r7, #8]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	f000 fce8 	bl	8003928 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f003 031f 	and.w	r3, r3, #31
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d12a      	bne.n	8002fba <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a2d      	ldr	r2, [pc, #180]	; (8003020 <HAL_ADC_Start_DMA+0x214>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d015      	beq.n	8002f9a <HAL_ADC_Start_DMA+0x18e>
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a2c      	ldr	r2, [pc, #176]	; (8003024 <HAL_ADC_Start_DMA+0x218>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d105      	bne.n	8002f84 <HAL_ADC_Start_DMA+0x178>
 8002f78:	4b25      	ldr	r3, [pc, #148]	; (8003010 <HAL_ADC_Start_DMA+0x204>)
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	f003 031f 	and.w	r3, r3, #31
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d00a      	beq.n	8002f9a <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a27      	ldr	r2, [pc, #156]	; (8003028 <HAL_ADC_Start_DMA+0x21c>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d136      	bne.n	8002ffc <HAL_ADC_Start_DMA+0x1f0>
 8002f8e:	4b20      	ldr	r3, [pc, #128]	; (8003010 <HAL_ADC_Start_DMA+0x204>)
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	f003 0310 	and.w	r3, r3, #16
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d130      	bne.n	8002ffc <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d129      	bne.n	8002ffc <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	689a      	ldr	r2, [r3, #8]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002fb6:	609a      	str	r2, [r3, #8]
 8002fb8:	e020      	b.n	8002ffc <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a18      	ldr	r2, [pc, #96]	; (8003020 <HAL_ADC_Start_DMA+0x214>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d11b      	bne.n	8002ffc <HAL_ADC_Start_DMA+0x1f0>
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d114      	bne.n	8002ffc <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	689a      	ldr	r2, [r3, #8]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002fe0:	609a      	str	r2, [r3, #8]
 8002fe2:	e00b      	b.n	8002ffc <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe8:	f043 0210 	orr.w	r2, r3, #16
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ff4:	f043 0201 	orr.w	r2, r3, #1
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002ffc:	2300      	movs	r3, #0
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3718      	adds	r7, #24
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	20000000 	.word	0x20000000
 800300c:	431bde83 	.word	0x431bde83
 8003010:	40012300 	.word	0x40012300
 8003014:	080034a5 	.word	0x080034a5
 8003018:	0800355f 	.word	0x0800355f
 800301c:	0800357b 	.word	0x0800357b
 8003020:	40012000 	.word	0x40012000
 8003024:	40012100 	.word	0x40012100
 8003028:	40012200 	.word	0x40012200

0800302c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003034:	bf00      	nop
 8003036:	370c      	adds	r7, #12
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr

08003040 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003048:	bf00      	nop
 800304a:	370c      	adds	r7, #12
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr

08003054 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800305c:	bf00      	nop
 800305e:	370c      	adds	r7, #12
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr

08003068 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003068:	b480      	push	{r7}
 800306a:	b085      	sub	sp, #20
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
 8003070:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003072:	2300      	movs	r3, #0
 8003074:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800307c:	2b01      	cmp	r3, #1
 800307e:	d101      	bne.n	8003084 <HAL_ADC_ConfigChannel+0x1c>
 8003080:	2302      	movs	r3, #2
 8003082:	e105      	b.n	8003290 <HAL_ADC_ConfigChannel+0x228>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	2b09      	cmp	r3, #9
 8003092:	d925      	bls.n	80030e0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	68d9      	ldr	r1, [r3, #12]
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	b29b      	uxth	r3, r3
 80030a0:	461a      	mov	r2, r3
 80030a2:	4613      	mov	r3, r2
 80030a4:	005b      	lsls	r3, r3, #1
 80030a6:	4413      	add	r3, r2
 80030a8:	3b1e      	subs	r3, #30
 80030aa:	2207      	movs	r2, #7
 80030ac:	fa02 f303 	lsl.w	r3, r2, r3
 80030b0:	43da      	mvns	r2, r3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	400a      	ands	r2, r1
 80030b8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	68d9      	ldr	r1, [r3, #12]
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	689a      	ldr	r2, [r3, #8]
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	b29b      	uxth	r3, r3
 80030ca:	4618      	mov	r0, r3
 80030cc:	4603      	mov	r3, r0
 80030ce:	005b      	lsls	r3, r3, #1
 80030d0:	4403      	add	r3, r0
 80030d2:	3b1e      	subs	r3, #30
 80030d4:	409a      	lsls	r2, r3
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	430a      	orrs	r2, r1
 80030dc:	60da      	str	r2, [r3, #12]
 80030de:	e022      	b.n	8003126 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	6919      	ldr	r1, [r3, #16]
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	461a      	mov	r2, r3
 80030ee:	4613      	mov	r3, r2
 80030f0:	005b      	lsls	r3, r3, #1
 80030f2:	4413      	add	r3, r2
 80030f4:	2207      	movs	r2, #7
 80030f6:	fa02 f303 	lsl.w	r3, r2, r3
 80030fa:	43da      	mvns	r2, r3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	400a      	ands	r2, r1
 8003102:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	6919      	ldr	r1, [r3, #16]
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	689a      	ldr	r2, [r3, #8]
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	b29b      	uxth	r3, r3
 8003114:	4618      	mov	r0, r3
 8003116:	4603      	mov	r3, r0
 8003118:	005b      	lsls	r3, r3, #1
 800311a:	4403      	add	r3, r0
 800311c:	409a      	lsls	r2, r3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	430a      	orrs	r2, r1
 8003124:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	2b06      	cmp	r3, #6
 800312c:	d824      	bhi.n	8003178 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	685a      	ldr	r2, [r3, #4]
 8003138:	4613      	mov	r3, r2
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	4413      	add	r3, r2
 800313e:	3b05      	subs	r3, #5
 8003140:	221f      	movs	r2, #31
 8003142:	fa02 f303 	lsl.w	r3, r2, r3
 8003146:	43da      	mvns	r2, r3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	400a      	ands	r2, r1
 800314e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	b29b      	uxth	r3, r3
 800315c:	4618      	mov	r0, r3
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	685a      	ldr	r2, [r3, #4]
 8003162:	4613      	mov	r3, r2
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	4413      	add	r3, r2
 8003168:	3b05      	subs	r3, #5
 800316a:	fa00 f203 	lsl.w	r2, r0, r3
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	430a      	orrs	r2, r1
 8003174:	635a      	str	r2, [r3, #52]	; 0x34
 8003176:	e04c      	b.n	8003212 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	2b0c      	cmp	r3, #12
 800317e:	d824      	bhi.n	80031ca <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	685a      	ldr	r2, [r3, #4]
 800318a:	4613      	mov	r3, r2
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	4413      	add	r3, r2
 8003190:	3b23      	subs	r3, #35	; 0x23
 8003192:	221f      	movs	r2, #31
 8003194:	fa02 f303 	lsl.w	r3, r2, r3
 8003198:	43da      	mvns	r2, r3
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	400a      	ands	r2, r1
 80031a0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	b29b      	uxth	r3, r3
 80031ae:	4618      	mov	r0, r3
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	685a      	ldr	r2, [r3, #4]
 80031b4:	4613      	mov	r3, r2
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	4413      	add	r3, r2
 80031ba:	3b23      	subs	r3, #35	; 0x23
 80031bc:	fa00 f203 	lsl.w	r2, r0, r3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	430a      	orrs	r2, r1
 80031c6:	631a      	str	r2, [r3, #48]	; 0x30
 80031c8:	e023      	b.n	8003212 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	685a      	ldr	r2, [r3, #4]
 80031d4:	4613      	mov	r3, r2
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	4413      	add	r3, r2
 80031da:	3b41      	subs	r3, #65	; 0x41
 80031dc:	221f      	movs	r2, #31
 80031de:	fa02 f303 	lsl.w	r3, r2, r3
 80031e2:	43da      	mvns	r2, r3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	400a      	ands	r2, r1
 80031ea:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	4618      	mov	r0, r3
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	685a      	ldr	r2, [r3, #4]
 80031fe:	4613      	mov	r3, r2
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	4413      	add	r3, r2
 8003204:	3b41      	subs	r3, #65	; 0x41
 8003206:	fa00 f203 	lsl.w	r2, r0, r3
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	430a      	orrs	r2, r1
 8003210:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003212:	4b22      	ldr	r3, [pc, #136]	; (800329c <HAL_ADC_ConfigChannel+0x234>)
 8003214:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a21      	ldr	r2, [pc, #132]	; (80032a0 <HAL_ADC_ConfigChannel+0x238>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d109      	bne.n	8003234 <HAL_ADC_ConfigChannel+0x1cc>
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	2b12      	cmp	r3, #18
 8003226:	d105      	bne.n	8003234 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a19      	ldr	r2, [pc, #100]	; (80032a0 <HAL_ADC_ConfigChannel+0x238>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d123      	bne.n	8003286 <HAL_ADC_ConfigChannel+0x21e>
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	2b10      	cmp	r3, #16
 8003244:	d003      	beq.n	800324e <HAL_ADC_ConfigChannel+0x1e6>
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	2b11      	cmp	r3, #17
 800324c:	d11b      	bne.n	8003286 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	2b10      	cmp	r3, #16
 8003260:	d111      	bne.n	8003286 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003262:	4b10      	ldr	r3, [pc, #64]	; (80032a4 <HAL_ADC_ConfigChannel+0x23c>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a10      	ldr	r2, [pc, #64]	; (80032a8 <HAL_ADC_ConfigChannel+0x240>)
 8003268:	fba2 2303 	umull	r2, r3, r2, r3
 800326c:	0c9a      	lsrs	r2, r3, #18
 800326e:	4613      	mov	r3, r2
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	4413      	add	r3, r2
 8003274:	005b      	lsls	r3, r3, #1
 8003276:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003278:	e002      	b.n	8003280 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	3b01      	subs	r3, #1
 800327e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d1f9      	bne.n	800327a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2200      	movs	r2, #0
 800328a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800328e:	2300      	movs	r3, #0
}
 8003290:	4618      	mov	r0, r3
 8003292:	3714      	adds	r7, #20
 8003294:	46bd      	mov	sp, r7
 8003296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329a:	4770      	bx	lr
 800329c:	40012300 	.word	0x40012300
 80032a0:	40012000 	.word	0x40012000
 80032a4:	20000000 	.word	0x20000000
 80032a8:	431bde83 	.word	0x431bde83

080032ac <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b085      	sub	sp, #20
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80032b4:	4b79      	ldr	r3, [pc, #484]	; (800349c <ADC_Init+0x1f0>)
 80032b6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	685a      	ldr	r2, [r3, #4]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	431a      	orrs	r2, r3
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	685a      	ldr	r2, [r3, #4]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	6859      	ldr	r1, [r3, #4]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	691b      	ldr	r3, [r3, #16]
 80032ec:	021a      	lsls	r2, r3, #8
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	430a      	orrs	r2, r1
 80032f4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	685a      	ldr	r2, [r3, #4]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003304:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	6859      	ldr	r1, [r3, #4]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	689a      	ldr	r2, [r3, #8]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	430a      	orrs	r2, r1
 8003316:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	689a      	ldr	r2, [r3, #8]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003326:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	6899      	ldr	r1, [r3, #8]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	68da      	ldr	r2, [r3, #12]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	430a      	orrs	r2, r1
 8003338:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800333e:	4a58      	ldr	r2, [pc, #352]	; (80034a0 <ADC_Init+0x1f4>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d022      	beq.n	800338a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	689a      	ldr	r2, [r3, #8]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003352:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	6899      	ldr	r1, [r3, #8]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	430a      	orrs	r2, r1
 8003364:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	689a      	ldr	r2, [r3, #8]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003374:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	6899      	ldr	r1, [r3, #8]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	430a      	orrs	r2, r1
 8003386:	609a      	str	r2, [r3, #8]
 8003388:	e00f      	b.n	80033aa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	689a      	ldr	r2, [r3, #8]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003398:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	689a      	ldr	r2, [r3, #8]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80033a8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	689a      	ldr	r2, [r3, #8]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f022 0202 	bic.w	r2, r2, #2
 80033b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	6899      	ldr	r1, [r3, #8]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	7e1b      	ldrb	r3, [r3, #24]
 80033c4:	005a      	lsls	r2, r3, #1
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	430a      	orrs	r2, r1
 80033cc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d01b      	beq.n	8003410 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	685a      	ldr	r2, [r3, #4]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033e6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	685a      	ldr	r2, [r3, #4]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80033f6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	6859      	ldr	r1, [r3, #4]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003402:	3b01      	subs	r3, #1
 8003404:	035a      	lsls	r2, r3, #13
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	430a      	orrs	r2, r1
 800340c:	605a      	str	r2, [r3, #4]
 800340e:	e007      	b.n	8003420 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	685a      	ldr	r2, [r3, #4]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800341e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800342e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	69db      	ldr	r3, [r3, #28]
 800343a:	3b01      	subs	r3, #1
 800343c:	051a      	lsls	r2, r3, #20
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	430a      	orrs	r2, r1
 8003444:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	689a      	ldr	r2, [r3, #8]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003454:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	6899      	ldr	r1, [r3, #8]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003462:	025a      	lsls	r2, r3, #9
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	430a      	orrs	r2, r1
 800346a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	689a      	ldr	r2, [r3, #8]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800347a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	6899      	ldr	r1, [r3, #8]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	695b      	ldr	r3, [r3, #20]
 8003486:	029a      	lsls	r2, r3, #10
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	430a      	orrs	r2, r1
 800348e:	609a      	str	r2, [r3, #8]
}
 8003490:	bf00      	nop
 8003492:	3714      	adds	r7, #20
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr
 800349c:	40012300 	.word	0x40012300
 80034a0:	0f000001 	.word	0x0f000001

080034a4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b084      	sub	sp, #16
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034b0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d13c      	bne.n	8003538 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d12b      	bne.n	8003530 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d127      	bne.n	8003530 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d006      	beq.n	80034fc <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d119      	bne.n	8003530 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	685a      	ldr	r2, [r3, #4]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f022 0220 	bic.w	r2, r2, #32
 800350a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003510:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003520:	2b00      	cmp	r3, #0
 8003522:	d105      	bne.n	8003530 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003528:	f043 0201 	orr.w	r2, r3, #1
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003530:	68f8      	ldr	r0, [r7, #12]
 8003532:	f7ff fd7b 	bl	800302c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003536:	e00e      	b.n	8003556 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353c:	f003 0310 	and.w	r3, r3, #16
 8003540:	2b00      	cmp	r3, #0
 8003542:	d003      	beq.n	800354c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003544:	68f8      	ldr	r0, [r7, #12]
 8003546:	f7ff fd85 	bl	8003054 <HAL_ADC_ErrorCallback>
}
 800354a:	e004      	b.n	8003556 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	4798      	blx	r3
}
 8003556:	bf00      	nop
 8003558:	3710      	adds	r7, #16
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}

0800355e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800355e:	b580      	push	{r7, lr}
 8003560:	b084      	sub	sp, #16
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800356a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800356c:	68f8      	ldr	r0, [r7, #12]
 800356e:	f7ff fd67 	bl	8003040 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003572:	bf00      	nop
 8003574:	3710      	adds	r7, #16
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}

0800357a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800357a:	b580      	push	{r7, lr}
 800357c:	b084      	sub	sp, #16
 800357e:	af00      	add	r7, sp, #0
 8003580:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003586:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2240      	movs	r2, #64	; 0x40
 800358c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003592:	f043 0204 	orr.w	r2, r3, #4
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800359a:	68f8      	ldr	r0, [r7, #12]
 800359c:	f7ff fd5a 	bl	8003054 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80035a0:	bf00      	nop
 80035a2:	3710      	adds	r7, #16
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}

080035a8 <__NVIC_SetPriorityGrouping>:
{
 80035a8:	b480      	push	{r7}
 80035aa:	b085      	sub	sp, #20
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	f003 0307 	and.w	r3, r3, #7
 80035b6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035b8:	4b0c      	ldr	r3, [pc, #48]	; (80035ec <__NVIC_SetPriorityGrouping+0x44>)
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035be:	68ba      	ldr	r2, [r7, #8]
 80035c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80035c4:	4013      	ands	r3, r2
 80035c6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80035d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80035d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035da:	4a04      	ldr	r2, [pc, #16]	; (80035ec <__NVIC_SetPriorityGrouping+0x44>)
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	60d3      	str	r3, [r2, #12]
}
 80035e0:	bf00      	nop
 80035e2:	3714      	adds	r7, #20
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr
 80035ec:	e000ed00 	.word	0xe000ed00

080035f0 <__NVIC_GetPriorityGrouping>:
{
 80035f0:	b480      	push	{r7}
 80035f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035f4:	4b04      	ldr	r3, [pc, #16]	; (8003608 <__NVIC_GetPriorityGrouping+0x18>)
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	0a1b      	lsrs	r3, r3, #8
 80035fa:	f003 0307 	and.w	r3, r3, #7
}
 80035fe:	4618      	mov	r0, r3
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr
 8003608:	e000ed00 	.word	0xe000ed00

0800360c <__NVIC_EnableIRQ>:
{
 800360c:	b480      	push	{r7}
 800360e:	b083      	sub	sp, #12
 8003610:	af00      	add	r7, sp, #0
 8003612:	4603      	mov	r3, r0
 8003614:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800361a:	2b00      	cmp	r3, #0
 800361c:	db0b      	blt.n	8003636 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800361e:	79fb      	ldrb	r3, [r7, #7]
 8003620:	f003 021f 	and.w	r2, r3, #31
 8003624:	4907      	ldr	r1, [pc, #28]	; (8003644 <__NVIC_EnableIRQ+0x38>)
 8003626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800362a:	095b      	lsrs	r3, r3, #5
 800362c:	2001      	movs	r0, #1
 800362e:	fa00 f202 	lsl.w	r2, r0, r2
 8003632:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003636:	bf00      	nop
 8003638:	370c      	adds	r7, #12
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr
 8003642:	bf00      	nop
 8003644:	e000e100 	.word	0xe000e100

08003648 <__NVIC_SetPriority>:
{
 8003648:	b480      	push	{r7}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
 800364e:	4603      	mov	r3, r0
 8003650:	6039      	str	r1, [r7, #0]
 8003652:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003654:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003658:	2b00      	cmp	r3, #0
 800365a:	db0a      	blt.n	8003672 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	b2da      	uxtb	r2, r3
 8003660:	490c      	ldr	r1, [pc, #48]	; (8003694 <__NVIC_SetPriority+0x4c>)
 8003662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003666:	0112      	lsls	r2, r2, #4
 8003668:	b2d2      	uxtb	r2, r2
 800366a:	440b      	add	r3, r1
 800366c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003670:	e00a      	b.n	8003688 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	b2da      	uxtb	r2, r3
 8003676:	4908      	ldr	r1, [pc, #32]	; (8003698 <__NVIC_SetPriority+0x50>)
 8003678:	79fb      	ldrb	r3, [r7, #7]
 800367a:	f003 030f 	and.w	r3, r3, #15
 800367e:	3b04      	subs	r3, #4
 8003680:	0112      	lsls	r2, r2, #4
 8003682:	b2d2      	uxtb	r2, r2
 8003684:	440b      	add	r3, r1
 8003686:	761a      	strb	r2, [r3, #24]
}
 8003688:	bf00      	nop
 800368a:	370c      	adds	r7, #12
 800368c:	46bd      	mov	sp, r7
 800368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003692:	4770      	bx	lr
 8003694:	e000e100 	.word	0xe000e100
 8003698:	e000ed00 	.word	0xe000ed00

0800369c <NVIC_EncodePriority>:
{
 800369c:	b480      	push	{r7}
 800369e:	b089      	sub	sp, #36	; 0x24
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	60f8      	str	r0, [r7, #12]
 80036a4:	60b9      	str	r1, [r7, #8]
 80036a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	f003 0307 	and.w	r3, r3, #7
 80036ae:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036b0:	69fb      	ldr	r3, [r7, #28]
 80036b2:	f1c3 0307 	rsb	r3, r3, #7
 80036b6:	2b04      	cmp	r3, #4
 80036b8:	bf28      	it	cs
 80036ba:	2304      	movcs	r3, #4
 80036bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	3304      	adds	r3, #4
 80036c2:	2b06      	cmp	r3, #6
 80036c4:	d902      	bls.n	80036cc <NVIC_EncodePriority+0x30>
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	3b03      	subs	r3, #3
 80036ca:	e000      	b.n	80036ce <NVIC_EncodePriority+0x32>
 80036cc:	2300      	movs	r3, #0
 80036ce:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036d0:	f04f 32ff 	mov.w	r2, #4294967295
 80036d4:	69bb      	ldr	r3, [r7, #24]
 80036d6:	fa02 f303 	lsl.w	r3, r2, r3
 80036da:	43da      	mvns	r2, r3
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	401a      	ands	r2, r3
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036e4:	f04f 31ff 	mov.w	r1, #4294967295
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	fa01 f303 	lsl.w	r3, r1, r3
 80036ee:	43d9      	mvns	r1, r3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036f4:	4313      	orrs	r3, r2
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3724      	adds	r7, #36	; 0x24
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr
	...

08003704 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b082      	sub	sp, #8
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	3b01      	subs	r3, #1
 8003710:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003714:	d301      	bcc.n	800371a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003716:	2301      	movs	r3, #1
 8003718:	e00f      	b.n	800373a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800371a:	4a0a      	ldr	r2, [pc, #40]	; (8003744 <SysTick_Config+0x40>)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	3b01      	subs	r3, #1
 8003720:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003722:	210f      	movs	r1, #15
 8003724:	f04f 30ff 	mov.w	r0, #4294967295
 8003728:	f7ff ff8e 	bl	8003648 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800372c:	4b05      	ldr	r3, [pc, #20]	; (8003744 <SysTick_Config+0x40>)
 800372e:	2200      	movs	r2, #0
 8003730:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003732:	4b04      	ldr	r3, [pc, #16]	; (8003744 <SysTick_Config+0x40>)
 8003734:	2207      	movs	r2, #7
 8003736:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003738:	2300      	movs	r3, #0
}
 800373a:	4618      	mov	r0, r3
 800373c:	3708      	adds	r7, #8
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	e000e010 	.word	0xe000e010

08003748 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b082      	sub	sp, #8
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f7ff ff29 	bl	80035a8 <__NVIC_SetPriorityGrouping>
}
 8003756:	bf00      	nop
 8003758:	3708      	adds	r7, #8
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}

0800375e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800375e:	b580      	push	{r7, lr}
 8003760:	b086      	sub	sp, #24
 8003762:	af00      	add	r7, sp, #0
 8003764:	4603      	mov	r3, r0
 8003766:	60b9      	str	r1, [r7, #8]
 8003768:	607a      	str	r2, [r7, #4]
 800376a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800376c:	2300      	movs	r3, #0
 800376e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003770:	f7ff ff3e 	bl	80035f0 <__NVIC_GetPriorityGrouping>
 8003774:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	68b9      	ldr	r1, [r7, #8]
 800377a:	6978      	ldr	r0, [r7, #20]
 800377c:	f7ff ff8e 	bl	800369c <NVIC_EncodePriority>
 8003780:	4602      	mov	r2, r0
 8003782:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003786:	4611      	mov	r1, r2
 8003788:	4618      	mov	r0, r3
 800378a:	f7ff ff5d 	bl	8003648 <__NVIC_SetPriority>
}
 800378e:	bf00      	nop
 8003790:	3718      	adds	r7, #24
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}

08003796 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003796:	b580      	push	{r7, lr}
 8003798:	b082      	sub	sp, #8
 800379a:	af00      	add	r7, sp, #0
 800379c:	4603      	mov	r3, r0
 800379e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037a4:	4618      	mov	r0, r3
 80037a6:	f7ff ff31 	bl	800360c <__NVIC_EnableIRQ>
}
 80037aa:	bf00      	nop
 80037ac:	3708      	adds	r7, #8
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}

080037b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80037b2:	b580      	push	{r7, lr}
 80037b4:	b082      	sub	sp, #8
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f7ff ffa2 	bl	8003704 <SysTick_Config>
 80037c0:	4603      	mov	r3, r0
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3708      	adds	r7, #8
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
	...

080037cc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b086      	sub	sp, #24
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80037d4:	2300      	movs	r3, #0
 80037d6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80037d8:	f7ff faa4 	bl	8002d24 <HAL_GetTick>
 80037dc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d101      	bne.n	80037e8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e099      	b.n	800391c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2202      	movs	r2, #2
 80037ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f022 0201 	bic.w	r2, r2, #1
 8003806:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003808:	e00f      	b.n	800382a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800380a:	f7ff fa8b 	bl	8002d24 <HAL_GetTick>
 800380e:	4602      	mov	r2, r0
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	1ad3      	subs	r3, r2, r3
 8003814:	2b05      	cmp	r3, #5
 8003816:	d908      	bls.n	800382a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2220      	movs	r2, #32
 800381c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2203      	movs	r2, #3
 8003822:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003826:	2303      	movs	r3, #3
 8003828:	e078      	b.n	800391c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 0301 	and.w	r3, r3, #1
 8003834:	2b00      	cmp	r3, #0
 8003836:	d1e8      	bne.n	800380a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003840:	697a      	ldr	r2, [r7, #20]
 8003842:	4b38      	ldr	r3, [pc, #224]	; (8003924 <HAL_DMA_Init+0x158>)
 8003844:	4013      	ands	r3, r2
 8003846:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	685a      	ldr	r2, [r3, #4]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003856:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	691b      	ldr	r3, [r3, #16]
 800385c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003862:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	699b      	ldr	r3, [r3, #24]
 8003868:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800386e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6a1b      	ldr	r3, [r3, #32]
 8003874:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003876:	697a      	ldr	r2, [r7, #20]
 8003878:	4313      	orrs	r3, r2
 800387a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003880:	2b04      	cmp	r3, #4
 8003882:	d107      	bne.n	8003894 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800388c:	4313      	orrs	r3, r2
 800388e:	697a      	ldr	r2, [r7, #20]
 8003890:	4313      	orrs	r3, r2
 8003892:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	697a      	ldr	r2, [r7, #20]
 800389a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	695b      	ldr	r3, [r3, #20]
 80038a2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	f023 0307 	bic.w	r3, r3, #7
 80038aa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b0:	697a      	ldr	r2, [r7, #20]
 80038b2:	4313      	orrs	r3, r2
 80038b4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ba:	2b04      	cmp	r3, #4
 80038bc:	d117      	bne.n	80038ee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038c2:	697a      	ldr	r2, [r7, #20]
 80038c4:	4313      	orrs	r3, r2
 80038c6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d00e      	beq.n	80038ee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	f000 fb01 	bl	8003ed8 <DMA_CheckFifoParam>
 80038d6:	4603      	mov	r3, r0
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d008      	beq.n	80038ee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2240      	movs	r2, #64	; 0x40
 80038e0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2201      	movs	r2, #1
 80038e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80038ea:	2301      	movs	r3, #1
 80038ec:	e016      	b.n	800391c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	697a      	ldr	r2, [r7, #20]
 80038f4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f000 fab8 	bl	8003e6c <DMA_CalcBaseAndBitshift>
 80038fc:	4603      	mov	r3, r0
 80038fe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003904:	223f      	movs	r2, #63	; 0x3f
 8003906:	409a      	lsls	r2, r3
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2201      	movs	r2, #1
 8003916:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800391a:	2300      	movs	r3, #0
}
 800391c:	4618      	mov	r0, r3
 800391e:	3718      	adds	r7, #24
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}
 8003924:	f010803f 	.word	0xf010803f

08003928 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b086      	sub	sp, #24
 800392c:	af00      	add	r7, sp, #0
 800392e:	60f8      	str	r0, [r7, #12]
 8003930:	60b9      	str	r1, [r7, #8]
 8003932:	607a      	str	r2, [r7, #4]
 8003934:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003936:	2300      	movs	r3, #0
 8003938:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800393e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003946:	2b01      	cmp	r3, #1
 8003948:	d101      	bne.n	800394e <HAL_DMA_Start_IT+0x26>
 800394a:	2302      	movs	r3, #2
 800394c:	e040      	b.n	80039d0 <HAL_DMA_Start_IT+0xa8>
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2201      	movs	r2, #1
 8003952:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800395c:	b2db      	uxtb	r3, r3
 800395e:	2b01      	cmp	r3, #1
 8003960:	d12f      	bne.n	80039c2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2202      	movs	r2, #2
 8003966:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2200      	movs	r2, #0
 800396e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	68b9      	ldr	r1, [r7, #8]
 8003976:	68f8      	ldr	r0, [r7, #12]
 8003978:	f000 fa4a 	bl	8003e10 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003980:	223f      	movs	r2, #63	; 0x3f
 8003982:	409a      	lsls	r2, r3
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f042 0216 	orr.w	r2, r2, #22
 8003996:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399c:	2b00      	cmp	r3, #0
 800399e:	d007      	beq.n	80039b0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f042 0208 	orr.w	r2, r2, #8
 80039ae:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f042 0201 	orr.w	r2, r2, #1
 80039be:	601a      	str	r2, [r3, #0]
 80039c0:	e005      	b.n	80039ce <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2200      	movs	r2, #0
 80039c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80039ca:	2302      	movs	r3, #2
 80039cc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80039ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3718      	adds	r7, #24
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}

080039d8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b084      	sub	sp, #16
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039e4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80039e6:	f7ff f99d 	bl	8002d24 <HAL_GetTick>
 80039ea:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	2b02      	cmp	r3, #2
 80039f6:	d008      	beq.n	8003a0a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2280      	movs	r2, #128	; 0x80
 80039fc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2200      	movs	r2, #0
 8003a02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e052      	b.n	8003ab0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f022 0216 	bic.w	r2, r2, #22
 8003a18:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	695a      	ldr	r2, [r3, #20]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a28:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d103      	bne.n	8003a3a <HAL_DMA_Abort+0x62>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d007      	beq.n	8003a4a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f022 0208 	bic.w	r2, r2, #8
 8003a48:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f022 0201 	bic.w	r2, r2, #1
 8003a58:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a5a:	e013      	b.n	8003a84 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a5c:	f7ff f962 	bl	8002d24 <HAL_GetTick>
 8003a60:	4602      	mov	r2, r0
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	1ad3      	subs	r3, r2, r3
 8003a66:	2b05      	cmp	r3, #5
 8003a68:	d90c      	bls.n	8003a84 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2220      	movs	r2, #32
 8003a6e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2203      	movs	r2, #3
 8003a74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003a80:	2303      	movs	r3, #3
 8003a82:	e015      	b.n	8003ab0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 0301 	and.w	r3, r3, #1
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d1e4      	bne.n	8003a5c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a96:	223f      	movs	r2, #63	; 0x3f
 8003a98:	409a      	lsls	r2, r3
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003aae:	2300      	movs	r3, #0
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3710      	adds	r7, #16
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}

08003ab8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b083      	sub	sp, #12
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	2b02      	cmp	r3, #2
 8003aca:	d004      	beq.n	8003ad6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2280      	movs	r2, #128	; 0x80
 8003ad0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e00c      	b.n	8003af0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2205      	movs	r2, #5
 8003ada:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f022 0201 	bic.w	r2, r2, #1
 8003aec:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003aee:	2300      	movs	r3, #0
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	370c      	adds	r7, #12
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr

08003afc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b086      	sub	sp, #24
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003b04:	2300      	movs	r3, #0
 8003b06:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003b08:	4b8e      	ldr	r3, [pc, #568]	; (8003d44 <HAL_DMA_IRQHandler+0x248>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a8e      	ldr	r2, [pc, #568]	; (8003d48 <HAL_DMA_IRQHandler+0x24c>)
 8003b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b12:	0a9b      	lsrs	r3, r3, #10
 8003b14:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b1a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b26:	2208      	movs	r2, #8
 8003b28:	409a      	lsls	r2, r3
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d01a      	beq.n	8003b68 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 0304 	and.w	r3, r3, #4
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d013      	beq.n	8003b68 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f022 0204 	bic.w	r2, r2, #4
 8003b4e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b54:	2208      	movs	r2, #8
 8003b56:	409a      	lsls	r2, r3
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b60:	f043 0201 	orr.w	r2, r3, #1
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	409a      	lsls	r2, r3
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	4013      	ands	r3, r2
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d012      	beq.n	8003b9e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	695b      	ldr	r3, [r3, #20]
 8003b7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d00b      	beq.n	8003b9e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	409a      	lsls	r2, r3
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b96:	f043 0202 	orr.w	r2, r3, #2
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ba2:	2204      	movs	r2, #4
 8003ba4:	409a      	lsls	r2, r3
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	4013      	ands	r3, r2
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d012      	beq.n	8003bd4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f003 0302 	and.w	r3, r3, #2
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d00b      	beq.n	8003bd4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bc0:	2204      	movs	r2, #4
 8003bc2:	409a      	lsls	r2, r3
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bcc:	f043 0204 	orr.w	r2, r3, #4
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bd8:	2210      	movs	r2, #16
 8003bda:	409a      	lsls	r2, r3
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	4013      	ands	r3, r2
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d043      	beq.n	8003c6c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 0308 	and.w	r3, r3, #8
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d03c      	beq.n	8003c6c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bf6:	2210      	movs	r2, #16
 8003bf8:	409a      	lsls	r2, r3
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d018      	beq.n	8003c3e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d108      	bne.n	8003c2c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d024      	beq.n	8003c6c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	4798      	blx	r3
 8003c2a:	e01f      	b.n	8003c6c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d01b      	beq.n	8003c6c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	4798      	blx	r3
 8003c3c:	e016      	b.n	8003c6c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d107      	bne.n	8003c5c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f022 0208 	bic.w	r2, r2, #8
 8003c5a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d003      	beq.n	8003c6c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c70:	2220      	movs	r2, #32
 8003c72:	409a      	lsls	r2, r3
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	4013      	ands	r3, r2
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	f000 808f 	beq.w	8003d9c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f003 0310 	and.w	r3, r3, #16
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	f000 8087 	beq.w	8003d9c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c92:	2220      	movs	r2, #32
 8003c94:	409a      	lsls	r2, r3
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	2b05      	cmp	r3, #5
 8003ca4:	d136      	bne.n	8003d14 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f022 0216 	bic.w	r2, r2, #22
 8003cb4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	695a      	ldr	r2, [r3, #20]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003cc4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d103      	bne.n	8003cd6 <HAL_DMA_IRQHandler+0x1da>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d007      	beq.n	8003ce6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f022 0208 	bic.w	r2, r2, #8
 8003ce4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cea:	223f      	movs	r2, #63	; 0x3f
 8003cec:	409a      	lsls	r2, r3
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d07e      	beq.n	8003e08 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	4798      	blx	r3
        }
        return;
 8003d12:	e079      	b.n	8003e08 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d01d      	beq.n	8003d5e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d10d      	bne.n	8003d4c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d031      	beq.n	8003d9c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	4798      	blx	r3
 8003d40:	e02c      	b.n	8003d9c <HAL_DMA_IRQHandler+0x2a0>
 8003d42:	bf00      	nop
 8003d44:	20000000 	.word	0x20000000
 8003d48:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d023      	beq.n	8003d9c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	4798      	blx	r3
 8003d5c:	e01e      	b.n	8003d9c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d10f      	bne.n	8003d8c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f022 0210 	bic.w	r2, r2, #16
 8003d7a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2200      	movs	r2, #0
 8003d88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d003      	beq.n	8003d9c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d032      	beq.n	8003e0a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003da8:	f003 0301 	and.w	r3, r3, #1
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d022      	beq.n	8003df6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2205      	movs	r2, #5
 8003db4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f022 0201 	bic.w	r2, r2, #1
 8003dc6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	3301      	adds	r3, #1
 8003dcc:	60bb      	str	r3, [r7, #8]
 8003dce:	697a      	ldr	r2, [r7, #20]
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d307      	bcc.n	8003de4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 0301 	and.w	r3, r3, #1
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d1f2      	bne.n	8003dc8 <HAL_DMA_IRQHandler+0x2cc>
 8003de2:	e000      	b.n	8003de6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003de4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2201      	movs	r2, #1
 8003dea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2200      	movs	r2, #0
 8003df2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d005      	beq.n	8003e0a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	4798      	blx	r3
 8003e06:	e000      	b.n	8003e0a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003e08:	bf00      	nop
    }
  }
}
 8003e0a:	3718      	adds	r7, #24
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}

08003e10 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b085      	sub	sp, #20
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	60f8      	str	r0, [r7, #12]
 8003e18:	60b9      	str	r1, [r7, #8]
 8003e1a:	607a      	str	r2, [r7, #4]
 8003e1c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003e2c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	683a      	ldr	r2, [r7, #0]
 8003e34:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	2b40      	cmp	r3, #64	; 0x40
 8003e3c:	d108      	bne.n	8003e50 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	68ba      	ldr	r2, [r7, #8]
 8003e4c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003e4e:	e007      	b.n	8003e60 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	68ba      	ldr	r2, [r7, #8]
 8003e56:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	687a      	ldr	r2, [r7, #4]
 8003e5e:	60da      	str	r2, [r3, #12]
}
 8003e60:	bf00      	nop
 8003e62:	3714      	adds	r7, #20
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr

08003e6c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b085      	sub	sp, #20
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	3b10      	subs	r3, #16
 8003e7c:	4a14      	ldr	r2, [pc, #80]	; (8003ed0 <DMA_CalcBaseAndBitshift+0x64>)
 8003e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e82:	091b      	lsrs	r3, r3, #4
 8003e84:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003e86:	4a13      	ldr	r2, [pc, #76]	; (8003ed4 <DMA_CalcBaseAndBitshift+0x68>)
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	4413      	add	r3, r2
 8003e8c:	781b      	ldrb	r3, [r3, #0]
 8003e8e:	461a      	mov	r2, r3
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2b03      	cmp	r3, #3
 8003e98:	d909      	bls.n	8003eae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003ea2:	f023 0303 	bic.w	r3, r3, #3
 8003ea6:	1d1a      	adds	r2, r3, #4
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	659a      	str	r2, [r3, #88]	; 0x58
 8003eac:	e007      	b.n	8003ebe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003eb6:	f023 0303 	bic.w	r3, r3, #3
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3714      	adds	r7, #20
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr
 8003ece:	bf00      	nop
 8003ed0:	aaaaaaab 	.word	0xaaaaaaab
 8003ed4:	0800a208 	.word	0x0800a208

08003ed8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b085      	sub	sp, #20
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ee8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	699b      	ldr	r3, [r3, #24]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d11f      	bne.n	8003f32 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	2b03      	cmp	r3, #3
 8003ef6:	d856      	bhi.n	8003fa6 <DMA_CheckFifoParam+0xce>
 8003ef8:	a201      	add	r2, pc, #4	; (adr r2, 8003f00 <DMA_CheckFifoParam+0x28>)
 8003efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003efe:	bf00      	nop
 8003f00:	08003f11 	.word	0x08003f11
 8003f04:	08003f23 	.word	0x08003f23
 8003f08:	08003f11 	.word	0x08003f11
 8003f0c:	08003fa7 	.word	0x08003fa7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d046      	beq.n	8003faa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f20:	e043      	b.n	8003faa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f26:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003f2a:	d140      	bne.n	8003fae <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f30:	e03d      	b.n	8003fae <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	699b      	ldr	r3, [r3, #24]
 8003f36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f3a:	d121      	bne.n	8003f80 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	2b03      	cmp	r3, #3
 8003f40:	d837      	bhi.n	8003fb2 <DMA_CheckFifoParam+0xda>
 8003f42:	a201      	add	r2, pc, #4	; (adr r2, 8003f48 <DMA_CheckFifoParam+0x70>)
 8003f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f48:	08003f59 	.word	0x08003f59
 8003f4c:	08003f5f 	.word	0x08003f5f
 8003f50:	08003f59 	.word	0x08003f59
 8003f54:	08003f71 	.word	0x08003f71
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	73fb      	strb	r3, [r7, #15]
      break;
 8003f5c:	e030      	b.n	8003fc0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f62:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d025      	beq.n	8003fb6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f6e:	e022      	b.n	8003fb6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f74:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003f78:	d11f      	bne.n	8003fba <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003f7e:	e01c      	b.n	8003fba <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	2b02      	cmp	r3, #2
 8003f84:	d903      	bls.n	8003f8e <DMA_CheckFifoParam+0xb6>
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	2b03      	cmp	r3, #3
 8003f8a:	d003      	beq.n	8003f94 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003f8c:	e018      	b.n	8003fc0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	73fb      	strb	r3, [r7, #15]
      break;
 8003f92:	e015      	b.n	8003fc0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d00e      	beq.n	8003fbe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	73fb      	strb	r3, [r7, #15]
      break;
 8003fa4:	e00b      	b.n	8003fbe <DMA_CheckFifoParam+0xe6>
      break;
 8003fa6:	bf00      	nop
 8003fa8:	e00a      	b.n	8003fc0 <DMA_CheckFifoParam+0xe8>
      break;
 8003faa:	bf00      	nop
 8003fac:	e008      	b.n	8003fc0 <DMA_CheckFifoParam+0xe8>
      break;
 8003fae:	bf00      	nop
 8003fb0:	e006      	b.n	8003fc0 <DMA_CheckFifoParam+0xe8>
      break;
 8003fb2:	bf00      	nop
 8003fb4:	e004      	b.n	8003fc0 <DMA_CheckFifoParam+0xe8>
      break;
 8003fb6:	bf00      	nop
 8003fb8:	e002      	b.n	8003fc0 <DMA_CheckFifoParam+0xe8>
      break;   
 8003fba:	bf00      	nop
 8003fbc:	e000      	b.n	8003fc0 <DMA_CheckFifoParam+0xe8>
      break;
 8003fbe:	bf00      	nop
    }
  } 
  
  return status; 
 8003fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3714      	adds	r7, #20
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr
 8003fce:	bf00      	nop

08003fd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b089      	sub	sp, #36	; 0x24
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	61fb      	str	r3, [r7, #28]
 8003fea:	e16b      	b.n	80042c4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003fec:	2201      	movs	r2, #1
 8003fee:	69fb      	ldr	r3, [r7, #28]
 8003ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	697a      	ldr	r2, [r7, #20]
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004000:	693a      	ldr	r2, [r7, #16]
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	429a      	cmp	r2, r3
 8004006:	f040 815a 	bne.w	80042be <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	f003 0303 	and.w	r3, r3, #3
 8004012:	2b01      	cmp	r3, #1
 8004014:	d005      	beq.n	8004022 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800401e:	2b02      	cmp	r3, #2
 8004020:	d130      	bne.n	8004084 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004028:	69fb      	ldr	r3, [r7, #28]
 800402a:	005b      	lsls	r3, r3, #1
 800402c:	2203      	movs	r2, #3
 800402e:	fa02 f303 	lsl.w	r3, r2, r3
 8004032:	43db      	mvns	r3, r3
 8004034:	69ba      	ldr	r2, [r7, #24]
 8004036:	4013      	ands	r3, r2
 8004038:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	68da      	ldr	r2, [r3, #12]
 800403e:	69fb      	ldr	r3, [r7, #28]
 8004040:	005b      	lsls	r3, r3, #1
 8004042:	fa02 f303 	lsl.w	r3, r2, r3
 8004046:	69ba      	ldr	r2, [r7, #24]
 8004048:	4313      	orrs	r3, r2
 800404a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	69ba      	ldr	r2, [r7, #24]
 8004050:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004058:	2201      	movs	r2, #1
 800405a:	69fb      	ldr	r3, [r7, #28]
 800405c:	fa02 f303 	lsl.w	r3, r2, r3
 8004060:	43db      	mvns	r3, r3
 8004062:	69ba      	ldr	r2, [r7, #24]
 8004064:	4013      	ands	r3, r2
 8004066:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	091b      	lsrs	r3, r3, #4
 800406e:	f003 0201 	and.w	r2, r3, #1
 8004072:	69fb      	ldr	r3, [r7, #28]
 8004074:	fa02 f303 	lsl.w	r3, r2, r3
 8004078:	69ba      	ldr	r2, [r7, #24]
 800407a:	4313      	orrs	r3, r2
 800407c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	69ba      	ldr	r2, [r7, #24]
 8004082:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	f003 0303 	and.w	r3, r3, #3
 800408c:	2b03      	cmp	r3, #3
 800408e:	d017      	beq.n	80040c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004096:	69fb      	ldr	r3, [r7, #28]
 8004098:	005b      	lsls	r3, r3, #1
 800409a:	2203      	movs	r2, #3
 800409c:	fa02 f303 	lsl.w	r3, r2, r3
 80040a0:	43db      	mvns	r3, r3
 80040a2:	69ba      	ldr	r2, [r7, #24]
 80040a4:	4013      	ands	r3, r2
 80040a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	689a      	ldr	r2, [r3, #8]
 80040ac:	69fb      	ldr	r3, [r7, #28]
 80040ae:	005b      	lsls	r3, r3, #1
 80040b0:	fa02 f303 	lsl.w	r3, r2, r3
 80040b4:	69ba      	ldr	r2, [r7, #24]
 80040b6:	4313      	orrs	r3, r2
 80040b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	69ba      	ldr	r2, [r7, #24]
 80040be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	f003 0303 	and.w	r3, r3, #3
 80040c8:	2b02      	cmp	r3, #2
 80040ca:	d123      	bne.n	8004114 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80040cc:	69fb      	ldr	r3, [r7, #28]
 80040ce:	08da      	lsrs	r2, r3, #3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	3208      	adds	r2, #8
 80040d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80040da:	69fb      	ldr	r3, [r7, #28]
 80040dc:	f003 0307 	and.w	r3, r3, #7
 80040e0:	009b      	lsls	r3, r3, #2
 80040e2:	220f      	movs	r2, #15
 80040e4:	fa02 f303 	lsl.w	r3, r2, r3
 80040e8:	43db      	mvns	r3, r3
 80040ea:	69ba      	ldr	r2, [r7, #24]
 80040ec:	4013      	ands	r3, r2
 80040ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	691a      	ldr	r2, [r3, #16]
 80040f4:	69fb      	ldr	r3, [r7, #28]
 80040f6:	f003 0307 	and.w	r3, r3, #7
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004100:	69ba      	ldr	r2, [r7, #24]
 8004102:	4313      	orrs	r3, r2
 8004104:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004106:	69fb      	ldr	r3, [r7, #28]
 8004108:	08da      	lsrs	r2, r3, #3
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	3208      	adds	r2, #8
 800410e:	69b9      	ldr	r1, [r7, #24]
 8004110:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800411a:	69fb      	ldr	r3, [r7, #28]
 800411c:	005b      	lsls	r3, r3, #1
 800411e:	2203      	movs	r2, #3
 8004120:	fa02 f303 	lsl.w	r3, r2, r3
 8004124:	43db      	mvns	r3, r3
 8004126:	69ba      	ldr	r2, [r7, #24]
 8004128:	4013      	ands	r3, r2
 800412a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	f003 0203 	and.w	r2, r3, #3
 8004134:	69fb      	ldr	r3, [r7, #28]
 8004136:	005b      	lsls	r3, r3, #1
 8004138:	fa02 f303 	lsl.w	r3, r2, r3
 800413c:	69ba      	ldr	r2, [r7, #24]
 800413e:	4313      	orrs	r3, r2
 8004140:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	69ba      	ldr	r2, [r7, #24]
 8004146:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004150:	2b00      	cmp	r3, #0
 8004152:	f000 80b4 	beq.w	80042be <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004156:	2300      	movs	r3, #0
 8004158:	60fb      	str	r3, [r7, #12]
 800415a:	4b60      	ldr	r3, [pc, #384]	; (80042dc <HAL_GPIO_Init+0x30c>)
 800415c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800415e:	4a5f      	ldr	r2, [pc, #380]	; (80042dc <HAL_GPIO_Init+0x30c>)
 8004160:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004164:	6453      	str	r3, [r2, #68]	; 0x44
 8004166:	4b5d      	ldr	r3, [pc, #372]	; (80042dc <HAL_GPIO_Init+0x30c>)
 8004168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800416a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800416e:	60fb      	str	r3, [r7, #12]
 8004170:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004172:	4a5b      	ldr	r2, [pc, #364]	; (80042e0 <HAL_GPIO_Init+0x310>)
 8004174:	69fb      	ldr	r3, [r7, #28]
 8004176:	089b      	lsrs	r3, r3, #2
 8004178:	3302      	adds	r3, #2
 800417a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800417e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004180:	69fb      	ldr	r3, [r7, #28]
 8004182:	f003 0303 	and.w	r3, r3, #3
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	220f      	movs	r2, #15
 800418a:	fa02 f303 	lsl.w	r3, r2, r3
 800418e:	43db      	mvns	r3, r3
 8004190:	69ba      	ldr	r2, [r7, #24]
 8004192:	4013      	ands	r3, r2
 8004194:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4a52      	ldr	r2, [pc, #328]	; (80042e4 <HAL_GPIO_Init+0x314>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d02b      	beq.n	80041f6 <HAL_GPIO_Init+0x226>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4a51      	ldr	r2, [pc, #324]	; (80042e8 <HAL_GPIO_Init+0x318>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d025      	beq.n	80041f2 <HAL_GPIO_Init+0x222>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4a50      	ldr	r2, [pc, #320]	; (80042ec <HAL_GPIO_Init+0x31c>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d01f      	beq.n	80041ee <HAL_GPIO_Init+0x21e>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a4f      	ldr	r2, [pc, #316]	; (80042f0 <HAL_GPIO_Init+0x320>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d019      	beq.n	80041ea <HAL_GPIO_Init+0x21a>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4a4e      	ldr	r2, [pc, #312]	; (80042f4 <HAL_GPIO_Init+0x324>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d013      	beq.n	80041e6 <HAL_GPIO_Init+0x216>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a4d      	ldr	r2, [pc, #308]	; (80042f8 <HAL_GPIO_Init+0x328>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d00d      	beq.n	80041e2 <HAL_GPIO_Init+0x212>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4a4c      	ldr	r2, [pc, #304]	; (80042fc <HAL_GPIO_Init+0x32c>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d007      	beq.n	80041de <HAL_GPIO_Init+0x20e>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4a4b      	ldr	r2, [pc, #300]	; (8004300 <HAL_GPIO_Init+0x330>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d101      	bne.n	80041da <HAL_GPIO_Init+0x20a>
 80041d6:	2307      	movs	r3, #7
 80041d8:	e00e      	b.n	80041f8 <HAL_GPIO_Init+0x228>
 80041da:	2308      	movs	r3, #8
 80041dc:	e00c      	b.n	80041f8 <HAL_GPIO_Init+0x228>
 80041de:	2306      	movs	r3, #6
 80041e0:	e00a      	b.n	80041f8 <HAL_GPIO_Init+0x228>
 80041e2:	2305      	movs	r3, #5
 80041e4:	e008      	b.n	80041f8 <HAL_GPIO_Init+0x228>
 80041e6:	2304      	movs	r3, #4
 80041e8:	e006      	b.n	80041f8 <HAL_GPIO_Init+0x228>
 80041ea:	2303      	movs	r3, #3
 80041ec:	e004      	b.n	80041f8 <HAL_GPIO_Init+0x228>
 80041ee:	2302      	movs	r3, #2
 80041f0:	e002      	b.n	80041f8 <HAL_GPIO_Init+0x228>
 80041f2:	2301      	movs	r3, #1
 80041f4:	e000      	b.n	80041f8 <HAL_GPIO_Init+0x228>
 80041f6:	2300      	movs	r3, #0
 80041f8:	69fa      	ldr	r2, [r7, #28]
 80041fa:	f002 0203 	and.w	r2, r2, #3
 80041fe:	0092      	lsls	r2, r2, #2
 8004200:	4093      	lsls	r3, r2
 8004202:	69ba      	ldr	r2, [r7, #24]
 8004204:	4313      	orrs	r3, r2
 8004206:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004208:	4935      	ldr	r1, [pc, #212]	; (80042e0 <HAL_GPIO_Init+0x310>)
 800420a:	69fb      	ldr	r3, [r7, #28]
 800420c:	089b      	lsrs	r3, r3, #2
 800420e:	3302      	adds	r3, #2
 8004210:	69ba      	ldr	r2, [r7, #24]
 8004212:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004216:	4b3b      	ldr	r3, [pc, #236]	; (8004304 <HAL_GPIO_Init+0x334>)
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	43db      	mvns	r3, r3
 8004220:	69ba      	ldr	r2, [r7, #24]
 8004222:	4013      	ands	r3, r2
 8004224:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800422e:	2b00      	cmp	r3, #0
 8004230:	d003      	beq.n	800423a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004232:	69ba      	ldr	r2, [r7, #24]
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	4313      	orrs	r3, r2
 8004238:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800423a:	4a32      	ldr	r2, [pc, #200]	; (8004304 <HAL_GPIO_Init+0x334>)
 800423c:	69bb      	ldr	r3, [r7, #24]
 800423e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004240:	4b30      	ldr	r3, [pc, #192]	; (8004304 <HAL_GPIO_Init+0x334>)
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	43db      	mvns	r3, r3
 800424a:	69ba      	ldr	r2, [r7, #24]
 800424c:	4013      	ands	r3, r2
 800424e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004258:	2b00      	cmp	r3, #0
 800425a:	d003      	beq.n	8004264 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800425c:	69ba      	ldr	r2, [r7, #24]
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	4313      	orrs	r3, r2
 8004262:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004264:	4a27      	ldr	r2, [pc, #156]	; (8004304 <HAL_GPIO_Init+0x334>)
 8004266:	69bb      	ldr	r3, [r7, #24]
 8004268:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800426a:	4b26      	ldr	r3, [pc, #152]	; (8004304 <HAL_GPIO_Init+0x334>)
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	43db      	mvns	r3, r3
 8004274:	69ba      	ldr	r2, [r7, #24]
 8004276:	4013      	ands	r3, r2
 8004278:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004282:	2b00      	cmp	r3, #0
 8004284:	d003      	beq.n	800428e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004286:	69ba      	ldr	r2, [r7, #24]
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	4313      	orrs	r3, r2
 800428c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800428e:	4a1d      	ldr	r2, [pc, #116]	; (8004304 <HAL_GPIO_Init+0x334>)
 8004290:	69bb      	ldr	r3, [r7, #24]
 8004292:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004294:	4b1b      	ldr	r3, [pc, #108]	; (8004304 <HAL_GPIO_Init+0x334>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	43db      	mvns	r3, r3
 800429e:	69ba      	ldr	r2, [r7, #24]
 80042a0:	4013      	ands	r3, r2
 80042a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d003      	beq.n	80042b8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80042b0:	69ba      	ldr	r2, [r7, #24]
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	4313      	orrs	r3, r2
 80042b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80042b8:	4a12      	ldr	r2, [pc, #72]	; (8004304 <HAL_GPIO_Init+0x334>)
 80042ba:	69bb      	ldr	r3, [r7, #24]
 80042bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80042be:	69fb      	ldr	r3, [r7, #28]
 80042c0:	3301      	adds	r3, #1
 80042c2:	61fb      	str	r3, [r7, #28]
 80042c4:	69fb      	ldr	r3, [r7, #28]
 80042c6:	2b0f      	cmp	r3, #15
 80042c8:	f67f ae90 	bls.w	8003fec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80042cc:	bf00      	nop
 80042ce:	bf00      	nop
 80042d0:	3724      	adds	r7, #36	; 0x24
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr
 80042da:	bf00      	nop
 80042dc:	40023800 	.word	0x40023800
 80042e0:	40013800 	.word	0x40013800
 80042e4:	40020000 	.word	0x40020000
 80042e8:	40020400 	.word	0x40020400
 80042ec:	40020800 	.word	0x40020800
 80042f0:	40020c00 	.word	0x40020c00
 80042f4:	40021000 	.word	0x40021000
 80042f8:	40021400 	.word	0x40021400
 80042fc:	40021800 	.word	0x40021800
 8004300:	40021c00 	.word	0x40021c00
 8004304:	40013c00 	.word	0x40013c00

08004308 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b086      	sub	sp, #24
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d101      	bne.n	800431a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	e267      	b.n	80047ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 0301 	and.w	r3, r3, #1
 8004322:	2b00      	cmp	r3, #0
 8004324:	d075      	beq.n	8004412 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004326:	4b88      	ldr	r3, [pc, #544]	; (8004548 <HAL_RCC_OscConfig+0x240>)
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	f003 030c 	and.w	r3, r3, #12
 800432e:	2b04      	cmp	r3, #4
 8004330:	d00c      	beq.n	800434c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004332:	4b85      	ldr	r3, [pc, #532]	; (8004548 <HAL_RCC_OscConfig+0x240>)
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800433a:	2b08      	cmp	r3, #8
 800433c:	d112      	bne.n	8004364 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800433e:	4b82      	ldr	r3, [pc, #520]	; (8004548 <HAL_RCC_OscConfig+0x240>)
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004346:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800434a:	d10b      	bne.n	8004364 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800434c:	4b7e      	ldr	r3, [pc, #504]	; (8004548 <HAL_RCC_OscConfig+0x240>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004354:	2b00      	cmp	r3, #0
 8004356:	d05b      	beq.n	8004410 <HAL_RCC_OscConfig+0x108>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d157      	bne.n	8004410 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	e242      	b.n	80047ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800436c:	d106      	bne.n	800437c <HAL_RCC_OscConfig+0x74>
 800436e:	4b76      	ldr	r3, [pc, #472]	; (8004548 <HAL_RCC_OscConfig+0x240>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a75      	ldr	r2, [pc, #468]	; (8004548 <HAL_RCC_OscConfig+0x240>)
 8004374:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004378:	6013      	str	r3, [r2, #0]
 800437a:	e01d      	b.n	80043b8 <HAL_RCC_OscConfig+0xb0>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004384:	d10c      	bne.n	80043a0 <HAL_RCC_OscConfig+0x98>
 8004386:	4b70      	ldr	r3, [pc, #448]	; (8004548 <HAL_RCC_OscConfig+0x240>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a6f      	ldr	r2, [pc, #444]	; (8004548 <HAL_RCC_OscConfig+0x240>)
 800438c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004390:	6013      	str	r3, [r2, #0]
 8004392:	4b6d      	ldr	r3, [pc, #436]	; (8004548 <HAL_RCC_OscConfig+0x240>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a6c      	ldr	r2, [pc, #432]	; (8004548 <HAL_RCC_OscConfig+0x240>)
 8004398:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800439c:	6013      	str	r3, [r2, #0]
 800439e:	e00b      	b.n	80043b8 <HAL_RCC_OscConfig+0xb0>
 80043a0:	4b69      	ldr	r3, [pc, #420]	; (8004548 <HAL_RCC_OscConfig+0x240>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a68      	ldr	r2, [pc, #416]	; (8004548 <HAL_RCC_OscConfig+0x240>)
 80043a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043aa:	6013      	str	r3, [r2, #0]
 80043ac:	4b66      	ldr	r3, [pc, #408]	; (8004548 <HAL_RCC_OscConfig+0x240>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a65      	ldr	r2, [pc, #404]	; (8004548 <HAL_RCC_OscConfig+0x240>)
 80043b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d013      	beq.n	80043e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043c0:	f7fe fcb0 	bl	8002d24 <HAL_GetTick>
 80043c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043c6:	e008      	b.n	80043da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043c8:	f7fe fcac 	bl	8002d24 <HAL_GetTick>
 80043cc:	4602      	mov	r2, r0
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	2b64      	cmp	r3, #100	; 0x64
 80043d4:	d901      	bls.n	80043da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80043d6:	2303      	movs	r3, #3
 80043d8:	e207      	b.n	80047ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043da:	4b5b      	ldr	r3, [pc, #364]	; (8004548 <HAL_RCC_OscConfig+0x240>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d0f0      	beq.n	80043c8 <HAL_RCC_OscConfig+0xc0>
 80043e6:	e014      	b.n	8004412 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043e8:	f7fe fc9c 	bl	8002d24 <HAL_GetTick>
 80043ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043ee:	e008      	b.n	8004402 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043f0:	f7fe fc98 	bl	8002d24 <HAL_GetTick>
 80043f4:	4602      	mov	r2, r0
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	2b64      	cmp	r3, #100	; 0x64
 80043fc:	d901      	bls.n	8004402 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80043fe:	2303      	movs	r3, #3
 8004400:	e1f3      	b.n	80047ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004402:	4b51      	ldr	r3, [pc, #324]	; (8004548 <HAL_RCC_OscConfig+0x240>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800440a:	2b00      	cmp	r3, #0
 800440c:	d1f0      	bne.n	80043f0 <HAL_RCC_OscConfig+0xe8>
 800440e:	e000      	b.n	8004412 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004410:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 0302 	and.w	r3, r3, #2
 800441a:	2b00      	cmp	r3, #0
 800441c:	d063      	beq.n	80044e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800441e:	4b4a      	ldr	r3, [pc, #296]	; (8004548 <HAL_RCC_OscConfig+0x240>)
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	f003 030c 	and.w	r3, r3, #12
 8004426:	2b00      	cmp	r3, #0
 8004428:	d00b      	beq.n	8004442 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800442a:	4b47      	ldr	r3, [pc, #284]	; (8004548 <HAL_RCC_OscConfig+0x240>)
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004432:	2b08      	cmp	r3, #8
 8004434:	d11c      	bne.n	8004470 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004436:	4b44      	ldr	r3, [pc, #272]	; (8004548 <HAL_RCC_OscConfig+0x240>)
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800443e:	2b00      	cmp	r3, #0
 8004440:	d116      	bne.n	8004470 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004442:	4b41      	ldr	r3, [pc, #260]	; (8004548 <HAL_RCC_OscConfig+0x240>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 0302 	and.w	r3, r3, #2
 800444a:	2b00      	cmp	r3, #0
 800444c:	d005      	beq.n	800445a <HAL_RCC_OscConfig+0x152>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	68db      	ldr	r3, [r3, #12]
 8004452:	2b01      	cmp	r3, #1
 8004454:	d001      	beq.n	800445a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e1c7      	b.n	80047ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800445a:	4b3b      	ldr	r3, [pc, #236]	; (8004548 <HAL_RCC_OscConfig+0x240>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	691b      	ldr	r3, [r3, #16]
 8004466:	00db      	lsls	r3, r3, #3
 8004468:	4937      	ldr	r1, [pc, #220]	; (8004548 <HAL_RCC_OscConfig+0x240>)
 800446a:	4313      	orrs	r3, r2
 800446c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800446e:	e03a      	b.n	80044e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	68db      	ldr	r3, [r3, #12]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d020      	beq.n	80044ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004478:	4b34      	ldr	r3, [pc, #208]	; (800454c <HAL_RCC_OscConfig+0x244>)
 800447a:	2201      	movs	r2, #1
 800447c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800447e:	f7fe fc51 	bl	8002d24 <HAL_GetTick>
 8004482:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004484:	e008      	b.n	8004498 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004486:	f7fe fc4d 	bl	8002d24 <HAL_GetTick>
 800448a:	4602      	mov	r2, r0
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	1ad3      	subs	r3, r2, r3
 8004490:	2b02      	cmp	r3, #2
 8004492:	d901      	bls.n	8004498 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004494:	2303      	movs	r3, #3
 8004496:	e1a8      	b.n	80047ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004498:	4b2b      	ldr	r3, [pc, #172]	; (8004548 <HAL_RCC_OscConfig+0x240>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 0302 	and.w	r3, r3, #2
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d0f0      	beq.n	8004486 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044a4:	4b28      	ldr	r3, [pc, #160]	; (8004548 <HAL_RCC_OscConfig+0x240>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	691b      	ldr	r3, [r3, #16]
 80044b0:	00db      	lsls	r3, r3, #3
 80044b2:	4925      	ldr	r1, [pc, #148]	; (8004548 <HAL_RCC_OscConfig+0x240>)
 80044b4:	4313      	orrs	r3, r2
 80044b6:	600b      	str	r3, [r1, #0]
 80044b8:	e015      	b.n	80044e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044ba:	4b24      	ldr	r3, [pc, #144]	; (800454c <HAL_RCC_OscConfig+0x244>)
 80044bc:	2200      	movs	r2, #0
 80044be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044c0:	f7fe fc30 	bl	8002d24 <HAL_GetTick>
 80044c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044c6:	e008      	b.n	80044da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044c8:	f7fe fc2c 	bl	8002d24 <HAL_GetTick>
 80044cc:	4602      	mov	r2, r0
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	1ad3      	subs	r3, r2, r3
 80044d2:	2b02      	cmp	r3, #2
 80044d4:	d901      	bls.n	80044da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80044d6:	2303      	movs	r3, #3
 80044d8:	e187      	b.n	80047ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044da:	4b1b      	ldr	r3, [pc, #108]	; (8004548 <HAL_RCC_OscConfig+0x240>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 0302 	and.w	r3, r3, #2
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d1f0      	bne.n	80044c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 0308 	and.w	r3, r3, #8
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d036      	beq.n	8004560 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	695b      	ldr	r3, [r3, #20]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d016      	beq.n	8004528 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044fa:	4b15      	ldr	r3, [pc, #84]	; (8004550 <HAL_RCC_OscConfig+0x248>)
 80044fc:	2201      	movs	r2, #1
 80044fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004500:	f7fe fc10 	bl	8002d24 <HAL_GetTick>
 8004504:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004506:	e008      	b.n	800451a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004508:	f7fe fc0c 	bl	8002d24 <HAL_GetTick>
 800450c:	4602      	mov	r2, r0
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	2b02      	cmp	r3, #2
 8004514:	d901      	bls.n	800451a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004516:	2303      	movs	r3, #3
 8004518:	e167      	b.n	80047ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800451a:	4b0b      	ldr	r3, [pc, #44]	; (8004548 <HAL_RCC_OscConfig+0x240>)
 800451c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800451e:	f003 0302 	and.w	r3, r3, #2
 8004522:	2b00      	cmp	r3, #0
 8004524:	d0f0      	beq.n	8004508 <HAL_RCC_OscConfig+0x200>
 8004526:	e01b      	b.n	8004560 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004528:	4b09      	ldr	r3, [pc, #36]	; (8004550 <HAL_RCC_OscConfig+0x248>)
 800452a:	2200      	movs	r2, #0
 800452c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800452e:	f7fe fbf9 	bl	8002d24 <HAL_GetTick>
 8004532:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004534:	e00e      	b.n	8004554 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004536:	f7fe fbf5 	bl	8002d24 <HAL_GetTick>
 800453a:	4602      	mov	r2, r0
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	1ad3      	subs	r3, r2, r3
 8004540:	2b02      	cmp	r3, #2
 8004542:	d907      	bls.n	8004554 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004544:	2303      	movs	r3, #3
 8004546:	e150      	b.n	80047ea <HAL_RCC_OscConfig+0x4e2>
 8004548:	40023800 	.word	0x40023800
 800454c:	42470000 	.word	0x42470000
 8004550:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004554:	4b88      	ldr	r3, [pc, #544]	; (8004778 <HAL_RCC_OscConfig+0x470>)
 8004556:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004558:	f003 0302 	and.w	r3, r3, #2
 800455c:	2b00      	cmp	r3, #0
 800455e:	d1ea      	bne.n	8004536 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 0304 	and.w	r3, r3, #4
 8004568:	2b00      	cmp	r3, #0
 800456a:	f000 8097 	beq.w	800469c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800456e:	2300      	movs	r3, #0
 8004570:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004572:	4b81      	ldr	r3, [pc, #516]	; (8004778 <HAL_RCC_OscConfig+0x470>)
 8004574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004576:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800457a:	2b00      	cmp	r3, #0
 800457c:	d10f      	bne.n	800459e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800457e:	2300      	movs	r3, #0
 8004580:	60bb      	str	r3, [r7, #8]
 8004582:	4b7d      	ldr	r3, [pc, #500]	; (8004778 <HAL_RCC_OscConfig+0x470>)
 8004584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004586:	4a7c      	ldr	r2, [pc, #496]	; (8004778 <HAL_RCC_OscConfig+0x470>)
 8004588:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800458c:	6413      	str	r3, [r2, #64]	; 0x40
 800458e:	4b7a      	ldr	r3, [pc, #488]	; (8004778 <HAL_RCC_OscConfig+0x470>)
 8004590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004592:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004596:	60bb      	str	r3, [r7, #8]
 8004598:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800459a:	2301      	movs	r3, #1
 800459c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800459e:	4b77      	ldr	r3, [pc, #476]	; (800477c <HAL_RCC_OscConfig+0x474>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d118      	bne.n	80045dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045aa:	4b74      	ldr	r3, [pc, #464]	; (800477c <HAL_RCC_OscConfig+0x474>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a73      	ldr	r2, [pc, #460]	; (800477c <HAL_RCC_OscConfig+0x474>)
 80045b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045b6:	f7fe fbb5 	bl	8002d24 <HAL_GetTick>
 80045ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045bc:	e008      	b.n	80045d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045be:	f7fe fbb1 	bl	8002d24 <HAL_GetTick>
 80045c2:	4602      	mov	r2, r0
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	1ad3      	subs	r3, r2, r3
 80045c8:	2b02      	cmp	r3, #2
 80045ca:	d901      	bls.n	80045d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80045cc:	2303      	movs	r3, #3
 80045ce:	e10c      	b.n	80047ea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045d0:	4b6a      	ldr	r3, [pc, #424]	; (800477c <HAL_RCC_OscConfig+0x474>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d0f0      	beq.n	80045be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d106      	bne.n	80045f2 <HAL_RCC_OscConfig+0x2ea>
 80045e4:	4b64      	ldr	r3, [pc, #400]	; (8004778 <HAL_RCC_OscConfig+0x470>)
 80045e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045e8:	4a63      	ldr	r2, [pc, #396]	; (8004778 <HAL_RCC_OscConfig+0x470>)
 80045ea:	f043 0301 	orr.w	r3, r3, #1
 80045ee:	6713      	str	r3, [r2, #112]	; 0x70
 80045f0:	e01c      	b.n	800462c <HAL_RCC_OscConfig+0x324>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	2b05      	cmp	r3, #5
 80045f8:	d10c      	bne.n	8004614 <HAL_RCC_OscConfig+0x30c>
 80045fa:	4b5f      	ldr	r3, [pc, #380]	; (8004778 <HAL_RCC_OscConfig+0x470>)
 80045fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045fe:	4a5e      	ldr	r2, [pc, #376]	; (8004778 <HAL_RCC_OscConfig+0x470>)
 8004600:	f043 0304 	orr.w	r3, r3, #4
 8004604:	6713      	str	r3, [r2, #112]	; 0x70
 8004606:	4b5c      	ldr	r3, [pc, #368]	; (8004778 <HAL_RCC_OscConfig+0x470>)
 8004608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800460a:	4a5b      	ldr	r2, [pc, #364]	; (8004778 <HAL_RCC_OscConfig+0x470>)
 800460c:	f043 0301 	orr.w	r3, r3, #1
 8004610:	6713      	str	r3, [r2, #112]	; 0x70
 8004612:	e00b      	b.n	800462c <HAL_RCC_OscConfig+0x324>
 8004614:	4b58      	ldr	r3, [pc, #352]	; (8004778 <HAL_RCC_OscConfig+0x470>)
 8004616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004618:	4a57      	ldr	r2, [pc, #348]	; (8004778 <HAL_RCC_OscConfig+0x470>)
 800461a:	f023 0301 	bic.w	r3, r3, #1
 800461e:	6713      	str	r3, [r2, #112]	; 0x70
 8004620:	4b55      	ldr	r3, [pc, #340]	; (8004778 <HAL_RCC_OscConfig+0x470>)
 8004622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004624:	4a54      	ldr	r2, [pc, #336]	; (8004778 <HAL_RCC_OscConfig+0x470>)
 8004626:	f023 0304 	bic.w	r3, r3, #4
 800462a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d015      	beq.n	8004660 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004634:	f7fe fb76 	bl	8002d24 <HAL_GetTick>
 8004638:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800463a:	e00a      	b.n	8004652 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800463c:	f7fe fb72 	bl	8002d24 <HAL_GetTick>
 8004640:	4602      	mov	r2, r0
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	1ad3      	subs	r3, r2, r3
 8004646:	f241 3288 	movw	r2, #5000	; 0x1388
 800464a:	4293      	cmp	r3, r2
 800464c:	d901      	bls.n	8004652 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800464e:	2303      	movs	r3, #3
 8004650:	e0cb      	b.n	80047ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004652:	4b49      	ldr	r3, [pc, #292]	; (8004778 <HAL_RCC_OscConfig+0x470>)
 8004654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004656:	f003 0302 	and.w	r3, r3, #2
 800465a:	2b00      	cmp	r3, #0
 800465c:	d0ee      	beq.n	800463c <HAL_RCC_OscConfig+0x334>
 800465e:	e014      	b.n	800468a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004660:	f7fe fb60 	bl	8002d24 <HAL_GetTick>
 8004664:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004666:	e00a      	b.n	800467e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004668:	f7fe fb5c 	bl	8002d24 <HAL_GetTick>
 800466c:	4602      	mov	r2, r0
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	1ad3      	subs	r3, r2, r3
 8004672:	f241 3288 	movw	r2, #5000	; 0x1388
 8004676:	4293      	cmp	r3, r2
 8004678:	d901      	bls.n	800467e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800467a:	2303      	movs	r3, #3
 800467c:	e0b5      	b.n	80047ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800467e:	4b3e      	ldr	r3, [pc, #248]	; (8004778 <HAL_RCC_OscConfig+0x470>)
 8004680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004682:	f003 0302 	and.w	r3, r3, #2
 8004686:	2b00      	cmp	r3, #0
 8004688:	d1ee      	bne.n	8004668 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800468a:	7dfb      	ldrb	r3, [r7, #23]
 800468c:	2b01      	cmp	r3, #1
 800468e:	d105      	bne.n	800469c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004690:	4b39      	ldr	r3, [pc, #228]	; (8004778 <HAL_RCC_OscConfig+0x470>)
 8004692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004694:	4a38      	ldr	r2, [pc, #224]	; (8004778 <HAL_RCC_OscConfig+0x470>)
 8004696:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800469a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	699b      	ldr	r3, [r3, #24]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	f000 80a1 	beq.w	80047e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80046a6:	4b34      	ldr	r3, [pc, #208]	; (8004778 <HAL_RCC_OscConfig+0x470>)
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	f003 030c 	and.w	r3, r3, #12
 80046ae:	2b08      	cmp	r3, #8
 80046b0:	d05c      	beq.n	800476c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	699b      	ldr	r3, [r3, #24]
 80046b6:	2b02      	cmp	r3, #2
 80046b8:	d141      	bne.n	800473e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046ba:	4b31      	ldr	r3, [pc, #196]	; (8004780 <HAL_RCC_OscConfig+0x478>)
 80046bc:	2200      	movs	r2, #0
 80046be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046c0:	f7fe fb30 	bl	8002d24 <HAL_GetTick>
 80046c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046c6:	e008      	b.n	80046da <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046c8:	f7fe fb2c 	bl	8002d24 <HAL_GetTick>
 80046cc:	4602      	mov	r2, r0
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	1ad3      	subs	r3, r2, r3
 80046d2:	2b02      	cmp	r3, #2
 80046d4:	d901      	bls.n	80046da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80046d6:	2303      	movs	r3, #3
 80046d8:	e087      	b.n	80047ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046da:	4b27      	ldr	r3, [pc, #156]	; (8004778 <HAL_RCC_OscConfig+0x470>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d1f0      	bne.n	80046c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	69da      	ldr	r2, [r3, #28]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6a1b      	ldr	r3, [r3, #32]
 80046ee:	431a      	orrs	r2, r3
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f4:	019b      	lsls	r3, r3, #6
 80046f6:	431a      	orrs	r2, r3
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046fc:	085b      	lsrs	r3, r3, #1
 80046fe:	3b01      	subs	r3, #1
 8004700:	041b      	lsls	r3, r3, #16
 8004702:	431a      	orrs	r2, r3
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004708:	061b      	lsls	r3, r3, #24
 800470a:	491b      	ldr	r1, [pc, #108]	; (8004778 <HAL_RCC_OscConfig+0x470>)
 800470c:	4313      	orrs	r3, r2
 800470e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004710:	4b1b      	ldr	r3, [pc, #108]	; (8004780 <HAL_RCC_OscConfig+0x478>)
 8004712:	2201      	movs	r2, #1
 8004714:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004716:	f7fe fb05 	bl	8002d24 <HAL_GetTick>
 800471a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800471c:	e008      	b.n	8004730 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800471e:	f7fe fb01 	bl	8002d24 <HAL_GetTick>
 8004722:	4602      	mov	r2, r0
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	1ad3      	subs	r3, r2, r3
 8004728:	2b02      	cmp	r3, #2
 800472a:	d901      	bls.n	8004730 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800472c:	2303      	movs	r3, #3
 800472e:	e05c      	b.n	80047ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004730:	4b11      	ldr	r3, [pc, #68]	; (8004778 <HAL_RCC_OscConfig+0x470>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004738:	2b00      	cmp	r3, #0
 800473a:	d0f0      	beq.n	800471e <HAL_RCC_OscConfig+0x416>
 800473c:	e054      	b.n	80047e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800473e:	4b10      	ldr	r3, [pc, #64]	; (8004780 <HAL_RCC_OscConfig+0x478>)
 8004740:	2200      	movs	r2, #0
 8004742:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004744:	f7fe faee 	bl	8002d24 <HAL_GetTick>
 8004748:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800474a:	e008      	b.n	800475e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800474c:	f7fe faea 	bl	8002d24 <HAL_GetTick>
 8004750:	4602      	mov	r2, r0
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	2b02      	cmp	r3, #2
 8004758:	d901      	bls.n	800475e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800475a:	2303      	movs	r3, #3
 800475c:	e045      	b.n	80047ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800475e:	4b06      	ldr	r3, [pc, #24]	; (8004778 <HAL_RCC_OscConfig+0x470>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004766:	2b00      	cmp	r3, #0
 8004768:	d1f0      	bne.n	800474c <HAL_RCC_OscConfig+0x444>
 800476a:	e03d      	b.n	80047e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	699b      	ldr	r3, [r3, #24]
 8004770:	2b01      	cmp	r3, #1
 8004772:	d107      	bne.n	8004784 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	e038      	b.n	80047ea <HAL_RCC_OscConfig+0x4e2>
 8004778:	40023800 	.word	0x40023800
 800477c:	40007000 	.word	0x40007000
 8004780:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004784:	4b1b      	ldr	r3, [pc, #108]	; (80047f4 <HAL_RCC_OscConfig+0x4ec>)
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	699b      	ldr	r3, [r3, #24]
 800478e:	2b01      	cmp	r3, #1
 8004790:	d028      	beq.n	80047e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800479c:	429a      	cmp	r2, r3
 800479e:	d121      	bne.n	80047e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047aa:	429a      	cmp	r2, r3
 80047ac:	d11a      	bne.n	80047e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047ae:	68fa      	ldr	r2, [r7, #12]
 80047b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80047b4:	4013      	ands	r3, r2
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80047ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047bc:	4293      	cmp	r3, r2
 80047be:	d111      	bne.n	80047e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ca:	085b      	lsrs	r3, r3, #1
 80047cc:	3b01      	subs	r3, #1
 80047ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d107      	bne.n	80047e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d001      	beq.n	80047e8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80047e4:	2301      	movs	r3, #1
 80047e6:	e000      	b.n	80047ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80047e8:	2300      	movs	r3, #0
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3718      	adds	r7, #24
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}
 80047f2:	bf00      	nop
 80047f4:	40023800 	.word	0x40023800

080047f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b084      	sub	sp, #16
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d101      	bne.n	800480c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	e0cc      	b.n	80049a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800480c:	4b68      	ldr	r3, [pc, #416]	; (80049b0 <HAL_RCC_ClockConfig+0x1b8>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f003 0307 	and.w	r3, r3, #7
 8004814:	683a      	ldr	r2, [r7, #0]
 8004816:	429a      	cmp	r2, r3
 8004818:	d90c      	bls.n	8004834 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800481a:	4b65      	ldr	r3, [pc, #404]	; (80049b0 <HAL_RCC_ClockConfig+0x1b8>)
 800481c:	683a      	ldr	r2, [r7, #0]
 800481e:	b2d2      	uxtb	r2, r2
 8004820:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004822:	4b63      	ldr	r3, [pc, #396]	; (80049b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 0307 	and.w	r3, r3, #7
 800482a:	683a      	ldr	r2, [r7, #0]
 800482c:	429a      	cmp	r2, r3
 800482e:	d001      	beq.n	8004834 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	e0b8      	b.n	80049a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 0302 	and.w	r3, r3, #2
 800483c:	2b00      	cmp	r3, #0
 800483e:	d020      	beq.n	8004882 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 0304 	and.w	r3, r3, #4
 8004848:	2b00      	cmp	r3, #0
 800484a:	d005      	beq.n	8004858 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800484c:	4b59      	ldr	r3, [pc, #356]	; (80049b4 <HAL_RCC_ClockConfig+0x1bc>)
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	4a58      	ldr	r2, [pc, #352]	; (80049b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004852:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004856:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 0308 	and.w	r3, r3, #8
 8004860:	2b00      	cmp	r3, #0
 8004862:	d005      	beq.n	8004870 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004864:	4b53      	ldr	r3, [pc, #332]	; (80049b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	4a52      	ldr	r2, [pc, #328]	; (80049b4 <HAL_RCC_ClockConfig+0x1bc>)
 800486a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800486e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004870:	4b50      	ldr	r3, [pc, #320]	; (80049b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	494d      	ldr	r1, [pc, #308]	; (80049b4 <HAL_RCC_ClockConfig+0x1bc>)
 800487e:	4313      	orrs	r3, r2
 8004880:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 0301 	and.w	r3, r3, #1
 800488a:	2b00      	cmp	r3, #0
 800488c:	d044      	beq.n	8004918 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	2b01      	cmp	r3, #1
 8004894:	d107      	bne.n	80048a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004896:	4b47      	ldr	r3, [pc, #284]	; (80049b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d119      	bne.n	80048d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	e07f      	b.n	80049a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	2b02      	cmp	r3, #2
 80048ac:	d003      	beq.n	80048b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048b2:	2b03      	cmp	r3, #3
 80048b4:	d107      	bne.n	80048c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048b6:	4b3f      	ldr	r3, [pc, #252]	; (80049b4 <HAL_RCC_ClockConfig+0x1bc>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d109      	bne.n	80048d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	e06f      	b.n	80049a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048c6:	4b3b      	ldr	r3, [pc, #236]	; (80049b4 <HAL_RCC_ClockConfig+0x1bc>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f003 0302 	and.w	r3, r3, #2
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d101      	bne.n	80048d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e067      	b.n	80049a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80048d6:	4b37      	ldr	r3, [pc, #220]	; (80049b4 <HAL_RCC_ClockConfig+0x1bc>)
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	f023 0203 	bic.w	r2, r3, #3
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	4934      	ldr	r1, [pc, #208]	; (80049b4 <HAL_RCC_ClockConfig+0x1bc>)
 80048e4:	4313      	orrs	r3, r2
 80048e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80048e8:	f7fe fa1c 	bl	8002d24 <HAL_GetTick>
 80048ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048ee:	e00a      	b.n	8004906 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048f0:	f7fe fa18 	bl	8002d24 <HAL_GetTick>
 80048f4:	4602      	mov	r2, r0
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	1ad3      	subs	r3, r2, r3
 80048fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80048fe:	4293      	cmp	r3, r2
 8004900:	d901      	bls.n	8004906 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004902:	2303      	movs	r3, #3
 8004904:	e04f      	b.n	80049a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004906:	4b2b      	ldr	r3, [pc, #172]	; (80049b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	f003 020c 	and.w	r2, r3, #12
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	429a      	cmp	r2, r3
 8004916:	d1eb      	bne.n	80048f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004918:	4b25      	ldr	r3, [pc, #148]	; (80049b0 <HAL_RCC_ClockConfig+0x1b8>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f003 0307 	and.w	r3, r3, #7
 8004920:	683a      	ldr	r2, [r7, #0]
 8004922:	429a      	cmp	r2, r3
 8004924:	d20c      	bcs.n	8004940 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004926:	4b22      	ldr	r3, [pc, #136]	; (80049b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004928:	683a      	ldr	r2, [r7, #0]
 800492a:	b2d2      	uxtb	r2, r2
 800492c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800492e:	4b20      	ldr	r3, [pc, #128]	; (80049b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f003 0307 	and.w	r3, r3, #7
 8004936:	683a      	ldr	r2, [r7, #0]
 8004938:	429a      	cmp	r2, r3
 800493a:	d001      	beq.n	8004940 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800493c:	2301      	movs	r3, #1
 800493e:	e032      	b.n	80049a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f003 0304 	and.w	r3, r3, #4
 8004948:	2b00      	cmp	r3, #0
 800494a:	d008      	beq.n	800495e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800494c:	4b19      	ldr	r3, [pc, #100]	; (80049b4 <HAL_RCC_ClockConfig+0x1bc>)
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	68db      	ldr	r3, [r3, #12]
 8004958:	4916      	ldr	r1, [pc, #88]	; (80049b4 <HAL_RCC_ClockConfig+0x1bc>)
 800495a:	4313      	orrs	r3, r2
 800495c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 0308 	and.w	r3, r3, #8
 8004966:	2b00      	cmp	r3, #0
 8004968:	d009      	beq.n	800497e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800496a:	4b12      	ldr	r3, [pc, #72]	; (80049b4 <HAL_RCC_ClockConfig+0x1bc>)
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	691b      	ldr	r3, [r3, #16]
 8004976:	00db      	lsls	r3, r3, #3
 8004978:	490e      	ldr	r1, [pc, #56]	; (80049b4 <HAL_RCC_ClockConfig+0x1bc>)
 800497a:	4313      	orrs	r3, r2
 800497c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800497e:	f000 f821 	bl	80049c4 <HAL_RCC_GetSysClockFreq>
 8004982:	4602      	mov	r2, r0
 8004984:	4b0b      	ldr	r3, [pc, #44]	; (80049b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	091b      	lsrs	r3, r3, #4
 800498a:	f003 030f 	and.w	r3, r3, #15
 800498e:	490a      	ldr	r1, [pc, #40]	; (80049b8 <HAL_RCC_ClockConfig+0x1c0>)
 8004990:	5ccb      	ldrb	r3, [r1, r3]
 8004992:	fa22 f303 	lsr.w	r3, r2, r3
 8004996:	4a09      	ldr	r2, [pc, #36]	; (80049bc <HAL_RCC_ClockConfig+0x1c4>)
 8004998:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800499a:	4b09      	ldr	r3, [pc, #36]	; (80049c0 <HAL_RCC_ClockConfig+0x1c8>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4618      	mov	r0, r3
 80049a0:	f7fe f97c 	bl	8002c9c <HAL_InitTick>

  return HAL_OK;
 80049a4:	2300      	movs	r3, #0
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3710      	adds	r7, #16
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}
 80049ae:	bf00      	nop
 80049b0:	40023c00 	.word	0x40023c00
 80049b4:	40023800 	.word	0x40023800
 80049b8:	0800a1e0 	.word	0x0800a1e0
 80049bc:	20000000 	.word	0x20000000
 80049c0:	20000004 	.word	0x20000004

080049c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049c8:	b094      	sub	sp, #80	; 0x50
 80049ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80049cc:	2300      	movs	r3, #0
 80049ce:	647b      	str	r3, [r7, #68]	; 0x44
 80049d0:	2300      	movs	r3, #0
 80049d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049d4:	2300      	movs	r3, #0
 80049d6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80049d8:	2300      	movs	r3, #0
 80049da:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80049dc:	4b79      	ldr	r3, [pc, #484]	; (8004bc4 <HAL_RCC_GetSysClockFreq+0x200>)
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	f003 030c 	and.w	r3, r3, #12
 80049e4:	2b08      	cmp	r3, #8
 80049e6:	d00d      	beq.n	8004a04 <HAL_RCC_GetSysClockFreq+0x40>
 80049e8:	2b08      	cmp	r3, #8
 80049ea:	f200 80e1 	bhi.w	8004bb0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d002      	beq.n	80049f8 <HAL_RCC_GetSysClockFreq+0x34>
 80049f2:	2b04      	cmp	r3, #4
 80049f4:	d003      	beq.n	80049fe <HAL_RCC_GetSysClockFreq+0x3a>
 80049f6:	e0db      	b.n	8004bb0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80049f8:	4b73      	ldr	r3, [pc, #460]	; (8004bc8 <HAL_RCC_GetSysClockFreq+0x204>)
 80049fa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80049fc:	e0db      	b.n	8004bb6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80049fe:	4b73      	ldr	r3, [pc, #460]	; (8004bcc <HAL_RCC_GetSysClockFreq+0x208>)
 8004a00:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004a02:	e0d8      	b.n	8004bb6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a04:	4b6f      	ldr	r3, [pc, #444]	; (8004bc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a0c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a0e:	4b6d      	ldr	r3, [pc, #436]	; (8004bc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d063      	beq.n	8004ae2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a1a:	4b6a      	ldr	r3, [pc, #424]	; (8004bc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	099b      	lsrs	r3, r3, #6
 8004a20:	2200      	movs	r2, #0
 8004a22:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a24:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a2c:	633b      	str	r3, [r7, #48]	; 0x30
 8004a2e:	2300      	movs	r3, #0
 8004a30:	637b      	str	r3, [r7, #52]	; 0x34
 8004a32:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004a36:	4622      	mov	r2, r4
 8004a38:	462b      	mov	r3, r5
 8004a3a:	f04f 0000 	mov.w	r0, #0
 8004a3e:	f04f 0100 	mov.w	r1, #0
 8004a42:	0159      	lsls	r1, r3, #5
 8004a44:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a48:	0150      	lsls	r0, r2, #5
 8004a4a:	4602      	mov	r2, r0
 8004a4c:	460b      	mov	r3, r1
 8004a4e:	4621      	mov	r1, r4
 8004a50:	1a51      	subs	r1, r2, r1
 8004a52:	6139      	str	r1, [r7, #16]
 8004a54:	4629      	mov	r1, r5
 8004a56:	eb63 0301 	sbc.w	r3, r3, r1
 8004a5a:	617b      	str	r3, [r7, #20]
 8004a5c:	f04f 0200 	mov.w	r2, #0
 8004a60:	f04f 0300 	mov.w	r3, #0
 8004a64:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a68:	4659      	mov	r1, fp
 8004a6a:	018b      	lsls	r3, r1, #6
 8004a6c:	4651      	mov	r1, sl
 8004a6e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004a72:	4651      	mov	r1, sl
 8004a74:	018a      	lsls	r2, r1, #6
 8004a76:	4651      	mov	r1, sl
 8004a78:	ebb2 0801 	subs.w	r8, r2, r1
 8004a7c:	4659      	mov	r1, fp
 8004a7e:	eb63 0901 	sbc.w	r9, r3, r1
 8004a82:	f04f 0200 	mov.w	r2, #0
 8004a86:	f04f 0300 	mov.w	r3, #0
 8004a8a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a8e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a92:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a96:	4690      	mov	r8, r2
 8004a98:	4699      	mov	r9, r3
 8004a9a:	4623      	mov	r3, r4
 8004a9c:	eb18 0303 	adds.w	r3, r8, r3
 8004aa0:	60bb      	str	r3, [r7, #8]
 8004aa2:	462b      	mov	r3, r5
 8004aa4:	eb49 0303 	adc.w	r3, r9, r3
 8004aa8:	60fb      	str	r3, [r7, #12]
 8004aaa:	f04f 0200 	mov.w	r2, #0
 8004aae:	f04f 0300 	mov.w	r3, #0
 8004ab2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004ab6:	4629      	mov	r1, r5
 8004ab8:	024b      	lsls	r3, r1, #9
 8004aba:	4621      	mov	r1, r4
 8004abc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004ac0:	4621      	mov	r1, r4
 8004ac2:	024a      	lsls	r2, r1, #9
 8004ac4:	4610      	mov	r0, r2
 8004ac6:	4619      	mov	r1, r3
 8004ac8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004aca:	2200      	movs	r2, #0
 8004acc:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ace:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ad0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004ad4:	f7fc f888 	bl	8000be8 <__aeabi_uldivmod>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	460b      	mov	r3, r1
 8004adc:	4613      	mov	r3, r2
 8004ade:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ae0:	e058      	b.n	8004b94 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ae2:	4b38      	ldr	r3, [pc, #224]	; (8004bc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	099b      	lsrs	r3, r3, #6
 8004ae8:	2200      	movs	r2, #0
 8004aea:	4618      	mov	r0, r3
 8004aec:	4611      	mov	r1, r2
 8004aee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004af2:	623b      	str	r3, [r7, #32]
 8004af4:	2300      	movs	r3, #0
 8004af6:	627b      	str	r3, [r7, #36]	; 0x24
 8004af8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004afc:	4642      	mov	r2, r8
 8004afe:	464b      	mov	r3, r9
 8004b00:	f04f 0000 	mov.w	r0, #0
 8004b04:	f04f 0100 	mov.w	r1, #0
 8004b08:	0159      	lsls	r1, r3, #5
 8004b0a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b0e:	0150      	lsls	r0, r2, #5
 8004b10:	4602      	mov	r2, r0
 8004b12:	460b      	mov	r3, r1
 8004b14:	4641      	mov	r1, r8
 8004b16:	ebb2 0a01 	subs.w	sl, r2, r1
 8004b1a:	4649      	mov	r1, r9
 8004b1c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004b20:	f04f 0200 	mov.w	r2, #0
 8004b24:	f04f 0300 	mov.w	r3, #0
 8004b28:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004b2c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004b30:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004b34:	ebb2 040a 	subs.w	r4, r2, sl
 8004b38:	eb63 050b 	sbc.w	r5, r3, fp
 8004b3c:	f04f 0200 	mov.w	r2, #0
 8004b40:	f04f 0300 	mov.w	r3, #0
 8004b44:	00eb      	lsls	r3, r5, #3
 8004b46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b4a:	00e2      	lsls	r2, r4, #3
 8004b4c:	4614      	mov	r4, r2
 8004b4e:	461d      	mov	r5, r3
 8004b50:	4643      	mov	r3, r8
 8004b52:	18e3      	adds	r3, r4, r3
 8004b54:	603b      	str	r3, [r7, #0]
 8004b56:	464b      	mov	r3, r9
 8004b58:	eb45 0303 	adc.w	r3, r5, r3
 8004b5c:	607b      	str	r3, [r7, #4]
 8004b5e:	f04f 0200 	mov.w	r2, #0
 8004b62:	f04f 0300 	mov.w	r3, #0
 8004b66:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004b6a:	4629      	mov	r1, r5
 8004b6c:	028b      	lsls	r3, r1, #10
 8004b6e:	4621      	mov	r1, r4
 8004b70:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b74:	4621      	mov	r1, r4
 8004b76:	028a      	lsls	r2, r1, #10
 8004b78:	4610      	mov	r0, r2
 8004b7a:	4619      	mov	r1, r3
 8004b7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b7e:	2200      	movs	r2, #0
 8004b80:	61bb      	str	r3, [r7, #24]
 8004b82:	61fa      	str	r2, [r7, #28]
 8004b84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b88:	f7fc f82e 	bl	8000be8 <__aeabi_uldivmod>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	460b      	mov	r3, r1
 8004b90:	4613      	mov	r3, r2
 8004b92:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004b94:	4b0b      	ldr	r3, [pc, #44]	; (8004bc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	0c1b      	lsrs	r3, r3, #16
 8004b9a:	f003 0303 	and.w	r3, r3, #3
 8004b9e:	3301      	adds	r3, #1
 8004ba0:	005b      	lsls	r3, r3, #1
 8004ba2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004ba4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004ba6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ba8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004bae:	e002      	b.n	8004bb6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004bb0:	4b05      	ldr	r3, [pc, #20]	; (8004bc8 <HAL_RCC_GetSysClockFreq+0x204>)
 8004bb2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004bb4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004bb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	3750      	adds	r7, #80	; 0x50
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bc2:	bf00      	nop
 8004bc4:	40023800 	.word	0x40023800
 8004bc8:	00f42400 	.word	0x00f42400
 8004bcc:	007a1200 	.word	0x007a1200

08004bd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004bd4:	4b03      	ldr	r3, [pc, #12]	; (8004be4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr
 8004be2:	bf00      	nop
 8004be4:	20000000 	.word	0x20000000

08004be8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004bec:	f7ff fff0 	bl	8004bd0 <HAL_RCC_GetHCLKFreq>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	4b05      	ldr	r3, [pc, #20]	; (8004c08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	0a9b      	lsrs	r3, r3, #10
 8004bf8:	f003 0307 	and.w	r3, r3, #7
 8004bfc:	4903      	ldr	r1, [pc, #12]	; (8004c0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004bfe:	5ccb      	ldrb	r3, [r1, r3]
 8004c00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	bd80      	pop	{r7, pc}
 8004c08:	40023800 	.word	0x40023800
 8004c0c:	0800a1f0 	.word	0x0800a1f0

08004c10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004c14:	f7ff ffdc 	bl	8004bd0 <HAL_RCC_GetHCLKFreq>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	4b05      	ldr	r3, [pc, #20]	; (8004c30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	0b5b      	lsrs	r3, r3, #13
 8004c20:	f003 0307 	and.w	r3, r3, #7
 8004c24:	4903      	ldr	r1, [pc, #12]	; (8004c34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c26:	5ccb      	ldrb	r3, [r1, r3]
 8004c28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	bd80      	pop	{r7, pc}
 8004c30:	40023800 	.word	0x40023800
 8004c34:	0800a1f0 	.word	0x0800a1f0

08004c38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b082      	sub	sp, #8
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d101      	bne.n	8004c4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	e041      	b.n	8004cce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c50:	b2db      	uxtb	r3, r3
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d106      	bne.n	8004c64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f7fd fd20 	bl	80026a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2202      	movs	r2, #2
 8004c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681a      	ldr	r2, [r3, #0]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	3304      	adds	r3, #4
 8004c74:	4619      	mov	r1, r3
 8004c76:	4610      	mov	r0, r2
 8004c78:	f000 fa10 	bl	800509c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2201      	movs	r2, #1
 8004c80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2201      	movs	r2, #1
 8004c88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2201      	movs	r2, #1
 8004c90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2201      	movs	r2, #1
 8004c98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2201      	movs	r2, #1
 8004cb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ccc:	2300      	movs	r3, #0
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3708      	adds	r7, #8
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}

08004cd6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004cd6:	b580      	push	{r7, lr}
 8004cd8:	b082      	sub	sp, #8
 8004cda:	af00      	add	r7, sp, #0
 8004cdc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d101      	bne.n	8004ce8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e041      	b.n	8004d6c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d106      	bne.n	8004d02 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	f000 f839 	bl	8004d74 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2202      	movs	r2, #2
 8004d06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	3304      	adds	r3, #4
 8004d12:	4619      	mov	r1, r3
 8004d14:	4610      	mov	r0, r2
 8004d16:	f000 f9c1 	bl	800509c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2201      	movs	r2, #1
 8004d26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2201      	movs	r2, #1
 8004d36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2201      	movs	r2, #1
 8004d46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2201      	movs	r2, #1
 8004d56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2201      	movs	r2, #1
 8004d66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d6a:	2300      	movs	r3, #0
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	3708      	adds	r7, #8
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}

08004d74 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b083      	sub	sp, #12
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004d7c:	bf00      	nop
 8004d7e:	370c      	adds	r7, #12
 8004d80:	46bd      	mov	sp, r7
 8004d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d86:	4770      	bx	lr

08004d88 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b086      	sub	sp, #24
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	60f8      	str	r0, [r7, #12]
 8004d90:	60b9      	str	r1, [r7, #8]
 8004d92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d94:	2300      	movs	r3, #0
 8004d96:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d9e:	2b01      	cmp	r3, #1
 8004da0:	d101      	bne.n	8004da6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004da2:	2302      	movs	r3, #2
 8004da4:	e0ae      	b.n	8004f04 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2201      	movs	r2, #1
 8004daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2b0c      	cmp	r3, #12
 8004db2:	f200 809f 	bhi.w	8004ef4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004db6:	a201      	add	r2, pc, #4	; (adr r2, 8004dbc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dbc:	08004df1 	.word	0x08004df1
 8004dc0:	08004ef5 	.word	0x08004ef5
 8004dc4:	08004ef5 	.word	0x08004ef5
 8004dc8:	08004ef5 	.word	0x08004ef5
 8004dcc:	08004e31 	.word	0x08004e31
 8004dd0:	08004ef5 	.word	0x08004ef5
 8004dd4:	08004ef5 	.word	0x08004ef5
 8004dd8:	08004ef5 	.word	0x08004ef5
 8004ddc:	08004e73 	.word	0x08004e73
 8004de0:	08004ef5 	.word	0x08004ef5
 8004de4:	08004ef5 	.word	0x08004ef5
 8004de8:	08004ef5 	.word	0x08004ef5
 8004dec:	08004eb3 	.word	0x08004eb3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	68b9      	ldr	r1, [r7, #8]
 8004df6:	4618      	mov	r0, r3
 8004df8:	f000 f9f0 	bl	80051dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	699a      	ldr	r2, [r3, #24]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f042 0208 	orr.w	r2, r2, #8
 8004e0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	699a      	ldr	r2, [r3, #24]
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f022 0204 	bic.w	r2, r2, #4
 8004e1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	6999      	ldr	r1, [r3, #24]
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	691a      	ldr	r2, [r3, #16]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	430a      	orrs	r2, r1
 8004e2c:	619a      	str	r2, [r3, #24]
      break;
 8004e2e:	e064      	b.n	8004efa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	68b9      	ldr	r1, [r7, #8]
 8004e36:	4618      	mov	r0, r3
 8004e38:	f000 fa40 	bl	80052bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	699a      	ldr	r2, [r3, #24]
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	699a      	ldr	r2, [r3, #24]
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	6999      	ldr	r1, [r3, #24]
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	691b      	ldr	r3, [r3, #16]
 8004e66:	021a      	lsls	r2, r3, #8
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	430a      	orrs	r2, r1
 8004e6e:	619a      	str	r2, [r3, #24]
      break;
 8004e70:	e043      	b.n	8004efa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	68b9      	ldr	r1, [r7, #8]
 8004e78:	4618      	mov	r0, r3
 8004e7a:	f000 fa95 	bl	80053a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	69da      	ldr	r2, [r3, #28]
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f042 0208 	orr.w	r2, r2, #8
 8004e8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	69da      	ldr	r2, [r3, #28]
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f022 0204 	bic.w	r2, r2, #4
 8004e9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	69d9      	ldr	r1, [r3, #28]
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	691a      	ldr	r2, [r3, #16]
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	430a      	orrs	r2, r1
 8004eae:	61da      	str	r2, [r3, #28]
      break;
 8004eb0:	e023      	b.n	8004efa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	68b9      	ldr	r1, [r7, #8]
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f000 fae9 	bl	8005490 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	69da      	ldr	r2, [r3, #28]
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ecc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	69da      	ldr	r2, [r3, #28]
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004edc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	69d9      	ldr	r1, [r3, #28]
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	691b      	ldr	r3, [r3, #16]
 8004ee8:	021a      	lsls	r2, r3, #8
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	430a      	orrs	r2, r1
 8004ef0:	61da      	str	r2, [r3, #28]
      break;
 8004ef2:	e002      	b.n	8004efa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	75fb      	strb	r3, [r7, #23]
      break;
 8004ef8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2200      	movs	r2, #0
 8004efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f02:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	3718      	adds	r7, #24
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}

08004f0c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b084      	sub	sp, #16
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f16:	2300      	movs	r3, #0
 8004f18:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d101      	bne.n	8004f28 <HAL_TIM_ConfigClockSource+0x1c>
 8004f24:	2302      	movs	r3, #2
 8004f26:	e0b4      	b.n	8005092 <HAL_TIM_ConfigClockSource+0x186>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2202      	movs	r2, #2
 8004f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	689b      	ldr	r3, [r3, #8]
 8004f3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004f46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f4e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	68ba      	ldr	r2, [r7, #8]
 8004f56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f60:	d03e      	beq.n	8004fe0 <HAL_TIM_ConfigClockSource+0xd4>
 8004f62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f66:	f200 8087 	bhi.w	8005078 <HAL_TIM_ConfigClockSource+0x16c>
 8004f6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f6e:	f000 8086 	beq.w	800507e <HAL_TIM_ConfigClockSource+0x172>
 8004f72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f76:	d87f      	bhi.n	8005078 <HAL_TIM_ConfigClockSource+0x16c>
 8004f78:	2b70      	cmp	r3, #112	; 0x70
 8004f7a:	d01a      	beq.n	8004fb2 <HAL_TIM_ConfigClockSource+0xa6>
 8004f7c:	2b70      	cmp	r3, #112	; 0x70
 8004f7e:	d87b      	bhi.n	8005078 <HAL_TIM_ConfigClockSource+0x16c>
 8004f80:	2b60      	cmp	r3, #96	; 0x60
 8004f82:	d050      	beq.n	8005026 <HAL_TIM_ConfigClockSource+0x11a>
 8004f84:	2b60      	cmp	r3, #96	; 0x60
 8004f86:	d877      	bhi.n	8005078 <HAL_TIM_ConfigClockSource+0x16c>
 8004f88:	2b50      	cmp	r3, #80	; 0x50
 8004f8a:	d03c      	beq.n	8005006 <HAL_TIM_ConfigClockSource+0xfa>
 8004f8c:	2b50      	cmp	r3, #80	; 0x50
 8004f8e:	d873      	bhi.n	8005078 <HAL_TIM_ConfigClockSource+0x16c>
 8004f90:	2b40      	cmp	r3, #64	; 0x40
 8004f92:	d058      	beq.n	8005046 <HAL_TIM_ConfigClockSource+0x13a>
 8004f94:	2b40      	cmp	r3, #64	; 0x40
 8004f96:	d86f      	bhi.n	8005078 <HAL_TIM_ConfigClockSource+0x16c>
 8004f98:	2b30      	cmp	r3, #48	; 0x30
 8004f9a:	d064      	beq.n	8005066 <HAL_TIM_ConfigClockSource+0x15a>
 8004f9c:	2b30      	cmp	r3, #48	; 0x30
 8004f9e:	d86b      	bhi.n	8005078 <HAL_TIM_ConfigClockSource+0x16c>
 8004fa0:	2b20      	cmp	r3, #32
 8004fa2:	d060      	beq.n	8005066 <HAL_TIM_ConfigClockSource+0x15a>
 8004fa4:	2b20      	cmp	r3, #32
 8004fa6:	d867      	bhi.n	8005078 <HAL_TIM_ConfigClockSource+0x16c>
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d05c      	beq.n	8005066 <HAL_TIM_ConfigClockSource+0x15a>
 8004fac:	2b10      	cmp	r3, #16
 8004fae:	d05a      	beq.n	8005066 <HAL_TIM_ConfigClockSource+0x15a>
 8004fb0:	e062      	b.n	8005078 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6818      	ldr	r0, [r3, #0]
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	6899      	ldr	r1, [r3, #8]
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	685a      	ldr	r2, [r3, #4]
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	68db      	ldr	r3, [r3, #12]
 8004fc2:	f000 fb35 	bl	8005630 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	689b      	ldr	r3, [r3, #8]
 8004fcc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004fd4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	68ba      	ldr	r2, [r7, #8]
 8004fdc:	609a      	str	r2, [r3, #8]
      break;
 8004fde:	e04f      	b.n	8005080 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6818      	ldr	r0, [r3, #0]
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	6899      	ldr	r1, [r3, #8]
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	685a      	ldr	r2, [r3, #4]
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	68db      	ldr	r3, [r3, #12]
 8004ff0:	f000 fb1e 	bl	8005630 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	689a      	ldr	r2, [r3, #8]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005002:	609a      	str	r2, [r3, #8]
      break;
 8005004:	e03c      	b.n	8005080 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6818      	ldr	r0, [r3, #0]
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	6859      	ldr	r1, [r3, #4]
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	68db      	ldr	r3, [r3, #12]
 8005012:	461a      	mov	r2, r3
 8005014:	f000 fa92 	bl	800553c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	2150      	movs	r1, #80	; 0x50
 800501e:	4618      	mov	r0, r3
 8005020:	f000 faeb 	bl	80055fa <TIM_ITRx_SetConfig>
      break;
 8005024:	e02c      	b.n	8005080 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6818      	ldr	r0, [r3, #0]
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	6859      	ldr	r1, [r3, #4]
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	68db      	ldr	r3, [r3, #12]
 8005032:	461a      	mov	r2, r3
 8005034:	f000 fab1 	bl	800559a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	2160      	movs	r1, #96	; 0x60
 800503e:	4618      	mov	r0, r3
 8005040:	f000 fadb 	bl	80055fa <TIM_ITRx_SetConfig>
      break;
 8005044:	e01c      	b.n	8005080 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6818      	ldr	r0, [r3, #0]
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	6859      	ldr	r1, [r3, #4]
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	68db      	ldr	r3, [r3, #12]
 8005052:	461a      	mov	r2, r3
 8005054:	f000 fa72 	bl	800553c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	2140      	movs	r1, #64	; 0x40
 800505e:	4618      	mov	r0, r3
 8005060:	f000 facb 	bl	80055fa <TIM_ITRx_SetConfig>
      break;
 8005064:	e00c      	b.n	8005080 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4619      	mov	r1, r3
 8005070:	4610      	mov	r0, r2
 8005072:	f000 fac2 	bl	80055fa <TIM_ITRx_SetConfig>
      break;
 8005076:	e003      	b.n	8005080 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	73fb      	strb	r3, [r7, #15]
      break;
 800507c:	e000      	b.n	8005080 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800507e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2201      	movs	r2, #1
 8005084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2200      	movs	r2, #0
 800508c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005090:	7bfb      	ldrb	r3, [r7, #15]
}
 8005092:	4618      	mov	r0, r3
 8005094:	3710      	adds	r7, #16
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}
	...

0800509c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800509c:	b480      	push	{r7}
 800509e:	b085      	sub	sp, #20
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	4a40      	ldr	r2, [pc, #256]	; (80051b0 <TIM_Base_SetConfig+0x114>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d013      	beq.n	80050dc <TIM_Base_SetConfig+0x40>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050ba:	d00f      	beq.n	80050dc <TIM_Base_SetConfig+0x40>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	4a3d      	ldr	r2, [pc, #244]	; (80051b4 <TIM_Base_SetConfig+0x118>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d00b      	beq.n	80050dc <TIM_Base_SetConfig+0x40>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	4a3c      	ldr	r2, [pc, #240]	; (80051b8 <TIM_Base_SetConfig+0x11c>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d007      	beq.n	80050dc <TIM_Base_SetConfig+0x40>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	4a3b      	ldr	r2, [pc, #236]	; (80051bc <TIM_Base_SetConfig+0x120>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d003      	beq.n	80050dc <TIM_Base_SetConfig+0x40>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	4a3a      	ldr	r2, [pc, #232]	; (80051c0 <TIM_Base_SetConfig+0x124>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d108      	bne.n	80050ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	68fa      	ldr	r2, [r7, #12]
 80050ea:	4313      	orrs	r3, r2
 80050ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	4a2f      	ldr	r2, [pc, #188]	; (80051b0 <TIM_Base_SetConfig+0x114>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d02b      	beq.n	800514e <TIM_Base_SetConfig+0xb2>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050fc:	d027      	beq.n	800514e <TIM_Base_SetConfig+0xb2>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	4a2c      	ldr	r2, [pc, #176]	; (80051b4 <TIM_Base_SetConfig+0x118>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d023      	beq.n	800514e <TIM_Base_SetConfig+0xb2>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	4a2b      	ldr	r2, [pc, #172]	; (80051b8 <TIM_Base_SetConfig+0x11c>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d01f      	beq.n	800514e <TIM_Base_SetConfig+0xb2>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	4a2a      	ldr	r2, [pc, #168]	; (80051bc <TIM_Base_SetConfig+0x120>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d01b      	beq.n	800514e <TIM_Base_SetConfig+0xb2>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	4a29      	ldr	r2, [pc, #164]	; (80051c0 <TIM_Base_SetConfig+0x124>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d017      	beq.n	800514e <TIM_Base_SetConfig+0xb2>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	4a28      	ldr	r2, [pc, #160]	; (80051c4 <TIM_Base_SetConfig+0x128>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d013      	beq.n	800514e <TIM_Base_SetConfig+0xb2>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4a27      	ldr	r2, [pc, #156]	; (80051c8 <TIM_Base_SetConfig+0x12c>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d00f      	beq.n	800514e <TIM_Base_SetConfig+0xb2>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	4a26      	ldr	r2, [pc, #152]	; (80051cc <TIM_Base_SetConfig+0x130>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d00b      	beq.n	800514e <TIM_Base_SetConfig+0xb2>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	4a25      	ldr	r2, [pc, #148]	; (80051d0 <TIM_Base_SetConfig+0x134>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d007      	beq.n	800514e <TIM_Base_SetConfig+0xb2>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	4a24      	ldr	r2, [pc, #144]	; (80051d4 <TIM_Base_SetConfig+0x138>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d003      	beq.n	800514e <TIM_Base_SetConfig+0xb2>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	4a23      	ldr	r2, [pc, #140]	; (80051d8 <TIM_Base_SetConfig+0x13c>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d108      	bne.n	8005160 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005154:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	68db      	ldr	r3, [r3, #12]
 800515a:	68fa      	ldr	r2, [r7, #12]
 800515c:	4313      	orrs	r3, r2
 800515e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	695b      	ldr	r3, [r3, #20]
 800516a:	4313      	orrs	r3, r2
 800516c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	68fa      	ldr	r2, [r7, #12]
 8005172:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	689a      	ldr	r2, [r3, #8]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	4a0a      	ldr	r2, [pc, #40]	; (80051b0 <TIM_Base_SetConfig+0x114>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d003      	beq.n	8005194 <TIM_Base_SetConfig+0xf8>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	4a0c      	ldr	r2, [pc, #48]	; (80051c0 <TIM_Base_SetConfig+0x124>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d103      	bne.n	800519c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	691a      	ldr	r2, [r3, #16]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2201      	movs	r2, #1
 80051a0:	615a      	str	r2, [r3, #20]
}
 80051a2:	bf00      	nop
 80051a4:	3714      	adds	r7, #20
 80051a6:	46bd      	mov	sp, r7
 80051a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ac:	4770      	bx	lr
 80051ae:	bf00      	nop
 80051b0:	40010000 	.word	0x40010000
 80051b4:	40000400 	.word	0x40000400
 80051b8:	40000800 	.word	0x40000800
 80051bc:	40000c00 	.word	0x40000c00
 80051c0:	40010400 	.word	0x40010400
 80051c4:	40014000 	.word	0x40014000
 80051c8:	40014400 	.word	0x40014400
 80051cc:	40014800 	.word	0x40014800
 80051d0:	40001800 	.word	0x40001800
 80051d4:	40001c00 	.word	0x40001c00
 80051d8:	40002000 	.word	0x40002000

080051dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051dc:	b480      	push	{r7}
 80051de:	b087      	sub	sp, #28
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
 80051e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6a1b      	ldr	r3, [r3, #32]
 80051ea:	f023 0201 	bic.w	r2, r3, #1
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6a1b      	ldr	r3, [r3, #32]
 80051f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	699b      	ldr	r3, [r3, #24]
 8005202:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800520a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f023 0303 	bic.w	r3, r3, #3
 8005212:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	68fa      	ldr	r2, [r7, #12]
 800521a:	4313      	orrs	r3, r2
 800521c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	f023 0302 	bic.w	r3, r3, #2
 8005224:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	697a      	ldr	r2, [r7, #20]
 800522c:	4313      	orrs	r3, r2
 800522e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	4a20      	ldr	r2, [pc, #128]	; (80052b4 <TIM_OC1_SetConfig+0xd8>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d003      	beq.n	8005240 <TIM_OC1_SetConfig+0x64>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	4a1f      	ldr	r2, [pc, #124]	; (80052b8 <TIM_OC1_SetConfig+0xdc>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d10c      	bne.n	800525a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	f023 0308 	bic.w	r3, r3, #8
 8005246:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	68db      	ldr	r3, [r3, #12]
 800524c:	697a      	ldr	r2, [r7, #20]
 800524e:	4313      	orrs	r3, r2
 8005250:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	f023 0304 	bic.w	r3, r3, #4
 8005258:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	4a15      	ldr	r2, [pc, #84]	; (80052b4 <TIM_OC1_SetConfig+0xd8>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d003      	beq.n	800526a <TIM_OC1_SetConfig+0x8e>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	4a14      	ldr	r2, [pc, #80]	; (80052b8 <TIM_OC1_SetConfig+0xdc>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d111      	bne.n	800528e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005270:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005278:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	695b      	ldr	r3, [r3, #20]
 800527e:	693a      	ldr	r2, [r7, #16]
 8005280:	4313      	orrs	r3, r2
 8005282:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	699b      	ldr	r3, [r3, #24]
 8005288:	693a      	ldr	r2, [r7, #16]
 800528a:	4313      	orrs	r3, r2
 800528c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	693a      	ldr	r2, [r7, #16]
 8005292:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	68fa      	ldr	r2, [r7, #12]
 8005298:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	685a      	ldr	r2, [r3, #4]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	697a      	ldr	r2, [r7, #20]
 80052a6:	621a      	str	r2, [r3, #32]
}
 80052a8:	bf00      	nop
 80052aa:	371c      	adds	r7, #28
 80052ac:	46bd      	mov	sp, r7
 80052ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b2:	4770      	bx	lr
 80052b4:	40010000 	.word	0x40010000
 80052b8:	40010400 	.word	0x40010400

080052bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80052bc:	b480      	push	{r7}
 80052be:	b087      	sub	sp, #28
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6a1b      	ldr	r3, [r3, #32]
 80052ca:	f023 0210 	bic.w	r2, r3, #16
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6a1b      	ldr	r3, [r3, #32]
 80052d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	699b      	ldr	r3, [r3, #24]
 80052e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	021b      	lsls	r3, r3, #8
 80052fa:	68fa      	ldr	r2, [r7, #12]
 80052fc:	4313      	orrs	r3, r2
 80052fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	f023 0320 	bic.w	r3, r3, #32
 8005306:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	011b      	lsls	r3, r3, #4
 800530e:	697a      	ldr	r2, [r7, #20]
 8005310:	4313      	orrs	r3, r2
 8005312:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	4a22      	ldr	r2, [pc, #136]	; (80053a0 <TIM_OC2_SetConfig+0xe4>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d003      	beq.n	8005324 <TIM_OC2_SetConfig+0x68>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	4a21      	ldr	r2, [pc, #132]	; (80053a4 <TIM_OC2_SetConfig+0xe8>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d10d      	bne.n	8005340 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800532a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	68db      	ldr	r3, [r3, #12]
 8005330:	011b      	lsls	r3, r3, #4
 8005332:	697a      	ldr	r2, [r7, #20]
 8005334:	4313      	orrs	r3, r2
 8005336:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800533e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	4a17      	ldr	r2, [pc, #92]	; (80053a0 <TIM_OC2_SetConfig+0xe4>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d003      	beq.n	8005350 <TIM_OC2_SetConfig+0x94>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	4a16      	ldr	r2, [pc, #88]	; (80053a4 <TIM_OC2_SetConfig+0xe8>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d113      	bne.n	8005378 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005356:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800535e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	695b      	ldr	r3, [r3, #20]
 8005364:	009b      	lsls	r3, r3, #2
 8005366:	693a      	ldr	r2, [r7, #16]
 8005368:	4313      	orrs	r3, r2
 800536a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	699b      	ldr	r3, [r3, #24]
 8005370:	009b      	lsls	r3, r3, #2
 8005372:	693a      	ldr	r2, [r7, #16]
 8005374:	4313      	orrs	r3, r2
 8005376:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	693a      	ldr	r2, [r7, #16]
 800537c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	68fa      	ldr	r2, [r7, #12]
 8005382:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	685a      	ldr	r2, [r3, #4]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	697a      	ldr	r2, [r7, #20]
 8005390:	621a      	str	r2, [r3, #32]
}
 8005392:	bf00      	nop
 8005394:	371c      	adds	r7, #28
 8005396:	46bd      	mov	sp, r7
 8005398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539c:	4770      	bx	lr
 800539e:	bf00      	nop
 80053a0:	40010000 	.word	0x40010000
 80053a4:	40010400 	.word	0x40010400

080053a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b087      	sub	sp, #28
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
 80053b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6a1b      	ldr	r3, [r3, #32]
 80053b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6a1b      	ldr	r3, [r3, #32]
 80053c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	69db      	ldr	r3, [r3, #28]
 80053ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f023 0303 	bic.w	r3, r3, #3
 80053de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	68fa      	ldr	r2, [r7, #12]
 80053e6:	4313      	orrs	r3, r2
 80053e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80053f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	021b      	lsls	r3, r3, #8
 80053f8:	697a      	ldr	r2, [r7, #20]
 80053fa:	4313      	orrs	r3, r2
 80053fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	4a21      	ldr	r2, [pc, #132]	; (8005488 <TIM_OC3_SetConfig+0xe0>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d003      	beq.n	800540e <TIM_OC3_SetConfig+0x66>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	4a20      	ldr	r2, [pc, #128]	; (800548c <TIM_OC3_SetConfig+0xe4>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d10d      	bne.n	800542a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005414:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	68db      	ldr	r3, [r3, #12]
 800541a:	021b      	lsls	r3, r3, #8
 800541c:	697a      	ldr	r2, [r7, #20]
 800541e:	4313      	orrs	r3, r2
 8005420:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005428:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	4a16      	ldr	r2, [pc, #88]	; (8005488 <TIM_OC3_SetConfig+0xe0>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d003      	beq.n	800543a <TIM_OC3_SetConfig+0x92>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	4a15      	ldr	r2, [pc, #84]	; (800548c <TIM_OC3_SetConfig+0xe4>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d113      	bne.n	8005462 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005440:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005448:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	695b      	ldr	r3, [r3, #20]
 800544e:	011b      	lsls	r3, r3, #4
 8005450:	693a      	ldr	r2, [r7, #16]
 8005452:	4313      	orrs	r3, r2
 8005454:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	699b      	ldr	r3, [r3, #24]
 800545a:	011b      	lsls	r3, r3, #4
 800545c:	693a      	ldr	r2, [r7, #16]
 800545e:	4313      	orrs	r3, r2
 8005460:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	693a      	ldr	r2, [r7, #16]
 8005466:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	68fa      	ldr	r2, [r7, #12]
 800546c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	685a      	ldr	r2, [r3, #4]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	697a      	ldr	r2, [r7, #20]
 800547a:	621a      	str	r2, [r3, #32]
}
 800547c:	bf00      	nop
 800547e:	371c      	adds	r7, #28
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr
 8005488:	40010000 	.word	0x40010000
 800548c:	40010400 	.word	0x40010400

08005490 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005490:	b480      	push	{r7}
 8005492:	b087      	sub	sp, #28
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
 8005498:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6a1b      	ldr	r3, [r3, #32]
 800549e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6a1b      	ldr	r3, [r3, #32]
 80054aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	69db      	ldr	r3, [r3, #28]
 80054b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	021b      	lsls	r3, r3, #8
 80054ce:	68fa      	ldr	r2, [r7, #12]
 80054d0:	4313      	orrs	r3, r2
 80054d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80054da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	031b      	lsls	r3, r3, #12
 80054e2:	693a      	ldr	r2, [r7, #16]
 80054e4:	4313      	orrs	r3, r2
 80054e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	4a12      	ldr	r2, [pc, #72]	; (8005534 <TIM_OC4_SetConfig+0xa4>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d003      	beq.n	80054f8 <TIM_OC4_SetConfig+0x68>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	4a11      	ldr	r2, [pc, #68]	; (8005538 <TIM_OC4_SetConfig+0xa8>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d109      	bne.n	800550c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80054fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	695b      	ldr	r3, [r3, #20]
 8005504:	019b      	lsls	r3, r3, #6
 8005506:	697a      	ldr	r2, [r7, #20]
 8005508:	4313      	orrs	r3, r2
 800550a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	697a      	ldr	r2, [r7, #20]
 8005510:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	68fa      	ldr	r2, [r7, #12]
 8005516:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	685a      	ldr	r2, [r3, #4]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	693a      	ldr	r2, [r7, #16]
 8005524:	621a      	str	r2, [r3, #32]
}
 8005526:	bf00      	nop
 8005528:	371c      	adds	r7, #28
 800552a:	46bd      	mov	sp, r7
 800552c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005530:	4770      	bx	lr
 8005532:	bf00      	nop
 8005534:	40010000 	.word	0x40010000
 8005538:	40010400 	.word	0x40010400

0800553c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800553c:	b480      	push	{r7}
 800553e:	b087      	sub	sp, #28
 8005540:	af00      	add	r7, sp, #0
 8005542:	60f8      	str	r0, [r7, #12]
 8005544:	60b9      	str	r1, [r7, #8]
 8005546:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6a1b      	ldr	r3, [r3, #32]
 800554c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	6a1b      	ldr	r3, [r3, #32]
 8005552:	f023 0201 	bic.w	r2, r3, #1
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	699b      	ldr	r3, [r3, #24]
 800555e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005566:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	011b      	lsls	r3, r3, #4
 800556c:	693a      	ldr	r2, [r7, #16]
 800556e:	4313      	orrs	r3, r2
 8005570:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	f023 030a 	bic.w	r3, r3, #10
 8005578:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800557a:	697a      	ldr	r2, [r7, #20]
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	4313      	orrs	r3, r2
 8005580:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	693a      	ldr	r2, [r7, #16]
 8005586:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	697a      	ldr	r2, [r7, #20]
 800558c:	621a      	str	r2, [r3, #32]
}
 800558e:	bf00      	nop
 8005590:	371c      	adds	r7, #28
 8005592:	46bd      	mov	sp, r7
 8005594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005598:	4770      	bx	lr

0800559a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800559a:	b480      	push	{r7}
 800559c:	b087      	sub	sp, #28
 800559e:	af00      	add	r7, sp, #0
 80055a0:	60f8      	str	r0, [r7, #12]
 80055a2:	60b9      	str	r1, [r7, #8]
 80055a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	6a1b      	ldr	r3, [r3, #32]
 80055aa:	f023 0210 	bic.w	r2, r3, #16
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	699b      	ldr	r3, [r3, #24]
 80055b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	6a1b      	ldr	r3, [r3, #32]
 80055bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80055c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	031b      	lsls	r3, r3, #12
 80055ca:	697a      	ldr	r2, [r7, #20]
 80055cc:	4313      	orrs	r3, r2
 80055ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80055d6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	011b      	lsls	r3, r3, #4
 80055dc:	693a      	ldr	r2, [r7, #16]
 80055de:	4313      	orrs	r3, r2
 80055e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	697a      	ldr	r2, [r7, #20]
 80055e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	693a      	ldr	r2, [r7, #16]
 80055ec:	621a      	str	r2, [r3, #32]
}
 80055ee:	bf00      	nop
 80055f0:	371c      	adds	r7, #28
 80055f2:	46bd      	mov	sp, r7
 80055f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f8:	4770      	bx	lr

080055fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80055fa:	b480      	push	{r7}
 80055fc:	b085      	sub	sp, #20
 80055fe:	af00      	add	r7, sp, #0
 8005600:	6078      	str	r0, [r7, #4]
 8005602:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005610:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005612:	683a      	ldr	r2, [r7, #0]
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	4313      	orrs	r3, r2
 8005618:	f043 0307 	orr.w	r3, r3, #7
 800561c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	68fa      	ldr	r2, [r7, #12]
 8005622:	609a      	str	r2, [r3, #8]
}
 8005624:	bf00      	nop
 8005626:	3714      	adds	r7, #20
 8005628:	46bd      	mov	sp, r7
 800562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562e:	4770      	bx	lr

08005630 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005630:	b480      	push	{r7}
 8005632:	b087      	sub	sp, #28
 8005634:	af00      	add	r7, sp, #0
 8005636:	60f8      	str	r0, [r7, #12]
 8005638:	60b9      	str	r1, [r7, #8]
 800563a:	607a      	str	r2, [r7, #4]
 800563c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	689b      	ldr	r3, [r3, #8]
 8005642:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800564a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	021a      	lsls	r2, r3, #8
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	431a      	orrs	r2, r3
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	4313      	orrs	r3, r2
 8005658:	697a      	ldr	r2, [r7, #20]
 800565a:	4313      	orrs	r3, r2
 800565c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	697a      	ldr	r2, [r7, #20]
 8005662:	609a      	str	r2, [r3, #8]
}
 8005664:	bf00      	nop
 8005666:	371c      	adds	r7, #28
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr

08005670 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005670:	b480      	push	{r7}
 8005672:	b085      	sub	sp, #20
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
 8005678:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005680:	2b01      	cmp	r3, #1
 8005682:	d101      	bne.n	8005688 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005684:	2302      	movs	r3, #2
 8005686:	e05a      	b.n	800573e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2201      	movs	r2, #1
 800568c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2202      	movs	r2, #2
 8005694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	68fa      	ldr	r2, [r7, #12]
 80056b6:	4313      	orrs	r3, r2
 80056b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	68fa      	ldr	r2, [r7, #12]
 80056c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a21      	ldr	r2, [pc, #132]	; (800574c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d022      	beq.n	8005712 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056d4:	d01d      	beq.n	8005712 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a1d      	ldr	r2, [pc, #116]	; (8005750 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d018      	beq.n	8005712 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a1b      	ldr	r2, [pc, #108]	; (8005754 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d013      	beq.n	8005712 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a1a      	ldr	r2, [pc, #104]	; (8005758 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d00e      	beq.n	8005712 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a18      	ldr	r2, [pc, #96]	; (800575c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d009      	beq.n	8005712 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a17      	ldr	r2, [pc, #92]	; (8005760 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d004      	beq.n	8005712 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a15      	ldr	r2, [pc, #84]	; (8005764 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d10c      	bne.n	800572c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005718:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	68ba      	ldr	r2, [r7, #8]
 8005720:	4313      	orrs	r3, r2
 8005722:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	68ba      	ldr	r2, [r7, #8]
 800572a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2201      	movs	r2, #1
 8005730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2200      	movs	r2, #0
 8005738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800573c:	2300      	movs	r3, #0
}
 800573e:	4618      	mov	r0, r3
 8005740:	3714      	adds	r7, #20
 8005742:	46bd      	mov	sp, r7
 8005744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005748:	4770      	bx	lr
 800574a:	bf00      	nop
 800574c:	40010000 	.word	0x40010000
 8005750:	40000400 	.word	0x40000400
 8005754:	40000800 	.word	0x40000800
 8005758:	40000c00 	.word	0x40000c00
 800575c:	40010400 	.word	0x40010400
 8005760:	40014000 	.word	0x40014000
 8005764:	40001800 	.word	0x40001800

08005768 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b082      	sub	sp, #8
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d101      	bne.n	800577a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	e03f      	b.n	80057fa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005780:	b2db      	uxtb	r3, r3
 8005782:	2b00      	cmp	r3, #0
 8005784:	d106      	bne.n	8005794 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2200      	movs	r2, #0
 800578a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f7fd f9c8 	bl	8002b24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2224      	movs	r2, #36	; 0x24
 8005798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	68da      	ldr	r2, [r3, #12]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80057aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f000 fc7b 	bl	80060a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	691a      	ldr	r2, [r3, #16]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80057c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	695a      	ldr	r2, [r3, #20]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80057d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	68da      	ldr	r2, [r3, #12]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80057e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2200      	movs	r2, #0
 80057e6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2220      	movs	r2, #32
 80057ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2220      	movs	r2, #32
 80057f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80057f8:	2300      	movs	r3, #0
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	3708      	adds	r7, #8
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}
	...

08005804 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b0ba      	sub	sp, #232	; 0xe8
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	68db      	ldr	r3, [r3, #12]
 800581c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	695b      	ldr	r3, [r3, #20]
 8005826:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800582a:	2300      	movs	r3, #0
 800582c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005830:	2300      	movs	r3, #0
 8005832:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005836:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800583a:	f003 030f 	and.w	r3, r3, #15
 800583e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005842:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005846:	2b00      	cmp	r3, #0
 8005848:	d10f      	bne.n	800586a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800584a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800584e:	f003 0320 	and.w	r3, r3, #32
 8005852:	2b00      	cmp	r3, #0
 8005854:	d009      	beq.n	800586a <HAL_UART_IRQHandler+0x66>
 8005856:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800585a:	f003 0320 	and.w	r3, r3, #32
 800585e:	2b00      	cmp	r3, #0
 8005860:	d003      	beq.n	800586a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f000 fb65 	bl	8005f32 <UART_Receive_IT>
      return;
 8005868:	e256      	b.n	8005d18 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800586a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800586e:	2b00      	cmp	r3, #0
 8005870:	f000 80de 	beq.w	8005a30 <HAL_UART_IRQHandler+0x22c>
 8005874:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005878:	f003 0301 	and.w	r3, r3, #1
 800587c:	2b00      	cmp	r3, #0
 800587e:	d106      	bne.n	800588e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005880:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005884:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005888:	2b00      	cmp	r3, #0
 800588a:	f000 80d1 	beq.w	8005a30 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800588e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005892:	f003 0301 	and.w	r3, r3, #1
 8005896:	2b00      	cmp	r3, #0
 8005898:	d00b      	beq.n	80058b2 <HAL_UART_IRQHandler+0xae>
 800589a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800589e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d005      	beq.n	80058b2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058aa:	f043 0201 	orr.w	r2, r3, #1
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80058b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058b6:	f003 0304 	and.w	r3, r3, #4
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d00b      	beq.n	80058d6 <HAL_UART_IRQHandler+0xd2>
 80058be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80058c2:	f003 0301 	and.w	r3, r3, #1
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d005      	beq.n	80058d6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ce:	f043 0202 	orr.w	r2, r3, #2
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80058d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058da:	f003 0302 	and.w	r3, r3, #2
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d00b      	beq.n	80058fa <HAL_UART_IRQHandler+0xf6>
 80058e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80058e6:	f003 0301 	and.w	r3, r3, #1
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d005      	beq.n	80058fa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f2:	f043 0204 	orr.w	r2, r3, #4
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80058fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058fe:	f003 0308 	and.w	r3, r3, #8
 8005902:	2b00      	cmp	r3, #0
 8005904:	d011      	beq.n	800592a <HAL_UART_IRQHandler+0x126>
 8005906:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800590a:	f003 0320 	and.w	r3, r3, #32
 800590e:	2b00      	cmp	r3, #0
 8005910:	d105      	bne.n	800591e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005912:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005916:	f003 0301 	and.w	r3, r3, #1
 800591a:	2b00      	cmp	r3, #0
 800591c:	d005      	beq.n	800592a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005922:	f043 0208 	orr.w	r2, r3, #8
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800592e:	2b00      	cmp	r3, #0
 8005930:	f000 81ed 	beq.w	8005d0e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005934:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005938:	f003 0320 	and.w	r3, r3, #32
 800593c:	2b00      	cmp	r3, #0
 800593e:	d008      	beq.n	8005952 <HAL_UART_IRQHandler+0x14e>
 8005940:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005944:	f003 0320 	and.w	r3, r3, #32
 8005948:	2b00      	cmp	r3, #0
 800594a:	d002      	beq.n	8005952 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	f000 faf0 	bl	8005f32 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	695b      	ldr	r3, [r3, #20]
 8005958:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800595c:	2b40      	cmp	r3, #64	; 0x40
 800595e:	bf0c      	ite	eq
 8005960:	2301      	moveq	r3, #1
 8005962:	2300      	movne	r3, #0
 8005964:	b2db      	uxtb	r3, r3
 8005966:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800596e:	f003 0308 	and.w	r3, r3, #8
 8005972:	2b00      	cmp	r3, #0
 8005974:	d103      	bne.n	800597e <HAL_UART_IRQHandler+0x17a>
 8005976:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800597a:	2b00      	cmp	r3, #0
 800597c:	d04f      	beq.n	8005a1e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f000 f9f8 	bl	8005d74 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	695b      	ldr	r3, [r3, #20]
 800598a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800598e:	2b40      	cmp	r3, #64	; 0x40
 8005990:	d141      	bne.n	8005a16 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	3314      	adds	r3, #20
 8005998:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800599c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80059a0:	e853 3f00 	ldrex	r3, [r3]
 80059a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80059a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80059ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	3314      	adds	r3, #20
 80059ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80059be:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80059c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80059ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80059ce:	e841 2300 	strex	r3, r2, [r1]
 80059d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80059d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d1d9      	bne.n	8005992 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d013      	beq.n	8005a0e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ea:	4a7d      	ldr	r2, [pc, #500]	; (8005be0 <HAL_UART_IRQHandler+0x3dc>)
 80059ec:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059f2:	4618      	mov	r0, r3
 80059f4:	f7fe f860 	bl	8003ab8 <HAL_DMA_Abort_IT>
 80059f8:	4603      	mov	r3, r0
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d016      	beq.n	8005a2c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a04:	687a      	ldr	r2, [r7, #4]
 8005a06:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005a08:	4610      	mov	r0, r2
 8005a0a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a0c:	e00e      	b.n	8005a2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f000 f99a 	bl	8005d48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a14:	e00a      	b.n	8005a2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f000 f996 	bl	8005d48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a1c:	e006      	b.n	8005a2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f000 f992 	bl	8005d48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2200      	movs	r2, #0
 8005a28:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005a2a:	e170      	b.n	8005d0e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a2c:	bf00      	nop
    return;
 8005a2e:	e16e      	b.n	8005d0e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a34:	2b01      	cmp	r3, #1
 8005a36:	f040 814a 	bne.w	8005cce <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005a3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a3e:	f003 0310 	and.w	r3, r3, #16
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	f000 8143 	beq.w	8005cce <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005a48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a4c:	f003 0310 	and.w	r3, r3, #16
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	f000 813c 	beq.w	8005cce <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005a56:	2300      	movs	r3, #0
 8005a58:	60bb      	str	r3, [r7, #8]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	60bb      	str	r3, [r7, #8]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	60bb      	str	r3, [r7, #8]
 8005a6a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	695b      	ldr	r3, [r3, #20]
 8005a72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a76:	2b40      	cmp	r3, #64	; 0x40
 8005a78:	f040 80b4 	bne.w	8005be4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005a88:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	f000 8140 	beq.w	8005d12 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005a96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005a9a:	429a      	cmp	r2, r3
 8005a9c:	f080 8139 	bcs.w	8005d12 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005aa6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aac:	69db      	ldr	r3, [r3, #28]
 8005aae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ab2:	f000 8088 	beq.w	8005bc6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	330c      	adds	r3, #12
 8005abc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ac0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005ac4:	e853 3f00 	ldrex	r3, [r3]
 8005ac8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005acc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005ad0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ad4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	330c      	adds	r3, #12
 8005ade:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005ae2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005ae6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aea:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005aee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005af2:	e841 2300 	strex	r3, r2, [r1]
 8005af6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005afa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d1d9      	bne.n	8005ab6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	3314      	adds	r3, #20
 8005b08:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b0c:	e853 3f00 	ldrex	r3, [r3]
 8005b10:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005b12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005b14:	f023 0301 	bic.w	r3, r3, #1
 8005b18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	3314      	adds	r3, #20
 8005b22:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005b26:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005b2a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b2c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005b2e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005b32:	e841 2300 	strex	r3, r2, [r1]
 8005b36:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005b38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d1e1      	bne.n	8005b02 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	3314      	adds	r3, #20
 8005b44:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b48:	e853 3f00 	ldrex	r3, [r3]
 8005b4c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005b4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b54:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	3314      	adds	r3, #20
 8005b5e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005b62:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005b64:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b66:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005b68:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005b6a:	e841 2300 	strex	r3, r2, [r1]
 8005b6e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005b70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d1e3      	bne.n	8005b3e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2220      	movs	r2, #32
 8005b7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2200      	movs	r2, #0
 8005b82:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	330c      	adds	r3, #12
 8005b8a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b8e:	e853 3f00 	ldrex	r3, [r3]
 8005b92:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005b94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b96:	f023 0310 	bic.w	r3, r3, #16
 8005b9a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	330c      	adds	r3, #12
 8005ba4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005ba8:	65ba      	str	r2, [r7, #88]	; 0x58
 8005baa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005bae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005bb0:	e841 2300 	strex	r3, r2, [r1]
 8005bb4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005bb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d1e3      	bne.n	8005b84 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f7fd ff09 	bl	80039d8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005bce:	b29b      	uxth	r3, r3
 8005bd0:	1ad3      	subs	r3, r2, r3
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	4619      	mov	r1, r3
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f000 f8c0 	bl	8005d5c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005bdc:	e099      	b.n	8005d12 <HAL_UART_IRQHandler+0x50e>
 8005bde:	bf00      	nop
 8005be0:	08005e3b 	.word	0x08005e3b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005bec:	b29b      	uxth	r3, r3
 8005bee:	1ad3      	subs	r3, r2, r3
 8005bf0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005bf8:	b29b      	uxth	r3, r3
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	f000 808b 	beq.w	8005d16 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005c00:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	f000 8086 	beq.w	8005d16 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	330c      	adds	r3, #12
 8005c10:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c14:	e853 3f00 	ldrex	r3, [r3]
 8005c18:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005c1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c1c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c20:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	330c      	adds	r3, #12
 8005c2a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005c2e:	647a      	str	r2, [r7, #68]	; 0x44
 8005c30:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c32:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005c34:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c36:	e841 2300 	strex	r3, r2, [r1]
 8005c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005c3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d1e3      	bne.n	8005c0a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	3314      	adds	r3, #20
 8005c48:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c4c:	e853 3f00 	ldrex	r3, [r3]
 8005c50:	623b      	str	r3, [r7, #32]
   return(result);
 8005c52:	6a3b      	ldr	r3, [r7, #32]
 8005c54:	f023 0301 	bic.w	r3, r3, #1
 8005c58:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	3314      	adds	r3, #20
 8005c62:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005c66:	633a      	str	r2, [r7, #48]	; 0x30
 8005c68:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005c6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c6e:	e841 2300 	strex	r3, r2, [r1]
 8005c72:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d1e3      	bne.n	8005c42 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2220      	movs	r2, #32
 8005c7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2200      	movs	r2, #0
 8005c86:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	330c      	adds	r3, #12
 8005c8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	e853 3f00 	ldrex	r3, [r3]
 8005c96:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	f023 0310 	bic.w	r3, r3, #16
 8005c9e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	330c      	adds	r3, #12
 8005ca8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005cac:	61fa      	str	r2, [r7, #28]
 8005cae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cb0:	69b9      	ldr	r1, [r7, #24]
 8005cb2:	69fa      	ldr	r2, [r7, #28]
 8005cb4:	e841 2300 	strex	r3, r2, [r1]
 8005cb8:	617b      	str	r3, [r7, #20]
   return(result);
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d1e3      	bne.n	8005c88 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005cc0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005cc4:	4619      	mov	r1, r3
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f000 f848 	bl	8005d5c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005ccc:	e023      	b.n	8005d16 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005cce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d009      	beq.n	8005cee <HAL_UART_IRQHandler+0x4ea>
 8005cda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d003      	beq.n	8005cee <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f000 f8bb 	bl	8005e62 <UART_Transmit_IT>
    return;
 8005cec:	e014      	b.n	8005d18 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005cee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d00e      	beq.n	8005d18 <HAL_UART_IRQHandler+0x514>
 8005cfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d008      	beq.n	8005d18 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f000 f8fb 	bl	8005f02 <UART_EndTransmit_IT>
    return;
 8005d0c:	e004      	b.n	8005d18 <HAL_UART_IRQHandler+0x514>
    return;
 8005d0e:	bf00      	nop
 8005d10:	e002      	b.n	8005d18 <HAL_UART_IRQHandler+0x514>
      return;
 8005d12:	bf00      	nop
 8005d14:	e000      	b.n	8005d18 <HAL_UART_IRQHandler+0x514>
      return;
 8005d16:	bf00      	nop
  }
}
 8005d18:	37e8      	adds	r7, #232	; 0xe8
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}
 8005d1e:	bf00      	nop

08005d20 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b083      	sub	sp, #12
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005d28:	bf00      	nop
 8005d2a:	370c      	adds	r7, #12
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d32:	4770      	bx	lr

08005d34 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b083      	sub	sp, #12
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005d3c:	bf00      	nop
 8005d3e:	370c      	adds	r7, #12
 8005d40:	46bd      	mov	sp, r7
 8005d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d46:	4770      	bx	lr

08005d48 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b083      	sub	sp, #12
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005d50:	bf00      	nop
 8005d52:	370c      	adds	r7, #12
 8005d54:	46bd      	mov	sp, r7
 8005d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5a:	4770      	bx	lr

08005d5c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b083      	sub	sp, #12
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
 8005d64:	460b      	mov	r3, r1
 8005d66:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005d68:	bf00      	nop
 8005d6a:	370c      	adds	r7, #12
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr

08005d74 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b095      	sub	sp, #84	; 0x54
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	330c      	adds	r3, #12
 8005d82:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d86:	e853 3f00 	ldrex	r3, [r3]
 8005d8a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d8e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	330c      	adds	r3, #12
 8005d9a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005d9c:	643a      	str	r2, [r7, #64]	; 0x40
 8005d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005da0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005da2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005da4:	e841 2300 	strex	r3, r2, [r1]
 8005da8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d1e5      	bne.n	8005d7c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	3314      	adds	r3, #20
 8005db6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005db8:	6a3b      	ldr	r3, [r7, #32]
 8005dba:	e853 3f00 	ldrex	r3, [r3]
 8005dbe:	61fb      	str	r3, [r7, #28]
   return(result);
 8005dc0:	69fb      	ldr	r3, [r7, #28]
 8005dc2:	f023 0301 	bic.w	r3, r3, #1
 8005dc6:	64bb      	str	r3, [r7, #72]	; 0x48
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	3314      	adds	r3, #20
 8005dce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005dd0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005dd2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dd4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005dd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005dd8:	e841 2300 	strex	r3, r2, [r1]
 8005ddc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d1e5      	bne.n	8005db0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d119      	bne.n	8005e20 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	330c      	adds	r3, #12
 8005df2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	e853 3f00 	ldrex	r3, [r3]
 8005dfa:	60bb      	str	r3, [r7, #8]
   return(result);
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	f023 0310 	bic.w	r3, r3, #16
 8005e02:	647b      	str	r3, [r7, #68]	; 0x44
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	330c      	adds	r3, #12
 8005e0a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e0c:	61ba      	str	r2, [r7, #24]
 8005e0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e10:	6979      	ldr	r1, [r7, #20]
 8005e12:	69ba      	ldr	r2, [r7, #24]
 8005e14:	e841 2300 	strex	r3, r2, [r1]
 8005e18:	613b      	str	r3, [r7, #16]
   return(result);
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d1e5      	bne.n	8005dec <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2220      	movs	r2, #32
 8005e24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005e2e:	bf00      	nop
 8005e30:	3754      	adds	r7, #84	; 0x54
 8005e32:	46bd      	mov	sp, r7
 8005e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e38:	4770      	bx	lr

08005e3a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005e3a:	b580      	push	{r7, lr}
 8005e3c:	b084      	sub	sp, #16
 8005e3e:	af00      	add	r7, sp, #0
 8005e40:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e46:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	2200      	movs	r2, #0
 8005e52:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005e54:	68f8      	ldr	r0, [r7, #12]
 8005e56:	f7ff ff77 	bl	8005d48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e5a:	bf00      	nop
 8005e5c:	3710      	adds	r7, #16
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}

08005e62 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005e62:	b480      	push	{r7}
 8005e64:	b085      	sub	sp, #20
 8005e66:	af00      	add	r7, sp, #0
 8005e68:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e70:	b2db      	uxtb	r3, r3
 8005e72:	2b21      	cmp	r3, #33	; 0x21
 8005e74:	d13e      	bne.n	8005ef4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	689b      	ldr	r3, [r3, #8]
 8005e7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e7e:	d114      	bne.n	8005eaa <UART_Transmit_IT+0x48>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	691b      	ldr	r3, [r3, #16]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d110      	bne.n	8005eaa <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6a1b      	ldr	r3, [r3, #32]
 8005e8c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	881b      	ldrh	r3, [r3, #0]
 8005e92:	461a      	mov	r2, r3
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e9c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6a1b      	ldr	r3, [r3, #32]
 8005ea2:	1c9a      	adds	r2, r3, #2
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	621a      	str	r2, [r3, #32]
 8005ea8:	e008      	b.n	8005ebc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6a1b      	ldr	r3, [r3, #32]
 8005eae:	1c59      	adds	r1, r3, #1
 8005eb0:	687a      	ldr	r2, [r7, #4]
 8005eb2:	6211      	str	r1, [r2, #32]
 8005eb4:	781a      	ldrb	r2, [r3, #0]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005ec0:	b29b      	uxth	r3, r3
 8005ec2:	3b01      	subs	r3, #1
 8005ec4:	b29b      	uxth	r3, r3
 8005ec6:	687a      	ldr	r2, [r7, #4]
 8005ec8:	4619      	mov	r1, r3
 8005eca:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d10f      	bne.n	8005ef0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	68da      	ldr	r2, [r3, #12]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005ede:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	68da      	ldr	r2, [r3, #12]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005eee:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	e000      	b.n	8005ef6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005ef4:	2302      	movs	r3, #2
  }
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3714      	adds	r7, #20
 8005efa:	46bd      	mov	sp, r7
 8005efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f00:	4770      	bx	lr

08005f02 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005f02:	b580      	push	{r7, lr}
 8005f04:	b082      	sub	sp, #8
 8005f06:	af00      	add	r7, sp, #0
 8005f08:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	68da      	ldr	r2, [r3, #12]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f18:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2220      	movs	r2, #32
 8005f1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f7ff fefc 	bl	8005d20 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005f28:	2300      	movs	r3, #0
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3708      	adds	r7, #8
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}

08005f32 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005f32:	b580      	push	{r7, lr}
 8005f34:	b08c      	sub	sp, #48	; 0x30
 8005f36:	af00      	add	r7, sp, #0
 8005f38:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f40:	b2db      	uxtb	r3, r3
 8005f42:	2b22      	cmp	r3, #34	; 0x22
 8005f44:	f040 80ab 	bne.w	800609e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	689b      	ldr	r3, [r3, #8]
 8005f4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f50:	d117      	bne.n	8005f82 <UART_Receive_IT+0x50>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	691b      	ldr	r3, [r3, #16]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d113      	bne.n	8005f82 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f62:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	b29b      	uxth	r3, r3
 8005f6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f70:	b29a      	uxth	r2, r3
 8005f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f74:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f7a:	1c9a      	adds	r2, r3, #2
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	629a      	str	r2, [r3, #40]	; 0x28
 8005f80:	e026      	b.n	8005fd0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f86:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005f88:	2300      	movs	r3, #0
 8005f8a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	689b      	ldr	r3, [r3, #8]
 8005f90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f94:	d007      	beq.n	8005fa6 <UART_Receive_IT+0x74>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	689b      	ldr	r3, [r3, #8]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d10a      	bne.n	8005fb4 <UART_Receive_IT+0x82>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	691b      	ldr	r3, [r3, #16]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d106      	bne.n	8005fb4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	b2da      	uxtb	r2, r3
 8005fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fb0:	701a      	strb	r2, [r3, #0]
 8005fb2:	e008      	b.n	8005fc6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	b2db      	uxtb	r3, r3
 8005fbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fc0:	b2da      	uxtb	r2, r3
 8005fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fc4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fca:	1c5a      	adds	r2, r3, #1
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005fd4:	b29b      	uxth	r3, r3
 8005fd6:	3b01      	subs	r3, #1
 8005fd8:	b29b      	uxth	r3, r3
 8005fda:	687a      	ldr	r2, [r7, #4]
 8005fdc:	4619      	mov	r1, r3
 8005fde:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d15a      	bne.n	800609a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	68da      	ldr	r2, [r3, #12]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f022 0220 	bic.w	r2, r2, #32
 8005ff2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	68da      	ldr	r2, [r3, #12]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006002:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	695a      	ldr	r2, [r3, #20]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f022 0201 	bic.w	r2, r2, #1
 8006012:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2220      	movs	r2, #32
 8006018:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006020:	2b01      	cmp	r3, #1
 8006022:	d135      	bne.n	8006090 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2200      	movs	r2, #0
 8006028:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	330c      	adds	r3, #12
 8006030:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	e853 3f00 	ldrex	r3, [r3]
 8006038:	613b      	str	r3, [r7, #16]
   return(result);
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	f023 0310 	bic.w	r3, r3, #16
 8006040:	627b      	str	r3, [r7, #36]	; 0x24
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	330c      	adds	r3, #12
 8006048:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800604a:	623a      	str	r2, [r7, #32]
 800604c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800604e:	69f9      	ldr	r1, [r7, #28]
 8006050:	6a3a      	ldr	r2, [r7, #32]
 8006052:	e841 2300 	strex	r3, r2, [r1]
 8006056:	61bb      	str	r3, [r7, #24]
   return(result);
 8006058:	69bb      	ldr	r3, [r7, #24]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d1e5      	bne.n	800602a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f003 0310 	and.w	r3, r3, #16
 8006068:	2b10      	cmp	r3, #16
 800606a:	d10a      	bne.n	8006082 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800606c:	2300      	movs	r3, #0
 800606e:	60fb      	str	r3, [r7, #12]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	60fb      	str	r3, [r7, #12]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	60fb      	str	r3, [r7, #12]
 8006080:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006086:	4619      	mov	r1, r3
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	f7ff fe67 	bl	8005d5c <HAL_UARTEx_RxEventCallback>
 800608e:	e002      	b.n	8006096 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	f7ff fe4f 	bl	8005d34 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006096:	2300      	movs	r3, #0
 8006098:	e002      	b.n	80060a0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800609a:	2300      	movs	r3, #0
 800609c:	e000      	b.n	80060a0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800609e:	2302      	movs	r3, #2
  }
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	3730      	adds	r7, #48	; 0x30
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd80      	pop	{r7, pc}

080060a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80060a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80060ac:	b0c0      	sub	sp, #256	; 0x100
 80060ae:	af00      	add	r7, sp, #0
 80060b0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80060b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	691b      	ldr	r3, [r3, #16]
 80060bc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80060c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060c4:	68d9      	ldr	r1, [r3, #12]
 80060c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060ca:	681a      	ldr	r2, [r3, #0]
 80060cc:	ea40 0301 	orr.w	r3, r0, r1
 80060d0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80060d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060d6:	689a      	ldr	r2, [r3, #8]
 80060d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060dc:	691b      	ldr	r3, [r3, #16]
 80060de:	431a      	orrs	r2, r3
 80060e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060e4:	695b      	ldr	r3, [r3, #20]
 80060e6:	431a      	orrs	r2, r3
 80060e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060ec:	69db      	ldr	r3, [r3, #28]
 80060ee:	4313      	orrs	r3, r2
 80060f0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80060f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	68db      	ldr	r3, [r3, #12]
 80060fc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006100:	f021 010c 	bic.w	r1, r1, #12
 8006104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006108:	681a      	ldr	r2, [r3, #0]
 800610a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800610e:	430b      	orrs	r3, r1
 8006110:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006112:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	695b      	ldr	r3, [r3, #20]
 800611a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800611e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006122:	6999      	ldr	r1, [r3, #24]
 8006124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006128:	681a      	ldr	r2, [r3, #0]
 800612a:	ea40 0301 	orr.w	r3, r0, r1
 800612e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006134:	681a      	ldr	r2, [r3, #0]
 8006136:	4b8f      	ldr	r3, [pc, #572]	; (8006374 <UART_SetConfig+0x2cc>)
 8006138:	429a      	cmp	r2, r3
 800613a:	d005      	beq.n	8006148 <UART_SetConfig+0xa0>
 800613c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006140:	681a      	ldr	r2, [r3, #0]
 8006142:	4b8d      	ldr	r3, [pc, #564]	; (8006378 <UART_SetConfig+0x2d0>)
 8006144:	429a      	cmp	r2, r3
 8006146:	d104      	bne.n	8006152 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006148:	f7fe fd62 	bl	8004c10 <HAL_RCC_GetPCLK2Freq>
 800614c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006150:	e003      	b.n	800615a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006152:	f7fe fd49 	bl	8004be8 <HAL_RCC_GetPCLK1Freq>
 8006156:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800615a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800615e:	69db      	ldr	r3, [r3, #28]
 8006160:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006164:	f040 810c 	bne.w	8006380 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006168:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800616c:	2200      	movs	r2, #0
 800616e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006172:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006176:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800617a:	4622      	mov	r2, r4
 800617c:	462b      	mov	r3, r5
 800617e:	1891      	adds	r1, r2, r2
 8006180:	65b9      	str	r1, [r7, #88]	; 0x58
 8006182:	415b      	adcs	r3, r3
 8006184:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006186:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800618a:	4621      	mov	r1, r4
 800618c:	eb12 0801 	adds.w	r8, r2, r1
 8006190:	4629      	mov	r1, r5
 8006192:	eb43 0901 	adc.w	r9, r3, r1
 8006196:	f04f 0200 	mov.w	r2, #0
 800619a:	f04f 0300 	mov.w	r3, #0
 800619e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80061a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80061a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80061aa:	4690      	mov	r8, r2
 80061ac:	4699      	mov	r9, r3
 80061ae:	4623      	mov	r3, r4
 80061b0:	eb18 0303 	adds.w	r3, r8, r3
 80061b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80061b8:	462b      	mov	r3, r5
 80061ba:	eb49 0303 	adc.w	r3, r9, r3
 80061be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80061c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061c6:	685b      	ldr	r3, [r3, #4]
 80061c8:	2200      	movs	r2, #0
 80061ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80061ce:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80061d2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80061d6:	460b      	mov	r3, r1
 80061d8:	18db      	adds	r3, r3, r3
 80061da:	653b      	str	r3, [r7, #80]	; 0x50
 80061dc:	4613      	mov	r3, r2
 80061de:	eb42 0303 	adc.w	r3, r2, r3
 80061e2:	657b      	str	r3, [r7, #84]	; 0x54
 80061e4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80061e8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80061ec:	f7fa fcfc 	bl	8000be8 <__aeabi_uldivmod>
 80061f0:	4602      	mov	r2, r0
 80061f2:	460b      	mov	r3, r1
 80061f4:	4b61      	ldr	r3, [pc, #388]	; (800637c <UART_SetConfig+0x2d4>)
 80061f6:	fba3 2302 	umull	r2, r3, r3, r2
 80061fa:	095b      	lsrs	r3, r3, #5
 80061fc:	011c      	lsls	r4, r3, #4
 80061fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006202:	2200      	movs	r2, #0
 8006204:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006208:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800620c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006210:	4642      	mov	r2, r8
 8006212:	464b      	mov	r3, r9
 8006214:	1891      	adds	r1, r2, r2
 8006216:	64b9      	str	r1, [r7, #72]	; 0x48
 8006218:	415b      	adcs	r3, r3
 800621a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800621c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006220:	4641      	mov	r1, r8
 8006222:	eb12 0a01 	adds.w	sl, r2, r1
 8006226:	4649      	mov	r1, r9
 8006228:	eb43 0b01 	adc.w	fp, r3, r1
 800622c:	f04f 0200 	mov.w	r2, #0
 8006230:	f04f 0300 	mov.w	r3, #0
 8006234:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006238:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800623c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006240:	4692      	mov	sl, r2
 8006242:	469b      	mov	fp, r3
 8006244:	4643      	mov	r3, r8
 8006246:	eb1a 0303 	adds.w	r3, sl, r3
 800624a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800624e:	464b      	mov	r3, r9
 8006250:	eb4b 0303 	adc.w	r3, fp, r3
 8006254:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	2200      	movs	r2, #0
 8006260:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006264:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006268:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800626c:	460b      	mov	r3, r1
 800626e:	18db      	adds	r3, r3, r3
 8006270:	643b      	str	r3, [r7, #64]	; 0x40
 8006272:	4613      	mov	r3, r2
 8006274:	eb42 0303 	adc.w	r3, r2, r3
 8006278:	647b      	str	r3, [r7, #68]	; 0x44
 800627a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800627e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006282:	f7fa fcb1 	bl	8000be8 <__aeabi_uldivmod>
 8006286:	4602      	mov	r2, r0
 8006288:	460b      	mov	r3, r1
 800628a:	4611      	mov	r1, r2
 800628c:	4b3b      	ldr	r3, [pc, #236]	; (800637c <UART_SetConfig+0x2d4>)
 800628e:	fba3 2301 	umull	r2, r3, r3, r1
 8006292:	095b      	lsrs	r3, r3, #5
 8006294:	2264      	movs	r2, #100	; 0x64
 8006296:	fb02 f303 	mul.w	r3, r2, r3
 800629a:	1acb      	subs	r3, r1, r3
 800629c:	00db      	lsls	r3, r3, #3
 800629e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80062a2:	4b36      	ldr	r3, [pc, #216]	; (800637c <UART_SetConfig+0x2d4>)
 80062a4:	fba3 2302 	umull	r2, r3, r3, r2
 80062a8:	095b      	lsrs	r3, r3, #5
 80062aa:	005b      	lsls	r3, r3, #1
 80062ac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80062b0:	441c      	add	r4, r3
 80062b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062b6:	2200      	movs	r2, #0
 80062b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80062bc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80062c0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80062c4:	4642      	mov	r2, r8
 80062c6:	464b      	mov	r3, r9
 80062c8:	1891      	adds	r1, r2, r2
 80062ca:	63b9      	str	r1, [r7, #56]	; 0x38
 80062cc:	415b      	adcs	r3, r3
 80062ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80062d0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80062d4:	4641      	mov	r1, r8
 80062d6:	1851      	adds	r1, r2, r1
 80062d8:	6339      	str	r1, [r7, #48]	; 0x30
 80062da:	4649      	mov	r1, r9
 80062dc:	414b      	adcs	r3, r1
 80062de:	637b      	str	r3, [r7, #52]	; 0x34
 80062e0:	f04f 0200 	mov.w	r2, #0
 80062e4:	f04f 0300 	mov.w	r3, #0
 80062e8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80062ec:	4659      	mov	r1, fp
 80062ee:	00cb      	lsls	r3, r1, #3
 80062f0:	4651      	mov	r1, sl
 80062f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80062f6:	4651      	mov	r1, sl
 80062f8:	00ca      	lsls	r2, r1, #3
 80062fa:	4610      	mov	r0, r2
 80062fc:	4619      	mov	r1, r3
 80062fe:	4603      	mov	r3, r0
 8006300:	4642      	mov	r2, r8
 8006302:	189b      	adds	r3, r3, r2
 8006304:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006308:	464b      	mov	r3, r9
 800630a:	460a      	mov	r2, r1
 800630c:	eb42 0303 	adc.w	r3, r2, r3
 8006310:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	2200      	movs	r2, #0
 800631c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006320:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006324:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006328:	460b      	mov	r3, r1
 800632a:	18db      	adds	r3, r3, r3
 800632c:	62bb      	str	r3, [r7, #40]	; 0x28
 800632e:	4613      	mov	r3, r2
 8006330:	eb42 0303 	adc.w	r3, r2, r3
 8006334:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006336:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800633a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800633e:	f7fa fc53 	bl	8000be8 <__aeabi_uldivmod>
 8006342:	4602      	mov	r2, r0
 8006344:	460b      	mov	r3, r1
 8006346:	4b0d      	ldr	r3, [pc, #52]	; (800637c <UART_SetConfig+0x2d4>)
 8006348:	fba3 1302 	umull	r1, r3, r3, r2
 800634c:	095b      	lsrs	r3, r3, #5
 800634e:	2164      	movs	r1, #100	; 0x64
 8006350:	fb01 f303 	mul.w	r3, r1, r3
 8006354:	1ad3      	subs	r3, r2, r3
 8006356:	00db      	lsls	r3, r3, #3
 8006358:	3332      	adds	r3, #50	; 0x32
 800635a:	4a08      	ldr	r2, [pc, #32]	; (800637c <UART_SetConfig+0x2d4>)
 800635c:	fba2 2303 	umull	r2, r3, r2, r3
 8006360:	095b      	lsrs	r3, r3, #5
 8006362:	f003 0207 	and.w	r2, r3, #7
 8006366:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4422      	add	r2, r4
 800636e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006370:	e105      	b.n	800657e <UART_SetConfig+0x4d6>
 8006372:	bf00      	nop
 8006374:	40011000 	.word	0x40011000
 8006378:	40011400 	.word	0x40011400
 800637c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006380:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006384:	2200      	movs	r2, #0
 8006386:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800638a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800638e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006392:	4642      	mov	r2, r8
 8006394:	464b      	mov	r3, r9
 8006396:	1891      	adds	r1, r2, r2
 8006398:	6239      	str	r1, [r7, #32]
 800639a:	415b      	adcs	r3, r3
 800639c:	627b      	str	r3, [r7, #36]	; 0x24
 800639e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80063a2:	4641      	mov	r1, r8
 80063a4:	1854      	adds	r4, r2, r1
 80063a6:	4649      	mov	r1, r9
 80063a8:	eb43 0501 	adc.w	r5, r3, r1
 80063ac:	f04f 0200 	mov.w	r2, #0
 80063b0:	f04f 0300 	mov.w	r3, #0
 80063b4:	00eb      	lsls	r3, r5, #3
 80063b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80063ba:	00e2      	lsls	r2, r4, #3
 80063bc:	4614      	mov	r4, r2
 80063be:	461d      	mov	r5, r3
 80063c0:	4643      	mov	r3, r8
 80063c2:	18e3      	adds	r3, r4, r3
 80063c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80063c8:	464b      	mov	r3, r9
 80063ca:	eb45 0303 	adc.w	r3, r5, r3
 80063ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80063d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	2200      	movs	r2, #0
 80063da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80063de:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80063e2:	f04f 0200 	mov.w	r2, #0
 80063e6:	f04f 0300 	mov.w	r3, #0
 80063ea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80063ee:	4629      	mov	r1, r5
 80063f0:	008b      	lsls	r3, r1, #2
 80063f2:	4621      	mov	r1, r4
 80063f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80063f8:	4621      	mov	r1, r4
 80063fa:	008a      	lsls	r2, r1, #2
 80063fc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006400:	f7fa fbf2 	bl	8000be8 <__aeabi_uldivmod>
 8006404:	4602      	mov	r2, r0
 8006406:	460b      	mov	r3, r1
 8006408:	4b60      	ldr	r3, [pc, #384]	; (800658c <UART_SetConfig+0x4e4>)
 800640a:	fba3 2302 	umull	r2, r3, r3, r2
 800640e:	095b      	lsrs	r3, r3, #5
 8006410:	011c      	lsls	r4, r3, #4
 8006412:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006416:	2200      	movs	r2, #0
 8006418:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800641c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006420:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006424:	4642      	mov	r2, r8
 8006426:	464b      	mov	r3, r9
 8006428:	1891      	adds	r1, r2, r2
 800642a:	61b9      	str	r1, [r7, #24]
 800642c:	415b      	adcs	r3, r3
 800642e:	61fb      	str	r3, [r7, #28]
 8006430:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006434:	4641      	mov	r1, r8
 8006436:	1851      	adds	r1, r2, r1
 8006438:	6139      	str	r1, [r7, #16]
 800643a:	4649      	mov	r1, r9
 800643c:	414b      	adcs	r3, r1
 800643e:	617b      	str	r3, [r7, #20]
 8006440:	f04f 0200 	mov.w	r2, #0
 8006444:	f04f 0300 	mov.w	r3, #0
 8006448:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800644c:	4659      	mov	r1, fp
 800644e:	00cb      	lsls	r3, r1, #3
 8006450:	4651      	mov	r1, sl
 8006452:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006456:	4651      	mov	r1, sl
 8006458:	00ca      	lsls	r2, r1, #3
 800645a:	4610      	mov	r0, r2
 800645c:	4619      	mov	r1, r3
 800645e:	4603      	mov	r3, r0
 8006460:	4642      	mov	r2, r8
 8006462:	189b      	adds	r3, r3, r2
 8006464:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006468:	464b      	mov	r3, r9
 800646a:	460a      	mov	r2, r1
 800646c:	eb42 0303 	adc.w	r3, r2, r3
 8006470:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	2200      	movs	r2, #0
 800647c:	67bb      	str	r3, [r7, #120]	; 0x78
 800647e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006480:	f04f 0200 	mov.w	r2, #0
 8006484:	f04f 0300 	mov.w	r3, #0
 8006488:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800648c:	4649      	mov	r1, r9
 800648e:	008b      	lsls	r3, r1, #2
 8006490:	4641      	mov	r1, r8
 8006492:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006496:	4641      	mov	r1, r8
 8006498:	008a      	lsls	r2, r1, #2
 800649a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800649e:	f7fa fba3 	bl	8000be8 <__aeabi_uldivmod>
 80064a2:	4602      	mov	r2, r0
 80064a4:	460b      	mov	r3, r1
 80064a6:	4b39      	ldr	r3, [pc, #228]	; (800658c <UART_SetConfig+0x4e4>)
 80064a8:	fba3 1302 	umull	r1, r3, r3, r2
 80064ac:	095b      	lsrs	r3, r3, #5
 80064ae:	2164      	movs	r1, #100	; 0x64
 80064b0:	fb01 f303 	mul.w	r3, r1, r3
 80064b4:	1ad3      	subs	r3, r2, r3
 80064b6:	011b      	lsls	r3, r3, #4
 80064b8:	3332      	adds	r3, #50	; 0x32
 80064ba:	4a34      	ldr	r2, [pc, #208]	; (800658c <UART_SetConfig+0x4e4>)
 80064bc:	fba2 2303 	umull	r2, r3, r2, r3
 80064c0:	095b      	lsrs	r3, r3, #5
 80064c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80064c6:	441c      	add	r4, r3
 80064c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80064cc:	2200      	movs	r2, #0
 80064ce:	673b      	str	r3, [r7, #112]	; 0x70
 80064d0:	677a      	str	r2, [r7, #116]	; 0x74
 80064d2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80064d6:	4642      	mov	r2, r8
 80064d8:	464b      	mov	r3, r9
 80064da:	1891      	adds	r1, r2, r2
 80064dc:	60b9      	str	r1, [r7, #8]
 80064de:	415b      	adcs	r3, r3
 80064e0:	60fb      	str	r3, [r7, #12]
 80064e2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80064e6:	4641      	mov	r1, r8
 80064e8:	1851      	adds	r1, r2, r1
 80064ea:	6039      	str	r1, [r7, #0]
 80064ec:	4649      	mov	r1, r9
 80064ee:	414b      	adcs	r3, r1
 80064f0:	607b      	str	r3, [r7, #4]
 80064f2:	f04f 0200 	mov.w	r2, #0
 80064f6:	f04f 0300 	mov.w	r3, #0
 80064fa:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80064fe:	4659      	mov	r1, fp
 8006500:	00cb      	lsls	r3, r1, #3
 8006502:	4651      	mov	r1, sl
 8006504:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006508:	4651      	mov	r1, sl
 800650a:	00ca      	lsls	r2, r1, #3
 800650c:	4610      	mov	r0, r2
 800650e:	4619      	mov	r1, r3
 8006510:	4603      	mov	r3, r0
 8006512:	4642      	mov	r2, r8
 8006514:	189b      	adds	r3, r3, r2
 8006516:	66bb      	str	r3, [r7, #104]	; 0x68
 8006518:	464b      	mov	r3, r9
 800651a:	460a      	mov	r2, r1
 800651c:	eb42 0303 	adc.w	r3, r2, r3
 8006520:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006522:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006526:	685b      	ldr	r3, [r3, #4]
 8006528:	2200      	movs	r2, #0
 800652a:	663b      	str	r3, [r7, #96]	; 0x60
 800652c:	667a      	str	r2, [r7, #100]	; 0x64
 800652e:	f04f 0200 	mov.w	r2, #0
 8006532:	f04f 0300 	mov.w	r3, #0
 8006536:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800653a:	4649      	mov	r1, r9
 800653c:	008b      	lsls	r3, r1, #2
 800653e:	4641      	mov	r1, r8
 8006540:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006544:	4641      	mov	r1, r8
 8006546:	008a      	lsls	r2, r1, #2
 8006548:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800654c:	f7fa fb4c 	bl	8000be8 <__aeabi_uldivmod>
 8006550:	4602      	mov	r2, r0
 8006552:	460b      	mov	r3, r1
 8006554:	4b0d      	ldr	r3, [pc, #52]	; (800658c <UART_SetConfig+0x4e4>)
 8006556:	fba3 1302 	umull	r1, r3, r3, r2
 800655a:	095b      	lsrs	r3, r3, #5
 800655c:	2164      	movs	r1, #100	; 0x64
 800655e:	fb01 f303 	mul.w	r3, r1, r3
 8006562:	1ad3      	subs	r3, r2, r3
 8006564:	011b      	lsls	r3, r3, #4
 8006566:	3332      	adds	r3, #50	; 0x32
 8006568:	4a08      	ldr	r2, [pc, #32]	; (800658c <UART_SetConfig+0x4e4>)
 800656a:	fba2 2303 	umull	r2, r3, r2, r3
 800656e:	095b      	lsrs	r3, r3, #5
 8006570:	f003 020f 	and.w	r2, r3, #15
 8006574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4422      	add	r2, r4
 800657c:	609a      	str	r2, [r3, #8]
}
 800657e:	bf00      	nop
 8006580:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006584:	46bd      	mov	sp, r7
 8006586:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800658a:	bf00      	nop
 800658c:	51eb851f 	.word	0x51eb851f

08006590 <LL_GPIO_SetPinMode>:
{
 8006590:	b480      	push	{r7}
 8006592:	b089      	sub	sp, #36	; 0x24
 8006594:	af00      	add	r7, sp, #0
 8006596:	60f8      	str	r0, [r7, #12]
 8006598:	60b9      	str	r1, [r7, #8]
 800659a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681a      	ldr	r2, [r3, #0]
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065a4:	697b      	ldr	r3, [r7, #20]
 80065a6:	fa93 f3a3 	rbit	r3, r3
 80065aa:	613b      	str	r3, [r7, #16]
  return result;
 80065ac:	693b      	ldr	r3, [r7, #16]
 80065ae:	fab3 f383 	clz	r3, r3
 80065b2:	b2db      	uxtb	r3, r3
 80065b4:	005b      	lsls	r3, r3, #1
 80065b6:	2103      	movs	r1, #3
 80065b8:	fa01 f303 	lsl.w	r3, r1, r3
 80065bc:	43db      	mvns	r3, r3
 80065be:	401a      	ands	r2, r3
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065c4:	69fb      	ldr	r3, [r7, #28]
 80065c6:	fa93 f3a3 	rbit	r3, r3
 80065ca:	61bb      	str	r3, [r7, #24]
  return result;
 80065cc:	69bb      	ldr	r3, [r7, #24]
 80065ce:	fab3 f383 	clz	r3, r3
 80065d2:	b2db      	uxtb	r3, r3
 80065d4:	005b      	lsls	r3, r3, #1
 80065d6:	6879      	ldr	r1, [r7, #4]
 80065d8:	fa01 f303 	lsl.w	r3, r1, r3
 80065dc:	431a      	orrs	r2, r3
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	601a      	str	r2, [r3, #0]
}
 80065e2:	bf00      	nop
 80065e4:	3724      	adds	r7, #36	; 0x24
 80065e6:	46bd      	mov	sp, r7
 80065e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ec:	4770      	bx	lr

080065ee <LL_GPIO_SetPinOutputType>:
{
 80065ee:	b480      	push	{r7}
 80065f0:	b085      	sub	sp, #20
 80065f2:	af00      	add	r7, sp, #0
 80065f4:	60f8      	str	r0, [r7, #12]
 80065f6:	60b9      	str	r1, [r7, #8]
 80065f8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	685a      	ldr	r2, [r3, #4]
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	43db      	mvns	r3, r3
 8006602:	401a      	ands	r2, r3
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	6879      	ldr	r1, [r7, #4]
 8006608:	fb01 f303 	mul.w	r3, r1, r3
 800660c:	431a      	orrs	r2, r3
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	605a      	str	r2, [r3, #4]
}
 8006612:	bf00      	nop
 8006614:	3714      	adds	r7, #20
 8006616:	46bd      	mov	sp, r7
 8006618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661c:	4770      	bx	lr

0800661e <LL_GPIO_SetPinSpeed>:
{
 800661e:	b480      	push	{r7}
 8006620:	b089      	sub	sp, #36	; 0x24
 8006622:	af00      	add	r7, sp, #0
 8006624:	60f8      	str	r0, [r7, #12]
 8006626:	60b9      	str	r1, [r7, #8]
 8006628:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	689a      	ldr	r2, [r3, #8]
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	fa93 f3a3 	rbit	r3, r3
 8006638:	613b      	str	r3, [r7, #16]
  return result;
 800663a:	693b      	ldr	r3, [r7, #16]
 800663c:	fab3 f383 	clz	r3, r3
 8006640:	b2db      	uxtb	r3, r3
 8006642:	005b      	lsls	r3, r3, #1
 8006644:	2103      	movs	r1, #3
 8006646:	fa01 f303 	lsl.w	r3, r1, r3
 800664a:	43db      	mvns	r3, r3
 800664c:	401a      	ands	r2, r3
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006652:	69fb      	ldr	r3, [r7, #28]
 8006654:	fa93 f3a3 	rbit	r3, r3
 8006658:	61bb      	str	r3, [r7, #24]
  return result;
 800665a:	69bb      	ldr	r3, [r7, #24]
 800665c:	fab3 f383 	clz	r3, r3
 8006660:	b2db      	uxtb	r3, r3
 8006662:	005b      	lsls	r3, r3, #1
 8006664:	6879      	ldr	r1, [r7, #4]
 8006666:	fa01 f303 	lsl.w	r3, r1, r3
 800666a:	431a      	orrs	r2, r3
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	609a      	str	r2, [r3, #8]
}
 8006670:	bf00      	nop
 8006672:	3724      	adds	r7, #36	; 0x24
 8006674:	46bd      	mov	sp, r7
 8006676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667a:	4770      	bx	lr

0800667c <LL_GPIO_SetPinPull>:
{
 800667c:	b480      	push	{r7}
 800667e:	b089      	sub	sp, #36	; 0x24
 8006680:	af00      	add	r7, sp, #0
 8006682:	60f8      	str	r0, [r7, #12]
 8006684:	60b9      	str	r1, [r7, #8]
 8006686:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	68da      	ldr	r2, [r3, #12]
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	fa93 f3a3 	rbit	r3, r3
 8006696:	613b      	str	r3, [r7, #16]
  return result;
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	fab3 f383 	clz	r3, r3
 800669e:	b2db      	uxtb	r3, r3
 80066a0:	005b      	lsls	r3, r3, #1
 80066a2:	2103      	movs	r1, #3
 80066a4:	fa01 f303 	lsl.w	r3, r1, r3
 80066a8:	43db      	mvns	r3, r3
 80066aa:	401a      	ands	r2, r3
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066b0:	69fb      	ldr	r3, [r7, #28]
 80066b2:	fa93 f3a3 	rbit	r3, r3
 80066b6:	61bb      	str	r3, [r7, #24]
  return result;
 80066b8:	69bb      	ldr	r3, [r7, #24]
 80066ba:	fab3 f383 	clz	r3, r3
 80066be:	b2db      	uxtb	r3, r3
 80066c0:	005b      	lsls	r3, r3, #1
 80066c2:	6879      	ldr	r1, [r7, #4]
 80066c4:	fa01 f303 	lsl.w	r3, r1, r3
 80066c8:	431a      	orrs	r2, r3
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	60da      	str	r2, [r3, #12]
}
 80066ce:	bf00      	nop
 80066d0:	3724      	adds	r7, #36	; 0x24
 80066d2:	46bd      	mov	sp, r7
 80066d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d8:	4770      	bx	lr

080066da <LL_GPIO_SetAFPin_0_7>:
{
 80066da:	b480      	push	{r7}
 80066dc:	b089      	sub	sp, #36	; 0x24
 80066de:	af00      	add	r7, sp, #0
 80066e0:	60f8      	str	r0, [r7, #12]
 80066e2:	60b9      	str	r1, [r7, #8]
 80066e4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	6a1a      	ldr	r2, [r3, #32]
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	fa93 f3a3 	rbit	r3, r3
 80066f4:	613b      	str	r3, [r7, #16]
  return result;
 80066f6:	693b      	ldr	r3, [r7, #16]
 80066f8:	fab3 f383 	clz	r3, r3
 80066fc:	b2db      	uxtb	r3, r3
 80066fe:	009b      	lsls	r3, r3, #2
 8006700:	210f      	movs	r1, #15
 8006702:	fa01 f303 	lsl.w	r3, r1, r3
 8006706:	43db      	mvns	r3, r3
 8006708:	401a      	ands	r2, r3
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800670e:	69fb      	ldr	r3, [r7, #28]
 8006710:	fa93 f3a3 	rbit	r3, r3
 8006714:	61bb      	str	r3, [r7, #24]
  return result;
 8006716:	69bb      	ldr	r3, [r7, #24]
 8006718:	fab3 f383 	clz	r3, r3
 800671c:	b2db      	uxtb	r3, r3
 800671e:	009b      	lsls	r3, r3, #2
 8006720:	6879      	ldr	r1, [r7, #4]
 8006722:	fa01 f303 	lsl.w	r3, r1, r3
 8006726:	431a      	orrs	r2, r3
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	621a      	str	r2, [r3, #32]
}
 800672c:	bf00      	nop
 800672e:	3724      	adds	r7, #36	; 0x24
 8006730:	46bd      	mov	sp, r7
 8006732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006736:	4770      	bx	lr

08006738 <LL_GPIO_SetAFPin_8_15>:
{
 8006738:	b480      	push	{r7}
 800673a:	b089      	sub	sp, #36	; 0x24
 800673c:	af00      	add	r7, sp, #0
 800673e:	60f8      	str	r0, [r7, #12]
 8006740:	60b9      	str	r1, [r7, #8]
 8006742:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	0a1b      	lsrs	r3, r3, #8
 800674c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	fa93 f3a3 	rbit	r3, r3
 8006754:	613b      	str	r3, [r7, #16]
  return result;
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	fab3 f383 	clz	r3, r3
 800675c:	b2db      	uxtb	r3, r3
 800675e:	009b      	lsls	r3, r3, #2
 8006760:	210f      	movs	r1, #15
 8006762:	fa01 f303 	lsl.w	r3, r1, r3
 8006766:	43db      	mvns	r3, r3
 8006768:	401a      	ands	r2, r3
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	0a1b      	lsrs	r3, r3, #8
 800676e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006770:	69fb      	ldr	r3, [r7, #28]
 8006772:	fa93 f3a3 	rbit	r3, r3
 8006776:	61bb      	str	r3, [r7, #24]
  return result;
 8006778:	69bb      	ldr	r3, [r7, #24]
 800677a:	fab3 f383 	clz	r3, r3
 800677e:	b2db      	uxtb	r3, r3
 8006780:	009b      	lsls	r3, r3, #2
 8006782:	6879      	ldr	r1, [r7, #4]
 8006784:	fa01 f303 	lsl.w	r3, r1, r3
 8006788:	431a      	orrs	r2, r3
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800678e:	bf00      	nop
 8006790:	3724      	adds	r7, #36	; 0x24
 8006792:	46bd      	mov	sp, r7
 8006794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006798:	4770      	bx	lr

0800679a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800679a:	b580      	push	{r7, lr}
 800679c:	b088      	sub	sp, #32
 800679e:	af00      	add	r7, sp, #0
 80067a0:	6078      	str	r0, [r7, #4]
 80067a2:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 80067a4:	2300      	movs	r3, #0
 80067a6:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 80067a8:	2300      	movs	r3, #0
 80067aa:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	fa93 f3a3 	rbit	r3, r3
 80067b8:	613b      	str	r3, [r7, #16]
  return result;
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	fab3 f383 	clz	r3, r3
 80067c0:	b2db      	uxtb	r3, r3
 80067c2:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80067c4:	e050      	b.n	8006868 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	681a      	ldr	r2, [r3, #0]
 80067ca:	2101      	movs	r1, #1
 80067cc:	69fb      	ldr	r3, [r7, #28]
 80067ce:	fa01 f303 	lsl.w	r3, r1, r3
 80067d2:	4013      	ands	r3, r2
 80067d4:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 80067d6:	69bb      	ldr	r3, [r7, #24]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d042      	beq.n	8006862 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	685b      	ldr	r3, [r3, #4]
 80067e0:	2b01      	cmp	r3, #1
 80067e2:	d003      	beq.n	80067ec <LL_GPIO_Init+0x52>
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	685b      	ldr	r3, [r3, #4]
 80067e8:	2b02      	cmp	r3, #2
 80067ea:	d10d      	bne.n	8006808 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	689b      	ldr	r3, [r3, #8]
 80067f0:	461a      	mov	r2, r3
 80067f2:	69b9      	ldr	r1, [r7, #24]
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f7ff ff12 	bl	800661e <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	68db      	ldr	r3, [r3, #12]
 80067fe:	461a      	mov	r2, r3
 8006800:	69b9      	ldr	r1, [r7, #24]
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f7ff fef3 	bl	80065ee <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	691b      	ldr	r3, [r3, #16]
 800680c:	461a      	mov	r2, r3
 800680e:	69b9      	ldr	r1, [r7, #24]
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f7ff ff33 	bl	800667c <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	685b      	ldr	r3, [r3, #4]
 800681a:	2b02      	cmp	r3, #2
 800681c:	d11a      	bne.n	8006854 <LL_GPIO_Init+0xba>
 800681e:	69bb      	ldr	r3, [r7, #24]
 8006820:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	fa93 f3a3 	rbit	r3, r3
 8006828:	60bb      	str	r3, [r7, #8]
  return result;
 800682a:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800682c:	fab3 f383 	clz	r3, r3
 8006830:	b2db      	uxtb	r3, r3
 8006832:	2b07      	cmp	r3, #7
 8006834:	d807      	bhi.n	8006846 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	695b      	ldr	r3, [r3, #20]
 800683a:	461a      	mov	r2, r3
 800683c:	69b9      	ldr	r1, [r7, #24]
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f7ff ff4b 	bl	80066da <LL_GPIO_SetAFPin_0_7>
 8006844:	e006      	b.n	8006854 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	695b      	ldr	r3, [r3, #20]
 800684a:	461a      	mov	r2, r3
 800684c:	69b9      	ldr	r1, [r7, #24]
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f7ff ff72 	bl	8006738 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	461a      	mov	r2, r3
 800685a:	69b9      	ldr	r1, [r7, #24]
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f7ff fe97 	bl	8006590 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8006862:	69fb      	ldr	r3, [r7, #28]
 8006864:	3301      	adds	r3, #1
 8006866:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	681a      	ldr	r2, [r3, #0]
 800686c:	69fb      	ldr	r3, [r7, #28]
 800686e:	fa22 f303 	lsr.w	r3, r2, r3
 8006872:	2b00      	cmp	r3, #0
 8006874:	d1a7      	bne.n	80067c6 <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8006876:	2300      	movs	r3, #0
}
 8006878:	4618      	mov	r0, r3
 800687a:	3720      	adds	r7, #32
 800687c:	46bd      	mov	sp, r7
 800687e:	bd80      	pop	{r7, pc}

08006880 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8006880:	b480      	push	{r7}
 8006882:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8006884:	4b04      	ldr	r3, [pc, #16]	; (8006898 <LL_RCC_GetSysClkSource+0x18>)
 8006886:	689b      	ldr	r3, [r3, #8]
 8006888:	f003 030c 	and.w	r3, r3, #12
}
 800688c:	4618      	mov	r0, r3
 800688e:	46bd      	mov	sp, r7
 8006890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006894:	4770      	bx	lr
 8006896:	bf00      	nop
 8006898:	40023800 	.word	0x40023800

0800689c <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 800689c:	b480      	push	{r7}
 800689e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80068a0:	4b04      	ldr	r3, [pc, #16]	; (80068b4 <LL_RCC_GetAHBPrescaler+0x18>)
 80068a2:	689b      	ldr	r3, [r3, #8]
 80068a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	46bd      	mov	sp, r7
 80068ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b0:	4770      	bx	lr
 80068b2:	bf00      	nop
 80068b4:	40023800 	.word	0x40023800

080068b8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80068b8:	b480      	push	{r7}
 80068ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80068bc:	4b04      	ldr	r3, [pc, #16]	; (80068d0 <LL_RCC_GetAPB1Prescaler+0x18>)
 80068be:	689b      	ldr	r3, [r3, #8]
 80068c0:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 80068c4:	4618      	mov	r0, r3
 80068c6:	46bd      	mov	sp, r7
 80068c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068cc:	4770      	bx	lr
 80068ce:	bf00      	nop
 80068d0:	40023800 	.word	0x40023800

080068d4 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80068d4:	b480      	push	{r7}
 80068d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80068d8:	4b04      	ldr	r3, [pc, #16]	; (80068ec <LL_RCC_GetAPB2Prescaler+0x18>)
 80068da:	689b      	ldr	r3, [r3, #8]
 80068dc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	46bd      	mov	sp, r7
 80068e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e8:	4770      	bx	lr
 80068ea:	bf00      	nop
 80068ec:	40023800 	.word	0x40023800

080068f0 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80068f0:	b480      	push	{r7}
 80068f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80068f4:	4b04      	ldr	r3, [pc, #16]	; (8006908 <LL_RCC_PLL_GetMainSource+0x18>)
 80068f6:	685b      	ldr	r3, [r3, #4]
 80068f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	46bd      	mov	sp, r7
 8006900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006904:	4770      	bx	lr
 8006906:	bf00      	nop
 8006908:	40023800 	.word	0x40023800

0800690c <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800690c:	b480      	push	{r7}
 800690e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8006910:	4b04      	ldr	r3, [pc, #16]	; (8006924 <LL_RCC_PLL_GetN+0x18>)
 8006912:	685b      	ldr	r3, [r3, #4]
 8006914:	099b      	lsrs	r3, r3, #6
 8006916:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 800691a:	4618      	mov	r0, r3
 800691c:	46bd      	mov	sp, r7
 800691e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006922:	4770      	bx	lr
 8006924:	40023800 	.word	0x40023800

08006928 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8006928:	b480      	push	{r7}
 800692a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 800692c:	4b04      	ldr	r3, [pc, #16]	; (8006940 <LL_RCC_PLL_GetP+0x18>)
 800692e:	685b      	ldr	r3, [r3, #4]
 8006930:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8006934:	4618      	mov	r0, r3
 8006936:	46bd      	mov	sp, r7
 8006938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693c:	4770      	bx	lr
 800693e:	bf00      	nop
 8006940:	40023800 	.word	0x40023800

08006944 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8006944:	b480      	push	{r7}
 8006946:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8006948:	4b04      	ldr	r3, [pc, #16]	; (800695c <LL_RCC_PLL_GetDivider+0x18>)
 800694a:	685b      	ldr	r3, [r3, #4]
 800694c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8006950:	4618      	mov	r0, r3
 8006952:	46bd      	mov	sp, r7
 8006954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006958:	4770      	bx	lr
 800695a:	bf00      	nop
 800695c:	40023800 	.word	0x40023800

08006960 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b082      	sub	sp, #8
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8006968:	f000 f820 	bl	80069ac <RCC_GetSystemClockFreq>
 800696c:	4602      	mov	r2, r0
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4618      	mov	r0, r3
 8006978:	f000 f840 	bl	80069fc <RCC_GetHCLKClockFreq>
 800697c:	4602      	mov	r2, r0
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	4618      	mov	r0, r3
 8006988:	f000 f84e 	bl	8006a28 <RCC_GetPCLK1ClockFreq>
 800698c:	4602      	mov	r2, r0
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	4618      	mov	r0, r3
 8006998:	f000 f85a 	bl	8006a50 <RCC_GetPCLK2ClockFreq>
 800699c:	4602      	mov	r2, r0
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	60da      	str	r2, [r3, #12]
}
 80069a2:	bf00      	nop
 80069a4:	3708      	adds	r7, #8
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bd80      	pop	{r7, pc}
	...

080069ac <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b082      	sub	sp, #8
 80069b0:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80069b2:	2300      	movs	r3, #0
 80069b4:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80069b6:	f7ff ff63 	bl	8006880 <LL_RCC_GetSysClkSource>
 80069ba:	4603      	mov	r3, r0
 80069bc:	2b08      	cmp	r3, #8
 80069be:	d00c      	beq.n	80069da <RCC_GetSystemClockFreq+0x2e>
 80069c0:	2b08      	cmp	r3, #8
 80069c2:	d80f      	bhi.n	80069e4 <RCC_GetSystemClockFreq+0x38>
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d002      	beq.n	80069ce <RCC_GetSystemClockFreq+0x22>
 80069c8:	2b04      	cmp	r3, #4
 80069ca:	d003      	beq.n	80069d4 <RCC_GetSystemClockFreq+0x28>
 80069cc:	e00a      	b.n	80069e4 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80069ce:	4b09      	ldr	r3, [pc, #36]	; (80069f4 <RCC_GetSystemClockFreq+0x48>)
 80069d0:	607b      	str	r3, [r7, #4]
      break;
 80069d2:	e00a      	b.n	80069ea <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80069d4:	4b08      	ldr	r3, [pc, #32]	; (80069f8 <RCC_GetSystemClockFreq+0x4c>)
 80069d6:	607b      	str	r3, [r7, #4]
      break;
 80069d8:	e007      	b.n	80069ea <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 80069da:	2008      	movs	r0, #8
 80069dc:	f000 f84c 	bl	8006a78 <RCC_PLL_GetFreqDomain_SYS>
 80069e0:	6078      	str	r0, [r7, #4]
      break;
 80069e2:	e002      	b.n	80069ea <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 80069e4:	4b03      	ldr	r3, [pc, #12]	; (80069f4 <RCC_GetSystemClockFreq+0x48>)
 80069e6:	607b      	str	r3, [r7, #4]
      break;
 80069e8:	bf00      	nop
  }

  return frequency;
 80069ea:	687b      	ldr	r3, [r7, #4]
}
 80069ec:	4618      	mov	r0, r3
 80069ee:	3708      	adds	r7, #8
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bd80      	pop	{r7, pc}
 80069f4:	00f42400 	.word	0x00f42400
 80069f8:	007a1200 	.word	0x007a1200

080069fc <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b082      	sub	sp, #8
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8006a04:	f7ff ff4a 	bl	800689c <LL_RCC_GetAHBPrescaler>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	091b      	lsrs	r3, r3, #4
 8006a0c:	f003 030f 	and.w	r3, r3, #15
 8006a10:	4a04      	ldr	r2, [pc, #16]	; (8006a24 <RCC_GetHCLKClockFreq+0x28>)
 8006a12:	5cd3      	ldrb	r3, [r2, r3]
 8006a14:	461a      	mov	r2, r3
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	40d3      	lsrs	r3, r2
}
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	3708      	adds	r7, #8
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bd80      	pop	{r7, pc}
 8006a22:	bf00      	nop
 8006a24:	0800a1e0 	.word	0x0800a1e0

08006a28 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b082      	sub	sp, #8
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8006a30:	f7ff ff42 	bl	80068b8 <LL_RCC_GetAPB1Prescaler>
 8006a34:	4603      	mov	r3, r0
 8006a36:	0a9b      	lsrs	r3, r3, #10
 8006a38:	4a04      	ldr	r2, [pc, #16]	; (8006a4c <RCC_GetPCLK1ClockFreq+0x24>)
 8006a3a:	5cd3      	ldrb	r3, [r2, r3]
 8006a3c:	461a      	mov	r2, r3
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	40d3      	lsrs	r3, r2
}
 8006a42:	4618      	mov	r0, r3
 8006a44:	3708      	adds	r7, #8
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bd80      	pop	{r7, pc}
 8006a4a:	bf00      	nop
 8006a4c:	0800a1f0 	.word	0x0800a1f0

08006a50 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b082      	sub	sp, #8
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8006a58:	f7ff ff3c 	bl	80068d4 <LL_RCC_GetAPB2Prescaler>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	0b5b      	lsrs	r3, r3, #13
 8006a60:	4a04      	ldr	r2, [pc, #16]	; (8006a74 <RCC_GetPCLK2ClockFreq+0x24>)
 8006a62:	5cd3      	ldrb	r3, [r2, r3]
 8006a64:	461a      	mov	r2, r3
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	40d3      	lsrs	r3, r2
}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	3708      	adds	r7, #8
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}
 8006a72:	bf00      	nop
 8006a74:	0800a1f0 	.word	0x0800a1f0

08006a78 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8006a78:	b590      	push	{r4, r7, lr}
 8006a7a:	b087      	sub	sp, #28
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8006a80:	2300      	movs	r3, #0
 8006a82:	617b      	str	r3, [r7, #20]
 8006a84:	2300      	movs	r3, #0
 8006a86:	60fb      	str	r3, [r7, #12]
 8006a88:	2300      	movs	r3, #0
 8006a8a:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8006a8c:	f7ff ff30 	bl	80068f0 <LL_RCC_PLL_GetMainSource>
 8006a90:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d004      	beq.n	8006aa2 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a9e:	d003      	beq.n	8006aa8 <RCC_PLL_GetFreqDomain_SYS+0x30>
 8006aa0:	e005      	b.n	8006aae <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8006aa2:	4b12      	ldr	r3, [pc, #72]	; (8006aec <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8006aa4:	617b      	str	r3, [r7, #20]
      break;
 8006aa6:	e005      	b.n	8006ab4 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8006aa8:	4b11      	ldr	r3, [pc, #68]	; (8006af0 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8006aaa:	617b      	str	r3, [r7, #20]
      break;
 8006aac:	e002      	b.n	8006ab4 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8006aae:	4b0f      	ldr	r3, [pc, #60]	; (8006aec <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8006ab0:	617b      	str	r3, [r7, #20]
      break;
 8006ab2:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2b08      	cmp	r3, #8
 8006ab8:	d113      	bne.n	8006ae2 <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8006aba:	f7ff ff43 	bl	8006944 <LL_RCC_PLL_GetDivider>
 8006abe:	4602      	mov	r2, r0
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	fbb3 f4f2 	udiv	r4, r3, r2
 8006ac6:	f7ff ff21 	bl	800690c <LL_RCC_PLL_GetN>
 8006aca:	4603      	mov	r3, r0
 8006acc:	fb03 f404 	mul.w	r4, r3, r4
 8006ad0:	f7ff ff2a 	bl	8006928 <LL_RCC_PLL_GetP>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	0c1b      	lsrs	r3, r3, #16
 8006ad8:	3301      	adds	r3, #1
 8006ada:	005b      	lsls	r3, r3, #1
 8006adc:	fbb4 f3f3 	udiv	r3, r4, r3
 8006ae0:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8006ae2:	693b      	ldr	r3, [r7, #16]
}
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	371c      	adds	r7, #28
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd90      	pop	{r4, r7, pc}
 8006aec:	00f42400 	.word	0x00f42400
 8006af0:	007a1200 	.word	0x007a1200

08006af4 <LL_TIM_SetPrescaler>:
{
 8006af4:	b480      	push	{r7}
 8006af6:	b083      	sub	sp, #12
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
 8006afc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	683a      	ldr	r2, [r7, #0]
 8006b02:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006b04:	bf00      	nop
 8006b06:	370c      	adds	r7, #12
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0e:	4770      	bx	lr

08006b10 <LL_TIM_SetAutoReload>:
{
 8006b10:	b480      	push	{r7}
 8006b12:	b083      	sub	sp, #12
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
 8006b18:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	683a      	ldr	r2, [r7, #0]
 8006b1e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006b20:	bf00      	nop
 8006b22:	370c      	adds	r7, #12
 8006b24:	46bd      	mov	sp, r7
 8006b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2a:	4770      	bx	lr

08006b2c <LL_TIM_SetRepetitionCounter>:
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b083      	sub	sp, #12
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
 8006b34:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	683a      	ldr	r2, [r7, #0]
 8006b3a:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006b3c:	bf00      	nop
 8006b3e:	370c      	adds	r7, #12
 8006b40:	46bd      	mov	sp, r7
 8006b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b46:	4770      	bx	lr

08006b48 <LL_TIM_OC_SetCompareCH1>:
{
 8006b48:	b480      	push	{r7}
 8006b4a:	b083      	sub	sp, #12
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
 8006b50:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	683a      	ldr	r2, [r7, #0]
 8006b56:	635a      	str	r2, [r3, #52]	; 0x34
}
 8006b58:	bf00      	nop
 8006b5a:	370c      	adds	r7, #12
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b62:	4770      	bx	lr

08006b64 <LL_TIM_OC_SetCompareCH2>:
{
 8006b64:	b480      	push	{r7}
 8006b66:	b083      	sub	sp, #12
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
 8006b6c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	683a      	ldr	r2, [r7, #0]
 8006b72:	639a      	str	r2, [r3, #56]	; 0x38
}
 8006b74:	bf00      	nop
 8006b76:	370c      	adds	r7, #12
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7e:	4770      	bx	lr

08006b80 <LL_TIM_OC_SetCompareCH3>:
{
 8006b80:	b480      	push	{r7}
 8006b82:	b083      	sub	sp, #12
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
 8006b88:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	683a      	ldr	r2, [r7, #0]
 8006b8e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8006b90:	bf00      	nop
 8006b92:	370c      	adds	r7, #12
 8006b94:	46bd      	mov	sp, r7
 8006b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9a:	4770      	bx	lr

08006b9c <LL_TIM_OC_SetCompareCH4>:
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b083      	sub	sp, #12
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
 8006ba4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	683a      	ldr	r2, [r7, #0]
 8006baa:	641a      	str	r2, [r3, #64]	; 0x40
}
 8006bac:	bf00      	nop
 8006bae:	370c      	adds	r7, #12
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb6:	4770      	bx	lr

08006bb8 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b083      	sub	sp, #12
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	695b      	ldr	r3, [r3, #20]
 8006bc4:	f043 0201 	orr.w	r2, r3, #1
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	615a      	str	r2, [r3, #20]
}
 8006bcc:	bf00      	nop
 8006bce:	370c      	adds	r7, #12
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd6:	4770      	bx	lr

08006bd8 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b084      	sub	sp, #16
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
 8006be0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	4a3d      	ldr	r2, [pc, #244]	; (8006ce0 <LL_TIM_Init+0x108>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d013      	beq.n	8006c18 <LL_TIM_Init+0x40>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bf6:	d00f      	beq.n	8006c18 <LL_TIM_Init+0x40>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	4a3a      	ldr	r2, [pc, #232]	; (8006ce4 <LL_TIM_Init+0x10c>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d00b      	beq.n	8006c18 <LL_TIM_Init+0x40>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	4a39      	ldr	r2, [pc, #228]	; (8006ce8 <LL_TIM_Init+0x110>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d007      	beq.n	8006c18 <LL_TIM_Init+0x40>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	4a38      	ldr	r2, [pc, #224]	; (8006cec <LL_TIM_Init+0x114>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d003      	beq.n	8006c18 <LL_TIM_Init+0x40>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	4a37      	ldr	r2, [pc, #220]	; (8006cf0 <LL_TIM_Init+0x118>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d106      	bne.n	8006c26 <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	685b      	ldr	r3, [r3, #4]
 8006c22:	4313      	orrs	r3, r2
 8006c24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	4a2d      	ldr	r2, [pc, #180]	; (8006ce0 <LL_TIM_Init+0x108>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d02b      	beq.n	8006c86 <LL_TIM_Init+0xae>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c34:	d027      	beq.n	8006c86 <LL_TIM_Init+0xae>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	4a2a      	ldr	r2, [pc, #168]	; (8006ce4 <LL_TIM_Init+0x10c>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d023      	beq.n	8006c86 <LL_TIM_Init+0xae>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	4a29      	ldr	r2, [pc, #164]	; (8006ce8 <LL_TIM_Init+0x110>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d01f      	beq.n	8006c86 <LL_TIM_Init+0xae>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	4a28      	ldr	r2, [pc, #160]	; (8006cec <LL_TIM_Init+0x114>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d01b      	beq.n	8006c86 <LL_TIM_Init+0xae>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	4a27      	ldr	r2, [pc, #156]	; (8006cf0 <LL_TIM_Init+0x118>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d017      	beq.n	8006c86 <LL_TIM_Init+0xae>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	4a26      	ldr	r2, [pc, #152]	; (8006cf4 <LL_TIM_Init+0x11c>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d013      	beq.n	8006c86 <LL_TIM_Init+0xae>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	4a25      	ldr	r2, [pc, #148]	; (8006cf8 <LL_TIM_Init+0x120>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d00f      	beq.n	8006c86 <LL_TIM_Init+0xae>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	4a24      	ldr	r2, [pc, #144]	; (8006cfc <LL_TIM_Init+0x124>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d00b      	beq.n	8006c86 <LL_TIM_Init+0xae>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	4a23      	ldr	r2, [pc, #140]	; (8006d00 <LL_TIM_Init+0x128>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d007      	beq.n	8006c86 <LL_TIM_Init+0xae>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	4a22      	ldr	r2, [pc, #136]	; (8006d04 <LL_TIM_Init+0x12c>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d003      	beq.n	8006c86 <LL_TIM_Init+0xae>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	4a21      	ldr	r2, [pc, #132]	; (8006d08 <LL_TIM_Init+0x130>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d106      	bne.n	8006c94 <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	68db      	ldr	r3, [r3, #12]
 8006c90:	4313      	orrs	r3, r2
 8006c92:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	68fa      	ldr	r2, [r7, #12]
 8006c98:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	689b      	ldr	r3, [r3, #8]
 8006c9e:	4619      	mov	r1, r3
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	f7ff ff35 	bl	8006b10 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	881b      	ldrh	r3, [r3, #0]
 8006caa:	4619      	mov	r1, r3
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f7ff ff21 	bl	8006af4 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	4a0a      	ldr	r2, [pc, #40]	; (8006ce0 <LL_TIM_Init+0x108>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d003      	beq.n	8006cc2 <LL_TIM_Init+0xea>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	4a0c      	ldr	r2, [pc, #48]	; (8006cf0 <LL_TIM_Init+0x118>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d105      	bne.n	8006cce <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	691b      	ldr	r3, [r3, #16]
 8006cc6:	4619      	mov	r1, r3
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f7ff ff2f 	bl	8006b2c <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f7ff ff72 	bl	8006bb8 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8006cd4:	2300      	movs	r3, #0
}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	3710      	adds	r7, #16
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	bd80      	pop	{r7, pc}
 8006cde:	bf00      	nop
 8006ce0:	40010000 	.word	0x40010000
 8006ce4:	40000400 	.word	0x40000400
 8006ce8:	40000800 	.word	0x40000800
 8006cec:	40000c00 	.word	0x40000c00
 8006cf0:	40010400 	.word	0x40010400
 8006cf4:	40014000 	.word	0x40014000
 8006cf8:	40014400 	.word	0x40014400
 8006cfc:	40014800 	.word	0x40014800
 8006d00:	40001800 	.word	0x40001800
 8006d04:	40001c00 	.word	0x40001c00
 8006d08:	40002000 	.word	0x40002000

08006d0c <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b086      	sub	sp, #24
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	60f8      	str	r0, [r7, #12]
 8006d14:	60b9      	str	r1, [r7, #8]
 8006d16:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8006d18:	2301      	movs	r3, #1
 8006d1a:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d22:	d027      	beq.n	8006d74 <LL_TIM_OC_Init+0x68>
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d2a:	d82a      	bhi.n	8006d82 <LL_TIM_OC_Init+0x76>
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d32:	d018      	beq.n	8006d66 <LL_TIM_OC_Init+0x5a>
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d3a:	d822      	bhi.n	8006d82 <LL_TIM_OC_Init+0x76>
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	2b01      	cmp	r3, #1
 8006d40:	d003      	beq.n	8006d4a <LL_TIM_OC_Init+0x3e>
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	2b10      	cmp	r3, #16
 8006d46:	d007      	beq.n	8006d58 <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8006d48:	e01b      	b.n	8006d82 <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8006d4a:	6879      	ldr	r1, [r7, #4]
 8006d4c:	68f8      	ldr	r0, [r7, #12]
 8006d4e:	f000 f81f 	bl	8006d90 <OC1Config>
 8006d52:	4603      	mov	r3, r0
 8006d54:	75fb      	strb	r3, [r7, #23]
      break;
 8006d56:	e015      	b.n	8006d84 <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8006d58:	6879      	ldr	r1, [r7, #4]
 8006d5a:	68f8      	ldr	r0, [r7, #12]
 8006d5c:	f000 f884 	bl	8006e68 <OC2Config>
 8006d60:	4603      	mov	r3, r0
 8006d62:	75fb      	strb	r3, [r7, #23]
      break;
 8006d64:	e00e      	b.n	8006d84 <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8006d66:	6879      	ldr	r1, [r7, #4]
 8006d68:	68f8      	ldr	r0, [r7, #12]
 8006d6a:	f000 f8ed 	bl	8006f48 <OC3Config>
 8006d6e:	4603      	mov	r3, r0
 8006d70:	75fb      	strb	r3, [r7, #23]
      break;
 8006d72:	e007      	b.n	8006d84 <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8006d74:	6879      	ldr	r1, [r7, #4]
 8006d76:	68f8      	ldr	r0, [r7, #12]
 8006d78:	f000 f956 	bl	8007028 <OC4Config>
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	75fb      	strb	r3, [r7, #23]
      break;
 8006d80:	e000      	b.n	8006d84 <LL_TIM_OC_Init+0x78>
      break;
 8006d82:	bf00      	nop
  }

  return result;
 8006d84:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d86:	4618      	mov	r0, r3
 8006d88:	3718      	adds	r7, #24
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}
	...

08006d90 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b086      	sub	sp, #24
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
 8006d98:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6a1b      	ldr	r3, [r3, #32]
 8006d9e:	f023 0201 	bic.w	r2, r3, #1
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6a1b      	ldr	r3, [r3, #32]
 8006daa:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	685b      	ldr	r3, [r3, #4]
 8006db0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	699b      	ldr	r3, [r3, #24]
 8006db6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	f023 0303 	bic.w	r3, r3, #3
 8006dbe:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	f023 0202 	bic.w	r2, r3, #2
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	691b      	ldr	r3, [r3, #16]
 8006dd8:	4313      	orrs	r3, r2
 8006dda:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8006ddc:	697b      	ldr	r3, [r7, #20]
 8006dde:	f023 0201 	bic.w	r2, r3, #1
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	685b      	ldr	r3, [r3, #4]
 8006de6:	4313      	orrs	r3, r2
 8006de8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	4a1c      	ldr	r2, [pc, #112]	; (8006e60 <OC1Config+0xd0>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d003      	beq.n	8006dfa <OC1Config+0x6a>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	4a1b      	ldr	r2, [pc, #108]	; (8006e64 <OC1Config+0xd4>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d11e      	bne.n	8006e38 <OC1Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	f023 0208 	bic.w	r2, r3, #8
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	695b      	ldr	r3, [r3, #20]
 8006e04:	009b      	lsls	r3, r3, #2
 8006e06:	4313      	orrs	r3, r2
 8006e08:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	f023 0204 	bic.w	r2, r3, #4
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	689b      	ldr	r3, [r3, #8]
 8006e14:	009b      	lsls	r3, r3, #2
 8006e16:	4313      	orrs	r3, r2
 8006e18:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	699b      	ldr	r3, [r3, #24]
 8006e24:	4313      	orrs	r3, r2
 8006e26:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	69db      	ldr	r3, [r3, #28]
 8006e32:	005b      	lsls	r3, r3, #1
 8006e34:	4313      	orrs	r3, r2
 8006e36:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	693a      	ldr	r2, [r7, #16]
 8006e3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	68fa      	ldr	r2, [r7, #12]
 8006e42:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	68db      	ldr	r3, [r3, #12]
 8006e48:	4619      	mov	r1, r3
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f7ff fe7c 	bl	8006b48 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	697a      	ldr	r2, [r7, #20]
 8006e54:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8006e56:	2300      	movs	r3, #0
}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	3718      	adds	r7, #24
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bd80      	pop	{r7, pc}
 8006e60:	40010000 	.word	0x40010000
 8006e64:	40010400 	.word	0x40010400

08006e68 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b086      	sub	sp, #24
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
 8006e70:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6a1b      	ldr	r3, [r3, #32]
 8006e76:	f023 0210 	bic.w	r2, r3, #16
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6a1b      	ldr	r3, [r3, #32]
 8006e82:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	685b      	ldr	r3, [r3, #4]
 8006e88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	699b      	ldr	r3, [r3, #24]
 8006e8e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	021b      	lsls	r3, r3, #8
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8006ea8:	697b      	ldr	r3, [r7, #20]
 8006eaa:	f023 0220 	bic.w	r2, r3, #32
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	691b      	ldr	r3, [r3, #16]
 8006eb2:	011b      	lsls	r3, r3, #4
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8006eb8:	697b      	ldr	r3, [r7, #20]
 8006eba:	f023 0210 	bic.w	r2, r3, #16
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	685b      	ldr	r3, [r3, #4]
 8006ec2:	011b      	lsls	r3, r3, #4
 8006ec4:	4313      	orrs	r3, r2
 8006ec6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	4a1d      	ldr	r2, [pc, #116]	; (8006f40 <OC2Config+0xd8>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d003      	beq.n	8006ed8 <OC2Config+0x70>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	4a1c      	ldr	r2, [pc, #112]	; (8006f44 <OC2Config+0xdc>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d11f      	bne.n	8006f18 <OC2Config+0xb0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8006ed8:	697b      	ldr	r3, [r7, #20]
 8006eda:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	695b      	ldr	r3, [r3, #20]
 8006ee2:	019b      	lsls	r3, r3, #6
 8006ee4:	4313      	orrs	r3, r2
 8006ee6:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8006ee8:	697b      	ldr	r3, [r7, #20]
 8006eea:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	689b      	ldr	r3, [r3, #8]
 8006ef2:	019b      	lsls	r3, r3, #6
 8006ef4:	4313      	orrs	r3, r2
 8006ef6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8006ef8:	693b      	ldr	r3, [r7, #16]
 8006efa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	699b      	ldr	r3, [r3, #24]
 8006f02:	009b      	lsls	r3, r3, #2
 8006f04:	4313      	orrs	r3, r2
 8006f06:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8006f08:	693b      	ldr	r3, [r7, #16]
 8006f0a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	69db      	ldr	r3, [r3, #28]
 8006f12:	00db      	lsls	r3, r3, #3
 8006f14:	4313      	orrs	r3, r2
 8006f16:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	693a      	ldr	r2, [r7, #16]
 8006f1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	68fa      	ldr	r2, [r7, #12]
 8006f22:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	68db      	ldr	r3, [r3, #12]
 8006f28:	4619      	mov	r1, r3
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f7ff fe1a 	bl	8006b64 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	697a      	ldr	r2, [r7, #20]
 8006f34:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8006f36:	2300      	movs	r3, #0
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	3718      	adds	r7, #24
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}
 8006f40:	40010000 	.word	0x40010000
 8006f44:	40010400 	.word	0x40010400

08006f48 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b086      	sub	sp, #24
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
 8006f50:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6a1b      	ldr	r3, [r3, #32]
 8006f56:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6a1b      	ldr	r3, [r3, #32]
 8006f62:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	685b      	ldr	r3, [r3, #4]
 8006f68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	69db      	ldr	r3, [r3, #28]
 8006f6e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	f023 0303 	bic.w	r3, r3, #3
 8006f76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4313      	orrs	r3, r2
 8006f84:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	691b      	ldr	r3, [r3, #16]
 8006f90:	021b      	lsls	r3, r3, #8
 8006f92:	4313      	orrs	r3, r2
 8006f94:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	685b      	ldr	r3, [r3, #4]
 8006fa0:	021b      	lsls	r3, r3, #8
 8006fa2:	4313      	orrs	r3, r2
 8006fa4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	4a1d      	ldr	r2, [pc, #116]	; (8007020 <OC3Config+0xd8>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d003      	beq.n	8006fb6 <OC3Config+0x6e>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	4a1c      	ldr	r2, [pc, #112]	; (8007024 <OC3Config+0xdc>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d11f      	bne.n	8006ff6 <OC3Config+0xae>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	695b      	ldr	r3, [r3, #20]
 8006fc0:	029b      	lsls	r3, r3, #10
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	689b      	ldr	r3, [r3, #8]
 8006fd0:	029b      	lsls	r3, r3, #10
 8006fd2:	4313      	orrs	r3, r2
 8006fd4:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8006fd6:	693b      	ldr	r3, [r7, #16]
 8006fd8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	699b      	ldr	r3, [r3, #24]
 8006fe0:	011b      	lsls	r3, r3, #4
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8006fe6:	693b      	ldr	r3, [r7, #16]
 8006fe8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	69db      	ldr	r3, [r3, #28]
 8006ff0:	015b      	lsls	r3, r3, #5
 8006ff2:	4313      	orrs	r3, r2
 8006ff4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	693a      	ldr	r2, [r7, #16]
 8006ffa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	68fa      	ldr	r2, [r7, #12]
 8007000:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	68db      	ldr	r3, [r3, #12]
 8007006:	4619      	mov	r1, r3
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f7ff fdb9 	bl	8006b80 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	697a      	ldr	r2, [r7, #20]
 8007012:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8007014:	2300      	movs	r3, #0
}
 8007016:	4618      	mov	r0, r3
 8007018:	3718      	adds	r7, #24
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}
 800701e:	bf00      	nop
 8007020:	40010000 	.word	0x40010000
 8007024:	40010400 	.word	0x40010400

08007028 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b086      	sub	sp, #24
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
 8007030:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6a1b      	ldr	r3, [r3, #32]
 8007036:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6a1b      	ldr	r3, [r3, #32]
 8007042:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	685b      	ldr	r3, [r3, #4]
 8007048:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	69db      	ldr	r3, [r3, #28]
 800704e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007056:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	021b      	lsls	r3, r3, #8
 8007064:	4313      	orrs	r3, r2
 8007066:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	691b      	ldr	r3, [r3, #16]
 8007072:	031b      	lsls	r3, r3, #12
 8007074:	4313      	orrs	r3, r2
 8007076:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8007078:	693b      	ldr	r3, [r7, #16]
 800707a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	685b      	ldr	r3, [r3, #4]
 8007082:	031b      	lsls	r3, r3, #12
 8007084:	4313      	orrs	r3, r2
 8007086:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	4a11      	ldr	r2, [pc, #68]	; (80070d0 <OC4Config+0xa8>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d003      	beq.n	8007098 <OC4Config+0x70>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	4a10      	ldr	r2, [pc, #64]	; (80070d4 <OC4Config+0xac>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d107      	bne.n	80070a8 <OC4Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	699b      	ldr	r3, [r3, #24]
 80070a2:	019b      	lsls	r3, r3, #6
 80070a4:	4313      	orrs	r3, r2
 80070a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	697a      	ldr	r2, [r7, #20]
 80070ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	68fa      	ldr	r2, [r7, #12]
 80070b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	68db      	ldr	r3, [r3, #12]
 80070b8:	4619      	mov	r1, r3
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f7ff fd6e 	bl	8006b9c <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	693a      	ldr	r2, [r7, #16]
 80070c4:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80070c6:	2300      	movs	r3, #0
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	3718      	adds	r7, #24
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bd80      	pop	{r7, pc}
 80070d0:	40010000 	.word	0x40010000
 80070d4:	40010400 	.word	0x40010400

080070d8 <LL_USART_IsEnabled>:
{
 80070d8:	b480      	push	{r7}
 80070da:	b083      	sub	sp, #12
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	68db      	ldr	r3, [r3, #12]
 80070e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80070e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070ec:	bf0c      	ite	eq
 80070ee:	2301      	moveq	r3, #1
 80070f0:	2300      	movne	r3, #0
 80070f2:	b2db      	uxtb	r3, r3
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	370c      	adds	r7, #12
 80070f8:	46bd      	mov	sp, r7
 80070fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fe:	4770      	bx	lr

08007100 <LL_USART_SetStopBitsLength>:
{
 8007100:	b480      	push	{r7}
 8007102:	b083      	sub	sp, #12
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
 8007108:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	691b      	ldr	r3, [r3, #16]
 800710e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	431a      	orrs	r2, r3
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	611a      	str	r2, [r3, #16]
}
 800711a:	bf00      	nop
 800711c:	370c      	adds	r7, #12
 800711e:	46bd      	mov	sp, r7
 8007120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007124:	4770      	bx	lr

08007126 <LL_USART_SetHWFlowCtrl>:
{
 8007126:	b480      	push	{r7}
 8007128:	b083      	sub	sp, #12
 800712a:	af00      	add	r7, sp, #0
 800712c:	6078      	str	r0, [r7, #4]
 800712e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	695b      	ldr	r3, [r3, #20]
 8007134:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	431a      	orrs	r2, r3
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	615a      	str	r2, [r3, #20]
}
 8007140:	bf00      	nop
 8007142:	370c      	adds	r7, #12
 8007144:	46bd      	mov	sp, r7
 8007146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714a:	4770      	bx	lr

0800714c <LL_USART_SetBaudRate>:
{
 800714c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007150:	b0c0      	sub	sp, #256	; 0x100
 8007152:	af00      	add	r7, sp, #0
 8007154:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007158:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 800715c:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8007160:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8007164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007168:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800716c:	f040 810c 	bne.w	8007388 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8007170:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007174:	2200      	movs	r2, #0
 8007176:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800717a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800717e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007182:	4622      	mov	r2, r4
 8007184:	462b      	mov	r3, r5
 8007186:	1891      	adds	r1, r2, r2
 8007188:	6639      	str	r1, [r7, #96]	; 0x60
 800718a:	415b      	adcs	r3, r3
 800718c:	667b      	str	r3, [r7, #100]	; 0x64
 800718e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8007192:	4621      	mov	r1, r4
 8007194:	eb12 0801 	adds.w	r8, r2, r1
 8007198:	4629      	mov	r1, r5
 800719a:	eb43 0901 	adc.w	r9, r3, r1
 800719e:	f04f 0200 	mov.w	r2, #0
 80071a2:	f04f 0300 	mov.w	r3, #0
 80071a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80071aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80071ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80071b2:	4690      	mov	r8, r2
 80071b4:	4699      	mov	r9, r3
 80071b6:	4623      	mov	r3, r4
 80071b8:	eb18 0303 	adds.w	r3, r8, r3
 80071bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80071c0:	462b      	mov	r3, r5
 80071c2:	eb49 0303 	adc.w	r3, r9, r3
 80071c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80071ca:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80071ce:	2200      	movs	r2, #0
 80071d0:	469a      	mov	sl, r3
 80071d2:	4693      	mov	fp, r2
 80071d4:	eb1a 030a 	adds.w	r3, sl, sl
 80071d8:	65bb      	str	r3, [r7, #88]	; 0x58
 80071da:	eb4b 030b 	adc.w	r3, fp, fp
 80071de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80071e0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80071e4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80071e8:	f7f9 fcfe 	bl	8000be8 <__aeabi_uldivmod>
 80071ec:	4602      	mov	r2, r0
 80071ee:	460b      	mov	r3, r1
 80071f0:	4b64      	ldr	r3, [pc, #400]	; (8007384 <LL_USART_SetBaudRate+0x238>)
 80071f2:	fba3 2302 	umull	r2, r3, r3, r2
 80071f6:	095b      	lsrs	r3, r3, #5
 80071f8:	b29b      	uxth	r3, r3
 80071fa:	011b      	lsls	r3, r3, #4
 80071fc:	b29c      	uxth	r4, r3
 80071fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007202:	2200      	movs	r2, #0
 8007204:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007208:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800720c:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 8007210:	4642      	mov	r2, r8
 8007212:	464b      	mov	r3, r9
 8007214:	1891      	adds	r1, r2, r2
 8007216:	6539      	str	r1, [r7, #80]	; 0x50
 8007218:	415b      	adcs	r3, r3
 800721a:	657b      	str	r3, [r7, #84]	; 0x54
 800721c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007220:	4641      	mov	r1, r8
 8007222:	1851      	adds	r1, r2, r1
 8007224:	64b9      	str	r1, [r7, #72]	; 0x48
 8007226:	4649      	mov	r1, r9
 8007228:	414b      	adcs	r3, r1
 800722a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800722c:	f04f 0200 	mov.w	r2, #0
 8007230:	f04f 0300 	mov.w	r3, #0
 8007234:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	; 0x48
 8007238:	4659      	mov	r1, fp
 800723a:	00cb      	lsls	r3, r1, #3
 800723c:	4651      	mov	r1, sl
 800723e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007242:	4651      	mov	r1, sl
 8007244:	00ca      	lsls	r2, r1, #3
 8007246:	4610      	mov	r0, r2
 8007248:	4619      	mov	r1, r3
 800724a:	4603      	mov	r3, r0
 800724c:	4642      	mov	r2, r8
 800724e:	189b      	adds	r3, r3, r2
 8007250:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007254:	464b      	mov	r3, r9
 8007256:	460a      	mov	r2, r1
 8007258:	eb42 0303 	adc.w	r3, r2, r3
 800725c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007260:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007264:	2200      	movs	r2, #0
 8007266:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800726a:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 800726e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8007272:	460b      	mov	r3, r1
 8007274:	18db      	adds	r3, r3, r3
 8007276:	643b      	str	r3, [r7, #64]	; 0x40
 8007278:	4613      	mov	r3, r2
 800727a:	eb42 0303 	adc.w	r3, r2, r3
 800727e:	647b      	str	r3, [r7, #68]	; 0x44
 8007280:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007284:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8007288:	f7f9 fcae 	bl	8000be8 <__aeabi_uldivmod>
 800728c:	4602      	mov	r2, r0
 800728e:	460b      	mov	r3, r1
 8007290:	4611      	mov	r1, r2
 8007292:	4b3c      	ldr	r3, [pc, #240]	; (8007384 <LL_USART_SetBaudRate+0x238>)
 8007294:	fba3 2301 	umull	r2, r3, r3, r1
 8007298:	095b      	lsrs	r3, r3, #5
 800729a:	2264      	movs	r2, #100	; 0x64
 800729c:	fb02 f303 	mul.w	r3, r2, r3
 80072a0:	1acb      	subs	r3, r1, r3
 80072a2:	00db      	lsls	r3, r3, #3
 80072a4:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80072a8:	4b36      	ldr	r3, [pc, #216]	; (8007384 <LL_USART_SetBaudRate+0x238>)
 80072aa:	fba3 2302 	umull	r2, r3, r3, r2
 80072ae:	095b      	lsrs	r3, r3, #5
 80072b0:	b29b      	uxth	r3, r3
 80072b2:	005b      	lsls	r3, r3, #1
 80072b4:	b29b      	uxth	r3, r3
 80072b6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80072ba:	b29b      	uxth	r3, r3
 80072bc:	4423      	add	r3, r4
 80072be:	b29c      	uxth	r4, r3
 80072c0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80072c4:	2200      	movs	r2, #0
 80072c6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80072ca:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80072ce:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 80072d2:	4642      	mov	r2, r8
 80072d4:	464b      	mov	r3, r9
 80072d6:	1891      	adds	r1, r2, r2
 80072d8:	63b9      	str	r1, [r7, #56]	; 0x38
 80072da:	415b      	adcs	r3, r3
 80072dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80072de:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80072e2:	4641      	mov	r1, r8
 80072e4:	1851      	adds	r1, r2, r1
 80072e6:	6339      	str	r1, [r7, #48]	; 0x30
 80072e8:	4649      	mov	r1, r9
 80072ea:	414b      	adcs	r3, r1
 80072ec:	637b      	str	r3, [r7, #52]	; 0x34
 80072ee:	f04f 0200 	mov.w	r2, #0
 80072f2:	f04f 0300 	mov.w	r3, #0
 80072f6:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80072fa:	4659      	mov	r1, fp
 80072fc:	00cb      	lsls	r3, r1, #3
 80072fe:	4651      	mov	r1, sl
 8007300:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007304:	4651      	mov	r1, sl
 8007306:	00ca      	lsls	r2, r1, #3
 8007308:	4610      	mov	r0, r2
 800730a:	4619      	mov	r1, r3
 800730c:	4603      	mov	r3, r0
 800730e:	4642      	mov	r2, r8
 8007310:	189b      	adds	r3, r3, r2
 8007312:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007316:	464b      	mov	r3, r9
 8007318:	460a      	mov	r2, r1
 800731a:	eb42 0303 	adc.w	r3, r2, r3
 800731e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007322:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007326:	2200      	movs	r2, #0
 8007328:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800732c:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8007330:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8007334:	460b      	mov	r3, r1
 8007336:	18db      	adds	r3, r3, r3
 8007338:	62bb      	str	r3, [r7, #40]	; 0x28
 800733a:	4613      	mov	r3, r2
 800733c:	eb42 0303 	adc.w	r3, r2, r3
 8007340:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007342:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007346:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800734a:	f7f9 fc4d 	bl	8000be8 <__aeabi_uldivmod>
 800734e:	4602      	mov	r2, r0
 8007350:	460b      	mov	r3, r1
 8007352:	4b0c      	ldr	r3, [pc, #48]	; (8007384 <LL_USART_SetBaudRate+0x238>)
 8007354:	fba3 1302 	umull	r1, r3, r3, r2
 8007358:	095b      	lsrs	r3, r3, #5
 800735a:	2164      	movs	r1, #100	; 0x64
 800735c:	fb01 f303 	mul.w	r3, r1, r3
 8007360:	1ad3      	subs	r3, r2, r3
 8007362:	00db      	lsls	r3, r3, #3
 8007364:	3332      	adds	r3, #50	; 0x32
 8007366:	4a07      	ldr	r2, [pc, #28]	; (8007384 <LL_USART_SetBaudRate+0x238>)
 8007368:	fba2 2303 	umull	r2, r3, r2, r3
 800736c:	095b      	lsrs	r3, r3, #5
 800736e:	b29b      	uxth	r3, r3
 8007370:	f003 0307 	and.w	r3, r3, #7
 8007374:	b29b      	uxth	r3, r3
 8007376:	4423      	add	r3, r4
 8007378:	b29b      	uxth	r3, r3
 800737a:	461a      	mov	r2, r3
 800737c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007380:	609a      	str	r2, [r3, #8]
}
 8007382:	e107      	b.n	8007594 <LL_USART_SetBaudRate+0x448>
 8007384:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8007388:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800738c:	2200      	movs	r2, #0
 800738e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007392:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007396:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 800739a:	4642      	mov	r2, r8
 800739c:	464b      	mov	r3, r9
 800739e:	1891      	adds	r1, r2, r2
 80073a0:	6239      	str	r1, [r7, #32]
 80073a2:	415b      	adcs	r3, r3
 80073a4:	627b      	str	r3, [r7, #36]	; 0x24
 80073a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80073aa:	4641      	mov	r1, r8
 80073ac:	1854      	adds	r4, r2, r1
 80073ae:	4649      	mov	r1, r9
 80073b0:	eb43 0501 	adc.w	r5, r3, r1
 80073b4:	f04f 0200 	mov.w	r2, #0
 80073b8:	f04f 0300 	mov.w	r3, #0
 80073bc:	00eb      	lsls	r3, r5, #3
 80073be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80073c2:	00e2      	lsls	r2, r4, #3
 80073c4:	4614      	mov	r4, r2
 80073c6:	461d      	mov	r5, r3
 80073c8:	4643      	mov	r3, r8
 80073ca:	18e3      	adds	r3, r4, r3
 80073cc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80073d0:	464b      	mov	r3, r9
 80073d2:	eb45 0303 	adc.w	r3, r5, r3
 80073d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80073da:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80073de:	2200      	movs	r2, #0
 80073e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80073e4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80073e8:	f04f 0200 	mov.w	r2, #0
 80073ec:	f04f 0300 	mov.w	r3, #0
 80073f0:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 80073f4:	4629      	mov	r1, r5
 80073f6:	008b      	lsls	r3, r1, #2
 80073f8:	4621      	mov	r1, r4
 80073fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80073fe:	4621      	mov	r1, r4
 8007400:	008a      	lsls	r2, r1, #2
 8007402:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8007406:	f7f9 fbef 	bl	8000be8 <__aeabi_uldivmod>
 800740a:	4602      	mov	r2, r0
 800740c:	460b      	mov	r3, r1
 800740e:	4b64      	ldr	r3, [pc, #400]	; (80075a0 <LL_USART_SetBaudRate+0x454>)
 8007410:	fba3 2302 	umull	r2, r3, r3, r2
 8007414:	095b      	lsrs	r3, r3, #5
 8007416:	b29b      	uxth	r3, r3
 8007418:	011b      	lsls	r3, r3, #4
 800741a:	b29c      	uxth	r4, r3
 800741c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007420:	2200      	movs	r2, #0
 8007422:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007426:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800742a:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 800742e:	4642      	mov	r2, r8
 8007430:	464b      	mov	r3, r9
 8007432:	1891      	adds	r1, r2, r2
 8007434:	61b9      	str	r1, [r7, #24]
 8007436:	415b      	adcs	r3, r3
 8007438:	61fb      	str	r3, [r7, #28]
 800743a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800743e:	4641      	mov	r1, r8
 8007440:	1851      	adds	r1, r2, r1
 8007442:	6139      	str	r1, [r7, #16]
 8007444:	4649      	mov	r1, r9
 8007446:	414b      	adcs	r3, r1
 8007448:	617b      	str	r3, [r7, #20]
 800744a:	f04f 0200 	mov.w	r2, #0
 800744e:	f04f 0300 	mov.w	r3, #0
 8007452:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007456:	4659      	mov	r1, fp
 8007458:	00cb      	lsls	r3, r1, #3
 800745a:	4651      	mov	r1, sl
 800745c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007460:	4651      	mov	r1, sl
 8007462:	00ca      	lsls	r2, r1, #3
 8007464:	4610      	mov	r0, r2
 8007466:	4619      	mov	r1, r3
 8007468:	4603      	mov	r3, r0
 800746a:	4642      	mov	r2, r8
 800746c:	189b      	adds	r3, r3, r2
 800746e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007472:	464b      	mov	r3, r9
 8007474:	460a      	mov	r2, r1
 8007476:	eb42 0303 	adc.w	r3, r2, r3
 800747a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800747e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007482:	2200      	movs	r2, #0
 8007484:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007488:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800748c:	f04f 0200 	mov.w	r2, #0
 8007490:	f04f 0300 	mov.w	r3, #0
 8007494:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 8007498:	4649      	mov	r1, r9
 800749a:	008b      	lsls	r3, r1, #2
 800749c:	4641      	mov	r1, r8
 800749e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80074a2:	4641      	mov	r1, r8
 80074a4:	008a      	lsls	r2, r1, #2
 80074a6:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 80074aa:	f7f9 fb9d 	bl	8000be8 <__aeabi_uldivmod>
 80074ae:	4602      	mov	r2, r0
 80074b0:	460b      	mov	r3, r1
 80074b2:	4b3b      	ldr	r3, [pc, #236]	; (80075a0 <LL_USART_SetBaudRate+0x454>)
 80074b4:	fba3 1302 	umull	r1, r3, r3, r2
 80074b8:	095b      	lsrs	r3, r3, #5
 80074ba:	2164      	movs	r1, #100	; 0x64
 80074bc:	fb01 f303 	mul.w	r3, r1, r3
 80074c0:	1ad3      	subs	r3, r2, r3
 80074c2:	011b      	lsls	r3, r3, #4
 80074c4:	3332      	adds	r3, #50	; 0x32
 80074c6:	4a36      	ldr	r2, [pc, #216]	; (80075a0 <LL_USART_SetBaudRate+0x454>)
 80074c8:	fba2 2303 	umull	r2, r3, r2, r3
 80074cc:	095b      	lsrs	r3, r3, #5
 80074ce:	b29b      	uxth	r3, r3
 80074d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80074d4:	b29b      	uxth	r3, r3
 80074d6:	4423      	add	r3, r4
 80074d8:	b29c      	uxth	r4, r3
 80074da:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80074de:	2200      	movs	r2, #0
 80074e0:	67bb      	str	r3, [r7, #120]	; 0x78
 80074e2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80074e4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80074e8:	4642      	mov	r2, r8
 80074ea:	464b      	mov	r3, r9
 80074ec:	1891      	adds	r1, r2, r2
 80074ee:	60b9      	str	r1, [r7, #8]
 80074f0:	415b      	adcs	r3, r3
 80074f2:	60fb      	str	r3, [r7, #12]
 80074f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80074f8:	4641      	mov	r1, r8
 80074fa:	1851      	adds	r1, r2, r1
 80074fc:	6039      	str	r1, [r7, #0]
 80074fe:	4649      	mov	r1, r9
 8007500:	414b      	adcs	r3, r1
 8007502:	607b      	str	r3, [r7, #4]
 8007504:	f04f 0200 	mov.w	r2, #0
 8007508:	f04f 0300 	mov.w	r3, #0
 800750c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007510:	4659      	mov	r1, fp
 8007512:	00cb      	lsls	r3, r1, #3
 8007514:	4651      	mov	r1, sl
 8007516:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800751a:	4651      	mov	r1, sl
 800751c:	00ca      	lsls	r2, r1, #3
 800751e:	4610      	mov	r0, r2
 8007520:	4619      	mov	r1, r3
 8007522:	4603      	mov	r3, r0
 8007524:	4642      	mov	r2, r8
 8007526:	189b      	adds	r3, r3, r2
 8007528:	673b      	str	r3, [r7, #112]	; 0x70
 800752a:	464b      	mov	r3, r9
 800752c:	460a      	mov	r2, r1
 800752e:	eb42 0303 	adc.w	r3, r2, r3
 8007532:	677b      	str	r3, [r7, #116]	; 0x74
 8007534:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007538:	2200      	movs	r2, #0
 800753a:	66bb      	str	r3, [r7, #104]	; 0x68
 800753c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800753e:	f04f 0200 	mov.w	r2, #0
 8007542:	f04f 0300 	mov.w	r3, #0
 8007546:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 800754a:	4649      	mov	r1, r9
 800754c:	008b      	lsls	r3, r1, #2
 800754e:	4641      	mov	r1, r8
 8007550:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007554:	4641      	mov	r1, r8
 8007556:	008a      	lsls	r2, r1, #2
 8007558:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800755c:	f7f9 fb44 	bl	8000be8 <__aeabi_uldivmod>
 8007560:	4602      	mov	r2, r0
 8007562:	460b      	mov	r3, r1
 8007564:	4b0e      	ldr	r3, [pc, #56]	; (80075a0 <LL_USART_SetBaudRate+0x454>)
 8007566:	fba3 1302 	umull	r1, r3, r3, r2
 800756a:	095b      	lsrs	r3, r3, #5
 800756c:	2164      	movs	r1, #100	; 0x64
 800756e:	fb01 f303 	mul.w	r3, r1, r3
 8007572:	1ad3      	subs	r3, r2, r3
 8007574:	011b      	lsls	r3, r3, #4
 8007576:	3332      	adds	r3, #50	; 0x32
 8007578:	4a09      	ldr	r2, [pc, #36]	; (80075a0 <LL_USART_SetBaudRate+0x454>)
 800757a:	fba2 2303 	umull	r2, r3, r2, r3
 800757e:	095b      	lsrs	r3, r3, #5
 8007580:	b29b      	uxth	r3, r3
 8007582:	f003 030f 	and.w	r3, r3, #15
 8007586:	b29b      	uxth	r3, r3
 8007588:	4423      	add	r3, r4
 800758a:	b29b      	uxth	r3, r3
 800758c:	461a      	mov	r2, r3
 800758e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007592:	609a      	str	r2, [r3, #8]
}
 8007594:	bf00      	nop
 8007596:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800759a:	46bd      	mov	sp, r7
 800759c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80075a0:	51eb851f 	.word	0x51eb851f

080075a4 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b088      	sub	sp, #32
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
 80075ac:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80075ae:	2301      	movs	r3, #1
 80075b0:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80075b2:	2300      	movs	r3, #0
 80075b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f7ff fd8e 	bl	80070d8 <LL_USART_IsEnabled>
 80075bc:	4603      	mov	r3, r0
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d15e      	bne.n	8007680 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	68db      	ldr	r3, [r3, #12]
 80075c6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80075ca:	f023 030c 	bic.w	r3, r3, #12
 80075ce:	683a      	ldr	r2, [r7, #0]
 80075d0:	6851      	ldr	r1, [r2, #4]
 80075d2:	683a      	ldr	r2, [r7, #0]
 80075d4:	68d2      	ldr	r2, [r2, #12]
 80075d6:	4311      	orrs	r1, r2
 80075d8:	683a      	ldr	r2, [r7, #0]
 80075da:	6912      	ldr	r2, [r2, #16]
 80075dc:	4311      	orrs	r1, r2
 80075de:	683a      	ldr	r2, [r7, #0]
 80075e0:	6992      	ldr	r2, [r2, #24]
 80075e2:	430a      	orrs	r2, r1
 80075e4:	431a      	orrs	r2, r3
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	689b      	ldr	r3, [r3, #8]
 80075ee:	4619      	mov	r1, r3
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f7ff fd85 	bl	8007100 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	695b      	ldr	r3, [r3, #20]
 80075fa:	4619      	mov	r1, r3
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f7ff fd92 	bl	8007126 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8007602:	f107 0308 	add.w	r3, r7, #8
 8007606:	4618      	mov	r0, r3
 8007608:	f7ff f9aa 	bl	8006960 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	4a1f      	ldr	r2, [pc, #124]	; (800768c <LL_USART_Init+0xe8>)
 8007610:	4293      	cmp	r3, r2
 8007612:	d102      	bne.n	800761a <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8007614:	697b      	ldr	r3, [r7, #20]
 8007616:	61bb      	str	r3, [r7, #24]
 8007618:	e021      	b.n	800765e <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	4a1c      	ldr	r2, [pc, #112]	; (8007690 <LL_USART_Init+0xec>)
 800761e:	4293      	cmp	r3, r2
 8007620:	d102      	bne.n	8007628 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8007622:	693b      	ldr	r3, [r7, #16]
 8007624:	61bb      	str	r3, [r7, #24]
 8007626:	e01a      	b.n	800765e <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	4a1a      	ldr	r2, [pc, #104]	; (8007694 <LL_USART_Init+0xf0>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d102      	bne.n	8007636 <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8007630:	693b      	ldr	r3, [r7, #16]
 8007632:	61bb      	str	r3, [r7, #24]
 8007634:	e013      	b.n	800765e <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	4a17      	ldr	r2, [pc, #92]	; (8007698 <LL_USART_Init+0xf4>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d102      	bne.n	8007644 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 800763e:	697b      	ldr	r3, [r7, #20]
 8007640:	61bb      	str	r3, [r7, #24]
 8007642:	e00c      	b.n	800765e <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	4a15      	ldr	r2, [pc, #84]	; (800769c <LL_USART_Init+0xf8>)
 8007648:	4293      	cmp	r3, r2
 800764a:	d102      	bne.n	8007652 <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800764c:	693b      	ldr	r3, [r7, #16]
 800764e:	61bb      	str	r3, [r7, #24]
 8007650:	e005      	b.n	800765e <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	4a12      	ldr	r2, [pc, #72]	; (80076a0 <LL_USART_Init+0xfc>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d101      	bne.n	800765e <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800765a:	693b      	ldr	r3, [r7, #16]
 800765c:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800765e:	69bb      	ldr	r3, [r7, #24]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d00d      	beq.n	8007680 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d009      	beq.n	8007680 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 800766c:	2300      	movs	r3, #0
 800766e:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	699a      	ldr	r2, [r3, #24]
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	69b9      	ldr	r1, [r7, #24]
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f7ff fd66 	bl	800714c <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8007680:	7ffb      	ldrb	r3, [r7, #31]
}
 8007682:	4618      	mov	r0, r3
 8007684:	3720      	adds	r7, #32
 8007686:	46bd      	mov	sp, r7
 8007688:	bd80      	pop	{r7, pc}
 800768a:	bf00      	nop
 800768c:	40011000 	.word	0x40011000
 8007690:	40004400 	.word	0x40004400
 8007694:	40004800 	.word	0x40004800
 8007698:	40011400 	.word	0x40011400
 800769c:	40004c00 	.word	0x40004c00
 80076a0:	40005000 	.word	0x40005000

080076a4 <__errno>:
 80076a4:	4b01      	ldr	r3, [pc, #4]	; (80076ac <__errno+0x8>)
 80076a6:	6818      	ldr	r0, [r3, #0]
 80076a8:	4770      	bx	lr
 80076aa:	bf00      	nop
 80076ac:	2000000c 	.word	0x2000000c

080076b0 <__libc_init_array>:
 80076b0:	b570      	push	{r4, r5, r6, lr}
 80076b2:	4d0d      	ldr	r5, [pc, #52]	; (80076e8 <__libc_init_array+0x38>)
 80076b4:	4c0d      	ldr	r4, [pc, #52]	; (80076ec <__libc_init_array+0x3c>)
 80076b6:	1b64      	subs	r4, r4, r5
 80076b8:	10a4      	asrs	r4, r4, #2
 80076ba:	2600      	movs	r6, #0
 80076bc:	42a6      	cmp	r6, r4
 80076be:	d109      	bne.n	80076d4 <__libc_init_array+0x24>
 80076c0:	4d0b      	ldr	r5, [pc, #44]	; (80076f0 <__libc_init_array+0x40>)
 80076c2:	4c0c      	ldr	r4, [pc, #48]	; (80076f4 <__libc_init_array+0x44>)
 80076c4:	f002 fd50 	bl	800a168 <_init>
 80076c8:	1b64      	subs	r4, r4, r5
 80076ca:	10a4      	asrs	r4, r4, #2
 80076cc:	2600      	movs	r6, #0
 80076ce:	42a6      	cmp	r6, r4
 80076d0:	d105      	bne.n	80076de <__libc_init_array+0x2e>
 80076d2:	bd70      	pop	{r4, r5, r6, pc}
 80076d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80076d8:	4798      	blx	r3
 80076da:	3601      	adds	r6, #1
 80076dc:	e7ee      	b.n	80076bc <__libc_init_array+0xc>
 80076de:	f855 3b04 	ldr.w	r3, [r5], #4
 80076e2:	4798      	blx	r3
 80076e4:	3601      	adds	r6, #1
 80076e6:	e7f2      	b.n	80076ce <__libc_init_array+0x1e>
 80076e8:	0800a5f4 	.word	0x0800a5f4
 80076ec:	0800a5f4 	.word	0x0800a5f4
 80076f0:	0800a5f4 	.word	0x0800a5f4
 80076f4:	0800a5f8 	.word	0x0800a5f8

080076f8 <memset>:
 80076f8:	4402      	add	r2, r0
 80076fa:	4603      	mov	r3, r0
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d100      	bne.n	8007702 <memset+0xa>
 8007700:	4770      	bx	lr
 8007702:	f803 1b01 	strb.w	r1, [r3], #1
 8007706:	e7f9      	b.n	80076fc <memset+0x4>

08007708 <__cvt>:
 8007708:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800770c:	ec55 4b10 	vmov	r4, r5, d0
 8007710:	2d00      	cmp	r5, #0
 8007712:	460e      	mov	r6, r1
 8007714:	4619      	mov	r1, r3
 8007716:	462b      	mov	r3, r5
 8007718:	bfbb      	ittet	lt
 800771a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800771e:	461d      	movlt	r5, r3
 8007720:	2300      	movge	r3, #0
 8007722:	232d      	movlt	r3, #45	; 0x2d
 8007724:	700b      	strb	r3, [r1, #0]
 8007726:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007728:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800772c:	4691      	mov	r9, r2
 800772e:	f023 0820 	bic.w	r8, r3, #32
 8007732:	bfbc      	itt	lt
 8007734:	4622      	movlt	r2, r4
 8007736:	4614      	movlt	r4, r2
 8007738:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800773c:	d005      	beq.n	800774a <__cvt+0x42>
 800773e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007742:	d100      	bne.n	8007746 <__cvt+0x3e>
 8007744:	3601      	adds	r6, #1
 8007746:	2102      	movs	r1, #2
 8007748:	e000      	b.n	800774c <__cvt+0x44>
 800774a:	2103      	movs	r1, #3
 800774c:	ab03      	add	r3, sp, #12
 800774e:	9301      	str	r3, [sp, #4]
 8007750:	ab02      	add	r3, sp, #8
 8007752:	9300      	str	r3, [sp, #0]
 8007754:	ec45 4b10 	vmov	d0, r4, r5
 8007758:	4653      	mov	r3, sl
 800775a:	4632      	mov	r2, r6
 800775c:	f000 fce4 	bl	8008128 <_dtoa_r>
 8007760:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007764:	4607      	mov	r7, r0
 8007766:	d102      	bne.n	800776e <__cvt+0x66>
 8007768:	f019 0f01 	tst.w	r9, #1
 800776c:	d022      	beq.n	80077b4 <__cvt+0xac>
 800776e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007772:	eb07 0906 	add.w	r9, r7, r6
 8007776:	d110      	bne.n	800779a <__cvt+0x92>
 8007778:	783b      	ldrb	r3, [r7, #0]
 800777a:	2b30      	cmp	r3, #48	; 0x30
 800777c:	d10a      	bne.n	8007794 <__cvt+0x8c>
 800777e:	2200      	movs	r2, #0
 8007780:	2300      	movs	r3, #0
 8007782:	4620      	mov	r0, r4
 8007784:	4629      	mov	r1, r5
 8007786:	f7f9 f99f 	bl	8000ac8 <__aeabi_dcmpeq>
 800778a:	b918      	cbnz	r0, 8007794 <__cvt+0x8c>
 800778c:	f1c6 0601 	rsb	r6, r6, #1
 8007790:	f8ca 6000 	str.w	r6, [sl]
 8007794:	f8da 3000 	ldr.w	r3, [sl]
 8007798:	4499      	add	r9, r3
 800779a:	2200      	movs	r2, #0
 800779c:	2300      	movs	r3, #0
 800779e:	4620      	mov	r0, r4
 80077a0:	4629      	mov	r1, r5
 80077a2:	f7f9 f991 	bl	8000ac8 <__aeabi_dcmpeq>
 80077a6:	b108      	cbz	r0, 80077ac <__cvt+0xa4>
 80077a8:	f8cd 900c 	str.w	r9, [sp, #12]
 80077ac:	2230      	movs	r2, #48	; 0x30
 80077ae:	9b03      	ldr	r3, [sp, #12]
 80077b0:	454b      	cmp	r3, r9
 80077b2:	d307      	bcc.n	80077c4 <__cvt+0xbc>
 80077b4:	9b03      	ldr	r3, [sp, #12]
 80077b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80077b8:	1bdb      	subs	r3, r3, r7
 80077ba:	4638      	mov	r0, r7
 80077bc:	6013      	str	r3, [r2, #0]
 80077be:	b004      	add	sp, #16
 80077c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077c4:	1c59      	adds	r1, r3, #1
 80077c6:	9103      	str	r1, [sp, #12]
 80077c8:	701a      	strb	r2, [r3, #0]
 80077ca:	e7f0      	b.n	80077ae <__cvt+0xa6>

080077cc <__exponent>:
 80077cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80077ce:	4603      	mov	r3, r0
 80077d0:	2900      	cmp	r1, #0
 80077d2:	bfb8      	it	lt
 80077d4:	4249      	neglt	r1, r1
 80077d6:	f803 2b02 	strb.w	r2, [r3], #2
 80077da:	bfb4      	ite	lt
 80077dc:	222d      	movlt	r2, #45	; 0x2d
 80077de:	222b      	movge	r2, #43	; 0x2b
 80077e0:	2909      	cmp	r1, #9
 80077e2:	7042      	strb	r2, [r0, #1]
 80077e4:	dd2a      	ble.n	800783c <__exponent+0x70>
 80077e6:	f10d 0407 	add.w	r4, sp, #7
 80077ea:	46a4      	mov	ip, r4
 80077ec:	270a      	movs	r7, #10
 80077ee:	46a6      	mov	lr, r4
 80077f0:	460a      	mov	r2, r1
 80077f2:	fb91 f6f7 	sdiv	r6, r1, r7
 80077f6:	fb07 1516 	mls	r5, r7, r6, r1
 80077fa:	3530      	adds	r5, #48	; 0x30
 80077fc:	2a63      	cmp	r2, #99	; 0x63
 80077fe:	f104 34ff 	add.w	r4, r4, #4294967295
 8007802:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007806:	4631      	mov	r1, r6
 8007808:	dcf1      	bgt.n	80077ee <__exponent+0x22>
 800780a:	3130      	adds	r1, #48	; 0x30
 800780c:	f1ae 0502 	sub.w	r5, lr, #2
 8007810:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007814:	1c44      	adds	r4, r0, #1
 8007816:	4629      	mov	r1, r5
 8007818:	4561      	cmp	r1, ip
 800781a:	d30a      	bcc.n	8007832 <__exponent+0x66>
 800781c:	f10d 0209 	add.w	r2, sp, #9
 8007820:	eba2 020e 	sub.w	r2, r2, lr
 8007824:	4565      	cmp	r5, ip
 8007826:	bf88      	it	hi
 8007828:	2200      	movhi	r2, #0
 800782a:	4413      	add	r3, r2
 800782c:	1a18      	subs	r0, r3, r0
 800782e:	b003      	add	sp, #12
 8007830:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007832:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007836:	f804 2f01 	strb.w	r2, [r4, #1]!
 800783a:	e7ed      	b.n	8007818 <__exponent+0x4c>
 800783c:	2330      	movs	r3, #48	; 0x30
 800783e:	3130      	adds	r1, #48	; 0x30
 8007840:	7083      	strb	r3, [r0, #2]
 8007842:	70c1      	strb	r1, [r0, #3]
 8007844:	1d03      	adds	r3, r0, #4
 8007846:	e7f1      	b.n	800782c <__exponent+0x60>

08007848 <_printf_float>:
 8007848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800784c:	ed2d 8b02 	vpush	{d8}
 8007850:	b08d      	sub	sp, #52	; 0x34
 8007852:	460c      	mov	r4, r1
 8007854:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007858:	4616      	mov	r6, r2
 800785a:	461f      	mov	r7, r3
 800785c:	4605      	mov	r5, r0
 800785e:	f001 fb47 	bl	8008ef0 <_localeconv_r>
 8007862:	f8d0 a000 	ldr.w	sl, [r0]
 8007866:	4650      	mov	r0, sl
 8007868:	f7f8 fcb2 	bl	80001d0 <strlen>
 800786c:	2300      	movs	r3, #0
 800786e:	930a      	str	r3, [sp, #40]	; 0x28
 8007870:	6823      	ldr	r3, [r4, #0]
 8007872:	9305      	str	r3, [sp, #20]
 8007874:	f8d8 3000 	ldr.w	r3, [r8]
 8007878:	f894 b018 	ldrb.w	fp, [r4, #24]
 800787c:	3307      	adds	r3, #7
 800787e:	f023 0307 	bic.w	r3, r3, #7
 8007882:	f103 0208 	add.w	r2, r3, #8
 8007886:	f8c8 2000 	str.w	r2, [r8]
 800788a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800788e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007892:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007896:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800789a:	9307      	str	r3, [sp, #28]
 800789c:	f8cd 8018 	str.w	r8, [sp, #24]
 80078a0:	ee08 0a10 	vmov	s16, r0
 80078a4:	4b9f      	ldr	r3, [pc, #636]	; (8007b24 <_printf_float+0x2dc>)
 80078a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80078aa:	f04f 32ff 	mov.w	r2, #4294967295
 80078ae:	f7f9 f93d 	bl	8000b2c <__aeabi_dcmpun>
 80078b2:	bb88      	cbnz	r0, 8007918 <_printf_float+0xd0>
 80078b4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80078b8:	4b9a      	ldr	r3, [pc, #616]	; (8007b24 <_printf_float+0x2dc>)
 80078ba:	f04f 32ff 	mov.w	r2, #4294967295
 80078be:	f7f9 f917 	bl	8000af0 <__aeabi_dcmple>
 80078c2:	bb48      	cbnz	r0, 8007918 <_printf_float+0xd0>
 80078c4:	2200      	movs	r2, #0
 80078c6:	2300      	movs	r3, #0
 80078c8:	4640      	mov	r0, r8
 80078ca:	4649      	mov	r1, r9
 80078cc:	f7f9 f906 	bl	8000adc <__aeabi_dcmplt>
 80078d0:	b110      	cbz	r0, 80078d8 <_printf_float+0x90>
 80078d2:	232d      	movs	r3, #45	; 0x2d
 80078d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80078d8:	4b93      	ldr	r3, [pc, #588]	; (8007b28 <_printf_float+0x2e0>)
 80078da:	4894      	ldr	r0, [pc, #592]	; (8007b2c <_printf_float+0x2e4>)
 80078dc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80078e0:	bf94      	ite	ls
 80078e2:	4698      	movls	r8, r3
 80078e4:	4680      	movhi	r8, r0
 80078e6:	2303      	movs	r3, #3
 80078e8:	6123      	str	r3, [r4, #16]
 80078ea:	9b05      	ldr	r3, [sp, #20]
 80078ec:	f023 0204 	bic.w	r2, r3, #4
 80078f0:	6022      	str	r2, [r4, #0]
 80078f2:	f04f 0900 	mov.w	r9, #0
 80078f6:	9700      	str	r7, [sp, #0]
 80078f8:	4633      	mov	r3, r6
 80078fa:	aa0b      	add	r2, sp, #44	; 0x2c
 80078fc:	4621      	mov	r1, r4
 80078fe:	4628      	mov	r0, r5
 8007900:	f000 f9d8 	bl	8007cb4 <_printf_common>
 8007904:	3001      	adds	r0, #1
 8007906:	f040 8090 	bne.w	8007a2a <_printf_float+0x1e2>
 800790a:	f04f 30ff 	mov.w	r0, #4294967295
 800790e:	b00d      	add	sp, #52	; 0x34
 8007910:	ecbd 8b02 	vpop	{d8}
 8007914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007918:	4642      	mov	r2, r8
 800791a:	464b      	mov	r3, r9
 800791c:	4640      	mov	r0, r8
 800791e:	4649      	mov	r1, r9
 8007920:	f7f9 f904 	bl	8000b2c <__aeabi_dcmpun>
 8007924:	b140      	cbz	r0, 8007938 <_printf_float+0xf0>
 8007926:	464b      	mov	r3, r9
 8007928:	2b00      	cmp	r3, #0
 800792a:	bfbc      	itt	lt
 800792c:	232d      	movlt	r3, #45	; 0x2d
 800792e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007932:	487f      	ldr	r0, [pc, #508]	; (8007b30 <_printf_float+0x2e8>)
 8007934:	4b7f      	ldr	r3, [pc, #508]	; (8007b34 <_printf_float+0x2ec>)
 8007936:	e7d1      	b.n	80078dc <_printf_float+0x94>
 8007938:	6863      	ldr	r3, [r4, #4]
 800793a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800793e:	9206      	str	r2, [sp, #24]
 8007940:	1c5a      	adds	r2, r3, #1
 8007942:	d13f      	bne.n	80079c4 <_printf_float+0x17c>
 8007944:	2306      	movs	r3, #6
 8007946:	6063      	str	r3, [r4, #4]
 8007948:	9b05      	ldr	r3, [sp, #20]
 800794a:	6861      	ldr	r1, [r4, #4]
 800794c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007950:	2300      	movs	r3, #0
 8007952:	9303      	str	r3, [sp, #12]
 8007954:	ab0a      	add	r3, sp, #40	; 0x28
 8007956:	e9cd b301 	strd	fp, r3, [sp, #4]
 800795a:	ab09      	add	r3, sp, #36	; 0x24
 800795c:	ec49 8b10 	vmov	d0, r8, r9
 8007960:	9300      	str	r3, [sp, #0]
 8007962:	6022      	str	r2, [r4, #0]
 8007964:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007968:	4628      	mov	r0, r5
 800796a:	f7ff fecd 	bl	8007708 <__cvt>
 800796e:	9b06      	ldr	r3, [sp, #24]
 8007970:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007972:	2b47      	cmp	r3, #71	; 0x47
 8007974:	4680      	mov	r8, r0
 8007976:	d108      	bne.n	800798a <_printf_float+0x142>
 8007978:	1cc8      	adds	r0, r1, #3
 800797a:	db02      	blt.n	8007982 <_printf_float+0x13a>
 800797c:	6863      	ldr	r3, [r4, #4]
 800797e:	4299      	cmp	r1, r3
 8007980:	dd41      	ble.n	8007a06 <_printf_float+0x1be>
 8007982:	f1ab 0b02 	sub.w	fp, fp, #2
 8007986:	fa5f fb8b 	uxtb.w	fp, fp
 800798a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800798e:	d820      	bhi.n	80079d2 <_printf_float+0x18a>
 8007990:	3901      	subs	r1, #1
 8007992:	465a      	mov	r2, fp
 8007994:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007998:	9109      	str	r1, [sp, #36]	; 0x24
 800799a:	f7ff ff17 	bl	80077cc <__exponent>
 800799e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80079a0:	1813      	adds	r3, r2, r0
 80079a2:	2a01      	cmp	r2, #1
 80079a4:	4681      	mov	r9, r0
 80079a6:	6123      	str	r3, [r4, #16]
 80079a8:	dc02      	bgt.n	80079b0 <_printf_float+0x168>
 80079aa:	6822      	ldr	r2, [r4, #0]
 80079ac:	07d2      	lsls	r2, r2, #31
 80079ae:	d501      	bpl.n	80079b4 <_printf_float+0x16c>
 80079b0:	3301      	adds	r3, #1
 80079b2:	6123      	str	r3, [r4, #16]
 80079b4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d09c      	beq.n	80078f6 <_printf_float+0xae>
 80079bc:	232d      	movs	r3, #45	; 0x2d
 80079be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80079c2:	e798      	b.n	80078f6 <_printf_float+0xae>
 80079c4:	9a06      	ldr	r2, [sp, #24]
 80079c6:	2a47      	cmp	r2, #71	; 0x47
 80079c8:	d1be      	bne.n	8007948 <_printf_float+0x100>
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d1bc      	bne.n	8007948 <_printf_float+0x100>
 80079ce:	2301      	movs	r3, #1
 80079d0:	e7b9      	b.n	8007946 <_printf_float+0xfe>
 80079d2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80079d6:	d118      	bne.n	8007a0a <_printf_float+0x1c2>
 80079d8:	2900      	cmp	r1, #0
 80079da:	6863      	ldr	r3, [r4, #4]
 80079dc:	dd0b      	ble.n	80079f6 <_printf_float+0x1ae>
 80079de:	6121      	str	r1, [r4, #16]
 80079e0:	b913      	cbnz	r3, 80079e8 <_printf_float+0x1a0>
 80079e2:	6822      	ldr	r2, [r4, #0]
 80079e4:	07d0      	lsls	r0, r2, #31
 80079e6:	d502      	bpl.n	80079ee <_printf_float+0x1a6>
 80079e8:	3301      	adds	r3, #1
 80079ea:	440b      	add	r3, r1
 80079ec:	6123      	str	r3, [r4, #16]
 80079ee:	65a1      	str	r1, [r4, #88]	; 0x58
 80079f0:	f04f 0900 	mov.w	r9, #0
 80079f4:	e7de      	b.n	80079b4 <_printf_float+0x16c>
 80079f6:	b913      	cbnz	r3, 80079fe <_printf_float+0x1b6>
 80079f8:	6822      	ldr	r2, [r4, #0]
 80079fa:	07d2      	lsls	r2, r2, #31
 80079fc:	d501      	bpl.n	8007a02 <_printf_float+0x1ba>
 80079fe:	3302      	adds	r3, #2
 8007a00:	e7f4      	b.n	80079ec <_printf_float+0x1a4>
 8007a02:	2301      	movs	r3, #1
 8007a04:	e7f2      	b.n	80079ec <_printf_float+0x1a4>
 8007a06:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007a0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a0c:	4299      	cmp	r1, r3
 8007a0e:	db05      	blt.n	8007a1c <_printf_float+0x1d4>
 8007a10:	6823      	ldr	r3, [r4, #0]
 8007a12:	6121      	str	r1, [r4, #16]
 8007a14:	07d8      	lsls	r0, r3, #31
 8007a16:	d5ea      	bpl.n	80079ee <_printf_float+0x1a6>
 8007a18:	1c4b      	adds	r3, r1, #1
 8007a1a:	e7e7      	b.n	80079ec <_printf_float+0x1a4>
 8007a1c:	2900      	cmp	r1, #0
 8007a1e:	bfd4      	ite	le
 8007a20:	f1c1 0202 	rsble	r2, r1, #2
 8007a24:	2201      	movgt	r2, #1
 8007a26:	4413      	add	r3, r2
 8007a28:	e7e0      	b.n	80079ec <_printf_float+0x1a4>
 8007a2a:	6823      	ldr	r3, [r4, #0]
 8007a2c:	055a      	lsls	r2, r3, #21
 8007a2e:	d407      	bmi.n	8007a40 <_printf_float+0x1f8>
 8007a30:	6923      	ldr	r3, [r4, #16]
 8007a32:	4642      	mov	r2, r8
 8007a34:	4631      	mov	r1, r6
 8007a36:	4628      	mov	r0, r5
 8007a38:	47b8      	blx	r7
 8007a3a:	3001      	adds	r0, #1
 8007a3c:	d12c      	bne.n	8007a98 <_printf_float+0x250>
 8007a3e:	e764      	b.n	800790a <_printf_float+0xc2>
 8007a40:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007a44:	f240 80e0 	bls.w	8007c08 <_printf_float+0x3c0>
 8007a48:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	2300      	movs	r3, #0
 8007a50:	f7f9 f83a 	bl	8000ac8 <__aeabi_dcmpeq>
 8007a54:	2800      	cmp	r0, #0
 8007a56:	d034      	beq.n	8007ac2 <_printf_float+0x27a>
 8007a58:	4a37      	ldr	r2, [pc, #220]	; (8007b38 <_printf_float+0x2f0>)
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	4631      	mov	r1, r6
 8007a5e:	4628      	mov	r0, r5
 8007a60:	47b8      	blx	r7
 8007a62:	3001      	adds	r0, #1
 8007a64:	f43f af51 	beq.w	800790a <_printf_float+0xc2>
 8007a68:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007a6c:	429a      	cmp	r2, r3
 8007a6e:	db02      	blt.n	8007a76 <_printf_float+0x22e>
 8007a70:	6823      	ldr	r3, [r4, #0]
 8007a72:	07d8      	lsls	r0, r3, #31
 8007a74:	d510      	bpl.n	8007a98 <_printf_float+0x250>
 8007a76:	ee18 3a10 	vmov	r3, s16
 8007a7a:	4652      	mov	r2, sl
 8007a7c:	4631      	mov	r1, r6
 8007a7e:	4628      	mov	r0, r5
 8007a80:	47b8      	blx	r7
 8007a82:	3001      	adds	r0, #1
 8007a84:	f43f af41 	beq.w	800790a <_printf_float+0xc2>
 8007a88:	f04f 0800 	mov.w	r8, #0
 8007a8c:	f104 091a 	add.w	r9, r4, #26
 8007a90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a92:	3b01      	subs	r3, #1
 8007a94:	4543      	cmp	r3, r8
 8007a96:	dc09      	bgt.n	8007aac <_printf_float+0x264>
 8007a98:	6823      	ldr	r3, [r4, #0]
 8007a9a:	079b      	lsls	r3, r3, #30
 8007a9c:	f100 8105 	bmi.w	8007caa <_printf_float+0x462>
 8007aa0:	68e0      	ldr	r0, [r4, #12]
 8007aa2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007aa4:	4298      	cmp	r0, r3
 8007aa6:	bfb8      	it	lt
 8007aa8:	4618      	movlt	r0, r3
 8007aaa:	e730      	b.n	800790e <_printf_float+0xc6>
 8007aac:	2301      	movs	r3, #1
 8007aae:	464a      	mov	r2, r9
 8007ab0:	4631      	mov	r1, r6
 8007ab2:	4628      	mov	r0, r5
 8007ab4:	47b8      	blx	r7
 8007ab6:	3001      	adds	r0, #1
 8007ab8:	f43f af27 	beq.w	800790a <_printf_float+0xc2>
 8007abc:	f108 0801 	add.w	r8, r8, #1
 8007ac0:	e7e6      	b.n	8007a90 <_printf_float+0x248>
 8007ac2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	dc39      	bgt.n	8007b3c <_printf_float+0x2f4>
 8007ac8:	4a1b      	ldr	r2, [pc, #108]	; (8007b38 <_printf_float+0x2f0>)
 8007aca:	2301      	movs	r3, #1
 8007acc:	4631      	mov	r1, r6
 8007ace:	4628      	mov	r0, r5
 8007ad0:	47b8      	blx	r7
 8007ad2:	3001      	adds	r0, #1
 8007ad4:	f43f af19 	beq.w	800790a <_printf_float+0xc2>
 8007ad8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007adc:	4313      	orrs	r3, r2
 8007ade:	d102      	bne.n	8007ae6 <_printf_float+0x29e>
 8007ae0:	6823      	ldr	r3, [r4, #0]
 8007ae2:	07d9      	lsls	r1, r3, #31
 8007ae4:	d5d8      	bpl.n	8007a98 <_printf_float+0x250>
 8007ae6:	ee18 3a10 	vmov	r3, s16
 8007aea:	4652      	mov	r2, sl
 8007aec:	4631      	mov	r1, r6
 8007aee:	4628      	mov	r0, r5
 8007af0:	47b8      	blx	r7
 8007af2:	3001      	adds	r0, #1
 8007af4:	f43f af09 	beq.w	800790a <_printf_float+0xc2>
 8007af8:	f04f 0900 	mov.w	r9, #0
 8007afc:	f104 0a1a 	add.w	sl, r4, #26
 8007b00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b02:	425b      	negs	r3, r3
 8007b04:	454b      	cmp	r3, r9
 8007b06:	dc01      	bgt.n	8007b0c <_printf_float+0x2c4>
 8007b08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b0a:	e792      	b.n	8007a32 <_printf_float+0x1ea>
 8007b0c:	2301      	movs	r3, #1
 8007b0e:	4652      	mov	r2, sl
 8007b10:	4631      	mov	r1, r6
 8007b12:	4628      	mov	r0, r5
 8007b14:	47b8      	blx	r7
 8007b16:	3001      	adds	r0, #1
 8007b18:	f43f aef7 	beq.w	800790a <_printf_float+0xc2>
 8007b1c:	f109 0901 	add.w	r9, r9, #1
 8007b20:	e7ee      	b.n	8007b00 <_printf_float+0x2b8>
 8007b22:	bf00      	nop
 8007b24:	7fefffff 	.word	0x7fefffff
 8007b28:	0800a214 	.word	0x0800a214
 8007b2c:	0800a218 	.word	0x0800a218
 8007b30:	0800a220 	.word	0x0800a220
 8007b34:	0800a21c 	.word	0x0800a21c
 8007b38:	0800a224 	.word	0x0800a224
 8007b3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007b3e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007b40:	429a      	cmp	r2, r3
 8007b42:	bfa8      	it	ge
 8007b44:	461a      	movge	r2, r3
 8007b46:	2a00      	cmp	r2, #0
 8007b48:	4691      	mov	r9, r2
 8007b4a:	dc37      	bgt.n	8007bbc <_printf_float+0x374>
 8007b4c:	f04f 0b00 	mov.w	fp, #0
 8007b50:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007b54:	f104 021a 	add.w	r2, r4, #26
 8007b58:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007b5a:	9305      	str	r3, [sp, #20]
 8007b5c:	eba3 0309 	sub.w	r3, r3, r9
 8007b60:	455b      	cmp	r3, fp
 8007b62:	dc33      	bgt.n	8007bcc <_printf_float+0x384>
 8007b64:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007b68:	429a      	cmp	r2, r3
 8007b6a:	db3b      	blt.n	8007be4 <_printf_float+0x39c>
 8007b6c:	6823      	ldr	r3, [r4, #0]
 8007b6e:	07da      	lsls	r2, r3, #31
 8007b70:	d438      	bmi.n	8007be4 <_printf_float+0x39c>
 8007b72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b74:	9a05      	ldr	r2, [sp, #20]
 8007b76:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007b78:	1a9a      	subs	r2, r3, r2
 8007b7a:	eba3 0901 	sub.w	r9, r3, r1
 8007b7e:	4591      	cmp	r9, r2
 8007b80:	bfa8      	it	ge
 8007b82:	4691      	movge	r9, r2
 8007b84:	f1b9 0f00 	cmp.w	r9, #0
 8007b88:	dc35      	bgt.n	8007bf6 <_printf_float+0x3ae>
 8007b8a:	f04f 0800 	mov.w	r8, #0
 8007b8e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007b92:	f104 0a1a 	add.w	sl, r4, #26
 8007b96:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007b9a:	1a9b      	subs	r3, r3, r2
 8007b9c:	eba3 0309 	sub.w	r3, r3, r9
 8007ba0:	4543      	cmp	r3, r8
 8007ba2:	f77f af79 	ble.w	8007a98 <_printf_float+0x250>
 8007ba6:	2301      	movs	r3, #1
 8007ba8:	4652      	mov	r2, sl
 8007baa:	4631      	mov	r1, r6
 8007bac:	4628      	mov	r0, r5
 8007bae:	47b8      	blx	r7
 8007bb0:	3001      	adds	r0, #1
 8007bb2:	f43f aeaa 	beq.w	800790a <_printf_float+0xc2>
 8007bb6:	f108 0801 	add.w	r8, r8, #1
 8007bba:	e7ec      	b.n	8007b96 <_printf_float+0x34e>
 8007bbc:	4613      	mov	r3, r2
 8007bbe:	4631      	mov	r1, r6
 8007bc0:	4642      	mov	r2, r8
 8007bc2:	4628      	mov	r0, r5
 8007bc4:	47b8      	blx	r7
 8007bc6:	3001      	adds	r0, #1
 8007bc8:	d1c0      	bne.n	8007b4c <_printf_float+0x304>
 8007bca:	e69e      	b.n	800790a <_printf_float+0xc2>
 8007bcc:	2301      	movs	r3, #1
 8007bce:	4631      	mov	r1, r6
 8007bd0:	4628      	mov	r0, r5
 8007bd2:	9205      	str	r2, [sp, #20]
 8007bd4:	47b8      	blx	r7
 8007bd6:	3001      	adds	r0, #1
 8007bd8:	f43f ae97 	beq.w	800790a <_printf_float+0xc2>
 8007bdc:	9a05      	ldr	r2, [sp, #20]
 8007bde:	f10b 0b01 	add.w	fp, fp, #1
 8007be2:	e7b9      	b.n	8007b58 <_printf_float+0x310>
 8007be4:	ee18 3a10 	vmov	r3, s16
 8007be8:	4652      	mov	r2, sl
 8007bea:	4631      	mov	r1, r6
 8007bec:	4628      	mov	r0, r5
 8007bee:	47b8      	blx	r7
 8007bf0:	3001      	adds	r0, #1
 8007bf2:	d1be      	bne.n	8007b72 <_printf_float+0x32a>
 8007bf4:	e689      	b.n	800790a <_printf_float+0xc2>
 8007bf6:	9a05      	ldr	r2, [sp, #20]
 8007bf8:	464b      	mov	r3, r9
 8007bfa:	4442      	add	r2, r8
 8007bfc:	4631      	mov	r1, r6
 8007bfe:	4628      	mov	r0, r5
 8007c00:	47b8      	blx	r7
 8007c02:	3001      	adds	r0, #1
 8007c04:	d1c1      	bne.n	8007b8a <_printf_float+0x342>
 8007c06:	e680      	b.n	800790a <_printf_float+0xc2>
 8007c08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007c0a:	2a01      	cmp	r2, #1
 8007c0c:	dc01      	bgt.n	8007c12 <_printf_float+0x3ca>
 8007c0e:	07db      	lsls	r3, r3, #31
 8007c10:	d538      	bpl.n	8007c84 <_printf_float+0x43c>
 8007c12:	2301      	movs	r3, #1
 8007c14:	4642      	mov	r2, r8
 8007c16:	4631      	mov	r1, r6
 8007c18:	4628      	mov	r0, r5
 8007c1a:	47b8      	blx	r7
 8007c1c:	3001      	adds	r0, #1
 8007c1e:	f43f ae74 	beq.w	800790a <_printf_float+0xc2>
 8007c22:	ee18 3a10 	vmov	r3, s16
 8007c26:	4652      	mov	r2, sl
 8007c28:	4631      	mov	r1, r6
 8007c2a:	4628      	mov	r0, r5
 8007c2c:	47b8      	blx	r7
 8007c2e:	3001      	adds	r0, #1
 8007c30:	f43f ae6b 	beq.w	800790a <_printf_float+0xc2>
 8007c34:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007c38:	2200      	movs	r2, #0
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	f7f8 ff44 	bl	8000ac8 <__aeabi_dcmpeq>
 8007c40:	b9d8      	cbnz	r0, 8007c7a <_printf_float+0x432>
 8007c42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c44:	f108 0201 	add.w	r2, r8, #1
 8007c48:	3b01      	subs	r3, #1
 8007c4a:	4631      	mov	r1, r6
 8007c4c:	4628      	mov	r0, r5
 8007c4e:	47b8      	blx	r7
 8007c50:	3001      	adds	r0, #1
 8007c52:	d10e      	bne.n	8007c72 <_printf_float+0x42a>
 8007c54:	e659      	b.n	800790a <_printf_float+0xc2>
 8007c56:	2301      	movs	r3, #1
 8007c58:	4652      	mov	r2, sl
 8007c5a:	4631      	mov	r1, r6
 8007c5c:	4628      	mov	r0, r5
 8007c5e:	47b8      	blx	r7
 8007c60:	3001      	adds	r0, #1
 8007c62:	f43f ae52 	beq.w	800790a <_printf_float+0xc2>
 8007c66:	f108 0801 	add.w	r8, r8, #1
 8007c6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c6c:	3b01      	subs	r3, #1
 8007c6e:	4543      	cmp	r3, r8
 8007c70:	dcf1      	bgt.n	8007c56 <_printf_float+0x40e>
 8007c72:	464b      	mov	r3, r9
 8007c74:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007c78:	e6dc      	b.n	8007a34 <_printf_float+0x1ec>
 8007c7a:	f04f 0800 	mov.w	r8, #0
 8007c7e:	f104 0a1a 	add.w	sl, r4, #26
 8007c82:	e7f2      	b.n	8007c6a <_printf_float+0x422>
 8007c84:	2301      	movs	r3, #1
 8007c86:	4642      	mov	r2, r8
 8007c88:	e7df      	b.n	8007c4a <_printf_float+0x402>
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	464a      	mov	r2, r9
 8007c8e:	4631      	mov	r1, r6
 8007c90:	4628      	mov	r0, r5
 8007c92:	47b8      	blx	r7
 8007c94:	3001      	adds	r0, #1
 8007c96:	f43f ae38 	beq.w	800790a <_printf_float+0xc2>
 8007c9a:	f108 0801 	add.w	r8, r8, #1
 8007c9e:	68e3      	ldr	r3, [r4, #12]
 8007ca0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007ca2:	1a5b      	subs	r3, r3, r1
 8007ca4:	4543      	cmp	r3, r8
 8007ca6:	dcf0      	bgt.n	8007c8a <_printf_float+0x442>
 8007ca8:	e6fa      	b.n	8007aa0 <_printf_float+0x258>
 8007caa:	f04f 0800 	mov.w	r8, #0
 8007cae:	f104 0919 	add.w	r9, r4, #25
 8007cb2:	e7f4      	b.n	8007c9e <_printf_float+0x456>

08007cb4 <_printf_common>:
 8007cb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cb8:	4616      	mov	r6, r2
 8007cba:	4699      	mov	r9, r3
 8007cbc:	688a      	ldr	r2, [r1, #8]
 8007cbe:	690b      	ldr	r3, [r1, #16]
 8007cc0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	bfb8      	it	lt
 8007cc8:	4613      	movlt	r3, r2
 8007cca:	6033      	str	r3, [r6, #0]
 8007ccc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007cd0:	4607      	mov	r7, r0
 8007cd2:	460c      	mov	r4, r1
 8007cd4:	b10a      	cbz	r2, 8007cda <_printf_common+0x26>
 8007cd6:	3301      	adds	r3, #1
 8007cd8:	6033      	str	r3, [r6, #0]
 8007cda:	6823      	ldr	r3, [r4, #0]
 8007cdc:	0699      	lsls	r1, r3, #26
 8007cde:	bf42      	ittt	mi
 8007ce0:	6833      	ldrmi	r3, [r6, #0]
 8007ce2:	3302      	addmi	r3, #2
 8007ce4:	6033      	strmi	r3, [r6, #0]
 8007ce6:	6825      	ldr	r5, [r4, #0]
 8007ce8:	f015 0506 	ands.w	r5, r5, #6
 8007cec:	d106      	bne.n	8007cfc <_printf_common+0x48>
 8007cee:	f104 0a19 	add.w	sl, r4, #25
 8007cf2:	68e3      	ldr	r3, [r4, #12]
 8007cf4:	6832      	ldr	r2, [r6, #0]
 8007cf6:	1a9b      	subs	r3, r3, r2
 8007cf8:	42ab      	cmp	r3, r5
 8007cfa:	dc26      	bgt.n	8007d4a <_printf_common+0x96>
 8007cfc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007d00:	1e13      	subs	r3, r2, #0
 8007d02:	6822      	ldr	r2, [r4, #0]
 8007d04:	bf18      	it	ne
 8007d06:	2301      	movne	r3, #1
 8007d08:	0692      	lsls	r2, r2, #26
 8007d0a:	d42b      	bmi.n	8007d64 <_printf_common+0xb0>
 8007d0c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007d10:	4649      	mov	r1, r9
 8007d12:	4638      	mov	r0, r7
 8007d14:	47c0      	blx	r8
 8007d16:	3001      	adds	r0, #1
 8007d18:	d01e      	beq.n	8007d58 <_printf_common+0xa4>
 8007d1a:	6823      	ldr	r3, [r4, #0]
 8007d1c:	68e5      	ldr	r5, [r4, #12]
 8007d1e:	6832      	ldr	r2, [r6, #0]
 8007d20:	f003 0306 	and.w	r3, r3, #6
 8007d24:	2b04      	cmp	r3, #4
 8007d26:	bf08      	it	eq
 8007d28:	1aad      	subeq	r5, r5, r2
 8007d2a:	68a3      	ldr	r3, [r4, #8]
 8007d2c:	6922      	ldr	r2, [r4, #16]
 8007d2e:	bf0c      	ite	eq
 8007d30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007d34:	2500      	movne	r5, #0
 8007d36:	4293      	cmp	r3, r2
 8007d38:	bfc4      	itt	gt
 8007d3a:	1a9b      	subgt	r3, r3, r2
 8007d3c:	18ed      	addgt	r5, r5, r3
 8007d3e:	2600      	movs	r6, #0
 8007d40:	341a      	adds	r4, #26
 8007d42:	42b5      	cmp	r5, r6
 8007d44:	d11a      	bne.n	8007d7c <_printf_common+0xc8>
 8007d46:	2000      	movs	r0, #0
 8007d48:	e008      	b.n	8007d5c <_printf_common+0xa8>
 8007d4a:	2301      	movs	r3, #1
 8007d4c:	4652      	mov	r2, sl
 8007d4e:	4649      	mov	r1, r9
 8007d50:	4638      	mov	r0, r7
 8007d52:	47c0      	blx	r8
 8007d54:	3001      	adds	r0, #1
 8007d56:	d103      	bne.n	8007d60 <_printf_common+0xac>
 8007d58:	f04f 30ff 	mov.w	r0, #4294967295
 8007d5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d60:	3501      	adds	r5, #1
 8007d62:	e7c6      	b.n	8007cf2 <_printf_common+0x3e>
 8007d64:	18e1      	adds	r1, r4, r3
 8007d66:	1c5a      	adds	r2, r3, #1
 8007d68:	2030      	movs	r0, #48	; 0x30
 8007d6a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007d6e:	4422      	add	r2, r4
 8007d70:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007d74:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007d78:	3302      	adds	r3, #2
 8007d7a:	e7c7      	b.n	8007d0c <_printf_common+0x58>
 8007d7c:	2301      	movs	r3, #1
 8007d7e:	4622      	mov	r2, r4
 8007d80:	4649      	mov	r1, r9
 8007d82:	4638      	mov	r0, r7
 8007d84:	47c0      	blx	r8
 8007d86:	3001      	adds	r0, #1
 8007d88:	d0e6      	beq.n	8007d58 <_printf_common+0xa4>
 8007d8a:	3601      	adds	r6, #1
 8007d8c:	e7d9      	b.n	8007d42 <_printf_common+0x8e>
	...

08007d90 <_printf_i>:
 8007d90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d94:	7e0f      	ldrb	r7, [r1, #24]
 8007d96:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007d98:	2f78      	cmp	r7, #120	; 0x78
 8007d9a:	4691      	mov	r9, r2
 8007d9c:	4680      	mov	r8, r0
 8007d9e:	460c      	mov	r4, r1
 8007da0:	469a      	mov	sl, r3
 8007da2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007da6:	d807      	bhi.n	8007db8 <_printf_i+0x28>
 8007da8:	2f62      	cmp	r7, #98	; 0x62
 8007daa:	d80a      	bhi.n	8007dc2 <_printf_i+0x32>
 8007dac:	2f00      	cmp	r7, #0
 8007dae:	f000 80d8 	beq.w	8007f62 <_printf_i+0x1d2>
 8007db2:	2f58      	cmp	r7, #88	; 0x58
 8007db4:	f000 80a3 	beq.w	8007efe <_printf_i+0x16e>
 8007db8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007dbc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007dc0:	e03a      	b.n	8007e38 <_printf_i+0xa8>
 8007dc2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007dc6:	2b15      	cmp	r3, #21
 8007dc8:	d8f6      	bhi.n	8007db8 <_printf_i+0x28>
 8007dca:	a101      	add	r1, pc, #4	; (adr r1, 8007dd0 <_printf_i+0x40>)
 8007dcc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007dd0:	08007e29 	.word	0x08007e29
 8007dd4:	08007e3d 	.word	0x08007e3d
 8007dd8:	08007db9 	.word	0x08007db9
 8007ddc:	08007db9 	.word	0x08007db9
 8007de0:	08007db9 	.word	0x08007db9
 8007de4:	08007db9 	.word	0x08007db9
 8007de8:	08007e3d 	.word	0x08007e3d
 8007dec:	08007db9 	.word	0x08007db9
 8007df0:	08007db9 	.word	0x08007db9
 8007df4:	08007db9 	.word	0x08007db9
 8007df8:	08007db9 	.word	0x08007db9
 8007dfc:	08007f49 	.word	0x08007f49
 8007e00:	08007e6d 	.word	0x08007e6d
 8007e04:	08007f2b 	.word	0x08007f2b
 8007e08:	08007db9 	.word	0x08007db9
 8007e0c:	08007db9 	.word	0x08007db9
 8007e10:	08007f6b 	.word	0x08007f6b
 8007e14:	08007db9 	.word	0x08007db9
 8007e18:	08007e6d 	.word	0x08007e6d
 8007e1c:	08007db9 	.word	0x08007db9
 8007e20:	08007db9 	.word	0x08007db9
 8007e24:	08007f33 	.word	0x08007f33
 8007e28:	682b      	ldr	r3, [r5, #0]
 8007e2a:	1d1a      	adds	r2, r3, #4
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	602a      	str	r2, [r5, #0]
 8007e30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007e34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007e38:	2301      	movs	r3, #1
 8007e3a:	e0a3      	b.n	8007f84 <_printf_i+0x1f4>
 8007e3c:	6820      	ldr	r0, [r4, #0]
 8007e3e:	6829      	ldr	r1, [r5, #0]
 8007e40:	0606      	lsls	r6, r0, #24
 8007e42:	f101 0304 	add.w	r3, r1, #4
 8007e46:	d50a      	bpl.n	8007e5e <_printf_i+0xce>
 8007e48:	680e      	ldr	r6, [r1, #0]
 8007e4a:	602b      	str	r3, [r5, #0]
 8007e4c:	2e00      	cmp	r6, #0
 8007e4e:	da03      	bge.n	8007e58 <_printf_i+0xc8>
 8007e50:	232d      	movs	r3, #45	; 0x2d
 8007e52:	4276      	negs	r6, r6
 8007e54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e58:	485e      	ldr	r0, [pc, #376]	; (8007fd4 <_printf_i+0x244>)
 8007e5a:	230a      	movs	r3, #10
 8007e5c:	e019      	b.n	8007e92 <_printf_i+0x102>
 8007e5e:	680e      	ldr	r6, [r1, #0]
 8007e60:	602b      	str	r3, [r5, #0]
 8007e62:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007e66:	bf18      	it	ne
 8007e68:	b236      	sxthne	r6, r6
 8007e6a:	e7ef      	b.n	8007e4c <_printf_i+0xbc>
 8007e6c:	682b      	ldr	r3, [r5, #0]
 8007e6e:	6820      	ldr	r0, [r4, #0]
 8007e70:	1d19      	adds	r1, r3, #4
 8007e72:	6029      	str	r1, [r5, #0]
 8007e74:	0601      	lsls	r1, r0, #24
 8007e76:	d501      	bpl.n	8007e7c <_printf_i+0xec>
 8007e78:	681e      	ldr	r6, [r3, #0]
 8007e7a:	e002      	b.n	8007e82 <_printf_i+0xf2>
 8007e7c:	0646      	lsls	r6, r0, #25
 8007e7e:	d5fb      	bpl.n	8007e78 <_printf_i+0xe8>
 8007e80:	881e      	ldrh	r6, [r3, #0]
 8007e82:	4854      	ldr	r0, [pc, #336]	; (8007fd4 <_printf_i+0x244>)
 8007e84:	2f6f      	cmp	r7, #111	; 0x6f
 8007e86:	bf0c      	ite	eq
 8007e88:	2308      	moveq	r3, #8
 8007e8a:	230a      	movne	r3, #10
 8007e8c:	2100      	movs	r1, #0
 8007e8e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007e92:	6865      	ldr	r5, [r4, #4]
 8007e94:	60a5      	str	r5, [r4, #8]
 8007e96:	2d00      	cmp	r5, #0
 8007e98:	bfa2      	ittt	ge
 8007e9a:	6821      	ldrge	r1, [r4, #0]
 8007e9c:	f021 0104 	bicge.w	r1, r1, #4
 8007ea0:	6021      	strge	r1, [r4, #0]
 8007ea2:	b90e      	cbnz	r6, 8007ea8 <_printf_i+0x118>
 8007ea4:	2d00      	cmp	r5, #0
 8007ea6:	d04d      	beq.n	8007f44 <_printf_i+0x1b4>
 8007ea8:	4615      	mov	r5, r2
 8007eaa:	fbb6 f1f3 	udiv	r1, r6, r3
 8007eae:	fb03 6711 	mls	r7, r3, r1, r6
 8007eb2:	5dc7      	ldrb	r7, [r0, r7]
 8007eb4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007eb8:	4637      	mov	r7, r6
 8007eba:	42bb      	cmp	r3, r7
 8007ebc:	460e      	mov	r6, r1
 8007ebe:	d9f4      	bls.n	8007eaa <_printf_i+0x11a>
 8007ec0:	2b08      	cmp	r3, #8
 8007ec2:	d10b      	bne.n	8007edc <_printf_i+0x14c>
 8007ec4:	6823      	ldr	r3, [r4, #0]
 8007ec6:	07de      	lsls	r6, r3, #31
 8007ec8:	d508      	bpl.n	8007edc <_printf_i+0x14c>
 8007eca:	6923      	ldr	r3, [r4, #16]
 8007ecc:	6861      	ldr	r1, [r4, #4]
 8007ece:	4299      	cmp	r1, r3
 8007ed0:	bfde      	ittt	le
 8007ed2:	2330      	movle	r3, #48	; 0x30
 8007ed4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007ed8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007edc:	1b52      	subs	r2, r2, r5
 8007ede:	6122      	str	r2, [r4, #16]
 8007ee0:	f8cd a000 	str.w	sl, [sp]
 8007ee4:	464b      	mov	r3, r9
 8007ee6:	aa03      	add	r2, sp, #12
 8007ee8:	4621      	mov	r1, r4
 8007eea:	4640      	mov	r0, r8
 8007eec:	f7ff fee2 	bl	8007cb4 <_printf_common>
 8007ef0:	3001      	adds	r0, #1
 8007ef2:	d14c      	bne.n	8007f8e <_printf_i+0x1fe>
 8007ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ef8:	b004      	add	sp, #16
 8007efa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007efe:	4835      	ldr	r0, [pc, #212]	; (8007fd4 <_printf_i+0x244>)
 8007f00:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007f04:	6829      	ldr	r1, [r5, #0]
 8007f06:	6823      	ldr	r3, [r4, #0]
 8007f08:	f851 6b04 	ldr.w	r6, [r1], #4
 8007f0c:	6029      	str	r1, [r5, #0]
 8007f0e:	061d      	lsls	r5, r3, #24
 8007f10:	d514      	bpl.n	8007f3c <_printf_i+0x1ac>
 8007f12:	07df      	lsls	r7, r3, #31
 8007f14:	bf44      	itt	mi
 8007f16:	f043 0320 	orrmi.w	r3, r3, #32
 8007f1a:	6023      	strmi	r3, [r4, #0]
 8007f1c:	b91e      	cbnz	r6, 8007f26 <_printf_i+0x196>
 8007f1e:	6823      	ldr	r3, [r4, #0]
 8007f20:	f023 0320 	bic.w	r3, r3, #32
 8007f24:	6023      	str	r3, [r4, #0]
 8007f26:	2310      	movs	r3, #16
 8007f28:	e7b0      	b.n	8007e8c <_printf_i+0xfc>
 8007f2a:	6823      	ldr	r3, [r4, #0]
 8007f2c:	f043 0320 	orr.w	r3, r3, #32
 8007f30:	6023      	str	r3, [r4, #0]
 8007f32:	2378      	movs	r3, #120	; 0x78
 8007f34:	4828      	ldr	r0, [pc, #160]	; (8007fd8 <_printf_i+0x248>)
 8007f36:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007f3a:	e7e3      	b.n	8007f04 <_printf_i+0x174>
 8007f3c:	0659      	lsls	r1, r3, #25
 8007f3e:	bf48      	it	mi
 8007f40:	b2b6      	uxthmi	r6, r6
 8007f42:	e7e6      	b.n	8007f12 <_printf_i+0x182>
 8007f44:	4615      	mov	r5, r2
 8007f46:	e7bb      	b.n	8007ec0 <_printf_i+0x130>
 8007f48:	682b      	ldr	r3, [r5, #0]
 8007f4a:	6826      	ldr	r6, [r4, #0]
 8007f4c:	6961      	ldr	r1, [r4, #20]
 8007f4e:	1d18      	adds	r0, r3, #4
 8007f50:	6028      	str	r0, [r5, #0]
 8007f52:	0635      	lsls	r5, r6, #24
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	d501      	bpl.n	8007f5c <_printf_i+0x1cc>
 8007f58:	6019      	str	r1, [r3, #0]
 8007f5a:	e002      	b.n	8007f62 <_printf_i+0x1d2>
 8007f5c:	0670      	lsls	r0, r6, #25
 8007f5e:	d5fb      	bpl.n	8007f58 <_printf_i+0x1c8>
 8007f60:	8019      	strh	r1, [r3, #0]
 8007f62:	2300      	movs	r3, #0
 8007f64:	6123      	str	r3, [r4, #16]
 8007f66:	4615      	mov	r5, r2
 8007f68:	e7ba      	b.n	8007ee0 <_printf_i+0x150>
 8007f6a:	682b      	ldr	r3, [r5, #0]
 8007f6c:	1d1a      	adds	r2, r3, #4
 8007f6e:	602a      	str	r2, [r5, #0]
 8007f70:	681d      	ldr	r5, [r3, #0]
 8007f72:	6862      	ldr	r2, [r4, #4]
 8007f74:	2100      	movs	r1, #0
 8007f76:	4628      	mov	r0, r5
 8007f78:	f7f8 f932 	bl	80001e0 <memchr>
 8007f7c:	b108      	cbz	r0, 8007f82 <_printf_i+0x1f2>
 8007f7e:	1b40      	subs	r0, r0, r5
 8007f80:	6060      	str	r0, [r4, #4]
 8007f82:	6863      	ldr	r3, [r4, #4]
 8007f84:	6123      	str	r3, [r4, #16]
 8007f86:	2300      	movs	r3, #0
 8007f88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f8c:	e7a8      	b.n	8007ee0 <_printf_i+0x150>
 8007f8e:	6923      	ldr	r3, [r4, #16]
 8007f90:	462a      	mov	r2, r5
 8007f92:	4649      	mov	r1, r9
 8007f94:	4640      	mov	r0, r8
 8007f96:	47d0      	blx	sl
 8007f98:	3001      	adds	r0, #1
 8007f9a:	d0ab      	beq.n	8007ef4 <_printf_i+0x164>
 8007f9c:	6823      	ldr	r3, [r4, #0]
 8007f9e:	079b      	lsls	r3, r3, #30
 8007fa0:	d413      	bmi.n	8007fca <_printf_i+0x23a>
 8007fa2:	68e0      	ldr	r0, [r4, #12]
 8007fa4:	9b03      	ldr	r3, [sp, #12]
 8007fa6:	4298      	cmp	r0, r3
 8007fa8:	bfb8      	it	lt
 8007faa:	4618      	movlt	r0, r3
 8007fac:	e7a4      	b.n	8007ef8 <_printf_i+0x168>
 8007fae:	2301      	movs	r3, #1
 8007fb0:	4632      	mov	r2, r6
 8007fb2:	4649      	mov	r1, r9
 8007fb4:	4640      	mov	r0, r8
 8007fb6:	47d0      	blx	sl
 8007fb8:	3001      	adds	r0, #1
 8007fba:	d09b      	beq.n	8007ef4 <_printf_i+0x164>
 8007fbc:	3501      	adds	r5, #1
 8007fbe:	68e3      	ldr	r3, [r4, #12]
 8007fc0:	9903      	ldr	r1, [sp, #12]
 8007fc2:	1a5b      	subs	r3, r3, r1
 8007fc4:	42ab      	cmp	r3, r5
 8007fc6:	dcf2      	bgt.n	8007fae <_printf_i+0x21e>
 8007fc8:	e7eb      	b.n	8007fa2 <_printf_i+0x212>
 8007fca:	2500      	movs	r5, #0
 8007fcc:	f104 0619 	add.w	r6, r4, #25
 8007fd0:	e7f5      	b.n	8007fbe <_printf_i+0x22e>
 8007fd2:	bf00      	nop
 8007fd4:	0800a226 	.word	0x0800a226
 8007fd8:	0800a237 	.word	0x0800a237

08007fdc <iprintf>:
 8007fdc:	b40f      	push	{r0, r1, r2, r3}
 8007fde:	4b0a      	ldr	r3, [pc, #40]	; (8008008 <iprintf+0x2c>)
 8007fe0:	b513      	push	{r0, r1, r4, lr}
 8007fe2:	681c      	ldr	r4, [r3, #0]
 8007fe4:	b124      	cbz	r4, 8007ff0 <iprintf+0x14>
 8007fe6:	69a3      	ldr	r3, [r4, #24]
 8007fe8:	b913      	cbnz	r3, 8007ff0 <iprintf+0x14>
 8007fea:	4620      	mov	r0, r4
 8007fec:	f000 fee2 	bl	8008db4 <__sinit>
 8007ff0:	ab05      	add	r3, sp, #20
 8007ff2:	9a04      	ldr	r2, [sp, #16]
 8007ff4:	68a1      	ldr	r1, [r4, #8]
 8007ff6:	9301      	str	r3, [sp, #4]
 8007ff8:	4620      	mov	r0, r4
 8007ffa:	f001 fc3b 	bl	8009874 <_vfiprintf_r>
 8007ffe:	b002      	add	sp, #8
 8008000:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008004:	b004      	add	sp, #16
 8008006:	4770      	bx	lr
 8008008:	2000000c 	.word	0x2000000c

0800800c <quorem>:
 800800c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008010:	6903      	ldr	r3, [r0, #16]
 8008012:	690c      	ldr	r4, [r1, #16]
 8008014:	42a3      	cmp	r3, r4
 8008016:	4607      	mov	r7, r0
 8008018:	f2c0 8081 	blt.w	800811e <quorem+0x112>
 800801c:	3c01      	subs	r4, #1
 800801e:	f101 0814 	add.w	r8, r1, #20
 8008022:	f100 0514 	add.w	r5, r0, #20
 8008026:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800802a:	9301      	str	r3, [sp, #4]
 800802c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008030:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008034:	3301      	adds	r3, #1
 8008036:	429a      	cmp	r2, r3
 8008038:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800803c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008040:	fbb2 f6f3 	udiv	r6, r2, r3
 8008044:	d331      	bcc.n	80080aa <quorem+0x9e>
 8008046:	f04f 0e00 	mov.w	lr, #0
 800804a:	4640      	mov	r0, r8
 800804c:	46ac      	mov	ip, r5
 800804e:	46f2      	mov	sl, lr
 8008050:	f850 2b04 	ldr.w	r2, [r0], #4
 8008054:	b293      	uxth	r3, r2
 8008056:	fb06 e303 	mla	r3, r6, r3, lr
 800805a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800805e:	b29b      	uxth	r3, r3
 8008060:	ebaa 0303 	sub.w	r3, sl, r3
 8008064:	f8dc a000 	ldr.w	sl, [ip]
 8008068:	0c12      	lsrs	r2, r2, #16
 800806a:	fa13 f38a 	uxtah	r3, r3, sl
 800806e:	fb06 e202 	mla	r2, r6, r2, lr
 8008072:	9300      	str	r3, [sp, #0]
 8008074:	9b00      	ldr	r3, [sp, #0]
 8008076:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800807a:	b292      	uxth	r2, r2
 800807c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008080:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008084:	f8bd 3000 	ldrh.w	r3, [sp]
 8008088:	4581      	cmp	r9, r0
 800808a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800808e:	f84c 3b04 	str.w	r3, [ip], #4
 8008092:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008096:	d2db      	bcs.n	8008050 <quorem+0x44>
 8008098:	f855 300b 	ldr.w	r3, [r5, fp]
 800809c:	b92b      	cbnz	r3, 80080aa <quorem+0x9e>
 800809e:	9b01      	ldr	r3, [sp, #4]
 80080a0:	3b04      	subs	r3, #4
 80080a2:	429d      	cmp	r5, r3
 80080a4:	461a      	mov	r2, r3
 80080a6:	d32e      	bcc.n	8008106 <quorem+0xfa>
 80080a8:	613c      	str	r4, [r7, #16]
 80080aa:	4638      	mov	r0, r7
 80080ac:	f001 f9c0 	bl	8009430 <__mcmp>
 80080b0:	2800      	cmp	r0, #0
 80080b2:	db24      	blt.n	80080fe <quorem+0xf2>
 80080b4:	3601      	adds	r6, #1
 80080b6:	4628      	mov	r0, r5
 80080b8:	f04f 0c00 	mov.w	ip, #0
 80080bc:	f858 2b04 	ldr.w	r2, [r8], #4
 80080c0:	f8d0 e000 	ldr.w	lr, [r0]
 80080c4:	b293      	uxth	r3, r2
 80080c6:	ebac 0303 	sub.w	r3, ip, r3
 80080ca:	0c12      	lsrs	r2, r2, #16
 80080cc:	fa13 f38e 	uxtah	r3, r3, lr
 80080d0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80080d4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80080d8:	b29b      	uxth	r3, r3
 80080da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80080de:	45c1      	cmp	r9, r8
 80080e0:	f840 3b04 	str.w	r3, [r0], #4
 80080e4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80080e8:	d2e8      	bcs.n	80080bc <quorem+0xb0>
 80080ea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80080ee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80080f2:	b922      	cbnz	r2, 80080fe <quorem+0xf2>
 80080f4:	3b04      	subs	r3, #4
 80080f6:	429d      	cmp	r5, r3
 80080f8:	461a      	mov	r2, r3
 80080fa:	d30a      	bcc.n	8008112 <quorem+0x106>
 80080fc:	613c      	str	r4, [r7, #16]
 80080fe:	4630      	mov	r0, r6
 8008100:	b003      	add	sp, #12
 8008102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008106:	6812      	ldr	r2, [r2, #0]
 8008108:	3b04      	subs	r3, #4
 800810a:	2a00      	cmp	r2, #0
 800810c:	d1cc      	bne.n	80080a8 <quorem+0x9c>
 800810e:	3c01      	subs	r4, #1
 8008110:	e7c7      	b.n	80080a2 <quorem+0x96>
 8008112:	6812      	ldr	r2, [r2, #0]
 8008114:	3b04      	subs	r3, #4
 8008116:	2a00      	cmp	r2, #0
 8008118:	d1f0      	bne.n	80080fc <quorem+0xf0>
 800811a:	3c01      	subs	r4, #1
 800811c:	e7eb      	b.n	80080f6 <quorem+0xea>
 800811e:	2000      	movs	r0, #0
 8008120:	e7ee      	b.n	8008100 <quorem+0xf4>
 8008122:	0000      	movs	r0, r0
 8008124:	0000      	movs	r0, r0
	...

08008128 <_dtoa_r>:
 8008128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800812c:	ed2d 8b04 	vpush	{d8-d9}
 8008130:	ec57 6b10 	vmov	r6, r7, d0
 8008134:	b093      	sub	sp, #76	; 0x4c
 8008136:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008138:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800813c:	9106      	str	r1, [sp, #24]
 800813e:	ee10 aa10 	vmov	sl, s0
 8008142:	4604      	mov	r4, r0
 8008144:	9209      	str	r2, [sp, #36]	; 0x24
 8008146:	930c      	str	r3, [sp, #48]	; 0x30
 8008148:	46bb      	mov	fp, r7
 800814a:	b975      	cbnz	r5, 800816a <_dtoa_r+0x42>
 800814c:	2010      	movs	r0, #16
 800814e:	f000 fed7 	bl	8008f00 <malloc>
 8008152:	4602      	mov	r2, r0
 8008154:	6260      	str	r0, [r4, #36]	; 0x24
 8008156:	b920      	cbnz	r0, 8008162 <_dtoa_r+0x3a>
 8008158:	4ba7      	ldr	r3, [pc, #668]	; (80083f8 <_dtoa_r+0x2d0>)
 800815a:	21ea      	movs	r1, #234	; 0xea
 800815c:	48a7      	ldr	r0, [pc, #668]	; (80083fc <_dtoa_r+0x2d4>)
 800815e:	f001 fddf 	bl	8009d20 <__assert_func>
 8008162:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008166:	6005      	str	r5, [r0, #0]
 8008168:	60c5      	str	r5, [r0, #12]
 800816a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800816c:	6819      	ldr	r1, [r3, #0]
 800816e:	b151      	cbz	r1, 8008186 <_dtoa_r+0x5e>
 8008170:	685a      	ldr	r2, [r3, #4]
 8008172:	604a      	str	r2, [r1, #4]
 8008174:	2301      	movs	r3, #1
 8008176:	4093      	lsls	r3, r2
 8008178:	608b      	str	r3, [r1, #8]
 800817a:	4620      	mov	r0, r4
 800817c:	f000 ff16 	bl	8008fac <_Bfree>
 8008180:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008182:	2200      	movs	r2, #0
 8008184:	601a      	str	r2, [r3, #0]
 8008186:	1e3b      	subs	r3, r7, #0
 8008188:	bfaa      	itet	ge
 800818a:	2300      	movge	r3, #0
 800818c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008190:	f8c8 3000 	strge.w	r3, [r8]
 8008194:	4b9a      	ldr	r3, [pc, #616]	; (8008400 <_dtoa_r+0x2d8>)
 8008196:	bfbc      	itt	lt
 8008198:	2201      	movlt	r2, #1
 800819a:	f8c8 2000 	strlt.w	r2, [r8]
 800819e:	ea33 030b 	bics.w	r3, r3, fp
 80081a2:	d11b      	bne.n	80081dc <_dtoa_r+0xb4>
 80081a4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80081a6:	f242 730f 	movw	r3, #9999	; 0x270f
 80081aa:	6013      	str	r3, [r2, #0]
 80081ac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80081b0:	4333      	orrs	r3, r6
 80081b2:	f000 8592 	beq.w	8008cda <_dtoa_r+0xbb2>
 80081b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80081b8:	b963      	cbnz	r3, 80081d4 <_dtoa_r+0xac>
 80081ba:	4b92      	ldr	r3, [pc, #584]	; (8008404 <_dtoa_r+0x2dc>)
 80081bc:	e022      	b.n	8008204 <_dtoa_r+0xdc>
 80081be:	4b92      	ldr	r3, [pc, #584]	; (8008408 <_dtoa_r+0x2e0>)
 80081c0:	9301      	str	r3, [sp, #4]
 80081c2:	3308      	adds	r3, #8
 80081c4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80081c6:	6013      	str	r3, [r2, #0]
 80081c8:	9801      	ldr	r0, [sp, #4]
 80081ca:	b013      	add	sp, #76	; 0x4c
 80081cc:	ecbd 8b04 	vpop	{d8-d9}
 80081d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081d4:	4b8b      	ldr	r3, [pc, #556]	; (8008404 <_dtoa_r+0x2dc>)
 80081d6:	9301      	str	r3, [sp, #4]
 80081d8:	3303      	adds	r3, #3
 80081da:	e7f3      	b.n	80081c4 <_dtoa_r+0x9c>
 80081dc:	2200      	movs	r2, #0
 80081de:	2300      	movs	r3, #0
 80081e0:	4650      	mov	r0, sl
 80081e2:	4659      	mov	r1, fp
 80081e4:	f7f8 fc70 	bl	8000ac8 <__aeabi_dcmpeq>
 80081e8:	ec4b ab19 	vmov	d9, sl, fp
 80081ec:	4680      	mov	r8, r0
 80081ee:	b158      	cbz	r0, 8008208 <_dtoa_r+0xe0>
 80081f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80081f2:	2301      	movs	r3, #1
 80081f4:	6013      	str	r3, [r2, #0]
 80081f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	f000 856b 	beq.w	8008cd4 <_dtoa_r+0xbac>
 80081fe:	4883      	ldr	r0, [pc, #524]	; (800840c <_dtoa_r+0x2e4>)
 8008200:	6018      	str	r0, [r3, #0]
 8008202:	1e43      	subs	r3, r0, #1
 8008204:	9301      	str	r3, [sp, #4]
 8008206:	e7df      	b.n	80081c8 <_dtoa_r+0xa0>
 8008208:	ec4b ab10 	vmov	d0, sl, fp
 800820c:	aa10      	add	r2, sp, #64	; 0x40
 800820e:	a911      	add	r1, sp, #68	; 0x44
 8008210:	4620      	mov	r0, r4
 8008212:	f001 f9b3 	bl	800957c <__d2b>
 8008216:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800821a:	ee08 0a10 	vmov	s16, r0
 800821e:	2d00      	cmp	r5, #0
 8008220:	f000 8084 	beq.w	800832c <_dtoa_r+0x204>
 8008224:	ee19 3a90 	vmov	r3, s19
 8008228:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800822c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008230:	4656      	mov	r6, sl
 8008232:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008236:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800823a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800823e:	4b74      	ldr	r3, [pc, #464]	; (8008410 <_dtoa_r+0x2e8>)
 8008240:	2200      	movs	r2, #0
 8008242:	4630      	mov	r0, r6
 8008244:	4639      	mov	r1, r7
 8008246:	f7f8 f81f 	bl	8000288 <__aeabi_dsub>
 800824a:	a365      	add	r3, pc, #404	; (adr r3, 80083e0 <_dtoa_r+0x2b8>)
 800824c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008250:	f7f8 f9d2 	bl	80005f8 <__aeabi_dmul>
 8008254:	a364      	add	r3, pc, #400	; (adr r3, 80083e8 <_dtoa_r+0x2c0>)
 8008256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800825a:	f7f8 f817 	bl	800028c <__adddf3>
 800825e:	4606      	mov	r6, r0
 8008260:	4628      	mov	r0, r5
 8008262:	460f      	mov	r7, r1
 8008264:	f7f8 f95e 	bl	8000524 <__aeabi_i2d>
 8008268:	a361      	add	r3, pc, #388	; (adr r3, 80083f0 <_dtoa_r+0x2c8>)
 800826a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800826e:	f7f8 f9c3 	bl	80005f8 <__aeabi_dmul>
 8008272:	4602      	mov	r2, r0
 8008274:	460b      	mov	r3, r1
 8008276:	4630      	mov	r0, r6
 8008278:	4639      	mov	r1, r7
 800827a:	f7f8 f807 	bl	800028c <__adddf3>
 800827e:	4606      	mov	r6, r0
 8008280:	460f      	mov	r7, r1
 8008282:	f7f8 fc69 	bl	8000b58 <__aeabi_d2iz>
 8008286:	2200      	movs	r2, #0
 8008288:	9000      	str	r0, [sp, #0]
 800828a:	2300      	movs	r3, #0
 800828c:	4630      	mov	r0, r6
 800828e:	4639      	mov	r1, r7
 8008290:	f7f8 fc24 	bl	8000adc <__aeabi_dcmplt>
 8008294:	b150      	cbz	r0, 80082ac <_dtoa_r+0x184>
 8008296:	9800      	ldr	r0, [sp, #0]
 8008298:	f7f8 f944 	bl	8000524 <__aeabi_i2d>
 800829c:	4632      	mov	r2, r6
 800829e:	463b      	mov	r3, r7
 80082a0:	f7f8 fc12 	bl	8000ac8 <__aeabi_dcmpeq>
 80082a4:	b910      	cbnz	r0, 80082ac <_dtoa_r+0x184>
 80082a6:	9b00      	ldr	r3, [sp, #0]
 80082a8:	3b01      	subs	r3, #1
 80082aa:	9300      	str	r3, [sp, #0]
 80082ac:	9b00      	ldr	r3, [sp, #0]
 80082ae:	2b16      	cmp	r3, #22
 80082b0:	d85a      	bhi.n	8008368 <_dtoa_r+0x240>
 80082b2:	9a00      	ldr	r2, [sp, #0]
 80082b4:	4b57      	ldr	r3, [pc, #348]	; (8008414 <_dtoa_r+0x2ec>)
 80082b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80082ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082be:	ec51 0b19 	vmov	r0, r1, d9
 80082c2:	f7f8 fc0b 	bl	8000adc <__aeabi_dcmplt>
 80082c6:	2800      	cmp	r0, #0
 80082c8:	d050      	beq.n	800836c <_dtoa_r+0x244>
 80082ca:	9b00      	ldr	r3, [sp, #0]
 80082cc:	3b01      	subs	r3, #1
 80082ce:	9300      	str	r3, [sp, #0]
 80082d0:	2300      	movs	r3, #0
 80082d2:	930b      	str	r3, [sp, #44]	; 0x2c
 80082d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80082d6:	1b5d      	subs	r5, r3, r5
 80082d8:	1e6b      	subs	r3, r5, #1
 80082da:	9305      	str	r3, [sp, #20]
 80082dc:	bf45      	ittet	mi
 80082de:	f1c5 0301 	rsbmi	r3, r5, #1
 80082e2:	9304      	strmi	r3, [sp, #16]
 80082e4:	2300      	movpl	r3, #0
 80082e6:	2300      	movmi	r3, #0
 80082e8:	bf4c      	ite	mi
 80082ea:	9305      	strmi	r3, [sp, #20]
 80082ec:	9304      	strpl	r3, [sp, #16]
 80082ee:	9b00      	ldr	r3, [sp, #0]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	db3d      	blt.n	8008370 <_dtoa_r+0x248>
 80082f4:	9b05      	ldr	r3, [sp, #20]
 80082f6:	9a00      	ldr	r2, [sp, #0]
 80082f8:	920a      	str	r2, [sp, #40]	; 0x28
 80082fa:	4413      	add	r3, r2
 80082fc:	9305      	str	r3, [sp, #20]
 80082fe:	2300      	movs	r3, #0
 8008300:	9307      	str	r3, [sp, #28]
 8008302:	9b06      	ldr	r3, [sp, #24]
 8008304:	2b09      	cmp	r3, #9
 8008306:	f200 8089 	bhi.w	800841c <_dtoa_r+0x2f4>
 800830a:	2b05      	cmp	r3, #5
 800830c:	bfc4      	itt	gt
 800830e:	3b04      	subgt	r3, #4
 8008310:	9306      	strgt	r3, [sp, #24]
 8008312:	9b06      	ldr	r3, [sp, #24]
 8008314:	f1a3 0302 	sub.w	r3, r3, #2
 8008318:	bfcc      	ite	gt
 800831a:	2500      	movgt	r5, #0
 800831c:	2501      	movle	r5, #1
 800831e:	2b03      	cmp	r3, #3
 8008320:	f200 8087 	bhi.w	8008432 <_dtoa_r+0x30a>
 8008324:	e8df f003 	tbb	[pc, r3]
 8008328:	59383a2d 	.word	0x59383a2d
 800832c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008330:	441d      	add	r5, r3
 8008332:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008336:	2b20      	cmp	r3, #32
 8008338:	bfc1      	itttt	gt
 800833a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800833e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008342:	fa0b f303 	lslgt.w	r3, fp, r3
 8008346:	fa26 f000 	lsrgt.w	r0, r6, r0
 800834a:	bfda      	itte	le
 800834c:	f1c3 0320 	rsble	r3, r3, #32
 8008350:	fa06 f003 	lslle.w	r0, r6, r3
 8008354:	4318      	orrgt	r0, r3
 8008356:	f7f8 f8d5 	bl	8000504 <__aeabi_ui2d>
 800835a:	2301      	movs	r3, #1
 800835c:	4606      	mov	r6, r0
 800835e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008362:	3d01      	subs	r5, #1
 8008364:	930e      	str	r3, [sp, #56]	; 0x38
 8008366:	e76a      	b.n	800823e <_dtoa_r+0x116>
 8008368:	2301      	movs	r3, #1
 800836a:	e7b2      	b.n	80082d2 <_dtoa_r+0x1aa>
 800836c:	900b      	str	r0, [sp, #44]	; 0x2c
 800836e:	e7b1      	b.n	80082d4 <_dtoa_r+0x1ac>
 8008370:	9b04      	ldr	r3, [sp, #16]
 8008372:	9a00      	ldr	r2, [sp, #0]
 8008374:	1a9b      	subs	r3, r3, r2
 8008376:	9304      	str	r3, [sp, #16]
 8008378:	4253      	negs	r3, r2
 800837a:	9307      	str	r3, [sp, #28]
 800837c:	2300      	movs	r3, #0
 800837e:	930a      	str	r3, [sp, #40]	; 0x28
 8008380:	e7bf      	b.n	8008302 <_dtoa_r+0x1da>
 8008382:	2300      	movs	r3, #0
 8008384:	9308      	str	r3, [sp, #32]
 8008386:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008388:	2b00      	cmp	r3, #0
 800838a:	dc55      	bgt.n	8008438 <_dtoa_r+0x310>
 800838c:	2301      	movs	r3, #1
 800838e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008392:	461a      	mov	r2, r3
 8008394:	9209      	str	r2, [sp, #36]	; 0x24
 8008396:	e00c      	b.n	80083b2 <_dtoa_r+0x28a>
 8008398:	2301      	movs	r3, #1
 800839a:	e7f3      	b.n	8008384 <_dtoa_r+0x25c>
 800839c:	2300      	movs	r3, #0
 800839e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80083a0:	9308      	str	r3, [sp, #32]
 80083a2:	9b00      	ldr	r3, [sp, #0]
 80083a4:	4413      	add	r3, r2
 80083a6:	9302      	str	r3, [sp, #8]
 80083a8:	3301      	adds	r3, #1
 80083aa:	2b01      	cmp	r3, #1
 80083ac:	9303      	str	r3, [sp, #12]
 80083ae:	bfb8      	it	lt
 80083b0:	2301      	movlt	r3, #1
 80083b2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80083b4:	2200      	movs	r2, #0
 80083b6:	6042      	str	r2, [r0, #4]
 80083b8:	2204      	movs	r2, #4
 80083ba:	f102 0614 	add.w	r6, r2, #20
 80083be:	429e      	cmp	r6, r3
 80083c0:	6841      	ldr	r1, [r0, #4]
 80083c2:	d93d      	bls.n	8008440 <_dtoa_r+0x318>
 80083c4:	4620      	mov	r0, r4
 80083c6:	f000 fdb1 	bl	8008f2c <_Balloc>
 80083ca:	9001      	str	r0, [sp, #4]
 80083cc:	2800      	cmp	r0, #0
 80083ce:	d13b      	bne.n	8008448 <_dtoa_r+0x320>
 80083d0:	4b11      	ldr	r3, [pc, #68]	; (8008418 <_dtoa_r+0x2f0>)
 80083d2:	4602      	mov	r2, r0
 80083d4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80083d8:	e6c0      	b.n	800815c <_dtoa_r+0x34>
 80083da:	2301      	movs	r3, #1
 80083dc:	e7df      	b.n	800839e <_dtoa_r+0x276>
 80083de:	bf00      	nop
 80083e0:	636f4361 	.word	0x636f4361
 80083e4:	3fd287a7 	.word	0x3fd287a7
 80083e8:	8b60c8b3 	.word	0x8b60c8b3
 80083ec:	3fc68a28 	.word	0x3fc68a28
 80083f0:	509f79fb 	.word	0x509f79fb
 80083f4:	3fd34413 	.word	0x3fd34413
 80083f8:	0800a255 	.word	0x0800a255
 80083fc:	0800a26c 	.word	0x0800a26c
 8008400:	7ff00000 	.word	0x7ff00000
 8008404:	0800a251 	.word	0x0800a251
 8008408:	0800a248 	.word	0x0800a248
 800840c:	0800a225 	.word	0x0800a225
 8008410:	3ff80000 	.word	0x3ff80000
 8008414:	0800a3c0 	.word	0x0800a3c0
 8008418:	0800a2c7 	.word	0x0800a2c7
 800841c:	2501      	movs	r5, #1
 800841e:	2300      	movs	r3, #0
 8008420:	9306      	str	r3, [sp, #24]
 8008422:	9508      	str	r5, [sp, #32]
 8008424:	f04f 33ff 	mov.w	r3, #4294967295
 8008428:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800842c:	2200      	movs	r2, #0
 800842e:	2312      	movs	r3, #18
 8008430:	e7b0      	b.n	8008394 <_dtoa_r+0x26c>
 8008432:	2301      	movs	r3, #1
 8008434:	9308      	str	r3, [sp, #32]
 8008436:	e7f5      	b.n	8008424 <_dtoa_r+0x2fc>
 8008438:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800843a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800843e:	e7b8      	b.n	80083b2 <_dtoa_r+0x28a>
 8008440:	3101      	adds	r1, #1
 8008442:	6041      	str	r1, [r0, #4]
 8008444:	0052      	lsls	r2, r2, #1
 8008446:	e7b8      	b.n	80083ba <_dtoa_r+0x292>
 8008448:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800844a:	9a01      	ldr	r2, [sp, #4]
 800844c:	601a      	str	r2, [r3, #0]
 800844e:	9b03      	ldr	r3, [sp, #12]
 8008450:	2b0e      	cmp	r3, #14
 8008452:	f200 809d 	bhi.w	8008590 <_dtoa_r+0x468>
 8008456:	2d00      	cmp	r5, #0
 8008458:	f000 809a 	beq.w	8008590 <_dtoa_r+0x468>
 800845c:	9b00      	ldr	r3, [sp, #0]
 800845e:	2b00      	cmp	r3, #0
 8008460:	dd32      	ble.n	80084c8 <_dtoa_r+0x3a0>
 8008462:	4ab7      	ldr	r2, [pc, #732]	; (8008740 <_dtoa_r+0x618>)
 8008464:	f003 030f 	and.w	r3, r3, #15
 8008468:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800846c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008470:	9b00      	ldr	r3, [sp, #0]
 8008472:	05d8      	lsls	r0, r3, #23
 8008474:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008478:	d516      	bpl.n	80084a8 <_dtoa_r+0x380>
 800847a:	4bb2      	ldr	r3, [pc, #712]	; (8008744 <_dtoa_r+0x61c>)
 800847c:	ec51 0b19 	vmov	r0, r1, d9
 8008480:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008484:	f7f8 f9e2 	bl	800084c <__aeabi_ddiv>
 8008488:	f007 070f 	and.w	r7, r7, #15
 800848c:	4682      	mov	sl, r0
 800848e:	468b      	mov	fp, r1
 8008490:	2503      	movs	r5, #3
 8008492:	4eac      	ldr	r6, [pc, #688]	; (8008744 <_dtoa_r+0x61c>)
 8008494:	b957      	cbnz	r7, 80084ac <_dtoa_r+0x384>
 8008496:	4642      	mov	r2, r8
 8008498:	464b      	mov	r3, r9
 800849a:	4650      	mov	r0, sl
 800849c:	4659      	mov	r1, fp
 800849e:	f7f8 f9d5 	bl	800084c <__aeabi_ddiv>
 80084a2:	4682      	mov	sl, r0
 80084a4:	468b      	mov	fp, r1
 80084a6:	e028      	b.n	80084fa <_dtoa_r+0x3d2>
 80084a8:	2502      	movs	r5, #2
 80084aa:	e7f2      	b.n	8008492 <_dtoa_r+0x36a>
 80084ac:	07f9      	lsls	r1, r7, #31
 80084ae:	d508      	bpl.n	80084c2 <_dtoa_r+0x39a>
 80084b0:	4640      	mov	r0, r8
 80084b2:	4649      	mov	r1, r9
 80084b4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80084b8:	f7f8 f89e 	bl	80005f8 <__aeabi_dmul>
 80084bc:	3501      	adds	r5, #1
 80084be:	4680      	mov	r8, r0
 80084c0:	4689      	mov	r9, r1
 80084c2:	107f      	asrs	r7, r7, #1
 80084c4:	3608      	adds	r6, #8
 80084c6:	e7e5      	b.n	8008494 <_dtoa_r+0x36c>
 80084c8:	f000 809b 	beq.w	8008602 <_dtoa_r+0x4da>
 80084cc:	9b00      	ldr	r3, [sp, #0]
 80084ce:	4f9d      	ldr	r7, [pc, #628]	; (8008744 <_dtoa_r+0x61c>)
 80084d0:	425e      	negs	r6, r3
 80084d2:	4b9b      	ldr	r3, [pc, #620]	; (8008740 <_dtoa_r+0x618>)
 80084d4:	f006 020f 	and.w	r2, r6, #15
 80084d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80084dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084e0:	ec51 0b19 	vmov	r0, r1, d9
 80084e4:	f7f8 f888 	bl	80005f8 <__aeabi_dmul>
 80084e8:	1136      	asrs	r6, r6, #4
 80084ea:	4682      	mov	sl, r0
 80084ec:	468b      	mov	fp, r1
 80084ee:	2300      	movs	r3, #0
 80084f0:	2502      	movs	r5, #2
 80084f2:	2e00      	cmp	r6, #0
 80084f4:	d17a      	bne.n	80085ec <_dtoa_r+0x4c4>
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d1d3      	bne.n	80084a2 <_dtoa_r+0x37a>
 80084fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	f000 8082 	beq.w	8008606 <_dtoa_r+0x4de>
 8008502:	4b91      	ldr	r3, [pc, #580]	; (8008748 <_dtoa_r+0x620>)
 8008504:	2200      	movs	r2, #0
 8008506:	4650      	mov	r0, sl
 8008508:	4659      	mov	r1, fp
 800850a:	f7f8 fae7 	bl	8000adc <__aeabi_dcmplt>
 800850e:	2800      	cmp	r0, #0
 8008510:	d079      	beq.n	8008606 <_dtoa_r+0x4de>
 8008512:	9b03      	ldr	r3, [sp, #12]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d076      	beq.n	8008606 <_dtoa_r+0x4de>
 8008518:	9b02      	ldr	r3, [sp, #8]
 800851a:	2b00      	cmp	r3, #0
 800851c:	dd36      	ble.n	800858c <_dtoa_r+0x464>
 800851e:	9b00      	ldr	r3, [sp, #0]
 8008520:	4650      	mov	r0, sl
 8008522:	4659      	mov	r1, fp
 8008524:	1e5f      	subs	r7, r3, #1
 8008526:	2200      	movs	r2, #0
 8008528:	4b88      	ldr	r3, [pc, #544]	; (800874c <_dtoa_r+0x624>)
 800852a:	f7f8 f865 	bl	80005f8 <__aeabi_dmul>
 800852e:	9e02      	ldr	r6, [sp, #8]
 8008530:	4682      	mov	sl, r0
 8008532:	468b      	mov	fp, r1
 8008534:	3501      	adds	r5, #1
 8008536:	4628      	mov	r0, r5
 8008538:	f7f7 fff4 	bl	8000524 <__aeabi_i2d>
 800853c:	4652      	mov	r2, sl
 800853e:	465b      	mov	r3, fp
 8008540:	f7f8 f85a 	bl	80005f8 <__aeabi_dmul>
 8008544:	4b82      	ldr	r3, [pc, #520]	; (8008750 <_dtoa_r+0x628>)
 8008546:	2200      	movs	r2, #0
 8008548:	f7f7 fea0 	bl	800028c <__adddf3>
 800854c:	46d0      	mov	r8, sl
 800854e:	46d9      	mov	r9, fp
 8008550:	4682      	mov	sl, r0
 8008552:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8008556:	2e00      	cmp	r6, #0
 8008558:	d158      	bne.n	800860c <_dtoa_r+0x4e4>
 800855a:	4b7e      	ldr	r3, [pc, #504]	; (8008754 <_dtoa_r+0x62c>)
 800855c:	2200      	movs	r2, #0
 800855e:	4640      	mov	r0, r8
 8008560:	4649      	mov	r1, r9
 8008562:	f7f7 fe91 	bl	8000288 <__aeabi_dsub>
 8008566:	4652      	mov	r2, sl
 8008568:	465b      	mov	r3, fp
 800856a:	4680      	mov	r8, r0
 800856c:	4689      	mov	r9, r1
 800856e:	f7f8 fad3 	bl	8000b18 <__aeabi_dcmpgt>
 8008572:	2800      	cmp	r0, #0
 8008574:	f040 8295 	bne.w	8008aa2 <_dtoa_r+0x97a>
 8008578:	4652      	mov	r2, sl
 800857a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800857e:	4640      	mov	r0, r8
 8008580:	4649      	mov	r1, r9
 8008582:	f7f8 faab 	bl	8000adc <__aeabi_dcmplt>
 8008586:	2800      	cmp	r0, #0
 8008588:	f040 8289 	bne.w	8008a9e <_dtoa_r+0x976>
 800858c:	ec5b ab19 	vmov	sl, fp, d9
 8008590:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008592:	2b00      	cmp	r3, #0
 8008594:	f2c0 8148 	blt.w	8008828 <_dtoa_r+0x700>
 8008598:	9a00      	ldr	r2, [sp, #0]
 800859a:	2a0e      	cmp	r2, #14
 800859c:	f300 8144 	bgt.w	8008828 <_dtoa_r+0x700>
 80085a0:	4b67      	ldr	r3, [pc, #412]	; (8008740 <_dtoa_r+0x618>)
 80085a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80085a6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80085aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	f280 80d5 	bge.w	800875c <_dtoa_r+0x634>
 80085b2:	9b03      	ldr	r3, [sp, #12]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	f300 80d1 	bgt.w	800875c <_dtoa_r+0x634>
 80085ba:	f040 826f 	bne.w	8008a9c <_dtoa_r+0x974>
 80085be:	4b65      	ldr	r3, [pc, #404]	; (8008754 <_dtoa_r+0x62c>)
 80085c0:	2200      	movs	r2, #0
 80085c2:	4640      	mov	r0, r8
 80085c4:	4649      	mov	r1, r9
 80085c6:	f7f8 f817 	bl	80005f8 <__aeabi_dmul>
 80085ca:	4652      	mov	r2, sl
 80085cc:	465b      	mov	r3, fp
 80085ce:	f7f8 fa99 	bl	8000b04 <__aeabi_dcmpge>
 80085d2:	9e03      	ldr	r6, [sp, #12]
 80085d4:	4637      	mov	r7, r6
 80085d6:	2800      	cmp	r0, #0
 80085d8:	f040 8245 	bne.w	8008a66 <_dtoa_r+0x93e>
 80085dc:	9d01      	ldr	r5, [sp, #4]
 80085de:	2331      	movs	r3, #49	; 0x31
 80085e0:	f805 3b01 	strb.w	r3, [r5], #1
 80085e4:	9b00      	ldr	r3, [sp, #0]
 80085e6:	3301      	adds	r3, #1
 80085e8:	9300      	str	r3, [sp, #0]
 80085ea:	e240      	b.n	8008a6e <_dtoa_r+0x946>
 80085ec:	07f2      	lsls	r2, r6, #31
 80085ee:	d505      	bpl.n	80085fc <_dtoa_r+0x4d4>
 80085f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80085f4:	f7f8 f800 	bl	80005f8 <__aeabi_dmul>
 80085f8:	3501      	adds	r5, #1
 80085fa:	2301      	movs	r3, #1
 80085fc:	1076      	asrs	r6, r6, #1
 80085fe:	3708      	adds	r7, #8
 8008600:	e777      	b.n	80084f2 <_dtoa_r+0x3ca>
 8008602:	2502      	movs	r5, #2
 8008604:	e779      	b.n	80084fa <_dtoa_r+0x3d2>
 8008606:	9f00      	ldr	r7, [sp, #0]
 8008608:	9e03      	ldr	r6, [sp, #12]
 800860a:	e794      	b.n	8008536 <_dtoa_r+0x40e>
 800860c:	9901      	ldr	r1, [sp, #4]
 800860e:	4b4c      	ldr	r3, [pc, #304]	; (8008740 <_dtoa_r+0x618>)
 8008610:	4431      	add	r1, r6
 8008612:	910d      	str	r1, [sp, #52]	; 0x34
 8008614:	9908      	ldr	r1, [sp, #32]
 8008616:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800861a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800861e:	2900      	cmp	r1, #0
 8008620:	d043      	beq.n	80086aa <_dtoa_r+0x582>
 8008622:	494d      	ldr	r1, [pc, #308]	; (8008758 <_dtoa_r+0x630>)
 8008624:	2000      	movs	r0, #0
 8008626:	f7f8 f911 	bl	800084c <__aeabi_ddiv>
 800862a:	4652      	mov	r2, sl
 800862c:	465b      	mov	r3, fp
 800862e:	f7f7 fe2b 	bl	8000288 <__aeabi_dsub>
 8008632:	9d01      	ldr	r5, [sp, #4]
 8008634:	4682      	mov	sl, r0
 8008636:	468b      	mov	fp, r1
 8008638:	4649      	mov	r1, r9
 800863a:	4640      	mov	r0, r8
 800863c:	f7f8 fa8c 	bl	8000b58 <__aeabi_d2iz>
 8008640:	4606      	mov	r6, r0
 8008642:	f7f7 ff6f 	bl	8000524 <__aeabi_i2d>
 8008646:	4602      	mov	r2, r0
 8008648:	460b      	mov	r3, r1
 800864a:	4640      	mov	r0, r8
 800864c:	4649      	mov	r1, r9
 800864e:	f7f7 fe1b 	bl	8000288 <__aeabi_dsub>
 8008652:	3630      	adds	r6, #48	; 0x30
 8008654:	f805 6b01 	strb.w	r6, [r5], #1
 8008658:	4652      	mov	r2, sl
 800865a:	465b      	mov	r3, fp
 800865c:	4680      	mov	r8, r0
 800865e:	4689      	mov	r9, r1
 8008660:	f7f8 fa3c 	bl	8000adc <__aeabi_dcmplt>
 8008664:	2800      	cmp	r0, #0
 8008666:	d163      	bne.n	8008730 <_dtoa_r+0x608>
 8008668:	4642      	mov	r2, r8
 800866a:	464b      	mov	r3, r9
 800866c:	4936      	ldr	r1, [pc, #216]	; (8008748 <_dtoa_r+0x620>)
 800866e:	2000      	movs	r0, #0
 8008670:	f7f7 fe0a 	bl	8000288 <__aeabi_dsub>
 8008674:	4652      	mov	r2, sl
 8008676:	465b      	mov	r3, fp
 8008678:	f7f8 fa30 	bl	8000adc <__aeabi_dcmplt>
 800867c:	2800      	cmp	r0, #0
 800867e:	f040 80b5 	bne.w	80087ec <_dtoa_r+0x6c4>
 8008682:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008684:	429d      	cmp	r5, r3
 8008686:	d081      	beq.n	800858c <_dtoa_r+0x464>
 8008688:	4b30      	ldr	r3, [pc, #192]	; (800874c <_dtoa_r+0x624>)
 800868a:	2200      	movs	r2, #0
 800868c:	4650      	mov	r0, sl
 800868e:	4659      	mov	r1, fp
 8008690:	f7f7 ffb2 	bl	80005f8 <__aeabi_dmul>
 8008694:	4b2d      	ldr	r3, [pc, #180]	; (800874c <_dtoa_r+0x624>)
 8008696:	4682      	mov	sl, r0
 8008698:	468b      	mov	fp, r1
 800869a:	4640      	mov	r0, r8
 800869c:	4649      	mov	r1, r9
 800869e:	2200      	movs	r2, #0
 80086a0:	f7f7 ffaa 	bl	80005f8 <__aeabi_dmul>
 80086a4:	4680      	mov	r8, r0
 80086a6:	4689      	mov	r9, r1
 80086a8:	e7c6      	b.n	8008638 <_dtoa_r+0x510>
 80086aa:	4650      	mov	r0, sl
 80086ac:	4659      	mov	r1, fp
 80086ae:	f7f7 ffa3 	bl	80005f8 <__aeabi_dmul>
 80086b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80086b4:	9d01      	ldr	r5, [sp, #4]
 80086b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80086b8:	4682      	mov	sl, r0
 80086ba:	468b      	mov	fp, r1
 80086bc:	4649      	mov	r1, r9
 80086be:	4640      	mov	r0, r8
 80086c0:	f7f8 fa4a 	bl	8000b58 <__aeabi_d2iz>
 80086c4:	4606      	mov	r6, r0
 80086c6:	f7f7 ff2d 	bl	8000524 <__aeabi_i2d>
 80086ca:	3630      	adds	r6, #48	; 0x30
 80086cc:	4602      	mov	r2, r0
 80086ce:	460b      	mov	r3, r1
 80086d0:	4640      	mov	r0, r8
 80086d2:	4649      	mov	r1, r9
 80086d4:	f7f7 fdd8 	bl	8000288 <__aeabi_dsub>
 80086d8:	f805 6b01 	strb.w	r6, [r5], #1
 80086dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80086de:	429d      	cmp	r5, r3
 80086e0:	4680      	mov	r8, r0
 80086e2:	4689      	mov	r9, r1
 80086e4:	f04f 0200 	mov.w	r2, #0
 80086e8:	d124      	bne.n	8008734 <_dtoa_r+0x60c>
 80086ea:	4b1b      	ldr	r3, [pc, #108]	; (8008758 <_dtoa_r+0x630>)
 80086ec:	4650      	mov	r0, sl
 80086ee:	4659      	mov	r1, fp
 80086f0:	f7f7 fdcc 	bl	800028c <__adddf3>
 80086f4:	4602      	mov	r2, r0
 80086f6:	460b      	mov	r3, r1
 80086f8:	4640      	mov	r0, r8
 80086fa:	4649      	mov	r1, r9
 80086fc:	f7f8 fa0c 	bl	8000b18 <__aeabi_dcmpgt>
 8008700:	2800      	cmp	r0, #0
 8008702:	d173      	bne.n	80087ec <_dtoa_r+0x6c4>
 8008704:	4652      	mov	r2, sl
 8008706:	465b      	mov	r3, fp
 8008708:	4913      	ldr	r1, [pc, #76]	; (8008758 <_dtoa_r+0x630>)
 800870a:	2000      	movs	r0, #0
 800870c:	f7f7 fdbc 	bl	8000288 <__aeabi_dsub>
 8008710:	4602      	mov	r2, r0
 8008712:	460b      	mov	r3, r1
 8008714:	4640      	mov	r0, r8
 8008716:	4649      	mov	r1, r9
 8008718:	f7f8 f9e0 	bl	8000adc <__aeabi_dcmplt>
 800871c:	2800      	cmp	r0, #0
 800871e:	f43f af35 	beq.w	800858c <_dtoa_r+0x464>
 8008722:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008724:	1e6b      	subs	r3, r5, #1
 8008726:	930f      	str	r3, [sp, #60]	; 0x3c
 8008728:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800872c:	2b30      	cmp	r3, #48	; 0x30
 800872e:	d0f8      	beq.n	8008722 <_dtoa_r+0x5fa>
 8008730:	9700      	str	r7, [sp, #0]
 8008732:	e049      	b.n	80087c8 <_dtoa_r+0x6a0>
 8008734:	4b05      	ldr	r3, [pc, #20]	; (800874c <_dtoa_r+0x624>)
 8008736:	f7f7 ff5f 	bl	80005f8 <__aeabi_dmul>
 800873a:	4680      	mov	r8, r0
 800873c:	4689      	mov	r9, r1
 800873e:	e7bd      	b.n	80086bc <_dtoa_r+0x594>
 8008740:	0800a3c0 	.word	0x0800a3c0
 8008744:	0800a398 	.word	0x0800a398
 8008748:	3ff00000 	.word	0x3ff00000
 800874c:	40240000 	.word	0x40240000
 8008750:	401c0000 	.word	0x401c0000
 8008754:	40140000 	.word	0x40140000
 8008758:	3fe00000 	.word	0x3fe00000
 800875c:	9d01      	ldr	r5, [sp, #4]
 800875e:	4656      	mov	r6, sl
 8008760:	465f      	mov	r7, fp
 8008762:	4642      	mov	r2, r8
 8008764:	464b      	mov	r3, r9
 8008766:	4630      	mov	r0, r6
 8008768:	4639      	mov	r1, r7
 800876a:	f7f8 f86f 	bl	800084c <__aeabi_ddiv>
 800876e:	f7f8 f9f3 	bl	8000b58 <__aeabi_d2iz>
 8008772:	4682      	mov	sl, r0
 8008774:	f7f7 fed6 	bl	8000524 <__aeabi_i2d>
 8008778:	4642      	mov	r2, r8
 800877a:	464b      	mov	r3, r9
 800877c:	f7f7 ff3c 	bl	80005f8 <__aeabi_dmul>
 8008780:	4602      	mov	r2, r0
 8008782:	460b      	mov	r3, r1
 8008784:	4630      	mov	r0, r6
 8008786:	4639      	mov	r1, r7
 8008788:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800878c:	f7f7 fd7c 	bl	8000288 <__aeabi_dsub>
 8008790:	f805 6b01 	strb.w	r6, [r5], #1
 8008794:	9e01      	ldr	r6, [sp, #4]
 8008796:	9f03      	ldr	r7, [sp, #12]
 8008798:	1bae      	subs	r6, r5, r6
 800879a:	42b7      	cmp	r7, r6
 800879c:	4602      	mov	r2, r0
 800879e:	460b      	mov	r3, r1
 80087a0:	d135      	bne.n	800880e <_dtoa_r+0x6e6>
 80087a2:	f7f7 fd73 	bl	800028c <__adddf3>
 80087a6:	4642      	mov	r2, r8
 80087a8:	464b      	mov	r3, r9
 80087aa:	4606      	mov	r6, r0
 80087ac:	460f      	mov	r7, r1
 80087ae:	f7f8 f9b3 	bl	8000b18 <__aeabi_dcmpgt>
 80087b2:	b9d0      	cbnz	r0, 80087ea <_dtoa_r+0x6c2>
 80087b4:	4642      	mov	r2, r8
 80087b6:	464b      	mov	r3, r9
 80087b8:	4630      	mov	r0, r6
 80087ba:	4639      	mov	r1, r7
 80087bc:	f7f8 f984 	bl	8000ac8 <__aeabi_dcmpeq>
 80087c0:	b110      	cbz	r0, 80087c8 <_dtoa_r+0x6a0>
 80087c2:	f01a 0f01 	tst.w	sl, #1
 80087c6:	d110      	bne.n	80087ea <_dtoa_r+0x6c2>
 80087c8:	4620      	mov	r0, r4
 80087ca:	ee18 1a10 	vmov	r1, s16
 80087ce:	f000 fbed 	bl	8008fac <_Bfree>
 80087d2:	2300      	movs	r3, #0
 80087d4:	9800      	ldr	r0, [sp, #0]
 80087d6:	702b      	strb	r3, [r5, #0]
 80087d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80087da:	3001      	adds	r0, #1
 80087dc:	6018      	str	r0, [r3, #0]
 80087de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	f43f acf1 	beq.w	80081c8 <_dtoa_r+0xa0>
 80087e6:	601d      	str	r5, [r3, #0]
 80087e8:	e4ee      	b.n	80081c8 <_dtoa_r+0xa0>
 80087ea:	9f00      	ldr	r7, [sp, #0]
 80087ec:	462b      	mov	r3, r5
 80087ee:	461d      	mov	r5, r3
 80087f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80087f4:	2a39      	cmp	r2, #57	; 0x39
 80087f6:	d106      	bne.n	8008806 <_dtoa_r+0x6de>
 80087f8:	9a01      	ldr	r2, [sp, #4]
 80087fa:	429a      	cmp	r2, r3
 80087fc:	d1f7      	bne.n	80087ee <_dtoa_r+0x6c6>
 80087fe:	9901      	ldr	r1, [sp, #4]
 8008800:	2230      	movs	r2, #48	; 0x30
 8008802:	3701      	adds	r7, #1
 8008804:	700a      	strb	r2, [r1, #0]
 8008806:	781a      	ldrb	r2, [r3, #0]
 8008808:	3201      	adds	r2, #1
 800880a:	701a      	strb	r2, [r3, #0]
 800880c:	e790      	b.n	8008730 <_dtoa_r+0x608>
 800880e:	4ba6      	ldr	r3, [pc, #664]	; (8008aa8 <_dtoa_r+0x980>)
 8008810:	2200      	movs	r2, #0
 8008812:	f7f7 fef1 	bl	80005f8 <__aeabi_dmul>
 8008816:	2200      	movs	r2, #0
 8008818:	2300      	movs	r3, #0
 800881a:	4606      	mov	r6, r0
 800881c:	460f      	mov	r7, r1
 800881e:	f7f8 f953 	bl	8000ac8 <__aeabi_dcmpeq>
 8008822:	2800      	cmp	r0, #0
 8008824:	d09d      	beq.n	8008762 <_dtoa_r+0x63a>
 8008826:	e7cf      	b.n	80087c8 <_dtoa_r+0x6a0>
 8008828:	9a08      	ldr	r2, [sp, #32]
 800882a:	2a00      	cmp	r2, #0
 800882c:	f000 80d7 	beq.w	80089de <_dtoa_r+0x8b6>
 8008830:	9a06      	ldr	r2, [sp, #24]
 8008832:	2a01      	cmp	r2, #1
 8008834:	f300 80ba 	bgt.w	80089ac <_dtoa_r+0x884>
 8008838:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800883a:	2a00      	cmp	r2, #0
 800883c:	f000 80b2 	beq.w	80089a4 <_dtoa_r+0x87c>
 8008840:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008844:	9e07      	ldr	r6, [sp, #28]
 8008846:	9d04      	ldr	r5, [sp, #16]
 8008848:	9a04      	ldr	r2, [sp, #16]
 800884a:	441a      	add	r2, r3
 800884c:	9204      	str	r2, [sp, #16]
 800884e:	9a05      	ldr	r2, [sp, #20]
 8008850:	2101      	movs	r1, #1
 8008852:	441a      	add	r2, r3
 8008854:	4620      	mov	r0, r4
 8008856:	9205      	str	r2, [sp, #20]
 8008858:	f000 fc60 	bl	800911c <__i2b>
 800885c:	4607      	mov	r7, r0
 800885e:	2d00      	cmp	r5, #0
 8008860:	dd0c      	ble.n	800887c <_dtoa_r+0x754>
 8008862:	9b05      	ldr	r3, [sp, #20]
 8008864:	2b00      	cmp	r3, #0
 8008866:	dd09      	ble.n	800887c <_dtoa_r+0x754>
 8008868:	42ab      	cmp	r3, r5
 800886a:	9a04      	ldr	r2, [sp, #16]
 800886c:	bfa8      	it	ge
 800886e:	462b      	movge	r3, r5
 8008870:	1ad2      	subs	r2, r2, r3
 8008872:	9204      	str	r2, [sp, #16]
 8008874:	9a05      	ldr	r2, [sp, #20]
 8008876:	1aed      	subs	r5, r5, r3
 8008878:	1ad3      	subs	r3, r2, r3
 800887a:	9305      	str	r3, [sp, #20]
 800887c:	9b07      	ldr	r3, [sp, #28]
 800887e:	b31b      	cbz	r3, 80088c8 <_dtoa_r+0x7a0>
 8008880:	9b08      	ldr	r3, [sp, #32]
 8008882:	2b00      	cmp	r3, #0
 8008884:	f000 80af 	beq.w	80089e6 <_dtoa_r+0x8be>
 8008888:	2e00      	cmp	r6, #0
 800888a:	dd13      	ble.n	80088b4 <_dtoa_r+0x78c>
 800888c:	4639      	mov	r1, r7
 800888e:	4632      	mov	r2, r6
 8008890:	4620      	mov	r0, r4
 8008892:	f000 fd03 	bl	800929c <__pow5mult>
 8008896:	ee18 2a10 	vmov	r2, s16
 800889a:	4601      	mov	r1, r0
 800889c:	4607      	mov	r7, r0
 800889e:	4620      	mov	r0, r4
 80088a0:	f000 fc52 	bl	8009148 <__multiply>
 80088a4:	ee18 1a10 	vmov	r1, s16
 80088a8:	4680      	mov	r8, r0
 80088aa:	4620      	mov	r0, r4
 80088ac:	f000 fb7e 	bl	8008fac <_Bfree>
 80088b0:	ee08 8a10 	vmov	s16, r8
 80088b4:	9b07      	ldr	r3, [sp, #28]
 80088b6:	1b9a      	subs	r2, r3, r6
 80088b8:	d006      	beq.n	80088c8 <_dtoa_r+0x7a0>
 80088ba:	ee18 1a10 	vmov	r1, s16
 80088be:	4620      	mov	r0, r4
 80088c0:	f000 fcec 	bl	800929c <__pow5mult>
 80088c4:	ee08 0a10 	vmov	s16, r0
 80088c8:	2101      	movs	r1, #1
 80088ca:	4620      	mov	r0, r4
 80088cc:	f000 fc26 	bl	800911c <__i2b>
 80088d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	4606      	mov	r6, r0
 80088d6:	f340 8088 	ble.w	80089ea <_dtoa_r+0x8c2>
 80088da:	461a      	mov	r2, r3
 80088dc:	4601      	mov	r1, r0
 80088de:	4620      	mov	r0, r4
 80088e0:	f000 fcdc 	bl	800929c <__pow5mult>
 80088e4:	9b06      	ldr	r3, [sp, #24]
 80088e6:	2b01      	cmp	r3, #1
 80088e8:	4606      	mov	r6, r0
 80088ea:	f340 8081 	ble.w	80089f0 <_dtoa_r+0x8c8>
 80088ee:	f04f 0800 	mov.w	r8, #0
 80088f2:	6933      	ldr	r3, [r6, #16]
 80088f4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80088f8:	6918      	ldr	r0, [r3, #16]
 80088fa:	f000 fbbf 	bl	800907c <__hi0bits>
 80088fe:	f1c0 0020 	rsb	r0, r0, #32
 8008902:	9b05      	ldr	r3, [sp, #20]
 8008904:	4418      	add	r0, r3
 8008906:	f010 001f 	ands.w	r0, r0, #31
 800890a:	f000 8092 	beq.w	8008a32 <_dtoa_r+0x90a>
 800890e:	f1c0 0320 	rsb	r3, r0, #32
 8008912:	2b04      	cmp	r3, #4
 8008914:	f340 808a 	ble.w	8008a2c <_dtoa_r+0x904>
 8008918:	f1c0 001c 	rsb	r0, r0, #28
 800891c:	9b04      	ldr	r3, [sp, #16]
 800891e:	4403      	add	r3, r0
 8008920:	9304      	str	r3, [sp, #16]
 8008922:	9b05      	ldr	r3, [sp, #20]
 8008924:	4403      	add	r3, r0
 8008926:	4405      	add	r5, r0
 8008928:	9305      	str	r3, [sp, #20]
 800892a:	9b04      	ldr	r3, [sp, #16]
 800892c:	2b00      	cmp	r3, #0
 800892e:	dd07      	ble.n	8008940 <_dtoa_r+0x818>
 8008930:	ee18 1a10 	vmov	r1, s16
 8008934:	461a      	mov	r2, r3
 8008936:	4620      	mov	r0, r4
 8008938:	f000 fd0a 	bl	8009350 <__lshift>
 800893c:	ee08 0a10 	vmov	s16, r0
 8008940:	9b05      	ldr	r3, [sp, #20]
 8008942:	2b00      	cmp	r3, #0
 8008944:	dd05      	ble.n	8008952 <_dtoa_r+0x82a>
 8008946:	4631      	mov	r1, r6
 8008948:	461a      	mov	r2, r3
 800894a:	4620      	mov	r0, r4
 800894c:	f000 fd00 	bl	8009350 <__lshift>
 8008950:	4606      	mov	r6, r0
 8008952:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008954:	2b00      	cmp	r3, #0
 8008956:	d06e      	beq.n	8008a36 <_dtoa_r+0x90e>
 8008958:	ee18 0a10 	vmov	r0, s16
 800895c:	4631      	mov	r1, r6
 800895e:	f000 fd67 	bl	8009430 <__mcmp>
 8008962:	2800      	cmp	r0, #0
 8008964:	da67      	bge.n	8008a36 <_dtoa_r+0x90e>
 8008966:	9b00      	ldr	r3, [sp, #0]
 8008968:	3b01      	subs	r3, #1
 800896a:	ee18 1a10 	vmov	r1, s16
 800896e:	9300      	str	r3, [sp, #0]
 8008970:	220a      	movs	r2, #10
 8008972:	2300      	movs	r3, #0
 8008974:	4620      	mov	r0, r4
 8008976:	f000 fb3b 	bl	8008ff0 <__multadd>
 800897a:	9b08      	ldr	r3, [sp, #32]
 800897c:	ee08 0a10 	vmov	s16, r0
 8008980:	2b00      	cmp	r3, #0
 8008982:	f000 81b1 	beq.w	8008ce8 <_dtoa_r+0xbc0>
 8008986:	2300      	movs	r3, #0
 8008988:	4639      	mov	r1, r7
 800898a:	220a      	movs	r2, #10
 800898c:	4620      	mov	r0, r4
 800898e:	f000 fb2f 	bl	8008ff0 <__multadd>
 8008992:	9b02      	ldr	r3, [sp, #8]
 8008994:	2b00      	cmp	r3, #0
 8008996:	4607      	mov	r7, r0
 8008998:	f300 808e 	bgt.w	8008ab8 <_dtoa_r+0x990>
 800899c:	9b06      	ldr	r3, [sp, #24]
 800899e:	2b02      	cmp	r3, #2
 80089a0:	dc51      	bgt.n	8008a46 <_dtoa_r+0x91e>
 80089a2:	e089      	b.n	8008ab8 <_dtoa_r+0x990>
 80089a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80089a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80089aa:	e74b      	b.n	8008844 <_dtoa_r+0x71c>
 80089ac:	9b03      	ldr	r3, [sp, #12]
 80089ae:	1e5e      	subs	r6, r3, #1
 80089b0:	9b07      	ldr	r3, [sp, #28]
 80089b2:	42b3      	cmp	r3, r6
 80089b4:	bfbf      	itttt	lt
 80089b6:	9b07      	ldrlt	r3, [sp, #28]
 80089b8:	9607      	strlt	r6, [sp, #28]
 80089ba:	1af2      	sublt	r2, r6, r3
 80089bc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80089be:	bfb6      	itet	lt
 80089c0:	189b      	addlt	r3, r3, r2
 80089c2:	1b9e      	subge	r6, r3, r6
 80089c4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80089c6:	9b03      	ldr	r3, [sp, #12]
 80089c8:	bfb8      	it	lt
 80089ca:	2600      	movlt	r6, #0
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	bfb7      	itett	lt
 80089d0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80089d4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80089d8:	1a9d      	sublt	r5, r3, r2
 80089da:	2300      	movlt	r3, #0
 80089dc:	e734      	b.n	8008848 <_dtoa_r+0x720>
 80089de:	9e07      	ldr	r6, [sp, #28]
 80089e0:	9d04      	ldr	r5, [sp, #16]
 80089e2:	9f08      	ldr	r7, [sp, #32]
 80089e4:	e73b      	b.n	800885e <_dtoa_r+0x736>
 80089e6:	9a07      	ldr	r2, [sp, #28]
 80089e8:	e767      	b.n	80088ba <_dtoa_r+0x792>
 80089ea:	9b06      	ldr	r3, [sp, #24]
 80089ec:	2b01      	cmp	r3, #1
 80089ee:	dc18      	bgt.n	8008a22 <_dtoa_r+0x8fa>
 80089f0:	f1ba 0f00 	cmp.w	sl, #0
 80089f4:	d115      	bne.n	8008a22 <_dtoa_r+0x8fa>
 80089f6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80089fa:	b993      	cbnz	r3, 8008a22 <_dtoa_r+0x8fa>
 80089fc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008a00:	0d1b      	lsrs	r3, r3, #20
 8008a02:	051b      	lsls	r3, r3, #20
 8008a04:	b183      	cbz	r3, 8008a28 <_dtoa_r+0x900>
 8008a06:	9b04      	ldr	r3, [sp, #16]
 8008a08:	3301      	adds	r3, #1
 8008a0a:	9304      	str	r3, [sp, #16]
 8008a0c:	9b05      	ldr	r3, [sp, #20]
 8008a0e:	3301      	adds	r3, #1
 8008a10:	9305      	str	r3, [sp, #20]
 8008a12:	f04f 0801 	mov.w	r8, #1
 8008a16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	f47f af6a 	bne.w	80088f2 <_dtoa_r+0x7ca>
 8008a1e:	2001      	movs	r0, #1
 8008a20:	e76f      	b.n	8008902 <_dtoa_r+0x7da>
 8008a22:	f04f 0800 	mov.w	r8, #0
 8008a26:	e7f6      	b.n	8008a16 <_dtoa_r+0x8ee>
 8008a28:	4698      	mov	r8, r3
 8008a2a:	e7f4      	b.n	8008a16 <_dtoa_r+0x8ee>
 8008a2c:	f43f af7d 	beq.w	800892a <_dtoa_r+0x802>
 8008a30:	4618      	mov	r0, r3
 8008a32:	301c      	adds	r0, #28
 8008a34:	e772      	b.n	800891c <_dtoa_r+0x7f4>
 8008a36:	9b03      	ldr	r3, [sp, #12]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	dc37      	bgt.n	8008aac <_dtoa_r+0x984>
 8008a3c:	9b06      	ldr	r3, [sp, #24]
 8008a3e:	2b02      	cmp	r3, #2
 8008a40:	dd34      	ble.n	8008aac <_dtoa_r+0x984>
 8008a42:	9b03      	ldr	r3, [sp, #12]
 8008a44:	9302      	str	r3, [sp, #8]
 8008a46:	9b02      	ldr	r3, [sp, #8]
 8008a48:	b96b      	cbnz	r3, 8008a66 <_dtoa_r+0x93e>
 8008a4a:	4631      	mov	r1, r6
 8008a4c:	2205      	movs	r2, #5
 8008a4e:	4620      	mov	r0, r4
 8008a50:	f000 face 	bl	8008ff0 <__multadd>
 8008a54:	4601      	mov	r1, r0
 8008a56:	4606      	mov	r6, r0
 8008a58:	ee18 0a10 	vmov	r0, s16
 8008a5c:	f000 fce8 	bl	8009430 <__mcmp>
 8008a60:	2800      	cmp	r0, #0
 8008a62:	f73f adbb 	bgt.w	80085dc <_dtoa_r+0x4b4>
 8008a66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a68:	9d01      	ldr	r5, [sp, #4]
 8008a6a:	43db      	mvns	r3, r3
 8008a6c:	9300      	str	r3, [sp, #0]
 8008a6e:	f04f 0800 	mov.w	r8, #0
 8008a72:	4631      	mov	r1, r6
 8008a74:	4620      	mov	r0, r4
 8008a76:	f000 fa99 	bl	8008fac <_Bfree>
 8008a7a:	2f00      	cmp	r7, #0
 8008a7c:	f43f aea4 	beq.w	80087c8 <_dtoa_r+0x6a0>
 8008a80:	f1b8 0f00 	cmp.w	r8, #0
 8008a84:	d005      	beq.n	8008a92 <_dtoa_r+0x96a>
 8008a86:	45b8      	cmp	r8, r7
 8008a88:	d003      	beq.n	8008a92 <_dtoa_r+0x96a>
 8008a8a:	4641      	mov	r1, r8
 8008a8c:	4620      	mov	r0, r4
 8008a8e:	f000 fa8d 	bl	8008fac <_Bfree>
 8008a92:	4639      	mov	r1, r7
 8008a94:	4620      	mov	r0, r4
 8008a96:	f000 fa89 	bl	8008fac <_Bfree>
 8008a9a:	e695      	b.n	80087c8 <_dtoa_r+0x6a0>
 8008a9c:	2600      	movs	r6, #0
 8008a9e:	4637      	mov	r7, r6
 8008aa0:	e7e1      	b.n	8008a66 <_dtoa_r+0x93e>
 8008aa2:	9700      	str	r7, [sp, #0]
 8008aa4:	4637      	mov	r7, r6
 8008aa6:	e599      	b.n	80085dc <_dtoa_r+0x4b4>
 8008aa8:	40240000 	.word	0x40240000
 8008aac:	9b08      	ldr	r3, [sp, #32]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	f000 80ca 	beq.w	8008c48 <_dtoa_r+0xb20>
 8008ab4:	9b03      	ldr	r3, [sp, #12]
 8008ab6:	9302      	str	r3, [sp, #8]
 8008ab8:	2d00      	cmp	r5, #0
 8008aba:	dd05      	ble.n	8008ac8 <_dtoa_r+0x9a0>
 8008abc:	4639      	mov	r1, r7
 8008abe:	462a      	mov	r2, r5
 8008ac0:	4620      	mov	r0, r4
 8008ac2:	f000 fc45 	bl	8009350 <__lshift>
 8008ac6:	4607      	mov	r7, r0
 8008ac8:	f1b8 0f00 	cmp.w	r8, #0
 8008acc:	d05b      	beq.n	8008b86 <_dtoa_r+0xa5e>
 8008ace:	6879      	ldr	r1, [r7, #4]
 8008ad0:	4620      	mov	r0, r4
 8008ad2:	f000 fa2b 	bl	8008f2c <_Balloc>
 8008ad6:	4605      	mov	r5, r0
 8008ad8:	b928      	cbnz	r0, 8008ae6 <_dtoa_r+0x9be>
 8008ada:	4b87      	ldr	r3, [pc, #540]	; (8008cf8 <_dtoa_r+0xbd0>)
 8008adc:	4602      	mov	r2, r0
 8008ade:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008ae2:	f7ff bb3b 	b.w	800815c <_dtoa_r+0x34>
 8008ae6:	693a      	ldr	r2, [r7, #16]
 8008ae8:	3202      	adds	r2, #2
 8008aea:	0092      	lsls	r2, r2, #2
 8008aec:	f107 010c 	add.w	r1, r7, #12
 8008af0:	300c      	adds	r0, #12
 8008af2:	f000 fa0d 	bl	8008f10 <memcpy>
 8008af6:	2201      	movs	r2, #1
 8008af8:	4629      	mov	r1, r5
 8008afa:	4620      	mov	r0, r4
 8008afc:	f000 fc28 	bl	8009350 <__lshift>
 8008b00:	9b01      	ldr	r3, [sp, #4]
 8008b02:	f103 0901 	add.w	r9, r3, #1
 8008b06:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008b0a:	4413      	add	r3, r2
 8008b0c:	9305      	str	r3, [sp, #20]
 8008b0e:	f00a 0301 	and.w	r3, sl, #1
 8008b12:	46b8      	mov	r8, r7
 8008b14:	9304      	str	r3, [sp, #16]
 8008b16:	4607      	mov	r7, r0
 8008b18:	4631      	mov	r1, r6
 8008b1a:	ee18 0a10 	vmov	r0, s16
 8008b1e:	f7ff fa75 	bl	800800c <quorem>
 8008b22:	4641      	mov	r1, r8
 8008b24:	9002      	str	r0, [sp, #8]
 8008b26:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008b2a:	ee18 0a10 	vmov	r0, s16
 8008b2e:	f000 fc7f 	bl	8009430 <__mcmp>
 8008b32:	463a      	mov	r2, r7
 8008b34:	9003      	str	r0, [sp, #12]
 8008b36:	4631      	mov	r1, r6
 8008b38:	4620      	mov	r0, r4
 8008b3a:	f000 fc95 	bl	8009468 <__mdiff>
 8008b3e:	68c2      	ldr	r2, [r0, #12]
 8008b40:	f109 3bff 	add.w	fp, r9, #4294967295
 8008b44:	4605      	mov	r5, r0
 8008b46:	bb02      	cbnz	r2, 8008b8a <_dtoa_r+0xa62>
 8008b48:	4601      	mov	r1, r0
 8008b4a:	ee18 0a10 	vmov	r0, s16
 8008b4e:	f000 fc6f 	bl	8009430 <__mcmp>
 8008b52:	4602      	mov	r2, r0
 8008b54:	4629      	mov	r1, r5
 8008b56:	4620      	mov	r0, r4
 8008b58:	9207      	str	r2, [sp, #28]
 8008b5a:	f000 fa27 	bl	8008fac <_Bfree>
 8008b5e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008b62:	ea43 0102 	orr.w	r1, r3, r2
 8008b66:	9b04      	ldr	r3, [sp, #16]
 8008b68:	430b      	orrs	r3, r1
 8008b6a:	464d      	mov	r5, r9
 8008b6c:	d10f      	bne.n	8008b8e <_dtoa_r+0xa66>
 8008b6e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008b72:	d02a      	beq.n	8008bca <_dtoa_r+0xaa2>
 8008b74:	9b03      	ldr	r3, [sp, #12]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	dd02      	ble.n	8008b80 <_dtoa_r+0xa58>
 8008b7a:	9b02      	ldr	r3, [sp, #8]
 8008b7c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008b80:	f88b a000 	strb.w	sl, [fp]
 8008b84:	e775      	b.n	8008a72 <_dtoa_r+0x94a>
 8008b86:	4638      	mov	r0, r7
 8008b88:	e7ba      	b.n	8008b00 <_dtoa_r+0x9d8>
 8008b8a:	2201      	movs	r2, #1
 8008b8c:	e7e2      	b.n	8008b54 <_dtoa_r+0xa2c>
 8008b8e:	9b03      	ldr	r3, [sp, #12]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	db04      	blt.n	8008b9e <_dtoa_r+0xa76>
 8008b94:	9906      	ldr	r1, [sp, #24]
 8008b96:	430b      	orrs	r3, r1
 8008b98:	9904      	ldr	r1, [sp, #16]
 8008b9a:	430b      	orrs	r3, r1
 8008b9c:	d122      	bne.n	8008be4 <_dtoa_r+0xabc>
 8008b9e:	2a00      	cmp	r2, #0
 8008ba0:	ddee      	ble.n	8008b80 <_dtoa_r+0xa58>
 8008ba2:	ee18 1a10 	vmov	r1, s16
 8008ba6:	2201      	movs	r2, #1
 8008ba8:	4620      	mov	r0, r4
 8008baa:	f000 fbd1 	bl	8009350 <__lshift>
 8008bae:	4631      	mov	r1, r6
 8008bb0:	ee08 0a10 	vmov	s16, r0
 8008bb4:	f000 fc3c 	bl	8009430 <__mcmp>
 8008bb8:	2800      	cmp	r0, #0
 8008bba:	dc03      	bgt.n	8008bc4 <_dtoa_r+0xa9c>
 8008bbc:	d1e0      	bne.n	8008b80 <_dtoa_r+0xa58>
 8008bbe:	f01a 0f01 	tst.w	sl, #1
 8008bc2:	d0dd      	beq.n	8008b80 <_dtoa_r+0xa58>
 8008bc4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008bc8:	d1d7      	bne.n	8008b7a <_dtoa_r+0xa52>
 8008bca:	2339      	movs	r3, #57	; 0x39
 8008bcc:	f88b 3000 	strb.w	r3, [fp]
 8008bd0:	462b      	mov	r3, r5
 8008bd2:	461d      	mov	r5, r3
 8008bd4:	3b01      	subs	r3, #1
 8008bd6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008bda:	2a39      	cmp	r2, #57	; 0x39
 8008bdc:	d071      	beq.n	8008cc2 <_dtoa_r+0xb9a>
 8008bde:	3201      	adds	r2, #1
 8008be0:	701a      	strb	r2, [r3, #0]
 8008be2:	e746      	b.n	8008a72 <_dtoa_r+0x94a>
 8008be4:	2a00      	cmp	r2, #0
 8008be6:	dd07      	ble.n	8008bf8 <_dtoa_r+0xad0>
 8008be8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008bec:	d0ed      	beq.n	8008bca <_dtoa_r+0xaa2>
 8008bee:	f10a 0301 	add.w	r3, sl, #1
 8008bf2:	f88b 3000 	strb.w	r3, [fp]
 8008bf6:	e73c      	b.n	8008a72 <_dtoa_r+0x94a>
 8008bf8:	9b05      	ldr	r3, [sp, #20]
 8008bfa:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008bfe:	4599      	cmp	r9, r3
 8008c00:	d047      	beq.n	8008c92 <_dtoa_r+0xb6a>
 8008c02:	ee18 1a10 	vmov	r1, s16
 8008c06:	2300      	movs	r3, #0
 8008c08:	220a      	movs	r2, #10
 8008c0a:	4620      	mov	r0, r4
 8008c0c:	f000 f9f0 	bl	8008ff0 <__multadd>
 8008c10:	45b8      	cmp	r8, r7
 8008c12:	ee08 0a10 	vmov	s16, r0
 8008c16:	f04f 0300 	mov.w	r3, #0
 8008c1a:	f04f 020a 	mov.w	r2, #10
 8008c1e:	4641      	mov	r1, r8
 8008c20:	4620      	mov	r0, r4
 8008c22:	d106      	bne.n	8008c32 <_dtoa_r+0xb0a>
 8008c24:	f000 f9e4 	bl	8008ff0 <__multadd>
 8008c28:	4680      	mov	r8, r0
 8008c2a:	4607      	mov	r7, r0
 8008c2c:	f109 0901 	add.w	r9, r9, #1
 8008c30:	e772      	b.n	8008b18 <_dtoa_r+0x9f0>
 8008c32:	f000 f9dd 	bl	8008ff0 <__multadd>
 8008c36:	4639      	mov	r1, r7
 8008c38:	4680      	mov	r8, r0
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	220a      	movs	r2, #10
 8008c3e:	4620      	mov	r0, r4
 8008c40:	f000 f9d6 	bl	8008ff0 <__multadd>
 8008c44:	4607      	mov	r7, r0
 8008c46:	e7f1      	b.n	8008c2c <_dtoa_r+0xb04>
 8008c48:	9b03      	ldr	r3, [sp, #12]
 8008c4a:	9302      	str	r3, [sp, #8]
 8008c4c:	9d01      	ldr	r5, [sp, #4]
 8008c4e:	ee18 0a10 	vmov	r0, s16
 8008c52:	4631      	mov	r1, r6
 8008c54:	f7ff f9da 	bl	800800c <quorem>
 8008c58:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008c5c:	9b01      	ldr	r3, [sp, #4]
 8008c5e:	f805 ab01 	strb.w	sl, [r5], #1
 8008c62:	1aea      	subs	r2, r5, r3
 8008c64:	9b02      	ldr	r3, [sp, #8]
 8008c66:	4293      	cmp	r3, r2
 8008c68:	dd09      	ble.n	8008c7e <_dtoa_r+0xb56>
 8008c6a:	ee18 1a10 	vmov	r1, s16
 8008c6e:	2300      	movs	r3, #0
 8008c70:	220a      	movs	r2, #10
 8008c72:	4620      	mov	r0, r4
 8008c74:	f000 f9bc 	bl	8008ff0 <__multadd>
 8008c78:	ee08 0a10 	vmov	s16, r0
 8008c7c:	e7e7      	b.n	8008c4e <_dtoa_r+0xb26>
 8008c7e:	9b02      	ldr	r3, [sp, #8]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	bfc8      	it	gt
 8008c84:	461d      	movgt	r5, r3
 8008c86:	9b01      	ldr	r3, [sp, #4]
 8008c88:	bfd8      	it	le
 8008c8a:	2501      	movle	r5, #1
 8008c8c:	441d      	add	r5, r3
 8008c8e:	f04f 0800 	mov.w	r8, #0
 8008c92:	ee18 1a10 	vmov	r1, s16
 8008c96:	2201      	movs	r2, #1
 8008c98:	4620      	mov	r0, r4
 8008c9a:	f000 fb59 	bl	8009350 <__lshift>
 8008c9e:	4631      	mov	r1, r6
 8008ca0:	ee08 0a10 	vmov	s16, r0
 8008ca4:	f000 fbc4 	bl	8009430 <__mcmp>
 8008ca8:	2800      	cmp	r0, #0
 8008caa:	dc91      	bgt.n	8008bd0 <_dtoa_r+0xaa8>
 8008cac:	d102      	bne.n	8008cb4 <_dtoa_r+0xb8c>
 8008cae:	f01a 0f01 	tst.w	sl, #1
 8008cb2:	d18d      	bne.n	8008bd0 <_dtoa_r+0xaa8>
 8008cb4:	462b      	mov	r3, r5
 8008cb6:	461d      	mov	r5, r3
 8008cb8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008cbc:	2a30      	cmp	r2, #48	; 0x30
 8008cbe:	d0fa      	beq.n	8008cb6 <_dtoa_r+0xb8e>
 8008cc0:	e6d7      	b.n	8008a72 <_dtoa_r+0x94a>
 8008cc2:	9a01      	ldr	r2, [sp, #4]
 8008cc4:	429a      	cmp	r2, r3
 8008cc6:	d184      	bne.n	8008bd2 <_dtoa_r+0xaaa>
 8008cc8:	9b00      	ldr	r3, [sp, #0]
 8008cca:	3301      	adds	r3, #1
 8008ccc:	9300      	str	r3, [sp, #0]
 8008cce:	2331      	movs	r3, #49	; 0x31
 8008cd0:	7013      	strb	r3, [r2, #0]
 8008cd2:	e6ce      	b.n	8008a72 <_dtoa_r+0x94a>
 8008cd4:	4b09      	ldr	r3, [pc, #36]	; (8008cfc <_dtoa_r+0xbd4>)
 8008cd6:	f7ff ba95 	b.w	8008204 <_dtoa_r+0xdc>
 8008cda:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	f47f aa6e 	bne.w	80081be <_dtoa_r+0x96>
 8008ce2:	4b07      	ldr	r3, [pc, #28]	; (8008d00 <_dtoa_r+0xbd8>)
 8008ce4:	f7ff ba8e 	b.w	8008204 <_dtoa_r+0xdc>
 8008ce8:	9b02      	ldr	r3, [sp, #8]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	dcae      	bgt.n	8008c4c <_dtoa_r+0xb24>
 8008cee:	9b06      	ldr	r3, [sp, #24]
 8008cf0:	2b02      	cmp	r3, #2
 8008cf2:	f73f aea8 	bgt.w	8008a46 <_dtoa_r+0x91e>
 8008cf6:	e7a9      	b.n	8008c4c <_dtoa_r+0xb24>
 8008cf8:	0800a2c7 	.word	0x0800a2c7
 8008cfc:	0800a224 	.word	0x0800a224
 8008d00:	0800a248 	.word	0x0800a248

08008d04 <std>:
 8008d04:	2300      	movs	r3, #0
 8008d06:	b510      	push	{r4, lr}
 8008d08:	4604      	mov	r4, r0
 8008d0a:	e9c0 3300 	strd	r3, r3, [r0]
 8008d0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008d12:	6083      	str	r3, [r0, #8]
 8008d14:	8181      	strh	r1, [r0, #12]
 8008d16:	6643      	str	r3, [r0, #100]	; 0x64
 8008d18:	81c2      	strh	r2, [r0, #14]
 8008d1a:	6183      	str	r3, [r0, #24]
 8008d1c:	4619      	mov	r1, r3
 8008d1e:	2208      	movs	r2, #8
 8008d20:	305c      	adds	r0, #92	; 0x5c
 8008d22:	f7fe fce9 	bl	80076f8 <memset>
 8008d26:	4b05      	ldr	r3, [pc, #20]	; (8008d3c <std+0x38>)
 8008d28:	6263      	str	r3, [r4, #36]	; 0x24
 8008d2a:	4b05      	ldr	r3, [pc, #20]	; (8008d40 <std+0x3c>)
 8008d2c:	62a3      	str	r3, [r4, #40]	; 0x28
 8008d2e:	4b05      	ldr	r3, [pc, #20]	; (8008d44 <std+0x40>)
 8008d30:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008d32:	4b05      	ldr	r3, [pc, #20]	; (8008d48 <std+0x44>)
 8008d34:	6224      	str	r4, [r4, #32]
 8008d36:	6323      	str	r3, [r4, #48]	; 0x30
 8008d38:	bd10      	pop	{r4, pc}
 8008d3a:	bf00      	nop
 8008d3c:	08009af5 	.word	0x08009af5
 8008d40:	08009b17 	.word	0x08009b17
 8008d44:	08009b4f 	.word	0x08009b4f
 8008d48:	08009b73 	.word	0x08009b73

08008d4c <_cleanup_r>:
 8008d4c:	4901      	ldr	r1, [pc, #4]	; (8008d54 <_cleanup_r+0x8>)
 8008d4e:	f000 b8af 	b.w	8008eb0 <_fwalk_reent>
 8008d52:	bf00      	nop
 8008d54:	08009e89 	.word	0x08009e89

08008d58 <__sfmoreglue>:
 8008d58:	b570      	push	{r4, r5, r6, lr}
 8008d5a:	2268      	movs	r2, #104	; 0x68
 8008d5c:	1e4d      	subs	r5, r1, #1
 8008d5e:	4355      	muls	r5, r2
 8008d60:	460e      	mov	r6, r1
 8008d62:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008d66:	f000 fce7 	bl	8009738 <_malloc_r>
 8008d6a:	4604      	mov	r4, r0
 8008d6c:	b140      	cbz	r0, 8008d80 <__sfmoreglue+0x28>
 8008d6e:	2100      	movs	r1, #0
 8008d70:	e9c0 1600 	strd	r1, r6, [r0]
 8008d74:	300c      	adds	r0, #12
 8008d76:	60a0      	str	r0, [r4, #8]
 8008d78:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008d7c:	f7fe fcbc 	bl	80076f8 <memset>
 8008d80:	4620      	mov	r0, r4
 8008d82:	bd70      	pop	{r4, r5, r6, pc}

08008d84 <__sfp_lock_acquire>:
 8008d84:	4801      	ldr	r0, [pc, #4]	; (8008d8c <__sfp_lock_acquire+0x8>)
 8008d86:	f000 b8b8 	b.w	8008efa <__retarget_lock_acquire_recursive>
 8008d8a:	bf00      	nop
 8008d8c:	200003ad 	.word	0x200003ad

08008d90 <__sfp_lock_release>:
 8008d90:	4801      	ldr	r0, [pc, #4]	; (8008d98 <__sfp_lock_release+0x8>)
 8008d92:	f000 b8b3 	b.w	8008efc <__retarget_lock_release_recursive>
 8008d96:	bf00      	nop
 8008d98:	200003ad 	.word	0x200003ad

08008d9c <__sinit_lock_acquire>:
 8008d9c:	4801      	ldr	r0, [pc, #4]	; (8008da4 <__sinit_lock_acquire+0x8>)
 8008d9e:	f000 b8ac 	b.w	8008efa <__retarget_lock_acquire_recursive>
 8008da2:	bf00      	nop
 8008da4:	200003ae 	.word	0x200003ae

08008da8 <__sinit_lock_release>:
 8008da8:	4801      	ldr	r0, [pc, #4]	; (8008db0 <__sinit_lock_release+0x8>)
 8008daa:	f000 b8a7 	b.w	8008efc <__retarget_lock_release_recursive>
 8008dae:	bf00      	nop
 8008db0:	200003ae 	.word	0x200003ae

08008db4 <__sinit>:
 8008db4:	b510      	push	{r4, lr}
 8008db6:	4604      	mov	r4, r0
 8008db8:	f7ff fff0 	bl	8008d9c <__sinit_lock_acquire>
 8008dbc:	69a3      	ldr	r3, [r4, #24]
 8008dbe:	b11b      	cbz	r3, 8008dc8 <__sinit+0x14>
 8008dc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008dc4:	f7ff bff0 	b.w	8008da8 <__sinit_lock_release>
 8008dc8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008dcc:	6523      	str	r3, [r4, #80]	; 0x50
 8008dce:	4b13      	ldr	r3, [pc, #76]	; (8008e1c <__sinit+0x68>)
 8008dd0:	4a13      	ldr	r2, [pc, #76]	; (8008e20 <__sinit+0x6c>)
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	62a2      	str	r2, [r4, #40]	; 0x28
 8008dd6:	42a3      	cmp	r3, r4
 8008dd8:	bf04      	itt	eq
 8008dda:	2301      	moveq	r3, #1
 8008ddc:	61a3      	streq	r3, [r4, #24]
 8008dde:	4620      	mov	r0, r4
 8008de0:	f000 f820 	bl	8008e24 <__sfp>
 8008de4:	6060      	str	r0, [r4, #4]
 8008de6:	4620      	mov	r0, r4
 8008de8:	f000 f81c 	bl	8008e24 <__sfp>
 8008dec:	60a0      	str	r0, [r4, #8]
 8008dee:	4620      	mov	r0, r4
 8008df0:	f000 f818 	bl	8008e24 <__sfp>
 8008df4:	2200      	movs	r2, #0
 8008df6:	60e0      	str	r0, [r4, #12]
 8008df8:	2104      	movs	r1, #4
 8008dfa:	6860      	ldr	r0, [r4, #4]
 8008dfc:	f7ff ff82 	bl	8008d04 <std>
 8008e00:	68a0      	ldr	r0, [r4, #8]
 8008e02:	2201      	movs	r2, #1
 8008e04:	2109      	movs	r1, #9
 8008e06:	f7ff ff7d 	bl	8008d04 <std>
 8008e0a:	68e0      	ldr	r0, [r4, #12]
 8008e0c:	2202      	movs	r2, #2
 8008e0e:	2112      	movs	r1, #18
 8008e10:	f7ff ff78 	bl	8008d04 <std>
 8008e14:	2301      	movs	r3, #1
 8008e16:	61a3      	str	r3, [r4, #24]
 8008e18:	e7d2      	b.n	8008dc0 <__sinit+0xc>
 8008e1a:	bf00      	nop
 8008e1c:	0800a210 	.word	0x0800a210
 8008e20:	08008d4d 	.word	0x08008d4d

08008e24 <__sfp>:
 8008e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e26:	4607      	mov	r7, r0
 8008e28:	f7ff ffac 	bl	8008d84 <__sfp_lock_acquire>
 8008e2c:	4b1e      	ldr	r3, [pc, #120]	; (8008ea8 <__sfp+0x84>)
 8008e2e:	681e      	ldr	r6, [r3, #0]
 8008e30:	69b3      	ldr	r3, [r6, #24]
 8008e32:	b913      	cbnz	r3, 8008e3a <__sfp+0x16>
 8008e34:	4630      	mov	r0, r6
 8008e36:	f7ff ffbd 	bl	8008db4 <__sinit>
 8008e3a:	3648      	adds	r6, #72	; 0x48
 8008e3c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008e40:	3b01      	subs	r3, #1
 8008e42:	d503      	bpl.n	8008e4c <__sfp+0x28>
 8008e44:	6833      	ldr	r3, [r6, #0]
 8008e46:	b30b      	cbz	r3, 8008e8c <__sfp+0x68>
 8008e48:	6836      	ldr	r6, [r6, #0]
 8008e4a:	e7f7      	b.n	8008e3c <__sfp+0x18>
 8008e4c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008e50:	b9d5      	cbnz	r5, 8008e88 <__sfp+0x64>
 8008e52:	4b16      	ldr	r3, [pc, #88]	; (8008eac <__sfp+0x88>)
 8008e54:	60e3      	str	r3, [r4, #12]
 8008e56:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008e5a:	6665      	str	r5, [r4, #100]	; 0x64
 8008e5c:	f000 f84c 	bl	8008ef8 <__retarget_lock_init_recursive>
 8008e60:	f7ff ff96 	bl	8008d90 <__sfp_lock_release>
 8008e64:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008e68:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008e6c:	6025      	str	r5, [r4, #0]
 8008e6e:	61a5      	str	r5, [r4, #24]
 8008e70:	2208      	movs	r2, #8
 8008e72:	4629      	mov	r1, r5
 8008e74:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008e78:	f7fe fc3e 	bl	80076f8 <memset>
 8008e7c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008e80:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008e84:	4620      	mov	r0, r4
 8008e86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e88:	3468      	adds	r4, #104	; 0x68
 8008e8a:	e7d9      	b.n	8008e40 <__sfp+0x1c>
 8008e8c:	2104      	movs	r1, #4
 8008e8e:	4638      	mov	r0, r7
 8008e90:	f7ff ff62 	bl	8008d58 <__sfmoreglue>
 8008e94:	4604      	mov	r4, r0
 8008e96:	6030      	str	r0, [r6, #0]
 8008e98:	2800      	cmp	r0, #0
 8008e9a:	d1d5      	bne.n	8008e48 <__sfp+0x24>
 8008e9c:	f7ff ff78 	bl	8008d90 <__sfp_lock_release>
 8008ea0:	230c      	movs	r3, #12
 8008ea2:	603b      	str	r3, [r7, #0]
 8008ea4:	e7ee      	b.n	8008e84 <__sfp+0x60>
 8008ea6:	bf00      	nop
 8008ea8:	0800a210 	.word	0x0800a210
 8008eac:	ffff0001 	.word	0xffff0001

08008eb0 <_fwalk_reent>:
 8008eb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008eb4:	4606      	mov	r6, r0
 8008eb6:	4688      	mov	r8, r1
 8008eb8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008ebc:	2700      	movs	r7, #0
 8008ebe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008ec2:	f1b9 0901 	subs.w	r9, r9, #1
 8008ec6:	d505      	bpl.n	8008ed4 <_fwalk_reent+0x24>
 8008ec8:	6824      	ldr	r4, [r4, #0]
 8008eca:	2c00      	cmp	r4, #0
 8008ecc:	d1f7      	bne.n	8008ebe <_fwalk_reent+0xe>
 8008ece:	4638      	mov	r0, r7
 8008ed0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ed4:	89ab      	ldrh	r3, [r5, #12]
 8008ed6:	2b01      	cmp	r3, #1
 8008ed8:	d907      	bls.n	8008eea <_fwalk_reent+0x3a>
 8008eda:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008ede:	3301      	adds	r3, #1
 8008ee0:	d003      	beq.n	8008eea <_fwalk_reent+0x3a>
 8008ee2:	4629      	mov	r1, r5
 8008ee4:	4630      	mov	r0, r6
 8008ee6:	47c0      	blx	r8
 8008ee8:	4307      	orrs	r7, r0
 8008eea:	3568      	adds	r5, #104	; 0x68
 8008eec:	e7e9      	b.n	8008ec2 <_fwalk_reent+0x12>
	...

08008ef0 <_localeconv_r>:
 8008ef0:	4800      	ldr	r0, [pc, #0]	; (8008ef4 <_localeconv_r+0x4>)
 8008ef2:	4770      	bx	lr
 8008ef4:	20000160 	.word	0x20000160

08008ef8 <__retarget_lock_init_recursive>:
 8008ef8:	4770      	bx	lr

08008efa <__retarget_lock_acquire_recursive>:
 8008efa:	4770      	bx	lr

08008efc <__retarget_lock_release_recursive>:
 8008efc:	4770      	bx	lr
	...

08008f00 <malloc>:
 8008f00:	4b02      	ldr	r3, [pc, #8]	; (8008f0c <malloc+0xc>)
 8008f02:	4601      	mov	r1, r0
 8008f04:	6818      	ldr	r0, [r3, #0]
 8008f06:	f000 bc17 	b.w	8009738 <_malloc_r>
 8008f0a:	bf00      	nop
 8008f0c:	2000000c 	.word	0x2000000c

08008f10 <memcpy>:
 8008f10:	440a      	add	r2, r1
 8008f12:	4291      	cmp	r1, r2
 8008f14:	f100 33ff 	add.w	r3, r0, #4294967295
 8008f18:	d100      	bne.n	8008f1c <memcpy+0xc>
 8008f1a:	4770      	bx	lr
 8008f1c:	b510      	push	{r4, lr}
 8008f1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f22:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008f26:	4291      	cmp	r1, r2
 8008f28:	d1f9      	bne.n	8008f1e <memcpy+0xe>
 8008f2a:	bd10      	pop	{r4, pc}

08008f2c <_Balloc>:
 8008f2c:	b570      	push	{r4, r5, r6, lr}
 8008f2e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008f30:	4604      	mov	r4, r0
 8008f32:	460d      	mov	r5, r1
 8008f34:	b976      	cbnz	r6, 8008f54 <_Balloc+0x28>
 8008f36:	2010      	movs	r0, #16
 8008f38:	f7ff ffe2 	bl	8008f00 <malloc>
 8008f3c:	4602      	mov	r2, r0
 8008f3e:	6260      	str	r0, [r4, #36]	; 0x24
 8008f40:	b920      	cbnz	r0, 8008f4c <_Balloc+0x20>
 8008f42:	4b18      	ldr	r3, [pc, #96]	; (8008fa4 <_Balloc+0x78>)
 8008f44:	4818      	ldr	r0, [pc, #96]	; (8008fa8 <_Balloc+0x7c>)
 8008f46:	2166      	movs	r1, #102	; 0x66
 8008f48:	f000 feea 	bl	8009d20 <__assert_func>
 8008f4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008f50:	6006      	str	r6, [r0, #0]
 8008f52:	60c6      	str	r6, [r0, #12]
 8008f54:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008f56:	68f3      	ldr	r3, [r6, #12]
 8008f58:	b183      	cbz	r3, 8008f7c <_Balloc+0x50>
 8008f5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f5c:	68db      	ldr	r3, [r3, #12]
 8008f5e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008f62:	b9b8      	cbnz	r0, 8008f94 <_Balloc+0x68>
 8008f64:	2101      	movs	r1, #1
 8008f66:	fa01 f605 	lsl.w	r6, r1, r5
 8008f6a:	1d72      	adds	r2, r6, #5
 8008f6c:	0092      	lsls	r2, r2, #2
 8008f6e:	4620      	mov	r0, r4
 8008f70:	f000 fb60 	bl	8009634 <_calloc_r>
 8008f74:	b160      	cbz	r0, 8008f90 <_Balloc+0x64>
 8008f76:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008f7a:	e00e      	b.n	8008f9a <_Balloc+0x6e>
 8008f7c:	2221      	movs	r2, #33	; 0x21
 8008f7e:	2104      	movs	r1, #4
 8008f80:	4620      	mov	r0, r4
 8008f82:	f000 fb57 	bl	8009634 <_calloc_r>
 8008f86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f88:	60f0      	str	r0, [r6, #12]
 8008f8a:	68db      	ldr	r3, [r3, #12]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d1e4      	bne.n	8008f5a <_Balloc+0x2e>
 8008f90:	2000      	movs	r0, #0
 8008f92:	bd70      	pop	{r4, r5, r6, pc}
 8008f94:	6802      	ldr	r2, [r0, #0]
 8008f96:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008fa0:	e7f7      	b.n	8008f92 <_Balloc+0x66>
 8008fa2:	bf00      	nop
 8008fa4:	0800a255 	.word	0x0800a255
 8008fa8:	0800a338 	.word	0x0800a338

08008fac <_Bfree>:
 8008fac:	b570      	push	{r4, r5, r6, lr}
 8008fae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008fb0:	4605      	mov	r5, r0
 8008fb2:	460c      	mov	r4, r1
 8008fb4:	b976      	cbnz	r6, 8008fd4 <_Bfree+0x28>
 8008fb6:	2010      	movs	r0, #16
 8008fb8:	f7ff ffa2 	bl	8008f00 <malloc>
 8008fbc:	4602      	mov	r2, r0
 8008fbe:	6268      	str	r0, [r5, #36]	; 0x24
 8008fc0:	b920      	cbnz	r0, 8008fcc <_Bfree+0x20>
 8008fc2:	4b09      	ldr	r3, [pc, #36]	; (8008fe8 <_Bfree+0x3c>)
 8008fc4:	4809      	ldr	r0, [pc, #36]	; (8008fec <_Bfree+0x40>)
 8008fc6:	218a      	movs	r1, #138	; 0x8a
 8008fc8:	f000 feaa 	bl	8009d20 <__assert_func>
 8008fcc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008fd0:	6006      	str	r6, [r0, #0]
 8008fd2:	60c6      	str	r6, [r0, #12]
 8008fd4:	b13c      	cbz	r4, 8008fe6 <_Bfree+0x3a>
 8008fd6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008fd8:	6862      	ldr	r2, [r4, #4]
 8008fda:	68db      	ldr	r3, [r3, #12]
 8008fdc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008fe0:	6021      	str	r1, [r4, #0]
 8008fe2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008fe6:	bd70      	pop	{r4, r5, r6, pc}
 8008fe8:	0800a255 	.word	0x0800a255
 8008fec:	0800a338 	.word	0x0800a338

08008ff0 <__multadd>:
 8008ff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ff4:	690d      	ldr	r5, [r1, #16]
 8008ff6:	4607      	mov	r7, r0
 8008ff8:	460c      	mov	r4, r1
 8008ffa:	461e      	mov	r6, r3
 8008ffc:	f101 0c14 	add.w	ip, r1, #20
 8009000:	2000      	movs	r0, #0
 8009002:	f8dc 3000 	ldr.w	r3, [ip]
 8009006:	b299      	uxth	r1, r3
 8009008:	fb02 6101 	mla	r1, r2, r1, r6
 800900c:	0c1e      	lsrs	r6, r3, #16
 800900e:	0c0b      	lsrs	r3, r1, #16
 8009010:	fb02 3306 	mla	r3, r2, r6, r3
 8009014:	b289      	uxth	r1, r1
 8009016:	3001      	adds	r0, #1
 8009018:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800901c:	4285      	cmp	r5, r0
 800901e:	f84c 1b04 	str.w	r1, [ip], #4
 8009022:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009026:	dcec      	bgt.n	8009002 <__multadd+0x12>
 8009028:	b30e      	cbz	r6, 800906e <__multadd+0x7e>
 800902a:	68a3      	ldr	r3, [r4, #8]
 800902c:	42ab      	cmp	r3, r5
 800902e:	dc19      	bgt.n	8009064 <__multadd+0x74>
 8009030:	6861      	ldr	r1, [r4, #4]
 8009032:	4638      	mov	r0, r7
 8009034:	3101      	adds	r1, #1
 8009036:	f7ff ff79 	bl	8008f2c <_Balloc>
 800903a:	4680      	mov	r8, r0
 800903c:	b928      	cbnz	r0, 800904a <__multadd+0x5a>
 800903e:	4602      	mov	r2, r0
 8009040:	4b0c      	ldr	r3, [pc, #48]	; (8009074 <__multadd+0x84>)
 8009042:	480d      	ldr	r0, [pc, #52]	; (8009078 <__multadd+0x88>)
 8009044:	21b5      	movs	r1, #181	; 0xb5
 8009046:	f000 fe6b 	bl	8009d20 <__assert_func>
 800904a:	6922      	ldr	r2, [r4, #16]
 800904c:	3202      	adds	r2, #2
 800904e:	f104 010c 	add.w	r1, r4, #12
 8009052:	0092      	lsls	r2, r2, #2
 8009054:	300c      	adds	r0, #12
 8009056:	f7ff ff5b 	bl	8008f10 <memcpy>
 800905a:	4621      	mov	r1, r4
 800905c:	4638      	mov	r0, r7
 800905e:	f7ff ffa5 	bl	8008fac <_Bfree>
 8009062:	4644      	mov	r4, r8
 8009064:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009068:	3501      	adds	r5, #1
 800906a:	615e      	str	r6, [r3, #20]
 800906c:	6125      	str	r5, [r4, #16]
 800906e:	4620      	mov	r0, r4
 8009070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009074:	0800a2c7 	.word	0x0800a2c7
 8009078:	0800a338 	.word	0x0800a338

0800907c <__hi0bits>:
 800907c:	0c03      	lsrs	r3, r0, #16
 800907e:	041b      	lsls	r3, r3, #16
 8009080:	b9d3      	cbnz	r3, 80090b8 <__hi0bits+0x3c>
 8009082:	0400      	lsls	r0, r0, #16
 8009084:	2310      	movs	r3, #16
 8009086:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800908a:	bf04      	itt	eq
 800908c:	0200      	lsleq	r0, r0, #8
 800908e:	3308      	addeq	r3, #8
 8009090:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009094:	bf04      	itt	eq
 8009096:	0100      	lsleq	r0, r0, #4
 8009098:	3304      	addeq	r3, #4
 800909a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800909e:	bf04      	itt	eq
 80090a0:	0080      	lsleq	r0, r0, #2
 80090a2:	3302      	addeq	r3, #2
 80090a4:	2800      	cmp	r0, #0
 80090a6:	db05      	blt.n	80090b4 <__hi0bits+0x38>
 80090a8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80090ac:	f103 0301 	add.w	r3, r3, #1
 80090b0:	bf08      	it	eq
 80090b2:	2320      	moveq	r3, #32
 80090b4:	4618      	mov	r0, r3
 80090b6:	4770      	bx	lr
 80090b8:	2300      	movs	r3, #0
 80090ba:	e7e4      	b.n	8009086 <__hi0bits+0xa>

080090bc <__lo0bits>:
 80090bc:	6803      	ldr	r3, [r0, #0]
 80090be:	f013 0207 	ands.w	r2, r3, #7
 80090c2:	4601      	mov	r1, r0
 80090c4:	d00b      	beq.n	80090de <__lo0bits+0x22>
 80090c6:	07da      	lsls	r2, r3, #31
 80090c8:	d423      	bmi.n	8009112 <__lo0bits+0x56>
 80090ca:	0798      	lsls	r0, r3, #30
 80090cc:	bf49      	itett	mi
 80090ce:	085b      	lsrmi	r3, r3, #1
 80090d0:	089b      	lsrpl	r3, r3, #2
 80090d2:	2001      	movmi	r0, #1
 80090d4:	600b      	strmi	r3, [r1, #0]
 80090d6:	bf5c      	itt	pl
 80090d8:	600b      	strpl	r3, [r1, #0]
 80090da:	2002      	movpl	r0, #2
 80090dc:	4770      	bx	lr
 80090de:	b298      	uxth	r0, r3
 80090e0:	b9a8      	cbnz	r0, 800910e <__lo0bits+0x52>
 80090e2:	0c1b      	lsrs	r3, r3, #16
 80090e4:	2010      	movs	r0, #16
 80090e6:	b2da      	uxtb	r2, r3
 80090e8:	b90a      	cbnz	r2, 80090ee <__lo0bits+0x32>
 80090ea:	3008      	adds	r0, #8
 80090ec:	0a1b      	lsrs	r3, r3, #8
 80090ee:	071a      	lsls	r2, r3, #28
 80090f0:	bf04      	itt	eq
 80090f2:	091b      	lsreq	r3, r3, #4
 80090f4:	3004      	addeq	r0, #4
 80090f6:	079a      	lsls	r2, r3, #30
 80090f8:	bf04      	itt	eq
 80090fa:	089b      	lsreq	r3, r3, #2
 80090fc:	3002      	addeq	r0, #2
 80090fe:	07da      	lsls	r2, r3, #31
 8009100:	d403      	bmi.n	800910a <__lo0bits+0x4e>
 8009102:	085b      	lsrs	r3, r3, #1
 8009104:	f100 0001 	add.w	r0, r0, #1
 8009108:	d005      	beq.n	8009116 <__lo0bits+0x5a>
 800910a:	600b      	str	r3, [r1, #0]
 800910c:	4770      	bx	lr
 800910e:	4610      	mov	r0, r2
 8009110:	e7e9      	b.n	80090e6 <__lo0bits+0x2a>
 8009112:	2000      	movs	r0, #0
 8009114:	4770      	bx	lr
 8009116:	2020      	movs	r0, #32
 8009118:	4770      	bx	lr
	...

0800911c <__i2b>:
 800911c:	b510      	push	{r4, lr}
 800911e:	460c      	mov	r4, r1
 8009120:	2101      	movs	r1, #1
 8009122:	f7ff ff03 	bl	8008f2c <_Balloc>
 8009126:	4602      	mov	r2, r0
 8009128:	b928      	cbnz	r0, 8009136 <__i2b+0x1a>
 800912a:	4b05      	ldr	r3, [pc, #20]	; (8009140 <__i2b+0x24>)
 800912c:	4805      	ldr	r0, [pc, #20]	; (8009144 <__i2b+0x28>)
 800912e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009132:	f000 fdf5 	bl	8009d20 <__assert_func>
 8009136:	2301      	movs	r3, #1
 8009138:	6144      	str	r4, [r0, #20]
 800913a:	6103      	str	r3, [r0, #16]
 800913c:	bd10      	pop	{r4, pc}
 800913e:	bf00      	nop
 8009140:	0800a2c7 	.word	0x0800a2c7
 8009144:	0800a338 	.word	0x0800a338

08009148 <__multiply>:
 8009148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800914c:	4691      	mov	r9, r2
 800914e:	690a      	ldr	r2, [r1, #16]
 8009150:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009154:	429a      	cmp	r2, r3
 8009156:	bfb8      	it	lt
 8009158:	460b      	movlt	r3, r1
 800915a:	460c      	mov	r4, r1
 800915c:	bfbc      	itt	lt
 800915e:	464c      	movlt	r4, r9
 8009160:	4699      	movlt	r9, r3
 8009162:	6927      	ldr	r7, [r4, #16]
 8009164:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009168:	68a3      	ldr	r3, [r4, #8]
 800916a:	6861      	ldr	r1, [r4, #4]
 800916c:	eb07 060a 	add.w	r6, r7, sl
 8009170:	42b3      	cmp	r3, r6
 8009172:	b085      	sub	sp, #20
 8009174:	bfb8      	it	lt
 8009176:	3101      	addlt	r1, #1
 8009178:	f7ff fed8 	bl	8008f2c <_Balloc>
 800917c:	b930      	cbnz	r0, 800918c <__multiply+0x44>
 800917e:	4602      	mov	r2, r0
 8009180:	4b44      	ldr	r3, [pc, #272]	; (8009294 <__multiply+0x14c>)
 8009182:	4845      	ldr	r0, [pc, #276]	; (8009298 <__multiply+0x150>)
 8009184:	f240 115d 	movw	r1, #349	; 0x15d
 8009188:	f000 fdca 	bl	8009d20 <__assert_func>
 800918c:	f100 0514 	add.w	r5, r0, #20
 8009190:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009194:	462b      	mov	r3, r5
 8009196:	2200      	movs	r2, #0
 8009198:	4543      	cmp	r3, r8
 800919a:	d321      	bcc.n	80091e0 <__multiply+0x98>
 800919c:	f104 0314 	add.w	r3, r4, #20
 80091a0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80091a4:	f109 0314 	add.w	r3, r9, #20
 80091a8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80091ac:	9202      	str	r2, [sp, #8]
 80091ae:	1b3a      	subs	r2, r7, r4
 80091b0:	3a15      	subs	r2, #21
 80091b2:	f022 0203 	bic.w	r2, r2, #3
 80091b6:	3204      	adds	r2, #4
 80091b8:	f104 0115 	add.w	r1, r4, #21
 80091bc:	428f      	cmp	r7, r1
 80091be:	bf38      	it	cc
 80091c0:	2204      	movcc	r2, #4
 80091c2:	9201      	str	r2, [sp, #4]
 80091c4:	9a02      	ldr	r2, [sp, #8]
 80091c6:	9303      	str	r3, [sp, #12]
 80091c8:	429a      	cmp	r2, r3
 80091ca:	d80c      	bhi.n	80091e6 <__multiply+0x9e>
 80091cc:	2e00      	cmp	r6, #0
 80091ce:	dd03      	ble.n	80091d8 <__multiply+0x90>
 80091d0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d05a      	beq.n	800928e <__multiply+0x146>
 80091d8:	6106      	str	r6, [r0, #16]
 80091da:	b005      	add	sp, #20
 80091dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091e0:	f843 2b04 	str.w	r2, [r3], #4
 80091e4:	e7d8      	b.n	8009198 <__multiply+0x50>
 80091e6:	f8b3 a000 	ldrh.w	sl, [r3]
 80091ea:	f1ba 0f00 	cmp.w	sl, #0
 80091ee:	d024      	beq.n	800923a <__multiply+0xf2>
 80091f0:	f104 0e14 	add.w	lr, r4, #20
 80091f4:	46a9      	mov	r9, r5
 80091f6:	f04f 0c00 	mov.w	ip, #0
 80091fa:	f85e 2b04 	ldr.w	r2, [lr], #4
 80091fe:	f8d9 1000 	ldr.w	r1, [r9]
 8009202:	fa1f fb82 	uxth.w	fp, r2
 8009206:	b289      	uxth	r1, r1
 8009208:	fb0a 110b 	mla	r1, sl, fp, r1
 800920c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009210:	f8d9 2000 	ldr.w	r2, [r9]
 8009214:	4461      	add	r1, ip
 8009216:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800921a:	fb0a c20b 	mla	r2, sl, fp, ip
 800921e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009222:	b289      	uxth	r1, r1
 8009224:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009228:	4577      	cmp	r7, lr
 800922a:	f849 1b04 	str.w	r1, [r9], #4
 800922e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009232:	d8e2      	bhi.n	80091fa <__multiply+0xb2>
 8009234:	9a01      	ldr	r2, [sp, #4]
 8009236:	f845 c002 	str.w	ip, [r5, r2]
 800923a:	9a03      	ldr	r2, [sp, #12]
 800923c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009240:	3304      	adds	r3, #4
 8009242:	f1b9 0f00 	cmp.w	r9, #0
 8009246:	d020      	beq.n	800928a <__multiply+0x142>
 8009248:	6829      	ldr	r1, [r5, #0]
 800924a:	f104 0c14 	add.w	ip, r4, #20
 800924e:	46ae      	mov	lr, r5
 8009250:	f04f 0a00 	mov.w	sl, #0
 8009254:	f8bc b000 	ldrh.w	fp, [ip]
 8009258:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800925c:	fb09 220b 	mla	r2, r9, fp, r2
 8009260:	4492      	add	sl, r2
 8009262:	b289      	uxth	r1, r1
 8009264:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009268:	f84e 1b04 	str.w	r1, [lr], #4
 800926c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009270:	f8be 1000 	ldrh.w	r1, [lr]
 8009274:	0c12      	lsrs	r2, r2, #16
 8009276:	fb09 1102 	mla	r1, r9, r2, r1
 800927a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800927e:	4567      	cmp	r7, ip
 8009280:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009284:	d8e6      	bhi.n	8009254 <__multiply+0x10c>
 8009286:	9a01      	ldr	r2, [sp, #4]
 8009288:	50a9      	str	r1, [r5, r2]
 800928a:	3504      	adds	r5, #4
 800928c:	e79a      	b.n	80091c4 <__multiply+0x7c>
 800928e:	3e01      	subs	r6, #1
 8009290:	e79c      	b.n	80091cc <__multiply+0x84>
 8009292:	bf00      	nop
 8009294:	0800a2c7 	.word	0x0800a2c7
 8009298:	0800a338 	.word	0x0800a338

0800929c <__pow5mult>:
 800929c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80092a0:	4615      	mov	r5, r2
 80092a2:	f012 0203 	ands.w	r2, r2, #3
 80092a6:	4606      	mov	r6, r0
 80092a8:	460f      	mov	r7, r1
 80092aa:	d007      	beq.n	80092bc <__pow5mult+0x20>
 80092ac:	4c25      	ldr	r4, [pc, #148]	; (8009344 <__pow5mult+0xa8>)
 80092ae:	3a01      	subs	r2, #1
 80092b0:	2300      	movs	r3, #0
 80092b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80092b6:	f7ff fe9b 	bl	8008ff0 <__multadd>
 80092ba:	4607      	mov	r7, r0
 80092bc:	10ad      	asrs	r5, r5, #2
 80092be:	d03d      	beq.n	800933c <__pow5mult+0xa0>
 80092c0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80092c2:	b97c      	cbnz	r4, 80092e4 <__pow5mult+0x48>
 80092c4:	2010      	movs	r0, #16
 80092c6:	f7ff fe1b 	bl	8008f00 <malloc>
 80092ca:	4602      	mov	r2, r0
 80092cc:	6270      	str	r0, [r6, #36]	; 0x24
 80092ce:	b928      	cbnz	r0, 80092dc <__pow5mult+0x40>
 80092d0:	4b1d      	ldr	r3, [pc, #116]	; (8009348 <__pow5mult+0xac>)
 80092d2:	481e      	ldr	r0, [pc, #120]	; (800934c <__pow5mult+0xb0>)
 80092d4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80092d8:	f000 fd22 	bl	8009d20 <__assert_func>
 80092dc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80092e0:	6004      	str	r4, [r0, #0]
 80092e2:	60c4      	str	r4, [r0, #12]
 80092e4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80092e8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80092ec:	b94c      	cbnz	r4, 8009302 <__pow5mult+0x66>
 80092ee:	f240 2171 	movw	r1, #625	; 0x271
 80092f2:	4630      	mov	r0, r6
 80092f4:	f7ff ff12 	bl	800911c <__i2b>
 80092f8:	2300      	movs	r3, #0
 80092fa:	f8c8 0008 	str.w	r0, [r8, #8]
 80092fe:	4604      	mov	r4, r0
 8009300:	6003      	str	r3, [r0, #0]
 8009302:	f04f 0900 	mov.w	r9, #0
 8009306:	07eb      	lsls	r3, r5, #31
 8009308:	d50a      	bpl.n	8009320 <__pow5mult+0x84>
 800930a:	4639      	mov	r1, r7
 800930c:	4622      	mov	r2, r4
 800930e:	4630      	mov	r0, r6
 8009310:	f7ff ff1a 	bl	8009148 <__multiply>
 8009314:	4639      	mov	r1, r7
 8009316:	4680      	mov	r8, r0
 8009318:	4630      	mov	r0, r6
 800931a:	f7ff fe47 	bl	8008fac <_Bfree>
 800931e:	4647      	mov	r7, r8
 8009320:	106d      	asrs	r5, r5, #1
 8009322:	d00b      	beq.n	800933c <__pow5mult+0xa0>
 8009324:	6820      	ldr	r0, [r4, #0]
 8009326:	b938      	cbnz	r0, 8009338 <__pow5mult+0x9c>
 8009328:	4622      	mov	r2, r4
 800932a:	4621      	mov	r1, r4
 800932c:	4630      	mov	r0, r6
 800932e:	f7ff ff0b 	bl	8009148 <__multiply>
 8009332:	6020      	str	r0, [r4, #0]
 8009334:	f8c0 9000 	str.w	r9, [r0]
 8009338:	4604      	mov	r4, r0
 800933a:	e7e4      	b.n	8009306 <__pow5mult+0x6a>
 800933c:	4638      	mov	r0, r7
 800933e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009342:	bf00      	nop
 8009344:	0800a488 	.word	0x0800a488
 8009348:	0800a255 	.word	0x0800a255
 800934c:	0800a338 	.word	0x0800a338

08009350 <__lshift>:
 8009350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009354:	460c      	mov	r4, r1
 8009356:	6849      	ldr	r1, [r1, #4]
 8009358:	6923      	ldr	r3, [r4, #16]
 800935a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800935e:	68a3      	ldr	r3, [r4, #8]
 8009360:	4607      	mov	r7, r0
 8009362:	4691      	mov	r9, r2
 8009364:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009368:	f108 0601 	add.w	r6, r8, #1
 800936c:	42b3      	cmp	r3, r6
 800936e:	db0b      	blt.n	8009388 <__lshift+0x38>
 8009370:	4638      	mov	r0, r7
 8009372:	f7ff fddb 	bl	8008f2c <_Balloc>
 8009376:	4605      	mov	r5, r0
 8009378:	b948      	cbnz	r0, 800938e <__lshift+0x3e>
 800937a:	4602      	mov	r2, r0
 800937c:	4b2a      	ldr	r3, [pc, #168]	; (8009428 <__lshift+0xd8>)
 800937e:	482b      	ldr	r0, [pc, #172]	; (800942c <__lshift+0xdc>)
 8009380:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009384:	f000 fccc 	bl	8009d20 <__assert_func>
 8009388:	3101      	adds	r1, #1
 800938a:	005b      	lsls	r3, r3, #1
 800938c:	e7ee      	b.n	800936c <__lshift+0x1c>
 800938e:	2300      	movs	r3, #0
 8009390:	f100 0114 	add.w	r1, r0, #20
 8009394:	f100 0210 	add.w	r2, r0, #16
 8009398:	4618      	mov	r0, r3
 800939a:	4553      	cmp	r3, sl
 800939c:	db37      	blt.n	800940e <__lshift+0xbe>
 800939e:	6920      	ldr	r0, [r4, #16]
 80093a0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80093a4:	f104 0314 	add.w	r3, r4, #20
 80093a8:	f019 091f 	ands.w	r9, r9, #31
 80093ac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80093b0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80093b4:	d02f      	beq.n	8009416 <__lshift+0xc6>
 80093b6:	f1c9 0e20 	rsb	lr, r9, #32
 80093ba:	468a      	mov	sl, r1
 80093bc:	f04f 0c00 	mov.w	ip, #0
 80093c0:	681a      	ldr	r2, [r3, #0]
 80093c2:	fa02 f209 	lsl.w	r2, r2, r9
 80093c6:	ea42 020c 	orr.w	r2, r2, ip
 80093ca:	f84a 2b04 	str.w	r2, [sl], #4
 80093ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80093d2:	4298      	cmp	r0, r3
 80093d4:	fa22 fc0e 	lsr.w	ip, r2, lr
 80093d8:	d8f2      	bhi.n	80093c0 <__lshift+0x70>
 80093da:	1b03      	subs	r3, r0, r4
 80093dc:	3b15      	subs	r3, #21
 80093de:	f023 0303 	bic.w	r3, r3, #3
 80093e2:	3304      	adds	r3, #4
 80093e4:	f104 0215 	add.w	r2, r4, #21
 80093e8:	4290      	cmp	r0, r2
 80093ea:	bf38      	it	cc
 80093ec:	2304      	movcc	r3, #4
 80093ee:	f841 c003 	str.w	ip, [r1, r3]
 80093f2:	f1bc 0f00 	cmp.w	ip, #0
 80093f6:	d001      	beq.n	80093fc <__lshift+0xac>
 80093f8:	f108 0602 	add.w	r6, r8, #2
 80093fc:	3e01      	subs	r6, #1
 80093fe:	4638      	mov	r0, r7
 8009400:	612e      	str	r6, [r5, #16]
 8009402:	4621      	mov	r1, r4
 8009404:	f7ff fdd2 	bl	8008fac <_Bfree>
 8009408:	4628      	mov	r0, r5
 800940a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800940e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009412:	3301      	adds	r3, #1
 8009414:	e7c1      	b.n	800939a <__lshift+0x4a>
 8009416:	3904      	subs	r1, #4
 8009418:	f853 2b04 	ldr.w	r2, [r3], #4
 800941c:	f841 2f04 	str.w	r2, [r1, #4]!
 8009420:	4298      	cmp	r0, r3
 8009422:	d8f9      	bhi.n	8009418 <__lshift+0xc8>
 8009424:	e7ea      	b.n	80093fc <__lshift+0xac>
 8009426:	bf00      	nop
 8009428:	0800a2c7 	.word	0x0800a2c7
 800942c:	0800a338 	.word	0x0800a338

08009430 <__mcmp>:
 8009430:	b530      	push	{r4, r5, lr}
 8009432:	6902      	ldr	r2, [r0, #16]
 8009434:	690c      	ldr	r4, [r1, #16]
 8009436:	1b12      	subs	r2, r2, r4
 8009438:	d10e      	bne.n	8009458 <__mcmp+0x28>
 800943a:	f100 0314 	add.w	r3, r0, #20
 800943e:	3114      	adds	r1, #20
 8009440:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009444:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009448:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800944c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009450:	42a5      	cmp	r5, r4
 8009452:	d003      	beq.n	800945c <__mcmp+0x2c>
 8009454:	d305      	bcc.n	8009462 <__mcmp+0x32>
 8009456:	2201      	movs	r2, #1
 8009458:	4610      	mov	r0, r2
 800945a:	bd30      	pop	{r4, r5, pc}
 800945c:	4283      	cmp	r3, r0
 800945e:	d3f3      	bcc.n	8009448 <__mcmp+0x18>
 8009460:	e7fa      	b.n	8009458 <__mcmp+0x28>
 8009462:	f04f 32ff 	mov.w	r2, #4294967295
 8009466:	e7f7      	b.n	8009458 <__mcmp+0x28>

08009468 <__mdiff>:
 8009468:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800946c:	460c      	mov	r4, r1
 800946e:	4606      	mov	r6, r0
 8009470:	4611      	mov	r1, r2
 8009472:	4620      	mov	r0, r4
 8009474:	4690      	mov	r8, r2
 8009476:	f7ff ffdb 	bl	8009430 <__mcmp>
 800947a:	1e05      	subs	r5, r0, #0
 800947c:	d110      	bne.n	80094a0 <__mdiff+0x38>
 800947e:	4629      	mov	r1, r5
 8009480:	4630      	mov	r0, r6
 8009482:	f7ff fd53 	bl	8008f2c <_Balloc>
 8009486:	b930      	cbnz	r0, 8009496 <__mdiff+0x2e>
 8009488:	4b3a      	ldr	r3, [pc, #232]	; (8009574 <__mdiff+0x10c>)
 800948a:	4602      	mov	r2, r0
 800948c:	f240 2132 	movw	r1, #562	; 0x232
 8009490:	4839      	ldr	r0, [pc, #228]	; (8009578 <__mdiff+0x110>)
 8009492:	f000 fc45 	bl	8009d20 <__assert_func>
 8009496:	2301      	movs	r3, #1
 8009498:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800949c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094a0:	bfa4      	itt	ge
 80094a2:	4643      	movge	r3, r8
 80094a4:	46a0      	movge	r8, r4
 80094a6:	4630      	mov	r0, r6
 80094a8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80094ac:	bfa6      	itte	ge
 80094ae:	461c      	movge	r4, r3
 80094b0:	2500      	movge	r5, #0
 80094b2:	2501      	movlt	r5, #1
 80094b4:	f7ff fd3a 	bl	8008f2c <_Balloc>
 80094b8:	b920      	cbnz	r0, 80094c4 <__mdiff+0x5c>
 80094ba:	4b2e      	ldr	r3, [pc, #184]	; (8009574 <__mdiff+0x10c>)
 80094bc:	4602      	mov	r2, r0
 80094be:	f44f 7110 	mov.w	r1, #576	; 0x240
 80094c2:	e7e5      	b.n	8009490 <__mdiff+0x28>
 80094c4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80094c8:	6926      	ldr	r6, [r4, #16]
 80094ca:	60c5      	str	r5, [r0, #12]
 80094cc:	f104 0914 	add.w	r9, r4, #20
 80094d0:	f108 0514 	add.w	r5, r8, #20
 80094d4:	f100 0e14 	add.w	lr, r0, #20
 80094d8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80094dc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80094e0:	f108 0210 	add.w	r2, r8, #16
 80094e4:	46f2      	mov	sl, lr
 80094e6:	2100      	movs	r1, #0
 80094e8:	f859 3b04 	ldr.w	r3, [r9], #4
 80094ec:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80094f0:	fa1f f883 	uxth.w	r8, r3
 80094f4:	fa11 f18b 	uxtah	r1, r1, fp
 80094f8:	0c1b      	lsrs	r3, r3, #16
 80094fa:	eba1 0808 	sub.w	r8, r1, r8
 80094fe:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009502:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009506:	fa1f f888 	uxth.w	r8, r8
 800950a:	1419      	asrs	r1, r3, #16
 800950c:	454e      	cmp	r6, r9
 800950e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009512:	f84a 3b04 	str.w	r3, [sl], #4
 8009516:	d8e7      	bhi.n	80094e8 <__mdiff+0x80>
 8009518:	1b33      	subs	r3, r6, r4
 800951a:	3b15      	subs	r3, #21
 800951c:	f023 0303 	bic.w	r3, r3, #3
 8009520:	3304      	adds	r3, #4
 8009522:	3415      	adds	r4, #21
 8009524:	42a6      	cmp	r6, r4
 8009526:	bf38      	it	cc
 8009528:	2304      	movcc	r3, #4
 800952a:	441d      	add	r5, r3
 800952c:	4473      	add	r3, lr
 800952e:	469e      	mov	lr, r3
 8009530:	462e      	mov	r6, r5
 8009532:	4566      	cmp	r6, ip
 8009534:	d30e      	bcc.n	8009554 <__mdiff+0xec>
 8009536:	f10c 0203 	add.w	r2, ip, #3
 800953a:	1b52      	subs	r2, r2, r5
 800953c:	f022 0203 	bic.w	r2, r2, #3
 8009540:	3d03      	subs	r5, #3
 8009542:	45ac      	cmp	ip, r5
 8009544:	bf38      	it	cc
 8009546:	2200      	movcc	r2, #0
 8009548:	441a      	add	r2, r3
 800954a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800954e:	b17b      	cbz	r3, 8009570 <__mdiff+0x108>
 8009550:	6107      	str	r7, [r0, #16]
 8009552:	e7a3      	b.n	800949c <__mdiff+0x34>
 8009554:	f856 8b04 	ldr.w	r8, [r6], #4
 8009558:	fa11 f288 	uxtah	r2, r1, r8
 800955c:	1414      	asrs	r4, r2, #16
 800955e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009562:	b292      	uxth	r2, r2
 8009564:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009568:	f84e 2b04 	str.w	r2, [lr], #4
 800956c:	1421      	asrs	r1, r4, #16
 800956e:	e7e0      	b.n	8009532 <__mdiff+0xca>
 8009570:	3f01      	subs	r7, #1
 8009572:	e7ea      	b.n	800954a <__mdiff+0xe2>
 8009574:	0800a2c7 	.word	0x0800a2c7
 8009578:	0800a338 	.word	0x0800a338

0800957c <__d2b>:
 800957c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009580:	4689      	mov	r9, r1
 8009582:	2101      	movs	r1, #1
 8009584:	ec57 6b10 	vmov	r6, r7, d0
 8009588:	4690      	mov	r8, r2
 800958a:	f7ff fccf 	bl	8008f2c <_Balloc>
 800958e:	4604      	mov	r4, r0
 8009590:	b930      	cbnz	r0, 80095a0 <__d2b+0x24>
 8009592:	4602      	mov	r2, r0
 8009594:	4b25      	ldr	r3, [pc, #148]	; (800962c <__d2b+0xb0>)
 8009596:	4826      	ldr	r0, [pc, #152]	; (8009630 <__d2b+0xb4>)
 8009598:	f240 310a 	movw	r1, #778	; 0x30a
 800959c:	f000 fbc0 	bl	8009d20 <__assert_func>
 80095a0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80095a4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80095a8:	bb35      	cbnz	r5, 80095f8 <__d2b+0x7c>
 80095aa:	2e00      	cmp	r6, #0
 80095ac:	9301      	str	r3, [sp, #4]
 80095ae:	d028      	beq.n	8009602 <__d2b+0x86>
 80095b0:	4668      	mov	r0, sp
 80095b2:	9600      	str	r6, [sp, #0]
 80095b4:	f7ff fd82 	bl	80090bc <__lo0bits>
 80095b8:	9900      	ldr	r1, [sp, #0]
 80095ba:	b300      	cbz	r0, 80095fe <__d2b+0x82>
 80095bc:	9a01      	ldr	r2, [sp, #4]
 80095be:	f1c0 0320 	rsb	r3, r0, #32
 80095c2:	fa02 f303 	lsl.w	r3, r2, r3
 80095c6:	430b      	orrs	r3, r1
 80095c8:	40c2      	lsrs	r2, r0
 80095ca:	6163      	str	r3, [r4, #20]
 80095cc:	9201      	str	r2, [sp, #4]
 80095ce:	9b01      	ldr	r3, [sp, #4]
 80095d0:	61a3      	str	r3, [r4, #24]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	bf14      	ite	ne
 80095d6:	2202      	movne	r2, #2
 80095d8:	2201      	moveq	r2, #1
 80095da:	6122      	str	r2, [r4, #16]
 80095dc:	b1d5      	cbz	r5, 8009614 <__d2b+0x98>
 80095de:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80095e2:	4405      	add	r5, r0
 80095e4:	f8c9 5000 	str.w	r5, [r9]
 80095e8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80095ec:	f8c8 0000 	str.w	r0, [r8]
 80095f0:	4620      	mov	r0, r4
 80095f2:	b003      	add	sp, #12
 80095f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80095f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80095fc:	e7d5      	b.n	80095aa <__d2b+0x2e>
 80095fe:	6161      	str	r1, [r4, #20]
 8009600:	e7e5      	b.n	80095ce <__d2b+0x52>
 8009602:	a801      	add	r0, sp, #4
 8009604:	f7ff fd5a 	bl	80090bc <__lo0bits>
 8009608:	9b01      	ldr	r3, [sp, #4]
 800960a:	6163      	str	r3, [r4, #20]
 800960c:	2201      	movs	r2, #1
 800960e:	6122      	str	r2, [r4, #16]
 8009610:	3020      	adds	r0, #32
 8009612:	e7e3      	b.n	80095dc <__d2b+0x60>
 8009614:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009618:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800961c:	f8c9 0000 	str.w	r0, [r9]
 8009620:	6918      	ldr	r0, [r3, #16]
 8009622:	f7ff fd2b 	bl	800907c <__hi0bits>
 8009626:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800962a:	e7df      	b.n	80095ec <__d2b+0x70>
 800962c:	0800a2c7 	.word	0x0800a2c7
 8009630:	0800a338 	.word	0x0800a338

08009634 <_calloc_r>:
 8009634:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009636:	fba1 2402 	umull	r2, r4, r1, r2
 800963a:	b94c      	cbnz	r4, 8009650 <_calloc_r+0x1c>
 800963c:	4611      	mov	r1, r2
 800963e:	9201      	str	r2, [sp, #4]
 8009640:	f000 f87a 	bl	8009738 <_malloc_r>
 8009644:	9a01      	ldr	r2, [sp, #4]
 8009646:	4605      	mov	r5, r0
 8009648:	b930      	cbnz	r0, 8009658 <_calloc_r+0x24>
 800964a:	4628      	mov	r0, r5
 800964c:	b003      	add	sp, #12
 800964e:	bd30      	pop	{r4, r5, pc}
 8009650:	220c      	movs	r2, #12
 8009652:	6002      	str	r2, [r0, #0]
 8009654:	2500      	movs	r5, #0
 8009656:	e7f8      	b.n	800964a <_calloc_r+0x16>
 8009658:	4621      	mov	r1, r4
 800965a:	f7fe f84d 	bl	80076f8 <memset>
 800965e:	e7f4      	b.n	800964a <_calloc_r+0x16>

08009660 <_free_r>:
 8009660:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009662:	2900      	cmp	r1, #0
 8009664:	d044      	beq.n	80096f0 <_free_r+0x90>
 8009666:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800966a:	9001      	str	r0, [sp, #4]
 800966c:	2b00      	cmp	r3, #0
 800966e:	f1a1 0404 	sub.w	r4, r1, #4
 8009672:	bfb8      	it	lt
 8009674:	18e4      	addlt	r4, r4, r3
 8009676:	f000 fcdf 	bl	800a038 <__malloc_lock>
 800967a:	4a1e      	ldr	r2, [pc, #120]	; (80096f4 <_free_r+0x94>)
 800967c:	9801      	ldr	r0, [sp, #4]
 800967e:	6813      	ldr	r3, [r2, #0]
 8009680:	b933      	cbnz	r3, 8009690 <_free_r+0x30>
 8009682:	6063      	str	r3, [r4, #4]
 8009684:	6014      	str	r4, [r2, #0]
 8009686:	b003      	add	sp, #12
 8009688:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800968c:	f000 bcda 	b.w	800a044 <__malloc_unlock>
 8009690:	42a3      	cmp	r3, r4
 8009692:	d908      	bls.n	80096a6 <_free_r+0x46>
 8009694:	6825      	ldr	r5, [r4, #0]
 8009696:	1961      	adds	r1, r4, r5
 8009698:	428b      	cmp	r3, r1
 800969a:	bf01      	itttt	eq
 800969c:	6819      	ldreq	r1, [r3, #0]
 800969e:	685b      	ldreq	r3, [r3, #4]
 80096a0:	1949      	addeq	r1, r1, r5
 80096a2:	6021      	streq	r1, [r4, #0]
 80096a4:	e7ed      	b.n	8009682 <_free_r+0x22>
 80096a6:	461a      	mov	r2, r3
 80096a8:	685b      	ldr	r3, [r3, #4]
 80096aa:	b10b      	cbz	r3, 80096b0 <_free_r+0x50>
 80096ac:	42a3      	cmp	r3, r4
 80096ae:	d9fa      	bls.n	80096a6 <_free_r+0x46>
 80096b0:	6811      	ldr	r1, [r2, #0]
 80096b2:	1855      	adds	r5, r2, r1
 80096b4:	42a5      	cmp	r5, r4
 80096b6:	d10b      	bne.n	80096d0 <_free_r+0x70>
 80096b8:	6824      	ldr	r4, [r4, #0]
 80096ba:	4421      	add	r1, r4
 80096bc:	1854      	adds	r4, r2, r1
 80096be:	42a3      	cmp	r3, r4
 80096c0:	6011      	str	r1, [r2, #0]
 80096c2:	d1e0      	bne.n	8009686 <_free_r+0x26>
 80096c4:	681c      	ldr	r4, [r3, #0]
 80096c6:	685b      	ldr	r3, [r3, #4]
 80096c8:	6053      	str	r3, [r2, #4]
 80096ca:	4421      	add	r1, r4
 80096cc:	6011      	str	r1, [r2, #0]
 80096ce:	e7da      	b.n	8009686 <_free_r+0x26>
 80096d0:	d902      	bls.n	80096d8 <_free_r+0x78>
 80096d2:	230c      	movs	r3, #12
 80096d4:	6003      	str	r3, [r0, #0]
 80096d6:	e7d6      	b.n	8009686 <_free_r+0x26>
 80096d8:	6825      	ldr	r5, [r4, #0]
 80096da:	1961      	adds	r1, r4, r5
 80096dc:	428b      	cmp	r3, r1
 80096de:	bf04      	itt	eq
 80096e0:	6819      	ldreq	r1, [r3, #0]
 80096e2:	685b      	ldreq	r3, [r3, #4]
 80096e4:	6063      	str	r3, [r4, #4]
 80096e6:	bf04      	itt	eq
 80096e8:	1949      	addeq	r1, r1, r5
 80096ea:	6021      	streq	r1, [r4, #0]
 80096ec:	6054      	str	r4, [r2, #4]
 80096ee:	e7ca      	b.n	8009686 <_free_r+0x26>
 80096f0:	b003      	add	sp, #12
 80096f2:	bd30      	pop	{r4, r5, pc}
 80096f4:	200003b0 	.word	0x200003b0

080096f8 <sbrk_aligned>:
 80096f8:	b570      	push	{r4, r5, r6, lr}
 80096fa:	4e0e      	ldr	r6, [pc, #56]	; (8009734 <sbrk_aligned+0x3c>)
 80096fc:	460c      	mov	r4, r1
 80096fe:	6831      	ldr	r1, [r6, #0]
 8009700:	4605      	mov	r5, r0
 8009702:	b911      	cbnz	r1, 800970a <sbrk_aligned+0x12>
 8009704:	f000 f9e6 	bl	8009ad4 <_sbrk_r>
 8009708:	6030      	str	r0, [r6, #0]
 800970a:	4621      	mov	r1, r4
 800970c:	4628      	mov	r0, r5
 800970e:	f000 f9e1 	bl	8009ad4 <_sbrk_r>
 8009712:	1c43      	adds	r3, r0, #1
 8009714:	d00a      	beq.n	800972c <sbrk_aligned+0x34>
 8009716:	1cc4      	adds	r4, r0, #3
 8009718:	f024 0403 	bic.w	r4, r4, #3
 800971c:	42a0      	cmp	r0, r4
 800971e:	d007      	beq.n	8009730 <sbrk_aligned+0x38>
 8009720:	1a21      	subs	r1, r4, r0
 8009722:	4628      	mov	r0, r5
 8009724:	f000 f9d6 	bl	8009ad4 <_sbrk_r>
 8009728:	3001      	adds	r0, #1
 800972a:	d101      	bne.n	8009730 <sbrk_aligned+0x38>
 800972c:	f04f 34ff 	mov.w	r4, #4294967295
 8009730:	4620      	mov	r0, r4
 8009732:	bd70      	pop	{r4, r5, r6, pc}
 8009734:	200003b4 	.word	0x200003b4

08009738 <_malloc_r>:
 8009738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800973c:	1ccd      	adds	r5, r1, #3
 800973e:	f025 0503 	bic.w	r5, r5, #3
 8009742:	3508      	adds	r5, #8
 8009744:	2d0c      	cmp	r5, #12
 8009746:	bf38      	it	cc
 8009748:	250c      	movcc	r5, #12
 800974a:	2d00      	cmp	r5, #0
 800974c:	4607      	mov	r7, r0
 800974e:	db01      	blt.n	8009754 <_malloc_r+0x1c>
 8009750:	42a9      	cmp	r1, r5
 8009752:	d905      	bls.n	8009760 <_malloc_r+0x28>
 8009754:	230c      	movs	r3, #12
 8009756:	603b      	str	r3, [r7, #0]
 8009758:	2600      	movs	r6, #0
 800975a:	4630      	mov	r0, r6
 800975c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009760:	4e2e      	ldr	r6, [pc, #184]	; (800981c <_malloc_r+0xe4>)
 8009762:	f000 fc69 	bl	800a038 <__malloc_lock>
 8009766:	6833      	ldr	r3, [r6, #0]
 8009768:	461c      	mov	r4, r3
 800976a:	bb34      	cbnz	r4, 80097ba <_malloc_r+0x82>
 800976c:	4629      	mov	r1, r5
 800976e:	4638      	mov	r0, r7
 8009770:	f7ff ffc2 	bl	80096f8 <sbrk_aligned>
 8009774:	1c43      	adds	r3, r0, #1
 8009776:	4604      	mov	r4, r0
 8009778:	d14d      	bne.n	8009816 <_malloc_r+0xde>
 800977a:	6834      	ldr	r4, [r6, #0]
 800977c:	4626      	mov	r6, r4
 800977e:	2e00      	cmp	r6, #0
 8009780:	d140      	bne.n	8009804 <_malloc_r+0xcc>
 8009782:	6823      	ldr	r3, [r4, #0]
 8009784:	4631      	mov	r1, r6
 8009786:	4638      	mov	r0, r7
 8009788:	eb04 0803 	add.w	r8, r4, r3
 800978c:	f000 f9a2 	bl	8009ad4 <_sbrk_r>
 8009790:	4580      	cmp	r8, r0
 8009792:	d13a      	bne.n	800980a <_malloc_r+0xd2>
 8009794:	6821      	ldr	r1, [r4, #0]
 8009796:	3503      	adds	r5, #3
 8009798:	1a6d      	subs	r5, r5, r1
 800979a:	f025 0503 	bic.w	r5, r5, #3
 800979e:	3508      	adds	r5, #8
 80097a0:	2d0c      	cmp	r5, #12
 80097a2:	bf38      	it	cc
 80097a4:	250c      	movcc	r5, #12
 80097a6:	4629      	mov	r1, r5
 80097a8:	4638      	mov	r0, r7
 80097aa:	f7ff ffa5 	bl	80096f8 <sbrk_aligned>
 80097ae:	3001      	adds	r0, #1
 80097b0:	d02b      	beq.n	800980a <_malloc_r+0xd2>
 80097b2:	6823      	ldr	r3, [r4, #0]
 80097b4:	442b      	add	r3, r5
 80097b6:	6023      	str	r3, [r4, #0]
 80097b8:	e00e      	b.n	80097d8 <_malloc_r+0xa0>
 80097ba:	6822      	ldr	r2, [r4, #0]
 80097bc:	1b52      	subs	r2, r2, r5
 80097be:	d41e      	bmi.n	80097fe <_malloc_r+0xc6>
 80097c0:	2a0b      	cmp	r2, #11
 80097c2:	d916      	bls.n	80097f2 <_malloc_r+0xba>
 80097c4:	1961      	adds	r1, r4, r5
 80097c6:	42a3      	cmp	r3, r4
 80097c8:	6025      	str	r5, [r4, #0]
 80097ca:	bf18      	it	ne
 80097cc:	6059      	strne	r1, [r3, #4]
 80097ce:	6863      	ldr	r3, [r4, #4]
 80097d0:	bf08      	it	eq
 80097d2:	6031      	streq	r1, [r6, #0]
 80097d4:	5162      	str	r2, [r4, r5]
 80097d6:	604b      	str	r3, [r1, #4]
 80097d8:	4638      	mov	r0, r7
 80097da:	f104 060b 	add.w	r6, r4, #11
 80097de:	f000 fc31 	bl	800a044 <__malloc_unlock>
 80097e2:	f026 0607 	bic.w	r6, r6, #7
 80097e6:	1d23      	adds	r3, r4, #4
 80097e8:	1af2      	subs	r2, r6, r3
 80097ea:	d0b6      	beq.n	800975a <_malloc_r+0x22>
 80097ec:	1b9b      	subs	r3, r3, r6
 80097ee:	50a3      	str	r3, [r4, r2]
 80097f0:	e7b3      	b.n	800975a <_malloc_r+0x22>
 80097f2:	6862      	ldr	r2, [r4, #4]
 80097f4:	42a3      	cmp	r3, r4
 80097f6:	bf0c      	ite	eq
 80097f8:	6032      	streq	r2, [r6, #0]
 80097fa:	605a      	strne	r2, [r3, #4]
 80097fc:	e7ec      	b.n	80097d8 <_malloc_r+0xa0>
 80097fe:	4623      	mov	r3, r4
 8009800:	6864      	ldr	r4, [r4, #4]
 8009802:	e7b2      	b.n	800976a <_malloc_r+0x32>
 8009804:	4634      	mov	r4, r6
 8009806:	6876      	ldr	r6, [r6, #4]
 8009808:	e7b9      	b.n	800977e <_malloc_r+0x46>
 800980a:	230c      	movs	r3, #12
 800980c:	603b      	str	r3, [r7, #0]
 800980e:	4638      	mov	r0, r7
 8009810:	f000 fc18 	bl	800a044 <__malloc_unlock>
 8009814:	e7a1      	b.n	800975a <_malloc_r+0x22>
 8009816:	6025      	str	r5, [r4, #0]
 8009818:	e7de      	b.n	80097d8 <_malloc_r+0xa0>
 800981a:	bf00      	nop
 800981c:	200003b0 	.word	0x200003b0

08009820 <__sfputc_r>:
 8009820:	6893      	ldr	r3, [r2, #8]
 8009822:	3b01      	subs	r3, #1
 8009824:	2b00      	cmp	r3, #0
 8009826:	b410      	push	{r4}
 8009828:	6093      	str	r3, [r2, #8]
 800982a:	da08      	bge.n	800983e <__sfputc_r+0x1e>
 800982c:	6994      	ldr	r4, [r2, #24]
 800982e:	42a3      	cmp	r3, r4
 8009830:	db01      	blt.n	8009836 <__sfputc_r+0x16>
 8009832:	290a      	cmp	r1, #10
 8009834:	d103      	bne.n	800983e <__sfputc_r+0x1e>
 8009836:	f85d 4b04 	ldr.w	r4, [sp], #4
 800983a:	f000 b99f 	b.w	8009b7c <__swbuf_r>
 800983e:	6813      	ldr	r3, [r2, #0]
 8009840:	1c58      	adds	r0, r3, #1
 8009842:	6010      	str	r0, [r2, #0]
 8009844:	7019      	strb	r1, [r3, #0]
 8009846:	4608      	mov	r0, r1
 8009848:	f85d 4b04 	ldr.w	r4, [sp], #4
 800984c:	4770      	bx	lr

0800984e <__sfputs_r>:
 800984e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009850:	4606      	mov	r6, r0
 8009852:	460f      	mov	r7, r1
 8009854:	4614      	mov	r4, r2
 8009856:	18d5      	adds	r5, r2, r3
 8009858:	42ac      	cmp	r4, r5
 800985a:	d101      	bne.n	8009860 <__sfputs_r+0x12>
 800985c:	2000      	movs	r0, #0
 800985e:	e007      	b.n	8009870 <__sfputs_r+0x22>
 8009860:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009864:	463a      	mov	r2, r7
 8009866:	4630      	mov	r0, r6
 8009868:	f7ff ffda 	bl	8009820 <__sfputc_r>
 800986c:	1c43      	adds	r3, r0, #1
 800986e:	d1f3      	bne.n	8009858 <__sfputs_r+0xa>
 8009870:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009874 <_vfiprintf_r>:
 8009874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009878:	460d      	mov	r5, r1
 800987a:	b09d      	sub	sp, #116	; 0x74
 800987c:	4614      	mov	r4, r2
 800987e:	4698      	mov	r8, r3
 8009880:	4606      	mov	r6, r0
 8009882:	b118      	cbz	r0, 800988c <_vfiprintf_r+0x18>
 8009884:	6983      	ldr	r3, [r0, #24]
 8009886:	b90b      	cbnz	r3, 800988c <_vfiprintf_r+0x18>
 8009888:	f7ff fa94 	bl	8008db4 <__sinit>
 800988c:	4b89      	ldr	r3, [pc, #548]	; (8009ab4 <_vfiprintf_r+0x240>)
 800988e:	429d      	cmp	r5, r3
 8009890:	d11b      	bne.n	80098ca <_vfiprintf_r+0x56>
 8009892:	6875      	ldr	r5, [r6, #4]
 8009894:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009896:	07d9      	lsls	r1, r3, #31
 8009898:	d405      	bmi.n	80098a6 <_vfiprintf_r+0x32>
 800989a:	89ab      	ldrh	r3, [r5, #12]
 800989c:	059a      	lsls	r2, r3, #22
 800989e:	d402      	bmi.n	80098a6 <_vfiprintf_r+0x32>
 80098a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80098a2:	f7ff fb2a 	bl	8008efa <__retarget_lock_acquire_recursive>
 80098a6:	89ab      	ldrh	r3, [r5, #12]
 80098a8:	071b      	lsls	r3, r3, #28
 80098aa:	d501      	bpl.n	80098b0 <_vfiprintf_r+0x3c>
 80098ac:	692b      	ldr	r3, [r5, #16]
 80098ae:	b9eb      	cbnz	r3, 80098ec <_vfiprintf_r+0x78>
 80098b0:	4629      	mov	r1, r5
 80098b2:	4630      	mov	r0, r6
 80098b4:	f000 f9c6 	bl	8009c44 <__swsetup_r>
 80098b8:	b1c0      	cbz	r0, 80098ec <_vfiprintf_r+0x78>
 80098ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80098bc:	07dc      	lsls	r4, r3, #31
 80098be:	d50e      	bpl.n	80098de <_vfiprintf_r+0x6a>
 80098c0:	f04f 30ff 	mov.w	r0, #4294967295
 80098c4:	b01d      	add	sp, #116	; 0x74
 80098c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098ca:	4b7b      	ldr	r3, [pc, #492]	; (8009ab8 <_vfiprintf_r+0x244>)
 80098cc:	429d      	cmp	r5, r3
 80098ce:	d101      	bne.n	80098d4 <_vfiprintf_r+0x60>
 80098d0:	68b5      	ldr	r5, [r6, #8]
 80098d2:	e7df      	b.n	8009894 <_vfiprintf_r+0x20>
 80098d4:	4b79      	ldr	r3, [pc, #484]	; (8009abc <_vfiprintf_r+0x248>)
 80098d6:	429d      	cmp	r5, r3
 80098d8:	bf08      	it	eq
 80098da:	68f5      	ldreq	r5, [r6, #12]
 80098dc:	e7da      	b.n	8009894 <_vfiprintf_r+0x20>
 80098de:	89ab      	ldrh	r3, [r5, #12]
 80098e0:	0598      	lsls	r0, r3, #22
 80098e2:	d4ed      	bmi.n	80098c0 <_vfiprintf_r+0x4c>
 80098e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80098e6:	f7ff fb09 	bl	8008efc <__retarget_lock_release_recursive>
 80098ea:	e7e9      	b.n	80098c0 <_vfiprintf_r+0x4c>
 80098ec:	2300      	movs	r3, #0
 80098ee:	9309      	str	r3, [sp, #36]	; 0x24
 80098f0:	2320      	movs	r3, #32
 80098f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80098f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80098fa:	2330      	movs	r3, #48	; 0x30
 80098fc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009ac0 <_vfiprintf_r+0x24c>
 8009900:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009904:	f04f 0901 	mov.w	r9, #1
 8009908:	4623      	mov	r3, r4
 800990a:	469a      	mov	sl, r3
 800990c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009910:	b10a      	cbz	r2, 8009916 <_vfiprintf_r+0xa2>
 8009912:	2a25      	cmp	r2, #37	; 0x25
 8009914:	d1f9      	bne.n	800990a <_vfiprintf_r+0x96>
 8009916:	ebba 0b04 	subs.w	fp, sl, r4
 800991a:	d00b      	beq.n	8009934 <_vfiprintf_r+0xc0>
 800991c:	465b      	mov	r3, fp
 800991e:	4622      	mov	r2, r4
 8009920:	4629      	mov	r1, r5
 8009922:	4630      	mov	r0, r6
 8009924:	f7ff ff93 	bl	800984e <__sfputs_r>
 8009928:	3001      	adds	r0, #1
 800992a:	f000 80aa 	beq.w	8009a82 <_vfiprintf_r+0x20e>
 800992e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009930:	445a      	add	r2, fp
 8009932:	9209      	str	r2, [sp, #36]	; 0x24
 8009934:	f89a 3000 	ldrb.w	r3, [sl]
 8009938:	2b00      	cmp	r3, #0
 800993a:	f000 80a2 	beq.w	8009a82 <_vfiprintf_r+0x20e>
 800993e:	2300      	movs	r3, #0
 8009940:	f04f 32ff 	mov.w	r2, #4294967295
 8009944:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009948:	f10a 0a01 	add.w	sl, sl, #1
 800994c:	9304      	str	r3, [sp, #16]
 800994e:	9307      	str	r3, [sp, #28]
 8009950:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009954:	931a      	str	r3, [sp, #104]	; 0x68
 8009956:	4654      	mov	r4, sl
 8009958:	2205      	movs	r2, #5
 800995a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800995e:	4858      	ldr	r0, [pc, #352]	; (8009ac0 <_vfiprintf_r+0x24c>)
 8009960:	f7f6 fc3e 	bl	80001e0 <memchr>
 8009964:	9a04      	ldr	r2, [sp, #16]
 8009966:	b9d8      	cbnz	r0, 80099a0 <_vfiprintf_r+0x12c>
 8009968:	06d1      	lsls	r1, r2, #27
 800996a:	bf44      	itt	mi
 800996c:	2320      	movmi	r3, #32
 800996e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009972:	0713      	lsls	r3, r2, #28
 8009974:	bf44      	itt	mi
 8009976:	232b      	movmi	r3, #43	; 0x2b
 8009978:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800997c:	f89a 3000 	ldrb.w	r3, [sl]
 8009980:	2b2a      	cmp	r3, #42	; 0x2a
 8009982:	d015      	beq.n	80099b0 <_vfiprintf_r+0x13c>
 8009984:	9a07      	ldr	r2, [sp, #28]
 8009986:	4654      	mov	r4, sl
 8009988:	2000      	movs	r0, #0
 800998a:	f04f 0c0a 	mov.w	ip, #10
 800998e:	4621      	mov	r1, r4
 8009990:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009994:	3b30      	subs	r3, #48	; 0x30
 8009996:	2b09      	cmp	r3, #9
 8009998:	d94e      	bls.n	8009a38 <_vfiprintf_r+0x1c4>
 800999a:	b1b0      	cbz	r0, 80099ca <_vfiprintf_r+0x156>
 800999c:	9207      	str	r2, [sp, #28]
 800999e:	e014      	b.n	80099ca <_vfiprintf_r+0x156>
 80099a0:	eba0 0308 	sub.w	r3, r0, r8
 80099a4:	fa09 f303 	lsl.w	r3, r9, r3
 80099a8:	4313      	orrs	r3, r2
 80099aa:	9304      	str	r3, [sp, #16]
 80099ac:	46a2      	mov	sl, r4
 80099ae:	e7d2      	b.n	8009956 <_vfiprintf_r+0xe2>
 80099b0:	9b03      	ldr	r3, [sp, #12]
 80099b2:	1d19      	adds	r1, r3, #4
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	9103      	str	r1, [sp, #12]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	bfbb      	ittet	lt
 80099bc:	425b      	neglt	r3, r3
 80099be:	f042 0202 	orrlt.w	r2, r2, #2
 80099c2:	9307      	strge	r3, [sp, #28]
 80099c4:	9307      	strlt	r3, [sp, #28]
 80099c6:	bfb8      	it	lt
 80099c8:	9204      	strlt	r2, [sp, #16]
 80099ca:	7823      	ldrb	r3, [r4, #0]
 80099cc:	2b2e      	cmp	r3, #46	; 0x2e
 80099ce:	d10c      	bne.n	80099ea <_vfiprintf_r+0x176>
 80099d0:	7863      	ldrb	r3, [r4, #1]
 80099d2:	2b2a      	cmp	r3, #42	; 0x2a
 80099d4:	d135      	bne.n	8009a42 <_vfiprintf_r+0x1ce>
 80099d6:	9b03      	ldr	r3, [sp, #12]
 80099d8:	1d1a      	adds	r2, r3, #4
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	9203      	str	r2, [sp, #12]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	bfb8      	it	lt
 80099e2:	f04f 33ff 	movlt.w	r3, #4294967295
 80099e6:	3402      	adds	r4, #2
 80099e8:	9305      	str	r3, [sp, #20]
 80099ea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009ad0 <_vfiprintf_r+0x25c>
 80099ee:	7821      	ldrb	r1, [r4, #0]
 80099f0:	2203      	movs	r2, #3
 80099f2:	4650      	mov	r0, sl
 80099f4:	f7f6 fbf4 	bl	80001e0 <memchr>
 80099f8:	b140      	cbz	r0, 8009a0c <_vfiprintf_r+0x198>
 80099fa:	2340      	movs	r3, #64	; 0x40
 80099fc:	eba0 000a 	sub.w	r0, r0, sl
 8009a00:	fa03 f000 	lsl.w	r0, r3, r0
 8009a04:	9b04      	ldr	r3, [sp, #16]
 8009a06:	4303      	orrs	r3, r0
 8009a08:	3401      	adds	r4, #1
 8009a0a:	9304      	str	r3, [sp, #16]
 8009a0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a10:	482c      	ldr	r0, [pc, #176]	; (8009ac4 <_vfiprintf_r+0x250>)
 8009a12:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009a16:	2206      	movs	r2, #6
 8009a18:	f7f6 fbe2 	bl	80001e0 <memchr>
 8009a1c:	2800      	cmp	r0, #0
 8009a1e:	d03f      	beq.n	8009aa0 <_vfiprintf_r+0x22c>
 8009a20:	4b29      	ldr	r3, [pc, #164]	; (8009ac8 <_vfiprintf_r+0x254>)
 8009a22:	bb1b      	cbnz	r3, 8009a6c <_vfiprintf_r+0x1f8>
 8009a24:	9b03      	ldr	r3, [sp, #12]
 8009a26:	3307      	adds	r3, #7
 8009a28:	f023 0307 	bic.w	r3, r3, #7
 8009a2c:	3308      	adds	r3, #8
 8009a2e:	9303      	str	r3, [sp, #12]
 8009a30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a32:	443b      	add	r3, r7
 8009a34:	9309      	str	r3, [sp, #36]	; 0x24
 8009a36:	e767      	b.n	8009908 <_vfiprintf_r+0x94>
 8009a38:	fb0c 3202 	mla	r2, ip, r2, r3
 8009a3c:	460c      	mov	r4, r1
 8009a3e:	2001      	movs	r0, #1
 8009a40:	e7a5      	b.n	800998e <_vfiprintf_r+0x11a>
 8009a42:	2300      	movs	r3, #0
 8009a44:	3401      	adds	r4, #1
 8009a46:	9305      	str	r3, [sp, #20]
 8009a48:	4619      	mov	r1, r3
 8009a4a:	f04f 0c0a 	mov.w	ip, #10
 8009a4e:	4620      	mov	r0, r4
 8009a50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a54:	3a30      	subs	r2, #48	; 0x30
 8009a56:	2a09      	cmp	r2, #9
 8009a58:	d903      	bls.n	8009a62 <_vfiprintf_r+0x1ee>
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d0c5      	beq.n	80099ea <_vfiprintf_r+0x176>
 8009a5e:	9105      	str	r1, [sp, #20]
 8009a60:	e7c3      	b.n	80099ea <_vfiprintf_r+0x176>
 8009a62:	fb0c 2101 	mla	r1, ip, r1, r2
 8009a66:	4604      	mov	r4, r0
 8009a68:	2301      	movs	r3, #1
 8009a6a:	e7f0      	b.n	8009a4e <_vfiprintf_r+0x1da>
 8009a6c:	ab03      	add	r3, sp, #12
 8009a6e:	9300      	str	r3, [sp, #0]
 8009a70:	462a      	mov	r2, r5
 8009a72:	4b16      	ldr	r3, [pc, #88]	; (8009acc <_vfiprintf_r+0x258>)
 8009a74:	a904      	add	r1, sp, #16
 8009a76:	4630      	mov	r0, r6
 8009a78:	f7fd fee6 	bl	8007848 <_printf_float>
 8009a7c:	4607      	mov	r7, r0
 8009a7e:	1c78      	adds	r0, r7, #1
 8009a80:	d1d6      	bne.n	8009a30 <_vfiprintf_r+0x1bc>
 8009a82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a84:	07d9      	lsls	r1, r3, #31
 8009a86:	d405      	bmi.n	8009a94 <_vfiprintf_r+0x220>
 8009a88:	89ab      	ldrh	r3, [r5, #12]
 8009a8a:	059a      	lsls	r2, r3, #22
 8009a8c:	d402      	bmi.n	8009a94 <_vfiprintf_r+0x220>
 8009a8e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009a90:	f7ff fa34 	bl	8008efc <__retarget_lock_release_recursive>
 8009a94:	89ab      	ldrh	r3, [r5, #12]
 8009a96:	065b      	lsls	r3, r3, #25
 8009a98:	f53f af12 	bmi.w	80098c0 <_vfiprintf_r+0x4c>
 8009a9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009a9e:	e711      	b.n	80098c4 <_vfiprintf_r+0x50>
 8009aa0:	ab03      	add	r3, sp, #12
 8009aa2:	9300      	str	r3, [sp, #0]
 8009aa4:	462a      	mov	r2, r5
 8009aa6:	4b09      	ldr	r3, [pc, #36]	; (8009acc <_vfiprintf_r+0x258>)
 8009aa8:	a904      	add	r1, sp, #16
 8009aaa:	4630      	mov	r0, r6
 8009aac:	f7fe f970 	bl	8007d90 <_printf_i>
 8009ab0:	e7e4      	b.n	8009a7c <_vfiprintf_r+0x208>
 8009ab2:	bf00      	nop
 8009ab4:	0800a2f8 	.word	0x0800a2f8
 8009ab8:	0800a318 	.word	0x0800a318
 8009abc:	0800a2d8 	.word	0x0800a2d8
 8009ac0:	0800a494 	.word	0x0800a494
 8009ac4:	0800a49e 	.word	0x0800a49e
 8009ac8:	08007849 	.word	0x08007849
 8009acc:	0800984f 	.word	0x0800984f
 8009ad0:	0800a49a 	.word	0x0800a49a

08009ad4 <_sbrk_r>:
 8009ad4:	b538      	push	{r3, r4, r5, lr}
 8009ad6:	4d06      	ldr	r5, [pc, #24]	; (8009af0 <_sbrk_r+0x1c>)
 8009ad8:	2300      	movs	r3, #0
 8009ada:	4604      	mov	r4, r0
 8009adc:	4608      	mov	r0, r1
 8009ade:	602b      	str	r3, [r5, #0]
 8009ae0:	f7f8 fb8a 	bl	80021f8 <_sbrk>
 8009ae4:	1c43      	adds	r3, r0, #1
 8009ae6:	d102      	bne.n	8009aee <_sbrk_r+0x1a>
 8009ae8:	682b      	ldr	r3, [r5, #0]
 8009aea:	b103      	cbz	r3, 8009aee <_sbrk_r+0x1a>
 8009aec:	6023      	str	r3, [r4, #0]
 8009aee:	bd38      	pop	{r3, r4, r5, pc}
 8009af0:	200003b8 	.word	0x200003b8

08009af4 <__sread>:
 8009af4:	b510      	push	{r4, lr}
 8009af6:	460c      	mov	r4, r1
 8009af8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009afc:	f000 faa8 	bl	800a050 <_read_r>
 8009b00:	2800      	cmp	r0, #0
 8009b02:	bfab      	itete	ge
 8009b04:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009b06:	89a3      	ldrhlt	r3, [r4, #12]
 8009b08:	181b      	addge	r3, r3, r0
 8009b0a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009b0e:	bfac      	ite	ge
 8009b10:	6563      	strge	r3, [r4, #84]	; 0x54
 8009b12:	81a3      	strhlt	r3, [r4, #12]
 8009b14:	bd10      	pop	{r4, pc}

08009b16 <__swrite>:
 8009b16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b1a:	461f      	mov	r7, r3
 8009b1c:	898b      	ldrh	r3, [r1, #12]
 8009b1e:	05db      	lsls	r3, r3, #23
 8009b20:	4605      	mov	r5, r0
 8009b22:	460c      	mov	r4, r1
 8009b24:	4616      	mov	r6, r2
 8009b26:	d505      	bpl.n	8009b34 <__swrite+0x1e>
 8009b28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b2c:	2302      	movs	r3, #2
 8009b2e:	2200      	movs	r2, #0
 8009b30:	f000 f9f8 	bl	8009f24 <_lseek_r>
 8009b34:	89a3      	ldrh	r3, [r4, #12]
 8009b36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b3a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009b3e:	81a3      	strh	r3, [r4, #12]
 8009b40:	4632      	mov	r2, r6
 8009b42:	463b      	mov	r3, r7
 8009b44:	4628      	mov	r0, r5
 8009b46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b4a:	f000 b869 	b.w	8009c20 <_write_r>

08009b4e <__sseek>:
 8009b4e:	b510      	push	{r4, lr}
 8009b50:	460c      	mov	r4, r1
 8009b52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b56:	f000 f9e5 	bl	8009f24 <_lseek_r>
 8009b5a:	1c43      	adds	r3, r0, #1
 8009b5c:	89a3      	ldrh	r3, [r4, #12]
 8009b5e:	bf15      	itete	ne
 8009b60:	6560      	strne	r0, [r4, #84]	; 0x54
 8009b62:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009b66:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009b6a:	81a3      	strheq	r3, [r4, #12]
 8009b6c:	bf18      	it	ne
 8009b6e:	81a3      	strhne	r3, [r4, #12]
 8009b70:	bd10      	pop	{r4, pc}

08009b72 <__sclose>:
 8009b72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b76:	f000 b8f1 	b.w	8009d5c <_close_r>
	...

08009b7c <__swbuf_r>:
 8009b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b7e:	460e      	mov	r6, r1
 8009b80:	4614      	mov	r4, r2
 8009b82:	4605      	mov	r5, r0
 8009b84:	b118      	cbz	r0, 8009b8e <__swbuf_r+0x12>
 8009b86:	6983      	ldr	r3, [r0, #24]
 8009b88:	b90b      	cbnz	r3, 8009b8e <__swbuf_r+0x12>
 8009b8a:	f7ff f913 	bl	8008db4 <__sinit>
 8009b8e:	4b21      	ldr	r3, [pc, #132]	; (8009c14 <__swbuf_r+0x98>)
 8009b90:	429c      	cmp	r4, r3
 8009b92:	d12b      	bne.n	8009bec <__swbuf_r+0x70>
 8009b94:	686c      	ldr	r4, [r5, #4]
 8009b96:	69a3      	ldr	r3, [r4, #24]
 8009b98:	60a3      	str	r3, [r4, #8]
 8009b9a:	89a3      	ldrh	r3, [r4, #12]
 8009b9c:	071a      	lsls	r2, r3, #28
 8009b9e:	d52f      	bpl.n	8009c00 <__swbuf_r+0x84>
 8009ba0:	6923      	ldr	r3, [r4, #16]
 8009ba2:	b36b      	cbz	r3, 8009c00 <__swbuf_r+0x84>
 8009ba4:	6923      	ldr	r3, [r4, #16]
 8009ba6:	6820      	ldr	r0, [r4, #0]
 8009ba8:	1ac0      	subs	r0, r0, r3
 8009baa:	6963      	ldr	r3, [r4, #20]
 8009bac:	b2f6      	uxtb	r6, r6
 8009bae:	4283      	cmp	r3, r0
 8009bb0:	4637      	mov	r7, r6
 8009bb2:	dc04      	bgt.n	8009bbe <__swbuf_r+0x42>
 8009bb4:	4621      	mov	r1, r4
 8009bb6:	4628      	mov	r0, r5
 8009bb8:	f000 f966 	bl	8009e88 <_fflush_r>
 8009bbc:	bb30      	cbnz	r0, 8009c0c <__swbuf_r+0x90>
 8009bbe:	68a3      	ldr	r3, [r4, #8]
 8009bc0:	3b01      	subs	r3, #1
 8009bc2:	60a3      	str	r3, [r4, #8]
 8009bc4:	6823      	ldr	r3, [r4, #0]
 8009bc6:	1c5a      	adds	r2, r3, #1
 8009bc8:	6022      	str	r2, [r4, #0]
 8009bca:	701e      	strb	r6, [r3, #0]
 8009bcc:	6963      	ldr	r3, [r4, #20]
 8009bce:	3001      	adds	r0, #1
 8009bd0:	4283      	cmp	r3, r0
 8009bd2:	d004      	beq.n	8009bde <__swbuf_r+0x62>
 8009bd4:	89a3      	ldrh	r3, [r4, #12]
 8009bd6:	07db      	lsls	r3, r3, #31
 8009bd8:	d506      	bpl.n	8009be8 <__swbuf_r+0x6c>
 8009bda:	2e0a      	cmp	r6, #10
 8009bdc:	d104      	bne.n	8009be8 <__swbuf_r+0x6c>
 8009bde:	4621      	mov	r1, r4
 8009be0:	4628      	mov	r0, r5
 8009be2:	f000 f951 	bl	8009e88 <_fflush_r>
 8009be6:	b988      	cbnz	r0, 8009c0c <__swbuf_r+0x90>
 8009be8:	4638      	mov	r0, r7
 8009bea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009bec:	4b0a      	ldr	r3, [pc, #40]	; (8009c18 <__swbuf_r+0x9c>)
 8009bee:	429c      	cmp	r4, r3
 8009bf0:	d101      	bne.n	8009bf6 <__swbuf_r+0x7a>
 8009bf2:	68ac      	ldr	r4, [r5, #8]
 8009bf4:	e7cf      	b.n	8009b96 <__swbuf_r+0x1a>
 8009bf6:	4b09      	ldr	r3, [pc, #36]	; (8009c1c <__swbuf_r+0xa0>)
 8009bf8:	429c      	cmp	r4, r3
 8009bfa:	bf08      	it	eq
 8009bfc:	68ec      	ldreq	r4, [r5, #12]
 8009bfe:	e7ca      	b.n	8009b96 <__swbuf_r+0x1a>
 8009c00:	4621      	mov	r1, r4
 8009c02:	4628      	mov	r0, r5
 8009c04:	f000 f81e 	bl	8009c44 <__swsetup_r>
 8009c08:	2800      	cmp	r0, #0
 8009c0a:	d0cb      	beq.n	8009ba4 <__swbuf_r+0x28>
 8009c0c:	f04f 37ff 	mov.w	r7, #4294967295
 8009c10:	e7ea      	b.n	8009be8 <__swbuf_r+0x6c>
 8009c12:	bf00      	nop
 8009c14:	0800a2f8 	.word	0x0800a2f8
 8009c18:	0800a318 	.word	0x0800a318
 8009c1c:	0800a2d8 	.word	0x0800a2d8

08009c20 <_write_r>:
 8009c20:	b538      	push	{r3, r4, r5, lr}
 8009c22:	4d07      	ldr	r5, [pc, #28]	; (8009c40 <_write_r+0x20>)
 8009c24:	4604      	mov	r4, r0
 8009c26:	4608      	mov	r0, r1
 8009c28:	4611      	mov	r1, r2
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	602a      	str	r2, [r5, #0]
 8009c2e:	461a      	mov	r2, r3
 8009c30:	f7f7 fdf0 	bl	8001814 <_write>
 8009c34:	1c43      	adds	r3, r0, #1
 8009c36:	d102      	bne.n	8009c3e <_write_r+0x1e>
 8009c38:	682b      	ldr	r3, [r5, #0]
 8009c3a:	b103      	cbz	r3, 8009c3e <_write_r+0x1e>
 8009c3c:	6023      	str	r3, [r4, #0]
 8009c3e:	bd38      	pop	{r3, r4, r5, pc}
 8009c40:	200003b8 	.word	0x200003b8

08009c44 <__swsetup_r>:
 8009c44:	4b32      	ldr	r3, [pc, #200]	; (8009d10 <__swsetup_r+0xcc>)
 8009c46:	b570      	push	{r4, r5, r6, lr}
 8009c48:	681d      	ldr	r5, [r3, #0]
 8009c4a:	4606      	mov	r6, r0
 8009c4c:	460c      	mov	r4, r1
 8009c4e:	b125      	cbz	r5, 8009c5a <__swsetup_r+0x16>
 8009c50:	69ab      	ldr	r3, [r5, #24]
 8009c52:	b913      	cbnz	r3, 8009c5a <__swsetup_r+0x16>
 8009c54:	4628      	mov	r0, r5
 8009c56:	f7ff f8ad 	bl	8008db4 <__sinit>
 8009c5a:	4b2e      	ldr	r3, [pc, #184]	; (8009d14 <__swsetup_r+0xd0>)
 8009c5c:	429c      	cmp	r4, r3
 8009c5e:	d10f      	bne.n	8009c80 <__swsetup_r+0x3c>
 8009c60:	686c      	ldr	r4, [r5, #4]
 8009c62:	89a3      	ldrh	r3, [r4, #12]
 8009c64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009c68:	0719      	lsls	r1, r3, #28
 8009c6a:	d42c      	bmi.n	8009cc6 <__swsetup_r+0x82>
 8009c6c:	06dd      	lsls	r5, r3, #27
 8009c6e:	d411      	bmi.n	8009c94 <__swsetup_r+0x50>
 8009c70:	2309      	movs	r3, #9
 8009c72:	6033      	str	r3, [r6, #0]
 8009c74:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009c78:	81a3      	strh	r3, [r4, #12]
 8009c7a:	f04f 30ff 	mov.w	r0, #4294967295
 8009c7e:	e03e      	b.n	8009cfe <__swsetup_r+0xba>
 8009c80:	4b25      	ldr	r3, [pc, #148]	; (8009d18 <__swsetup_r+0xd4>)
 8009c82:	429c      	cmp	r4, r3
 8009c84:	d101      	bne.n	8009c8a <__swsetup_r+0x46>
 8009c86:	68ac      	ldr	r4, [r5, #8]
 8009c88:	e7eb      	b.n	8009c62 <__swsetup_r+0x1e>
 8009c8a:	4b24      	ldr	r3, [pc, #144]	; (8009d1c <__swsetup_r+0xd8>)
 8009c8c:	429c      	cmp	r4, r3
 8009c8e:	bf08      	it	eq
 8009c90:	68ec      	ldreq	r4, [r5, #12]
 8009c92:	e7e6      	b.n	8009c62 <__swsetup_r+0x1e>
 8009c94:	0758      	lsls	r0, r3, #29
 8009c96:	d512      	bpl.n	8009cbe <__swsetup_r+0x7a>
 8009c98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009c9a:	b141      	cbz	r1, 8009cae <__swsetup_r+0x6a>
 8009c9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009ca0:	4299      	cmp	r1, r3
 8009ca2:	d002      	beq.n	8009caa <__swsetup_r+0x66>
 8009ca4:	4630      	mov	r0, r6
 8009ca6:	f7ff fcdb 	bl	8009660 <_free_r>
 8009caa:	2300      	movs	r3, #0
 8009cac:	6363      	str	r3, [r4, #52]	; 0x34
 8009cae:	89a3      	ldrh	r3, [r4, #12]
 8009cb0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009cb4:	81a3      	strh	r3, [r4, #12]
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	6063      	str	r3, [r4, #4]
 8009cba:	6923      	ldr	r3, [r4, #16]
 8009cbc:	6023      	str	r3, [r4, #0]
 8009cbe:	89a3      	ldrh	r3, [r4, #12]
 8009cc0:	f043 0308 	orr.w	r3, r3, #8
 8009cc4:	81a3      	strh	r3, [r4, #12]
 8009cc6:	6923      	ldr	r3, [r4, #16]
 8009cc8:	b94b      	cbnz	r3, 8009cde <__swsetup_r+0x9a>
 8009cca:	89a3      	ldrh	r3, [r4, #12]
 8009ccc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009cd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009cd4:	d003      	beq.n	8009cde <__swsetup_r+0x9a>
 8009cd6:	4621      	mov	r1, r4
 8009cd8:	4630      	mov	r0, r6
 8009cda:	f000 f95b 	bl	8009f94 <__smakebuf_r>
 8009cde:	89a0      	ldrh	r0, [r4, #12]
 8009ce0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009ce4:	f010 0301 	ands.w	r3, r0, #1
 8009ce8:	d00a      	beq.n	8009d00 <__swsetup_r+0xbc>
 8009cea:	2300      	movs	r3, #0
 8009cec:	60a3      	str	r3, [r4, #8]
 8009cee:	6963      	ldr	r3, [r4, #20]
 8009cf0:	425b      	negs	r3, r3
 8009cf2:	61a3      	str	r3, [r4, #24]
 8009cf4:	6923      	ldr	r3, [r4, #16]
 8009cf6:	b943      	cbnz	r3, 8009d0a <__swsetup_r+0xc6>
 8009cf8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009cfc:	d1ba      	bne.n	8009c74 <__swsetup_r+0x30>
 8009cfe:	bd70      	pop	{r4, r5, r6, pc}
 8009d00:	0781      	lsls	r1, r0, #30
 8009d02:	bf58      	it	pl
 8009d04:	6963      	ldrpl	r3, [r4, #20]
 8009d06:	60a3      	str	r3, [r4, #8]
 8009d08:	e7f4      	b.n	8009cf4 <__swsetup_r+0xb0>
 8009d0a:	2000      	movs	r0, #0
 8009d0c:	e7f7      	b.n	8009cfe <__swsetup_r+0xba>
 8009d0e:	bf00      	nop
 8009d10:	2000000c 	.word	0x2000000c
 8009d14:	0800a2f8 	.word	0x0800a2f8
 8009d18:	0800a318 	.word	0x0800a318
 8009d1c:	0800a2d8 	.word	0x0800a2d8

08009d20 <__assert_func>:
 8009d20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009d22:	4614      	mov	r4, r2
 8009d24:	461a      	mov	r2, r3
 8009d26:	4b09      	ldr	r3, [pc, #36]	; (8009d4c <__assert_func+0x2c>)
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	4605      	mov	r5, r0
 8009d2c:	68d8      	ldr	r0, [r3, #12]
 8009d2e:	b14c      	cbz	r4, 8009d44 <__assert_func+0x24>
 8009d30:	4b07      	ldr	r3, [pc, #28]	; (8009d50 <__assert_func+0x30>)
 8009d32:	9100      	str	r1, [sp, #0]
 8009d34:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009d38:	4906      	ldr	r1, [pc, #24]	; (8009d54 <__assert_func+0x34>)
 8009d3a:	462b      	mov	r3, r5
 8009d3c:	f000 f8e0 	bl	8009f00 <fiprintf>
 8009d40:	f000 f9a5 	bl	800a08e <abort>
 8009d44:	4b04      	ldr	r3, [pc, #16]	; (8009d58 <__assert_func+0x38>)
 8009d46:	461c      	mov	r4, r3
 8009d48:	e7f3      	b.n	8009d32 <__assert_func+0x12>
 8009d4a:	bf00      	nop
 8009d4c:	2000000c 	.word	0x2000000c
 8009d50:	0800a4a5 	.word	0x0800a4a5
 8009d54:	0800a4b2 	.word	0x0800a4b2
 8009d58:	0800a4e0 	.word	0x0800a4e0

08009d5c <_close_r>:
 8009d5c:	b538      	push	{r3, r4, r5, lr}
 8009d5e:	4d06      	ldr	r5, [pc, #24]	; (8009d78 <_close_r+0x1c>)
 8009d60:	2300      	movs	r3, #0
 8009d62:	4604      	mov	r4, r0
 8009d64:	4608      	mov	r0, r1
 8009d66:	602b      	str	r3, [r5, #0]
 8009d68:	f7f8 fa11 	bl	800218e <_close>
 8009d6c:	1c43      	adds	r3, r0, #1
 8009d6e:	d102      	bne.n	8009d76 <_close_r+0x1a>
 8009d70:	682b      	ldr	r3, [r5, #0]
 8009d72:	b103      	cbz	r3, 8009d76 <_close_r+0x1a>
 8009d74:	6023      	str	r3, [r4, #0]
 8009d76:	bd38      	pop	{r3, r4, r5, pc}
 8009d78:	200003b8 	.word	0x200003b8

08009d7c <__sflush_r>:
 8009d7c:	898a      	ldrh	r2, [r1, #12]
 8009d7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d82:	4605      	mov	r5, r0
 8009d84:	0710      	lsls	r0, r2, #28
 8009d86:	460c      	mov	r4, r1
 8009d88:	d458      	bmi.n	8009e3c <__sflush_r+0xc0>
 8009d8a:	684b      	ldr	r3, [r1, #4]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	dc05      	bgt.n	8009d9c <__sflush_r+0x20>
 8009d90:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	dc02      	bgt.n	8009d9c <__sflush_r+0x20>
 8009d96:	2000      	movs	r0, #0
 8009d98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009d9e:	2e00      	cmp	r6, #0
 8009da0:	d0f9      	beq.n	8009d96 <__sflush_r+0x1a>
 8009da2:	2300      	movs	r3, #0
 8009da4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009da8:	682f      	ldr	r7, [r5, #0]
 8009daa:	602b      	str	r3, [r5, #0]
 8009dac:	d032      	beq.n	8009e14 <__sflush_r+0x98>
 8009dae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009db0:	89a3      	ldrh	r3, [r4, #12]
 8009db2:	075a      	lsls	r2, r3, #29
 8009db4:	d505      	bpl.n	8009dc2 <__sflush_r+0x46>
 8009db6:	6863      	ldr	r3, [r4, #4]
 8009db8:	1ac0      	subs	r0, r0, r3
 8009dba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009dbc:	b10b      	cbz	r3, 8009dc2 <__sflush_r+0x46>
 8009dbe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009dc0:	1ac0      	subs	r0, r0, r3
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	4602      	mov	r2, r0
 8009dc6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009dc8:	6a21      	ldr	r1, [r4, #32]
 8009dca:	4628      	mov	r0, r5
 8009dcc:	47b0      	blx	r6
 8009dce:	1c43      	adds	r3, r0, #1
 8009dd0:	89a3      	ldrh	r3, [r4, #12]
 8009dd2:	d106      	bne.n	8009de2 <__sflush_r+0x66>
 8009dd4:	6829      	ldr	r1, [r5, #0]
 8009dd6:	291d      	cmp	r1, #29
 8009dd8:	d82c      	bhi.n	8009e34 <__sflush_r+0xb8>
 8009dda:	4a2a      	ldr	r2, [pc, #168]	; (8009e84 <__sflush_r+0x108>)
 8009ddc:	40ca      	lsrs	r2, r1
 8009dde:	07d6      	lsls	r6, r2, #31
 8009de0:	d528      	bpl.n	8009e34 <__sflush_r+0xb8>
 8009de2:	2200      	movs	r2, #0
 8009de4:	6062      	str	r2, [r4, #4]
 8009de6:	04d9      	lsls	r1, r3, #19
 8009de8:	6922      	ldr	r2, [r4, #16]
 8009dea:	6022      	str	r2, [r4, #0]
 8009dec:	d504      	bpl.n	8009df8 <__sflush_r+0x7c>
 8009dee:	1c42      	adds	r2, r0, #1
 8009df0:	d101      	bne.n	8009df6 <__sflush_r+0x7a>
 8009df2:	682b      	ldr	r3, [r5, #0]
 8009df4:	b903      	cbnz	r3, 8009df8 <__sflush_r+0x7c>
 8009df6:	6560      	str	r0, [r4, #84]	; 0x54
 8009df8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009dfa:	602f      	str	r7, [r5, #0]
 8009dfc:	2900      	cmp	r1, #0
 8009dfe:	d0ca      	beq.n	8009d96 <__sflush_r+0x1a>
 8009e00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009e04:	4299      	cmp	r1, r3
 8009e06:	d002      	beq.n	8009e0e <__sflush_r+0x92>
 8009e08:	4628      	mov	r0, r5
 8009e0a:	f7ff fc29 	bl	8009660 <_free_r>
 8009e0e:	2000      	movs	r0, #0
 8009e10:	6360      	str	r0, [r4, #52]	; 0x34
 8009e12:	e7c1      	b.n	8009d98 <__sflush_r+0x1c>
 8009e14:	6a21      	ldr	r1, [r4, #32]
 8009e16:	2301      	movs	r3, #1
 8009e18:	4628      	mov	r0, r5
 8009e1a:	47b0      	blx	r6
 8009e1c:	1c41      	adds	r1, r0, #1
 8009e1e:	d1c7      	bne.n	8009db0 <__sflush_r+0x34>
 8009e20:	682b      	ldr	r3, [r5, #0]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d0c4      	beq.n	8009db0 <__sflush_r+0x34>
 8009e26:	2b1d      	cmp	r3, #29
 8009e28:	d001      	beq.n	8009e2e <__sflush_r+0xb2>
 8009e2a:	2b16      	cmp	r3, #22
 8009e2c:	d101      	bne.n	8009e32 <__sflush_r+0xb6>
 8009e2e:	602f      	str	r7, [r5, #0]
 8009e30:	e7b1      	b.n	8009d96 <__sflush_r+0x1a>
 8009e32:	89a3      	ldrh	r3, [r4, #12]
 8009e34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e38:	81a3      	strh	r3, [r4, #12]
 8009e3a:	e7ad      	b.n	8009d98 <__sflush_r+0x1c>
 8009e3c:	690f      	ldr	r7, [r1, #16]
 8009e3e:	2f00      	cmp	r7, #0
 8009e40:	d0a9      	beq.n	8009d96 <__sflush_r+0x1a>
 8009e42:	0793      	lsls	r3, r2, #30
 8009e44:	680e      	ldr	r6, [r1, #0]
 8009e46:	bf08      	it	eq
 8009e48:	694b      	ldreq	r3, [r1, #20]
 8009e4a:	600f      	str	r7, [r1, #0]
 8009e4c:	bf18      	it	ne
 8009e4e:	2300      	movne	r3, #0
 8009e50:	eba6 0807 	sub.w	r8, r6, r7
 8009e54:	608b      	str	r3, [r1, #8]
 8009e56:	f1b8 0f00 	cmp.w	r8, #0
 8009e5a:	dd9c      	ble.n	8009d96 <__sflush_r+0x1a>
 8009e5c:	6a21      	ldr	r1, [r4, #32]
 8009e5e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009e60:	4643      	mov	r3, r8
 8009e62:	463a      	mov	r2, r7
 8009e64:	4628      	mov	r0, r5
 8009e66:	47b0      	blx	r6
 8009e68:	2800      	cmp	r0, #0
 8009e6a:	dc06      	bgt.n	8009e7a <__sflush_r+0xfe>
 8009e6c:	89a3      	ldrh	r3, [r4, #12]
 8009e6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e72:	81a3      	strh	r3, [r4, #12]
 8009e74:	f04f 30ff 	mov.w	r0, #4294967295
 8009e78:	e78e      	b.n	8009d98 <__sflush_r+0x1c>
 8009e7a:	4407      	add	r7, r0
 8009e7c:	eba8 0800 	sub.w	r8, r8, r0
 8009e80:	e7e9      	b.n	8009e56 <__sflush_r+0xda>
 8009e82:	bf00      	nop
 8009e84:	20400001 	.word	0x20400001

08009e88 <_fflush_r>:
 8009e88:	b538      	push	{r3, r4, r5, lr}
 8009e8a:	690b      	ldr	r3, [r1, #16]
 8009e8c:	4605      	mov	r5, r0
 8009e8e:	460c      	mov	r4, r1
 8009e90:	b913      	cbnz	r3, 8009e98 <_fflush_r+0x10>
 8009e92:	2500      	movs	r5, #0
 8009e94:	4628      	mov	r0, r5
 8009e96:	bd38      	pop	{r3, r4, r5, pc}
 8009e98:	b118      	cbz	r0, 8009ea2 <_fflush_r+0x1a>
 8009e9a:	6983      	ldr	r3, [r0, #24]
 8009e9c:	b90b      	cbnz	r3, 8009ea2 <_fflush_r+0x1a>
 8009e9e:	f7fe ff89 	bl	8008db4 <__sinit>
 8009ea2:	4b14      	ldr	r3, [pc, #80]	; (8009ef4 <_fflush_r+0x6c>)
 8009ea4:	429c      	cmp	r4, r3
 8009ea6:	d11b      	bne.n	8009ee0 <_fflush_r+0x58>
 8009ea8:	686c      	ldr	r4, [r5, #4]
 8009eaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d0ef      	beq.n	8009e92 <_fflush_r+0xa>
 8009eb2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009eb4:	07d0      	lsls	r0, r2, #31
 8009eb6:	d404      	bmi.n	8009ec2 <_fflush_r+0x3a>
 8009eb8:	0599      	lsls	r1, r3, #22
 8009eba:	d402      	bmi.n	8009ec2 <_fflush_r+0x3a>
 8009ebc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ebe:	f7ff f81c 	bl	8008efa <__retarget_lock_acquire_recursive>
 8009ec2:	4628      	mov	r0, r5
 8009ec4:	4621      	mov	r1, r4
 8009ec6:	f7ff ff59 	bl	8009d7c <__sflush_r>
 8009eca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009ecc:	07da      	lsls	r2, r3, #31
 8009ece:	4605      	mov	r5, r0
 8009ed0:	d4e0      	bmi.n	8009e94 <_fflush_r+0xc>
 8009ed2:	89a3      	ldrh	r3, [r4, #12]
 8009ed4:	059b      	lsls	r3, r3, #22
 8009ed6:	d4dd      	bmi.n	8009e94 <_fflush_r+0xc>
 8009ed8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009eda:	f7ff f80f 	bl	8008efc <__retarget_lock_release_recursive>
 8009ede:	e7d9      	b.n	8009e94 <_fflush_r+0xc>
 8009ee0:	4b05      	ldr	r3, [pc, #20]	; (8009ef8 <_fflush_r+0x70>)
 8009ee2:	429c      	cmp	r4, r3
 8009ee4:	d101      	bne.n	8009eea <_fflush_r+0x62>
 8009ee6:	68ac      	ldr	r4, [r5, #8]
 8009ee8:	e7df      	b.n	8009eaa <_fflush_r+0x22>
 8009eea:	4b04      	ldr	r3, [pc, #16]	; (8009efc <_fflush_r+0x74>)
 8009eec:	429c      	cmp	r4, r3
 8009eee:	bf08      	it	eq
 8009ef0:	68ec      	ldreq	r4, [r5, #12]
 8009ef2:	e7da      	b.n	8009eaa <_fflush_r+0x22>
 8009ef4:	0800a2f8 	.word	0x0800a2f8
 8009ef8:	0800a318 	.word	0x0800a318
 8009efc:	0800a2d8 	.word	0x0800a2d8

08009f00 <fiprintf>:
 8009f00:	b40e      	push	{r1, r2, r3}
 8009f02:	b503      	push	{r0, r1, lr}
 8009f04:	4601      	mov	r1, r0
 8009f06:	ab03      	add	r3, sp, #12
 8009f08:	4805      	ldr	r0, [pc, #20]	; (8009f20 <fiprintf+0x20>)
 8009f0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f0e:	6800      	ldr	r0, [r0, #0]
 8009f10:	9301      	str	r3, [sp, #4]
 8009f12:	f7ff fcaf 	bl	8009874 <_vfiprintf_r>
 8009f16:	b002      	add	sp, #8
 8009f18:	f85d eb04 	ldr.w	lr, [sp], #4
 8009f1c:	b003      	add	sp, #12
 8009f1e:	4770      	bx	lr
 8009f20:	2000000c 	.word	0x2000000c

08009f24 <_lseek_r>:
 8009f24:	b538      	push	{r3, r4, r5, lr}
 8009f26:	4d07      	ldr	r5, [pc, #28]	; (8009f44 <_lseek_r+0x20>)
 8009f28:	4604      	mov	r4, r0
 8009f2a:	4608      	mov	r0, r1
 8009f2c:	4611      	mov	r1, r2
 8009f2e:	2200      	movs	r2, #0
 8009f30:	602a      	str	r2, [r5, #0]
 8009f32:	461a      	mov	r2, r3
 8009f34:	f7f8 f952 	bl	80021dc <_lseek>
 8009f38:	1c43      	adds	r3, r0, #1
 8009f3a:	d102      	bne.n	8009f42 <_lseek_r+0x1e>
 8009f3c:	682b      	ldr	r3, [r5, #0]
 8009f3e:	b103      	cbz	r3, 8009f42 <_lseek_r+0x1e>
 8009f40:	6023      	str	r3, [r4, #0]
 8009f42:	bd38      	pop	{r3, r4, r5, pc}
 8009f44:	200003b8 	.word	0x200003b8

08009f48 <__swhatbuf_r>:
 8009f48:	b570      	push	{r4, r5, r6, lr}
 8009f4a:	460e      	mov	r6, r1
 8009f4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f50:	2900      	cmp	r1, #0
 8009f52:	b096      	sub	sp, #88	; 0x58
 8009f54:	4614      	mov	r4, r2
 8009f56:	461d      	mov	r5, r3
 8009f58:	da08      	bge.n	8009f6c <__swhatbuf_r+0x24>
 8009f5a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009f5e:	2200      	movs	r2, #0
 8009f60:	602a      	str	r2, [r5, #0]
 8009f62:	061a      	lsls	r2, r3, #24
 8009f64:	d410      	bmi.n	8009f88 <__swhatbuf_r+0x40>
 8009f66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009f6a:	e00e      	b.n	8009f8a <__swhatbuf_r+0x42>
 8009f6c:	466a      	mov	r2, sp
 8009f6e:	f000 f895 	bl	800a09c <_fstat_r>
 8009f72:	2800      	cmp	r0, #0
 8009f74:	dbf1      	blt.n	8009f5a <__swhatbuf_r+0x12>
 8009f76:	9a01      	ldr	r2, [sp, #4]
 8009f78:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009f7c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009f80:	425a      	negs	r2, r3
 8009f82:	415a      	adcs	r2, r3
 8009f84:	602a      	str	r2, [r5, #0]
 8009f86:	e7ee      	b.n	8009f66 <__swhatbuf_r+0x1e>
 8009f88:	2340      	movs	r3, #64	; 0x40
 8009f8a:	2000      	movs	r0, #0
 8009f8c:	6023      	str	r3, [r4, #0]
 8009f8e:	b016      	add	sp, #88	; 0x58
 8009f90:	bd70      	pop	{r4, r5, r6, pc}
	...

08009f94 <__smakebuf_r>:
 8009f94:	898b      	ldrh	r3, [r1, #12]
 8009f96:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009f98:	079d      	lsls	r5, r3, #30
 8009f9a:	4606      	mov	r6, r0
 8009f9c:	460c      	mov	r4, r1
 8009f9e:	d507      	bpl.n	8009fb0 <__smakebuf_r+0x1c>
 8009fa0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009fa4:	6023      	str	r3, [r4, #0]
 8009fa6:	6123      	str	r3, [r4, #16]
 8009fa8:	2301      	movs	r3, #1
 8009faa:	6163      	str	r3, [r4, #20]
 8009fac:	b002      	add	sp, #8
 8009fae:	bd70      	pop	{r4, r5, r6, pc}
 8009fb0:	ab01      	add	r3, sp, #4
 8009fb2:	466a      	mov	r2, sp
 8009fb4:	f7ff ffc8 	bl	8009f48 <__swhatbuf_r>
 8009fb8:	9900      	ldr	r1, [sp, #0]
 8009fba:	4605      	mov	r5, r0
 8009fbc:	4630      	mov	r0, r6
 8009fbe:	f7ff fbbb 	bl	8009738 <_malloc_r>
 8009fc2:	b948      	cbnz	r0, 8009fd8 <__smakebuf_r+0x44>
 8009fc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009fc8:	059a      	lsls	r2, r3, #22
 8009fca:	d4ef      	bmi.n	8009fac <__smakebuf_r+0x18>
 8009fcc:	f023 0303 	bic.w	r3, r3, #3
 8009fd0:	f043 0302 	orr.w	r3, r3, #2
 8009fd4:	81a3      	strh	r3, [r4, #12]
 8009fd6:	e7e3      	b.n	8009fa0 <__smakebuf_r+0xc>
 8009fd8:	4b0d      	ldr	r3, [pc, #52]	; (800a010 <__smakebuf_r+0x7c>)
 8009fda:	62b3      	str	r3, [r6, #40]	; 0x28
 8009fdc:	89a3      	ldrh	r3, [r4, #12]
 8009fde:	6020      	str	r0, [r4, #0]
 8009fe0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fe4:	81a3      	strh	r3, [r4, #12]
 8009fe6:	9b00      	ldr	r3, [sp, #0]
 8009fe8:	6163      	str	r3, [r4, #20]
 8009fea:	9b01      	ldr	r3, [sp, #4]
 8009fec:	6120      	str	r0, [r4, #16]
 8009fee:	b15b      	cbz	r3, 800a008 <__smakebuf_r+0x74>
 8009ff0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ff4:	4630      	mov	r0, r6
 8009ff6:	f000 f863 	bl	800a0c0 <_isatty_r>
 8009ffa:	b128      	cbz	r0, 800a008 <__smakebuf_r+0x74>
 8009ffc:	89a3      	ldrh	r3, [r4, #12]
 8009ffe:	f023 0303 	bic.w	r3, r3, #3
 800a002:	f043 0301 	orr.w	r3, r3, #1
 800a006:	81a3      	strh	r3, [r4, #12]
 800a008:	89a0      	ldrh	r0, [r4, #12]
 800a00a:	4305      	orrs	r5, r0
 800a00c:	81a5      	strh	r5, [r4, #12]
 800a00e:	e7cd      	b.n	8009fac <__smakebuf_r+0x18>
 800a010:	08008d4d 	.word	0x08008d4d

0800a014 <__ascii_mbtowc>:
 800a014:	b082      	sub	sp, #8
 800a016:	b901      	cbnz	r1, 800a01a <__ascii_mbtowc+0x6>
 800a018:	a901      	add	r1, sp, #4
 800a01a:	b142      	cbz	r2, 800a02e <__ascii_mbtowc+0x1a>
 800a01c:	b14b      	cbz	r3, 800a032 <__ascii_mbtowc+0x1e>
 800a01e:	7813      	ldrb	r3, [r2, #0]
 800a020:	600b      	str	r3, [r1, #0]
 800a022:	7812      	ldrb	r2, [r2, #0]
 800a024:	1e10      	subs	r0, r2, #0
 800a026:	bf18      	it	ne
 800a028:	2001      	movne	r0, #1
 800a02a:	b002      	add	sp, #8
 800a02c:	4770      	bx	lr
 800a02e:	4610      	mov	r0, r2
 800a030:	e7fb      	b.n	800a02a <__ascii_mbtowc+0x16>
 800a032:	f06f 0001 	mvn.w	r0, #1
 800a036:	e7f8      	b.n	800a02a <__ascii_mbtowc+0x16>

0800a038 <__malloc_lock>:
 800a038:	4801      	ldr	r0, [pc, #4]	; (800a040 <__malloc_lock+0x8>)
 800a03a:	f7fe bf5e 	b.w	8008efa <__retarget_lock_acquire_recursive>
 800a03e:	bf00      	nop
 800a040:	200003ac 	.word	0x200003ac

0800a044 <__malloc_unlock>:
 800a044:	4801      	ldr	r0, [pc, #4]	; (800a04c <__malloc_unlock+0x8>)
 800a046:	f7fe bf59 	b.w	8008efc <__retarget_lock_release_recursive>
 800a04a:	bf00      	nop
 800a04c:	200003ac 	.word	0x200003ac

0800a050 <_read_r>:
 800a050:	b538      	push	{r3, r4, r5, lr}
 800a052:	4d07      	ldr	r5, [pc, #28]	; (800a070 <_read_r+0x20>)
 800a054:	4604      	mov	r4, r0
 800a056:	4608      	mov	r0, r1
 800a058:	4611      	mov	r1, r2
 800a05a:	2200      	movs	r2, #0
 800a05c:	602a      	str	r2, [r5, #0]
 800a05e:	461a      	mov	r2, r3
 800a060:	f7f8 f878 	bl	8002154 <_read>
 800a064:	1c43      	adds	r3, r0, #1
 800a066:	d102      	bne.n	800a06e <_read_r+0x1e>
 800a068:	682b      	ldr	r3, [r5, #0]
 800a06a:	b103      	cbz	r3, 800a06e <_read_r+0x1e>
 800a06c:	6023      	str	r3, [r4, #0]
 800a06e:	bd38      	pop	{r3, r4, r5, pc}
 800a070:	200003b8 	.word	0x200003b8

0800a074 <__ascii_wctomb>:
 800a074:	b149      	cbz	r1, 800a08a <__ascii_wctomb+0x16>
 800a076:	2aff      	cmp	r2, #255	; 0xff
 800a078:	bf85      	ittet	hi
 800a07a:	238a      	movhi	r3, #138	; 0x8a
 800a07c:	6003      	strhi	r3, [r0, #0]
 800a07e:	700a      	strbls	r2, [r1, #0]
 800a080:	f04f 30ff 	movhi.w	r0, #4294967295
 800a084:	bf98      	it	ls
 800a086:	2001      	movls	r0, #1
 800a088:	4770      	bx	lr
 800a08a:	4608      	mov	r0, r1
 800a08c:	4770      	bx	lr

0800a08e <abort>:
 800a08e:	b508      	push	{r3, lr}
 800a090:	2006      	movs	r0, #6
 800a092:	f000 f84d 	bl	800a130 <raise>
 800a096:	2001      	movs	r0, #1
 800a098:	f7f8 f852 	bl	8002140 <_exit>

0800a09c <_fstat_r>:
 800a09c:	b538      	push	{r3, r4, r5, lr}
 800a09e:	4d07      	ldr	r5, [pc, #28]	; (800a0bc <_fstat_r+0x20>)
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	4604      	mov	r4, r0
 800a0a4:	4608      	mov	r0, r1
 800a0a6:	4611      	mov	r1, r2
 800a0a8:	602b      	str	r3, [r5, #0]
 800a0aa:	f7f8 f87c 	bl	80021a6 <_fstat>
 800a0ae:	1c43      	adds	r3, r0, #1
 800a0b0:	d102      	bne.n	800a0b8 <_fstat_r+0x1c>
 800a0b2:	682b      	ldr	r3, [r5, #0]
 800a0b4:	b103      	cbz	r3, 800a0b8 <_fstat_r+0x1c>
 800a0b6:	6023      	str	r3, [r4, #0]
 800a0b8:	bd38      	pop	{r3, r4, r5, pc}
 800a0ba:	bf00      	nop
 800a0bc:	200003b8 	.word	0x200003b8

0800a0c0 <_isatty_r>:
 800a0c0:	b538      	push	{r3, r4, r5, lr}
 800a0c2:	4d06      	ldr	r5, [pc, #24]	; (800a0dc <_isatty_r+0x1c>)
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	4604      	mov	r4, r0
 800a0c8:	4608      	mov	r0, r1
 800a0ca:	602b      	str	r3, [r5, #0]
 800a0cc:	f7f8 f87b 	bl	80021c6 <_isatty>
 800a0d0:	1c43      	adds	r3, r0, #1
 800a0d2:	d102      	bne.n	800a0da <_isatty_r+0x1a>
 800a0d4:	682b      	ldr	r3, [r5, #0]
 800a0d6:	b103      	cbz	r3, 800a0da <_isatty_r+0x1a>
 800a0d8:	6023      	str	r3, [r4, #0]
 800a0da:	bd38      	pop	{r3, r4, r5, pc}
 800a0dc:	200003b8 	.word	0x200003b8

0800a0e0 <_raise_r>:
 800a0e0:	291f      	cmp	r1, #31
 800a0e2:	b538      	push	{r3, r4, r5, lr}
 800a0e4:	4604      	mov	r4, r0
 800a0e6:	460d      	mov	r5, r1
 800a0e8:	d904      	bls.n	800a0f4 <_raise_r+0x14>
 800a0ea:	2316      	movs	r3, #22
 800a0ec:	6003      	str	r3, [r0, #0]
 800a0ee:	f04f 30ff 	mov.w	r0, #4294967295
 800a0f2:	bd38      	pop	{r3, r4, r5, pc}
 800a0f4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a0f6:	b112      	cbz	r2, 800a0fe <_raise_r+0x1e>
 800a0f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a0fc:	b94b      	cbnz	r3, 800a112 <_raise_r+0x32>
 800a0fe:	4620      	mov	r0, r4
 800a100:	f000 f830 	bl	800a164 <_getpid_r>
 800a104:	462a      	mov	r2, r5
 800a106:	4601      	mov	r1, r0
 800a108:	4620      	mov	r0, r4
 800a10a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a10e:	f000 b817 	b.w	800a140 <_kill_r>
 800a112:	2b01      	cmp	r3, #1
 800a114:	d00a      	beq.n	800a12c <_raise_r+0x4c>
 800a116:	1c59      	adds	r1, r3, #1
 800a118:	d103      	bne.n	800a122 <_raise_r+0x42>
 800a11a:	2316      	movs	r3, #22
 800a11c:	6003      	str	r3, [r0, #0]
 800a11e:	2001      	movs	r0, #1
 800a120:	e7e7      	b.n	800a0f2 <_raise_r+0x12>
 800a122:	2400      	movs	r4, #0
 800a124:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a128:	4628      	mov	r0, r5
 800a12a:	4798      	blx	r3
 800a12c:	2000      	movs	r0, #0
 800a12e:	e7e0      	b.n	800a0f2 <_raise_r+0x12>

0800a130 <raise>:
 800a130:	4b02      	ldr	r3, [pc, #8]	; (800a13c <raise+0xc>)
 800a132:	4601      	mov	r1, r0
 800a134:	6818      	ldr	r0, [r3, #0]
 800a136:	f7ff bfd3 	b.w	800a0e0 <_raise_r>
 800a13a:	bf00      	nop
 800a13c:	2000000c 	.word	0x2000000c

0800a140 <_kill_r>:
 800a140:	b538      	push	{r3, r4, r5, lr}
 800a142:	4d07      	ldr	r5, [pc, #28]	; (800a160 <_kill_r+0x20>)
 800a144:	2300      	movs	r3, #0
 800a146:	4604      	mov	r4, r0
 800a148:	4608      	mov	r0, r1
 800a14a:	4611      	mov	r1, r2
 800a14c:	602b      	str	r3, [r5, #0]
 800a14e:	f7f7 ffe7 	bl	8002120 <_kill>
 800a152:	1c43      	adds	r3, r0, #1
 800a154:	d102      	bne.n	800a15c <_kill_r+0x1c>
 800a156:	682b      	ldr	r3, [r5, #0]
 800a158:	b103      	cbz	r3, 800a15c <_kill_r+0x1c>
 800a15a:	6023      	str	r3, [r4, #0]
 800a15c:	bd38      	pop	{r3, r4, r5, pc}
 800a15e:	bf00      	nop
 800a160:	200003b8 	.word	0x200003b8

0800a164 <_getpid_r>:
 800a164:	f7f7 bfd4 	b.w	8002110 <_getpid>

0800a168 <_init>:
 800a168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a16a:	bf00      	nop
 800a16c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a16e:	bc08      	pop	{r3}
 800a170:	469e      	mov	lr, r3
 800a172:	4770      	bx	lr

0800a174 <_fini>:
 800a174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a176:	bf00      	nop
 800a178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a17a:	bc08      	pop	{r3}
 800a17c:	469e      	mov	lr, r3
 800a17e:	4770      	bx	lr
