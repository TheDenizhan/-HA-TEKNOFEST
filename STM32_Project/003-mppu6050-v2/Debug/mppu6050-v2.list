
mppu6050-v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f38  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  080050c0  080050c0  000150c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051a8  080051a8  00020110  2**0
                  CONTENTS
  4 .ARM          00000008  080051a8  080051a8  000151a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080051b0  080051b0  00020110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051b0  080051b0  000151b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080051b4  080051b4  000151b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000110  20000000  080051b8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020110  2**0
                  CONTENTS
 10 .bss          000000f8  20000110  20000110  00020110  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000208  20000208  00020110  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020110  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007c04  00000000  00000000  00020140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001528  00000000  00000000  00027d44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000720  00000000  00000000  00029270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000680  00000000  00000000  00029990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000207d1  00000000  00000000  0002a010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009c86  00000000  00000000  0004a7e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c30d0  00000000  00000000  00054467  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00117537  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000021b0  00000000  00000000  00117588  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000110 	.word	0x20000110
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080050a8 	.word	0x080050a8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000114 	.word	0x20000114
 80001c4:	080050a8 	.word	0x080050a8

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2f>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aa8:	bf24      	itt	cs
 8000aaa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ab2:	d90d      	bls.n	8000ad0 <__aeabi_d2f+0x30>
 8000ab4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ab8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000abc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ac0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ac4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac8:	bf08      	it	eq
 8000aca:	f020 0001 	biceq.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ad4:	d121      	bne.n	8000b1a <__aeabi_d2f+0x7a>
 8000ad6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ada:	bfbc      	itt	lt
 8000adc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	4770      	bxlt	lr
 8000ae2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ae6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aea:	f1c2 0218 	rsb	r2, r2, #24
 8000aee:	f1c2 0c20 	rsb	ip, r2, #32
 8000af2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af6:	fa20 f002 	lsr.w	r0, r0, r2
 8000afa:	bf18      	it	ne
 8000afc:	f040 0001 	orrne.w	r0, r0, #1
 8000b00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b0c:	ea40 000c 	orr.w	r0, r0, ip
 8000b10:	fa23 f302 	lsr.w	r3, r3, r2
 8000b14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b18:	e7cc      	b.n	8000ab4 <__aeabi_d2f+0x14>
 8000b1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1e:	d107      	bne.n	8000b30 <__aeabi_d2f+0x90>
 8000b20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b24:	bf1e      	ittt	ne
 8000b26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b2e:	4770      	bxne	lr
 8000b30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <__aeabi_uldivmod>:
 8000b40:	b953      	cbnz	r3, 8000b58 <__aeabi_uldivmod+0x18>
 8000b42:	b94a      	cbnz	r2, 8000b58 <__aeabi_uldivmod+0x18>
 8000b44:	2900      	cmp	r1, #0
 8000b46:	bf08      	it	eq
 8000b48:	2800      	cmpeq	r0, #0
 8000b4a:	bf1c      	itt	ne
 8000b4c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b50:	f04f 30ff 	movne.w	r0, #4294967295
 8000b54:	f000 b974 	b.w	8000e40 <__aeabi_idiv0>
 8000b58:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b5c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b60:	f000 f806 	bl	8000b70 <__udivmoddi4>
 8000b64:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b6c:	b004      	add	sp, #16
 8000b6e:	4770      	bx	lr

08000b70 <__udivmoddi4>:
 8000b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b74:	9d08      	ldr	r5, [sp, #32]
 8000b76:	4604      	mov	r4, r0
 8000b78:	468e      	mov	lr, r1
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d14d      	bne.n	8000c1a <__udivmoddi4+0xaa>
 8000b7e:	428a      	cmp	r2, r1
 8000b80:	4694      	mov	ip, r2
 8000b82:	d969      	bls.n	8000c58 <__udivmoddi4+0xe8>
 8000b84:	fab2 f282 	clz	r2, r2
 8000b88:	b152      	cbz	r2, 8000ba0 <__udivmoddi4+0x30>
 8000b8a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b8e:	f1c2 0120 	rsb	r1, r2, #32
 8000b92:	fa20 f101 	lsr.w	r1, r0, r1
 8000b96:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b9a:	ea41 0e03 	orr.w	lr, r1, r3
 8000b9e:	4094      	lsls	r4, r2
 8000ba0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ba4:	0c21      	lsrs	r1, r4, #16
 8000ba6:	fbbe f6f8 	udiv	r6, lr, r8
 8000baa:	fa1f f78c 	uxth.w	r7, ip
 8000bae:	fb08 e316 	mls	r3, r8, r6, lr
 8000bb2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000bb6:	fb06 f107 	mul.w	r1, r6, r7
 8000bba:	4299      	cmp	r1, r3
 8000bbc:	d90a      	bls.n	8000bd4 <__udivmoddi4+0x64>
 8000bbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000bc2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bc6:	f080 811f 	bcs.w	8000e08 <__udivmoddi4+0x298>
 8000bca:	4299      	cmp	r1, r3
 8000bcc:	f240 811c 	bls.w	8000e08 <__udivmoddi4+0x298>
 8000bd0:	3e02      	subs	r6, #2
 8000bd2:	4463      	add	r3, ip
 8000bd4:	1a5b      	subs	r3, r3, r1
 8000bd6:	b2a4      	uxth	r4, r4
 8000bd8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bdc:	fb08 3310 	mls	r3, r8, r0, r3
 8000be0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000be4:	fb00 f707 	mul.w	r7, r0, r7
 8000be8:	42a7      	cmp	r7, r4
 8000bea:	d90a      	bls.n	8000c02 <__udivmoddi4+0x92>
 8000bec:	eb1c 0404 	adds.w	r4, ip, r4
 8000bf0:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bf4:	f080 810a 	bcs.w	8000e0c <__udivmoddi4+0x29c>
 8000bf8:	42a7      	cmp	r7, r4
 8000bfa:	f240 8107 	bls.w	8000e0c <__udivmoddi4+0x29c>
 8000bfe:	4464      	add	r4, ip
 8000c00:	3802      	subs	r0, #2
 8000c02:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c06:	1be4      	subs	r4, r4, r7
 8000c08:	2600      	movs	r6, #0
 8000c0a:	b11d      	cbz	r5, 8000c14 <__udivmoddi4+0xa4>
 8000c0c:	40d4      	lsrs	r4, r2
 8000c0e:	2300      	movs	r3, #0
 8000c10:	e9c5 4300 	strd	r4, r3, [r5]
 8000c14:	4631      	mov	r1, r6
 8000c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c1a:	428b      	cmp	r3, r1
 8000c1c:	d909      	bls.n	8000c32 <__udivmoddi4+0xc2>
 8000c1e:	2d00      	cmp	r5, #0
 8000c20:	f000 80ef 	beq.w	8000e02 <__udivmoddi4+0x292>
 8000c24:	2600      	movs	r6, #0
 8000c26:	e9c5 0100 	strd	r0, r1, [r5]
 8000c2a:	4630      	mov	r0, r6
 8000c2c:	4631      	mov	r1, r6
 8000c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c32:	fab3 f683 	clz	r6, r3
 8000c36:	2e00      	cmp	r6, #0
 8000c38:	d14a      	bne.n	8000cd0 <__udivmoddi4+0x160>
 8000c3a:	428b      	cmp	r3, r1
 8000c3c:	d302      	bcc.n	8000c44 <__udivmoddi4+0xd4>
 8000c3e:	4282      	cmp	r2, r0
 8000c40:	f200 80f9 	bhi.w	8000e36 <__udivmoddi4+0x2c6>
 8000c44:	1a84      	subs	r4, r0, r2
 8000c46:	eb61 0303 	sbc.w	r3, r1, r3
 8000c4a:	2001      	movs	r0, #1
 8000c4c:	469e      	mov	lr, r3
 8000c4e:	2d00      	cmp	r5, #0
 8000c50:	d0e0      	beq.n	8000c14 <__udivmoddi4+0xa4>
 8000c52:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c56:	e7dd      	b.n	8000c14 <__udivmoddi4+0xa4>
 8000c58:	b902      	cbnz	r2, 8000c5c <__udivmoddi4+0xec>
 8000c5a:	deff      	udf	#255	; 0xff
 8000c5c:	fab2 f282 	clz	r2, r2
 8000c60:	2a00      	cmp	r2, #0
 8000c62:	f040 8092 	bne.w	8000d8a <__udivmoddi4+0x21a>
 8000c66:	eba1 010c 	sub.w	r1, r1, ip
 8000c6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c6e:	fa1f fe8c 	uxth.w	lr, ip
 8000c72:	2601      	movs	r6, #1
 8000c74:	0c20      	lsrs	r0, r4, #16
 8000c76:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c7a:	fb07 1113 	mls	r1, r7, r3, r1
 8000c7e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c82:	fb0e f003 	mul.w	r0, lr, r3
 8000c86:	4288      	cmp	r0, r1
 8000c88:	d908      	bls.n	8000c9c <__udivmoddi4+0x12c>
 8000c8a:	eb1c 0101 	adds.w	r1, ip, r1
 8000c8e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c92:	d202      	bcs.n	8000c9a <__udivmoddi4+0x12a>
 8000c94:	4288      	cmp	r0, r1
 8000c96:	f200 80cb 	bhi.w	8000e30 <__udivmoddi4+0x2c0>
 8000c9a:	4643      	mov	r3, r8
 8000c9c:	1a09      	subs	r1, r1, r0
 8000c9e:	b2a4      	uxth	r4, r4
 8000ca0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ca4:	fb07 1110 	mls	r1, r7, r0, r1
 8000ca8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cac:	fb0e fe00 	mul.w	lr, lr, r0
 8000cb0:	45a6      	cmp	lr, r4
 8000cb2:	d908      	bls.n	8000cc6 <__udivmoddi4+0x156>
 8000cb4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cb8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cbc:	d202      	bcs.n	8000cc4 <__udivmoddi4+0x154>
 8000cbe:	45a6      	cmp	lr, r4
 8000cc0:	f200 80bb 	bhi.w	8000e3a <__udivmoddi4+0x2ca>
 8000cc4:	4608      	mov	r0, r1
 8000cc6:	eba4 040e 	sub.w	r4, r4, lr
 8000cca:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000cce:	e79c      	b.n	8000c0a <__udivmoddi4+0x9a>
 8000cd0:	f1c6 0720 	rsb	r7, r6, #32
 8000cd4:	40b3      	lsls	r3, r6
 8000cd6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cda:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cde:	fa20 f407 	lsr.w	r4, r0, r7
 8000ce2:	fa01 f306 	lsl.w	r3, r1, r6
 8000ce6:	431c      	orrs	r4, r3
 8000ce8:	40f9      	lsrs	r1, r7
 8000cea:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cee:	fa00 f306 	lsl.w	r3, r0, r6
 8000cf2:	fbb1 f8f9 	udiv	r8, r1, r9
 8000cf6:	0c20      	lsrs	r0, r4, #16
 8000cf8:	fa1f fe8c 	uxth.w	lr, ip
 8000cfc:	fb09 1118 	mls	r1, r9, r8, r1
 8000d00:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d04:	fb08 f00e 	mul.w	r0, r8, lr
 8000d08:	4288      	cmp	r0, r1
 8000d0a:	fa02 f206 	lsl.w	r2, r2, r6
 8000d0e:	d90b      	bls.n	8000d28 <__udivmoddi4+0x1b8>
 8000d10:	eb1c 0101 	adds.w	r1, ip, r1
 8000d14:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d18:	f080 8088 	bcs.w	8000e2c <__udivmoddi4+0x2bc>
 8000d1c:	4288      	cmp	r0, r1
 8000d1e:	f240 8085 	bls.w	8000e2c <__udivmoddi4+0x2bc>
 8000d22:	f1a8 0802 	sub.w	r8, r8, #2
 8000d26:	4461      	add	r1, ip
 8000d28:	1a09      	subs	r1, r1, r0
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d30:	fb09 1110 	mls	r1, r9, r0, r1
 8000d34:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d38:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d3c:	458e      	cmp	lr, r1
 8000d3e:	d908      	bls.n	8000d52 <__udivmoddi4+0x1e2>
 8000d40:	eb1c 0101 	adds.w	r1, ip, r1
 8000d44:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d48:	d26c      	bcs.n	8000e24 <__udivmoddi4+0x2b4>
 8000d4a:	458e      	cmp	lr, r1
 8000d4c:	d96a      	bls.n	8000e24 <__udivmoddi4+0x2b4>
 8000d4e:	3802      	subs	r0, #2
 8000d50:	4461      	add	r1, ip
 8000d52:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d56:	fba0 9402 	umull	r9, r4, r0, r2
 8000d5a:	eba1 010e 	sub.w	r1, r1, lr
 8000d5e:	42a1      	cmp	r1, r4
 8000d60:	46c8      	mov	r8, r9
 8000d62:	46a6      	mov	lr, r4
 8000d64:	d356      	bcc.n	8000e14 <__udivmoddi4+0x2a4>
 8000d66:	d053      	beq.n	8000e10 <__udivmoddi4+0x2a0>
 8000d68:	b15d      	cbz	r5, 8000d82 <__udivmoddi4+0x212>
 8000d6a:	ebb3 0208 	subs.w	r2, r3, r8
 8000d6e:	eb61 010e 	sbc.w	r1, r1, lr
 8000d72:	fa01 f707 	lsl.w	r7, r1, r7
 8000d76:	fa22 f306 	lsr.w	r3, r2, r6
 8000d7a:	40f1      	lsrs	r1, r6
 8000d7c:	431f      	orrs	r7, r3
 8000d7e:	e9c5 7100 	strd	r7, r1, [r5]
 8000d82:	2600      	movs	r6, #0
 8000d84:	4631      	mov	r1, r6
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	f1c2 0320 	rsb	r3, r2, #32
 8000d8e:	40d8      	lsrs	r0, r3
 8000d90:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d94:	fa21 f303 	lsr.w	r3, r1, r3
 8000d98:	4091      	lsls	r1, r2
 8000d9a:	4301      	orrs	r1, r0
 8000d9c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da0:	fa1f fe8c 	uxth.w	lr, ip
 8000da4:	fbb3 f0f7 	udiv	r0, r3, r7
 8000da8:	fb07 3610 	mls	r6, r7, r0, r3
 8000dac:	0c0b      	lsrs	r3, r1, #16
 8000dae:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000db2:	fb00 f60e 	mul.w	r6, r0, lr
 8000db6:	429e      	cmp	r6, r3
 8000db8:	fa04 f402 	lsl.w	r4, r4, r2
 8000dbc:	d908      	bls.n	8000dd0 <__udivmoddi4+0x260>
 8000dbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dc6:	d22f      	bcs.n	8000e28 <__udivmoddi4+0x2b8>
 8000dc8:	429e      	cmp	r6, r3
 8000dca:	d92d      	bls.n	8000e28 <__udivmoddi4+0x2b8>
 8000dcc:	3802      	subs	r0, #2
 8000dce:	4463      	add	r3, ip
 8000dd0:	1b9b      	subs	r3, r3, r6
 8000dd2:	b289      	uxth	r1, r1
 8000dd4:	fbb3 f6f7 	udiv	r6, r3, r7
 8000dd8:	fb07 3316 	mls	r3, r7, r6, r3
 8000ddc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000de0:	fb06 f30e 	mul.w	r3, r6, lr
 8000de4:	428b      	cmp	r3, r1
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x28a>
 8000de8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dec:	f106 38ff 	add.w	r8, r6, #4294967295
 8000df0:	d216      	bcs.n	8000e20 <__udivmoddi4+0x2b0>
 8000df2:	428b      	cmp	r3, r1
 8000df4:	d914      	bls.n	8000e20 <__udivmoddi4+0x2b0>
 8000df6:	3e02      	subs	r6, #2
 8000df8:	4461      	add	r1, ip
 8000dfa:	1ac9      	subs	r1, r1, r3
 8000dfc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e00:	e738      	b.n	8000c74 <__udivmoddi4+0x104>
 8000e02:	462e      	mov	r6, r5
 8000e04:	4628      	mov	r0, r5
 8000e06:	e705      	b.n	8000c14 <__udivmoddi4+0xa4>
 8000e08:	4606      	mov	r6, r0
 8000e0a:	e6e3      	b.n	8000bd4 <__udivmoddi4+0x64>
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	e6f8      	b.n	8000c02 <__udivmoddi4+0x92>
 8000e10:	454b      	cmp	r3, r9
 8000e12:	d2a9      	bcs.n	8000d68 <__udivmoddi4+0x1f8>
 8000e14:	ebb9 0802 	subs.w	r8, r9, r2
 8000e18:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e1c:	3801      	subs	r0, #1
 8000e1e:	e7a3      	b.n	8000d68 <__udivmoddi4+0x1f8>
 8000e20:	4646      	mov	r6, r8
 8000e22:	e7ea      	b.n	8000dfa <__udivmoddi4+0x28a>
 8000e24:	4620      	mov	r0, r4
 8000e26:	e794      	b.n	8000d52 <__udivmoddi4+0x1e2>
 8000e28:	4640      	mov	r0, r8
 8000e2a:	e7d1      	b.n	8000dd0 <__udivmoddi4+0x260>
 8000e2c:	46d0      	mov	r8, sl
 8000e2e:	e77b      	b.n	8000d28 <__udivmoddi4+0x1b8>
 8000e30:	3b02      	subs	r3, #2
 8000e32:	4461      	add	r1, ip
 8000e34:	e732      	b.n	8000c9c <__udivmoddi4+0x12c>
 8000e36:	4630      	mov	r0, r6
 8000e38:	e709      	b.n	8000c4e <__udivmoddi4+0xde>
 8000e3a:	4464      	add	r4, ip
 8000e3c:	3802      	subs	r0, #2
 8000e3e:	e742      	b.n	8000cc6 <__udivmoddi4+0x156>

08000e40 <__aeabi_idiv0>:
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop

08000e44 <MadgwickAHRSupdateIMU>:


//---------------------------------------------------------------------------------------------------
// IMU algorithm update

void MadgwickAHRSupdateIMU(double gx, double gy, double gz, double ax, double ay, double az) {
 8000e44:	b5b0      	push	{r4, r5, r7, lr}
 8000e46:	b0a2      	sub	sp, #136	; 0x88
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
 8000e4e:	ed87 1b08 	vstr	d1, [r7, #32]
 8000e52:	ed87 2b06 	vstr	d2, [r7, #24]
 8000e56:	ed87 3b04 	vstr	d3, [r7, #16]
 8000e5a:	ed87 4b02 	vstr	d4, [r7, #8]
 8000e5e:	ed87 5b00 	vstr	d5, [r7]
	float qDot1, qDot2, qDot3, qDot4;
	float _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2 ,_8q1, _8q2, q0q0, q1q1, q2q2, q3q3;


	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 8000e62:	4bc7      	ldr	r3, [pc, #796]	; (8001180 <MadgwickAHRSupdateIMU+0x33c>)
 8000e64:	edd3 7a00 	vldr	s15, [r3]
 8000e68:	eef1 7a67 	vneg.f32	s15, s15
 8000e6c:	ee17 3a90 	vmov	r3, s15
 8000e70:	4618      	mov	r0, r3
 8000e72:	f7ff fb0d 	bl	8000490 <__aeabi_f2d>
 8000e76:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8000e7a:	f7ff fb61 	bl	8000540 <__aeabi_dmul>
 8000e7e:	4602      	mov	r2, r0
 8000e80:	460b      	mov	r3, r1
 8000e82:	4614      	mov	r4, r2
 8000e84:	461d      	mov	r5, r3
 8000e86:	4bbf      	ldr	r3, [pc, #764]	; (8001184 <MadgwickAHRSupdateIMU+0x340>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f7ff fb00 	bl	8000490 <__aeabi_f2d>
 8000e90:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000e94:	f7ff fb54 	bl	8000540 <__aeabi_dmul>
 8000e98:	4602      	mov	r2, r0
 8000e9a:	460b      	mov	r3, r1
 8000e9c:	4620      	mov	r0, r4
 8000e9e:	4629      	mov	r1, r5
 8000ea0:	f7ff f996 	bl	80001d0 <__aeabi_dsub>
 8000ea4:	4602      	mov	r2, r0
 8000ea6:	460b      	mov	r3, r1
 8000ea8:	4614      	mov	r4, r2
 8000eaa:	461d      	mov	r5, r3
 8000eac:	4bb6      	ldr	r3, [pc, #728]	; (8001188 <MadgwickAHRSupdateIMU+0x344>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f7ff faed 	bl	8000490 <__aeabi_f2d>
 8000eb6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000eba:	f7ff fb41 	bl	8000540 <__aeabi_dmul>
 8000ebe:	4602      	mov	r2, r0
 8000ec0:	460b      	mov	r3, r1
 8000ec2:	4620      	mov	r0, r4
 8000ec4:	4629      	mov	r1, r5
 8000ec6:	f7ff f983 	bl	80001d0 <__aeabi_dsub>
 8000eca:	4602      	mov	r2, r0
 8000ecc:	460b      	mov	r3, r1
 8000ece:	4610      	mov	r0, r2
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	f04f 0200 	mov.w	r2, #0
 8000ed6:	4bad      	ldr	r3, [pc, #692]	; (800118c <MadgwickAHRSupdateIMU+0x348>)
 8000ed8:	f7ff fb32 	bl	8000540 <__aeabi_dmul>
 8000edc:	4602      	mov	r2, r0
 8000ede:	460b      	mov	r3, r1
 8000ee0:	4610      	mov	r0, r2
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	f7ff fddc 	bl	8000aa0 <__aeabi_d2f>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 8000eee:	4ba8      	ldr	r3, [pc, #672]	; (8001190 <MadgwickAHRSupdateIMU+0x34c>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f7ff facc 	bl	8000490 <__aeabi_f2d>
 8000ef8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8000efc:	f7ff fb20 	bl	8000540 <__aeabi_dmul>
 8000f00:	4602      	mov	r2, r0
 8000f02:	460b      	mov	r3, r1
 8000f04:	4614      	mov	r4, r2
 8000f06:	461d      	mov	r5, r3
 8000f08:	4b9e      	ldr	r3, [pc, #632]	; (8001184 <MadgwickAHRSupdateIMU+0x340>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f7ff fabf 	bl	8000490 <__aeabi_f2d>
 8000f12:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000f16:	f7ff fb13 	bl	8000540 <__aeabi_dmul>
 8000f1a:	4602      	mov	r2, r0
 8000f1c:	460b      	mov	r3, r1
 8000f1e:	4620      	mov	r0, r4
 8000f20:	4629      	mov	r1, r5
 8000f22:	f7ff f957 	bl	80001d4 <__adddf3>
 8000f26:	4602      	mov	r2, r0
 8000f28:	460b      	mov	r3, r1
 8000f2a:	4614      	mov	r4, r2
 8000f2c:	461d      	mov	r5, r3
 8000f2e:	4b96      	ldr	r3, [pc, #600]	; (8001188 <MadgwickAHRSupdateIMU+0x344>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4618      	mov	r0, r3
 8000f34:	f7ff faac 	bl	8000490 <__aeabi_f2d>
 8000f38:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000f3c:	f7ff fb00 	bl	8000540 <__aeabi_dmul>
 8000f40:	4602      	mov	r2, r0
 8000f42:	460b      	mov	r3, r1
 8000f44:	4620      	mov	r0, r4
 8000f46:	4629      	mov	r1, r5
 8000f48:	f7ff f942 	bl	80001d0 <__aeabi_dsub>
 8000f4c:	4602      	mov	r2, r0
 8000f4e:	460b      	mov	r3, r1
 8000f50:	4610      	mov	r0, r2
 8000f52:	4619      	mov	r1, r3
 8000f54:	f04f 0200 	mov.w	r2, #0
 8000f58:	4b8c      	ldr	r3, [pc, #560]	; (800118c <MadgwickAHRSupdateIMU+0x348>)
 8000f5a:	f7ff faf1 	bl	8000540 <__aeabi_dmul>
 8000f5e:	4602      	mov	r2, r0
 8000f60:	460b      	mov	r3, r1
 8000f62:	4610      	mov	r0, r2
 8000f64:	4619      	mov	r1, r3
 8000f66:	f7ff fd9b 	bl	8000aa0 <__aeabi_d2f>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 8000f70:	4b87      	ldr	r3, [pc, #540]	; (8001190 <MadgwickAHRSupdateIMU+0x34c>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff fa8b 	bl	8000490 <__aeabi_f2d>
 8000f7a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000f7e:	f7ff fadf 	bl	8000540 <__aeabi_dmul>
 8000f82:	4602      	mov	r2, r0
 8000f84:	460b      	mov	r3, r1
 8000f86:	4614      	mov	r4, r2
 8000f88:	461d      	mov	r5, r3
 8000f8a:	4b7d      	ldr	r3, [pc, #500]	; (8001180 <MadgwickAHRSupdateIMU+0x33c>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f7ff fa7e 	bl	8000490 <__aeabi_f2d>
 8000f94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000f98:	f7ff fad2 	bl	8000540 <__aeabi_dmul>
 8000f9c:	4602      	mov	r2, r0
 8000f9e:	460b      	mov	r3, r1
 8000fa0:	4620      	mov	r0, r4
 8000fa2:	4629      	mov	r1, r5
 8000fa4:	f7ff f914 	bl	80001d0 <__aeabi_dsub>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	460b      	mov	r3, r1
 8000fac:	4614      	mov	r4, r2
 8000fae:	461d      	mov	r5, r3
 8000fb0:	4b75      	ldr	r3, [pc, #468]	; (8001188 <MadgwickAHRSupdateIMU+0x344>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff fa6b 	bl	8000490 <__aeabi_f2d>
 8000fba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8000fbe:	f7ff fabf 	bl	8000540 <__aeabi_dmul>
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	460b      	mov	r3, r1
 8000fc6:	4620      	mov	r0, r4
 8000fc8:	4629      	mov	r1, r5
 8000fca:	f7ff f903 	bl	80001d4 <__adddf3>
 8000fce:	4602      	mov	r2, r0
 8000fd0:	460b      	mov	r3, r1
 8000fd2:	4610      	mov	r0, r2
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	f04f 0200 	mov.w	r2, #0
 8000fda:	4b6c      	ldr	r3, [pc, #432]	; (800118c <MadgwickAHRSupdateIMU+0x348>)
 8000fdc:	f7ff fab0 	bl	8000540 <__aeabi_dmul>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	460b      	mov	r3, r1
 8000fe4:	4610      	mov	r0, r2
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	f7ff fd5a 	bl	8000aa0 <__aeabi_d2f>
 8000fec:	4603      	mov	r3, r0
 8000fee:	67fb      	str	r3, [r7, #124]	; 0x7c
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 8000ff0:	4b67      	ldr	r3, [pc, #412]	; (8001190 <MadgwickAHRSupdateIMU+0x34c>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f7ff fa4b 	bl	8000490 <__aeabi_f2d>
 8000ffa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000ffe:	f7ff fa9f 	bl	8000540 <__aeabi_dmul>
 8001002:	4602      	mov	r2, r0
 8001004:	460b      	mov	r3, r1
 8001006:	4614      	mov	r4, r2
 8001008:	461d      	mov	r5, r3
 800100a:	4b5d      	ldr	r3, [pc, #372]	; (8001180 <MadgwickAHRSupdateIMU+0x33c>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4618      	mov	r0, r3
 8001010:	f7ff fa3e 	bl	8000490 <__aeabi_f2d>
 8001014:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001018:	f7ff fa92 	bl	8000540 <__aeabi_dmul>
 800101c:	4602      	mov	r2, r0
 800101e:	460b      	mov	r3, r1
 8001020:	4620      	mov	r0, r4
 8001022:	4629      	mov	r1, r5
 8001024:	f7ff f8d6 	bl	80001d4 <__adddf3>
 8001028:	4602      	mov	r2, r0
 800102a:	460b      	mov	r3, r1
 800102c:	4614      	mov	r4, r2
 800102e:	461d      	mov	r5, r3
 8001030:	4b54      	ldr	r3, [pc, #336]	; (8001184 <MadgwickAHRSupdateIMU+0x340>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff fa2b 	bl	8000490 <__aeabi_f2d>
 800103a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800103e:	f7ff fa7f 	bl	8000540 <__aeabi_dmul>
 8001042:	4602      	mov	r2, r0
 8001044:	460b      	mov	r3, r1
 8001046:	4620      	mov	r0, r4
 8001048:	4629      	mov	r1, r5
 800104a:	f7ff f8c1 	bl	80001d0 <__aeabi_dsub>
 800104e:	4602      	mov	r2, r0
 8001050:	460b      	mov	r3, r1
 8001052:	4610      	mov	r0, r2
 8001054:	4619      	mov	r1, r3
 8001056:	f04f 0200 	mov.w	r2, #0
 800105a:	4b4c      	ldr	r3, [pc, #304]	; (800118c <MadgwickAHRSupdateIMU+0x348>)
 800105c:	f7ff fa70 	bl	8000540 <__aeabi_dmul>
 8001060:	4602      	mov	r2, r0
 8001062:	460b      	mov	r3, r1
 8001064:	4610      	mov	r0, r2
 8001066:	4619      	mov	r1, r3
 8001068:	f7ff fd1a 	bl	8000aa0 <__aeabi_d2f>
 800106c:	4603      	mov	r3, r0
 800106e:	67bb      	str	r3, [r7, #120]	; 0x78

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8001070:	f04f 0200 	mov.w	r2, #0
 8001074:	f04f 0300 	mov.w	r3, #0
 8001078:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800107c:	f7ff fcc8 	bl	8000a10 <__aeabi_dcmpeq>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d016      	beq.n	80010b4 <MadgwickAHRSupdateIMU+0x270>
 8001086:	f04f 0200 	mov.w	r2, #0
 800108a:	f04f 0300 	mov.w	r3, #0
 800108e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001092:	f7ff fcbd 	bl	8000a10 <__aeabi_dcmpeq>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d00b      	beq.n	80010b4 <MadgwickAHRSupdateIMU+0x270>
 800109c:	f04f 0200 	mov.w	r2, #0
 80010a0:	f04f 0300 	mov.w	r3, #0
 80010a4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80010a8:	f7ff fcb2 	bl	8000a10 <__aeabi_dcmpeq>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	f040 8308 	bne.w	80016c4 <MadgwickAHRSupdateIMU+0x880>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 80010b4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80010b8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80010bc:	f7ff fa40 	bl	8000540 <__aeabi_dmul>
 80010c0:	4602      	mov	r2, r0
 80010c2:	460b      	mov	r3, r1
 80010c4:	4614      	mov	r4, r2
 80010c6:	461d      	mov	r5, r3
 80010c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80010cc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80010d0:	f7ff fa36 	bl	8000540 <__aeabi_dmul>
 80010d4:	4602      	mov	r2, r0
 80010d6:	460b      	mov	r3, r1
 80010d8:	4620      	mov	r0, r4
 80010da:	4629      	mov	r1, r5
 80010dc:	f7ff f87a 	bl	80001d4 <__adddf3>
 80010e0:	4602      	mov	r2, r0
 80010e2:	460b      	mov	r3, r1
 80010e4:	4614      	mov	r4, r2
 80010e6:	461d      	mov	r5, r3
 80010e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80010ec:	e9d7 0100 	ldrd	r0, r1, [r7]
 80010f0:	f7ff fa26 	bl	8000540 <__aeabi_dmul>
 80010f4:	4602      	mov	r2, r0
 80010f6:	460b      	mov	r3, r1
 80010f8:	4620      	mov	r0, r4
 80010fa:	4629      	mov	r1, r5
 80010fc:	f7ff f86a 	bl	80001d4 <__adddf3>
 8001100:	4602      	mov	r2, r0
 8001102:	460b      	mov	r3, r1
 8001104:	4610      	mov	r0, r2
 8001106:	4619      	mov	r1, r3
 8001108:	f7ff fcca 	bl	8000aa0 <__aeabi_d2f>
 800110c:	4603      	mov	r3, r0
 800110e:	ee00 3a10 	vmov	s0, r3
 8001112:	f000 fc8f 	bl	8001a34 <invSqrt>
 8001116:	ed87 0a1d 	vstr	s0, [r7, #116]	; 0x74
		ax *= recipNorm;
 800111a:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800111c:	f7ff f9b8 	bl	8000490 <__aeabi_f2d>
 8001120:	4602      	mov	r2, r0
 8001122:	460b      	mov	r3, r1
 8001124:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001128:	f7ff fa0a 	bl	8000540 <__aeabi_dmul>
 800112c:	4602      	mov	r2, r0
 800112e:	460b      	mov	r3, r1
 8001130:	e9c7 2304 	strd	r2, r3, [r7, #16]
		ay *= recipNorm;
 8001134:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001136:	f7ff f9ab 	bl	8000490 <__aeabi_f2d>
 800113a:	4602      	mov	r2, r0
 800113c:	460b      	mov	r3, r1
 800113e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001142:	f7ff f9fd 	bl	8000540 <__aeabi_dmul>
 8001146:	4602      	mov	r2, r0
 8001148:	460b      	mov	r3, r1
 800114a:	e9c7 2302 	strd	r2, r3, [r7, #8]
		az *= recipNorm;   
 800114e:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001150:	f7ff f99e 	bl	8000490 <__aeabi_f2d>
 8001154:	4602      	mov	r2, r0
 8001156:	460b      	mov	r3, r1
 8001158:	e9d7 0100 	ldrd	r0, r1, [r7]
 800115c:	f7ff f9f0 	bl	8000540 <__aeabi_dmul>
 8001160:	4602      	mov	r2, r0
 8001162:	460b      	mov	r3, r1
 8001164:	e9c7 2300 	strd	r2, r3, [r7]

		// Auxiliary variables to avoid repeated arithmetic
		_2q0 = 2.0f * q0;
 8001168:	4b09      	ldr	r3, [pc, #36]	; (8001190 <MadgwickAHRSupdateIMU+0x34c>)
 800116a:	edd3 7a00 	vldr	s15, [r3]
 800116e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001172:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
		_2q1 = 2.0f * q1;
 8001176:	4b02      	ldr	r3, [pc, #8]	; (8001180 <MadgwickAHRSupdateIMU+0x33c>)
 8001178:	edd3 7a00 	vldr	s15, [r3]
 800117c:	e00a      	b.n	8001194 <MadgwickAHRSupdateIMU+0x350>
 800117e:	bf00      	nop
 8001180:	2000012c 	.word	0x2000012c
 8001184:	20000130 	.word	0x20000130
 8001188:	20000134 	.word	0x20000134
 800118c:	3fe00000 	.word	0x3fe00000
 8001190:	20000004 	.word	0x20000004
 8001194:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001198:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
		_2q2 = 2.0f * q2;
 800119c:	4be5      	ldr	r3, [pc, #916]	; (8001534 <MadgwickAHRSupdateIMU+0x6f0>)
 800119e:	edd3 7a00 	vldr	s15, [r3]
 80011a2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80011a6:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
		_2q3 = 2.0f * q3;
 80011aa:	4be3      	ldr	r3, [pc, #908]	; (8001538 <MadgwickAHRSupdateIMU+0x6f4>)
 80011ac:	edd3 7a00 	vldr	s15, [r3]
 80011b0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80011b4:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
		_4q0 = 4.0f * q0;
 80011b8:	4be0      	ldr	r3, [pc, #896]	; (800153c <MadgwickAHRSupdateIMU+0x6f8>)
 80011ba:	edd3 7a00 	vldr	s15, [r3]
 80011be:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80011c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011c6:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
		_4q1 = 4.0f * q1;
 80011ca:	4bdd      	ldr	r3, [pc, #884]	; (8001540 <MadgwickAHRSupdateIMU+0x6fc>)
 80011cc:	edd3 7a00 	vldr	s15, [r3]
 80011d0:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80011d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011d8:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
		_4q2 = 4.0f * q2;
 80011dc:	4bd5      	ldr	r3, [pc, #852]	; (8001534 <MadgwickAHRSupdateIMU+0x6f0>)
 80011de:	edd3 7a00 	vldr	s15, [r3]
 80011e2:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80011e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011ea:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		_8q1 = 8.0f * q1;
 80011ee:	4bd4      	ldr	r3, [pc, #848]	; (8001540 <MadgwickAHRSupdateIMU+0x6fc>)
 80011f0:	edd3 7a00 	vldr	s15, [r3]
 80011f4:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80011f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011fc:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
		_8q2 = 8.0f * q2;
 8001200:	4bcc      	ldr	r3, [pc, #816]	; (8001534 <MadgwickAHRSupdateIMU+0x6f0>)
 8001202:	edd3 7a00 	vldr	s15, [r3]
 8001206:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800120a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800120e:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
		q0q0 = q0 * q0;
 8001212:	4bca      	ldr	r3, [pc, #808]	; (800153c <MadgwickAHRSupdateIMU+0x6f8>)
 8001214:	ed93 7a00 	vldr	s14, [r3]
 8001218:	4bc8      	ldr	r3, [pc, #800]	; (800153c <MadgwickAHRSupdateIMU+0x6f8>)
 800121a:	edd3 7a00 	vldr	s15, [r3]
 800121e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001222:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		q1q1 = q1 * q1;
 8001226:	4bc6      	ldr	r3, [pc, #792]	; (8001540 <MadgwickAHRSupdateIMU+0x6fc>)
 8001228:	ed93 7a00 	vldr	s14, [r3]
 800122c:	4bc4      	ldr	r3, [pc, #784]	; (8001540 <MadgwickAHRSupdateIMU+0x6fc>)
 800122e:	edd3 7a00 	vldr	s15, [r3]
 8001232:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001236:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		q2q2 = q2 * q2;
 800123a:	4bbe      	ldr	r3, [pc, #760]	; (8001534 <MadgwickAHRSupdateIMU+0x6f0>)
 800123c:	ed93 7a00 	vldr	s14, [r3]
 8001240:	4bbc      	ldr	r3, [pc, #752]	; (8001534 <MadgwickAHRSupdateIMU+0x6f0>)
 8001242:	edd3 7a00 	vldr	s15, [r3]
 8001246:	ee67 7a27 	vmul.f32	s15, s14, s15
 800124a:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		q3q3 = q3 * q3;
 800124e:	4bba      	ldr	r3, [pc, #744]	; (8001538 <MadgwickAHRSupdateIMU+0x6f4>)
 8001250:	ed93 7a00 	vldr	s14, [r3]
 8001254:	4bb8      	ldr	r3, [pc, #736]	; (8001538 <MadgwickAHRSupdateIMU+0x6f4>)
 8001256:	edd3 7a00 	vldr	s15, [r3]
 800125a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800125e:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40

		// Gradient decent algorithm corrective step
		s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 8001262:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8001266:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800126a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800126e:	ee17 0a90 	vmov	r0, s15
 8001272:	f7ff f90d 	bl	8000490 <__aeabi_f2d>
 8001276:	4604      	mov	r4, r0
 8001278:	460d      	mov	r5, r1
 800127a:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800127c:	f7ff f908 	bl	8000490 <__aeabi_f2d>
 8001280:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001284:	f7ff f95c 	bl	8000540 <__aeabi_dmul>
 8001288:	4602      	mov	r2, r0
 800128a:	460b      	mov	r3, r1
 800128c:	4620      	mov	r0, r4
 800128e:	4629      	mov	r1, r5
 8001290:	f7fe ffa0 	bl	80001d4 <__adddf3>
 8001294:	4602      	mov	r2, r0
 8001296:	460b      	mov	r3, r1
 8001298:	4614      	mov	r4, r2
 800129a:	461d      	mov	r5, r3
 800129c:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80012a0:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80012a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012a8:	ee17 0a90 	vmov	r0, s15
 80012ac:	f7ff f8f0 	bl	8000490 <__aeabi_f2d>
 80012b0:	4602      	mov	r2, r0
 80012b2:	460b      	mov	r3, r1
 80012b4:	4620      	mov	r0, r4
 80012b6:	4629      	mov	r1, r5
 80012b8:	f7fe ff8c 	bl	80001d4 <__adddf3>
 80012bc:	4602      	mov	r2, r0
 80012be:	460b      	mov	r3, r1
 80012c0:	4614      	mov	r4, r2
 80012c2:	461d      	mov	r5, r3
 80012c4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80012c6:	f7ff f8e3 	bl	8000490 <__aeabi_f2d>
 80012ca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80012ce:	f7ff f937 	bl	8000540 <__aeabi_dmul>
 80012d2:	4602      	mov	r2, r0
 80012d4:	460b      	mov	r3, r1
 80012d6:	4620      	mov	r0, r4
 80012d8:	4629      	mov	r1, r5
 80012da:	f7fe ff79 	bl	80001d0 <__aeabi_dsub>
 80012de:	4602      	mov	r2, r0
 80012e0:	460b      	mov	r3, r1
 80012e2:	4610      	mov	r0, r2
 80012e4:	4619      	mov	r1, r3
 80012e6:	f7ff fbdb 	bl	8000aa0 <__aeabi_d2f>
 80012ea:	4603      	mov	r3, r0
 80012ec:	63fb      	str	r3, [r7, #60]	; 0x3c
		s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 80012ee:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80012f2:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80012f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012fa:	ee17 0a90 	vmov	r0, s15
 80012fe:	f7ff f8c7 	bl	8000490 <__aeabi_f2d>
 8001302:	4604      	mov	r4, r0
 8001304:	460d      	mov	r5, r1
 8001306:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8001308:	f7ff f8c2 	bl	8000490 <__aeabi_f2d>
 800130c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001310:	f7ff f916 	bl	8000540 <__aeabi_dmul>
 8001314:	4602      	mov	r2, r0
 8001316:	460b      	mov	r3, r1
 8001318:	4620      	mov	r0, r4
 800131a:	4629      	mov	r1, r5
 800131c:	f7fe ff58 	bl	80001d0 <__aeabi_dsub>
 8001320:	4602      	mov	r2, r0
 8001322:	460b      	mov	r3, r1
 8001324:	4614      	mov	r4, r2
 8001326:	461d      	mov	r5, r3
 8001328:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800132c:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8001330:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001334:	4b82      	ldr	r3, [pc, #520]	; (8001540 <MadgwickAHRSupdateIMU+0x6fc>)
 8001336:	edd3 7a00 	vldr	s15, [r3]
 800133a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800133e:	ee17 0a90 	vmov	r0, s15
 8001342:	f7ff f8a5 	bl	8000490 <__aeabi_f2d>
 8001346:	4602      	mov	r2, r0
 8001348:	460b      	mov	r3, r1
 800134a:	4620      	mov	r0, r4
 800134c:	4629      	mov	r1, r5
 800134e:	f7fe ff41 	bl	80001d4 <__adddf3>
 8001352:	4602      	mov	r2, r0
 8001354:	460b      	mov	r3, r1
 8001356:	4614      	mov	r4, r2
 8001358:	461d      	mov	r5, r3
 800135a:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800135c:	f7ff f898 	bl	8000490 <__aeabi_f2d>
 8001360:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001364:	f7ff f8ec 	bl	8000540 <__aeabi_dmul>
 8001368:	4602      	mov	r2, r0
 800136a:	460b      	mov	r3, r1
 800136c:	4620      	mov	r0, r4
 800136e:	4629      	mov	r1, r5
 8001370:	f7fe ff2e 	bl	80001d0 <__aeabi_dsub>
 8001374:	4602      	mov	r2, r0
 8001376:	460b      	mov	r3, r1
 8001378:	4614      	mov	r4, r2
 800137a:	461d      	mov	r5, r3
 800137c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800137e:	f7ff f887 	bl	8000490 <__aeabi_f2d>
 8001382:	4602      	mov	r2, r0
 8001384:	460b      	mov	r3, r1
 8001386:	4620      	mov	r0, r4
 8001388:	4629      	mov	r1, r5
 800138a:	f7fe ff21 	bl	80001d0 <__aeabi_dsub>
 800138e:	4602      	mov	r2, r0
 8001390:	460b      	mov	r3, r1
 8001392:	4614      	mov	r4, r2
 8001394:	461d      	mov	r5, r3
 8001396:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800139a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800139e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013a2:	ee17 0a90 	vmov	r0, s15
 80013a6:	f7ff f873 	bl	8000490 <__aeabi_f2d>
 80013aa:	4602      	mov	r2, r0
 80013ac:	460b      	mov	r3, r1
 80013ae:	4620      	mov	r0, r4
 80013b0:	4629      	mov	r1, r5
 80013b2:	f7fe ff0f 	bl	80001d4 <__adddf3>
 80013b6:	4602      	mov	r2, r0
 80013b8:	460b      	mov	r3, r1
 80013ba:	4614      	mov	r4, r2
 80013bc:	461d      	mov	r5, r3
 80013be:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80013c2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80013c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013ca:	ee17 0a90 	vmov	r0, s15
 80013ce:	f7ff f85f 	bl	8000490 <__aeabi_f2d>
 80013d2:	4602      	mov	r2, r0
 80013d4:	460b      	mov	r3, r1
 80013d6:	4620      	mov	r0, r4
 80013d8:	4629      	mov	r1, r5
 80013da:	f7fe fefb 	bl	80001d4 <__adddf3>
 80013de:	4602      	mov	r2, r0
 80013e0:	460b      	mov	r3, r1
 80013e2:	4614      	mov	r4, r2
 80013e4:	461d      	mov	r5, r3
 80013e6:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80013e8:	f7ff f852 	bl	8000490 <__aeabi_f2d>
 80013ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80013f0:	f7ff f8a6 	bl	8000540 <__aeabi_dmul>
 80013f4:	4602      	mov	r2, r0
 80013f6:	460b      	mov	r3, r1
 80013f8:	4620      	mov	r0, r4
 80013fa:	4629      	mov	r1, r5
 80013fc:	f7fe feea 	bl	80001d4 <__adddf3>
 8001400:	4602      	mov	r2, r0
 8001402:	460b      	mov	r3, r1
 8001404:	4610      	mov	r0, r2
 8001406:	4619      	mov	r1, r3
 8001408:	f7ff fb4a 	bl	8000aa0 <__aeabi_d2f>
 800140c:	4603      	mov	r3, r0
 800140e:	63bb      	str	r3, [r7, #56]	; 0x38
		s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 8001410:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8001414:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8001418:	ee27 7a87 	vmul.f32	s14, s15, s14
 800141c:	4b45      	ldr	r3, [pc, #276]	; (8001534 <MadgwickAHRSupdateIMU+0x6f0>)
 800141e:	edd3 7a00 	vldr	s15, [r3]
 8001422:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001426:	ee17 0a90 	vmov	r0, s15
 800142a:	f7ff f831 	bl	8000490 <__aeabi_f2d>
 800142e:	4604      	mov	r4, r0
 8001430:	460d      	mov	r5, r1
 8001432:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8001434:	f7ff f82c 	bl	8000490 <__aeabi_f2d>
 8001438:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800143c:	f7ff f880 	bl	8000540 <__aeabi_dmul>
 8001440:	4602      	mov	r2, r0
 8001442:	460b      	mov	r3, r1
 8001444:	4620      	mov	r0, r4
 8001446:	4629      	mov	r1, r5
 8001448:	f7fe fec4 	bl	80001d4 <__adddf3>
 800144c:	4602      	mov	r2, r0
 800144e:	460b      	mov	r3, r1
 8001450:	4614      	mov	r4, r2
 8001452:	461d      	mov	r5, r3
 8001454:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001458:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800145c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001460:	ee17 0a90 	vmov	r0, s15
 8001464:	f7ff f814 	bl	8000490 <__aeabi_f2d>
 8001468:	4602      	mov	r2, r0
 800146a:	460b      	mov	r3, r1
 800146c:	4620      	mov	r0, r4
 800146e:	4629      	mov	r1, r5
 8001470:	f7fe feb0 	bl	80001d4 <__adddf3>
 8001474:	4602      	mov	r2, r0
 8001476:	460b      	mov	r3, r1
 8001478:	4614      	mov	r4, r2
 800147a:	461d      	mov	r5, r3
 800147c:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800147e:	f7ff f807 	bl	8000490 <__aeabi_f2d>
 8001482:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001486:	f7ff f85b 	bl	8000540 <__aeabi_dmul>
 800148a:	4602      	mov	r2, r0
 800148c:	460b      	mov	r3, r1
 800148e:	4620      	mov	r0, r4
 8001490:	4629      	mov	r1, r5
 8001492:	f7fe fe9d 	bl	80001d0 <__aeabi_dsub>
 8001496:	4602      	mov	r2, r0
 8001498:	460b      	mov	r3, r1
 800149a:	4614      	mov	r4, r2
 800149c:	461d      	mov	r5, r3
 800149e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80014a0:	f7fe fff6 	bl	8000490 <__aeabi_f2d>
 80014a4:	4602      	mov	r2, r0
 80014a6:	460b      	mov	r3, r1
 80014a8:	4620      	mov	r0, r4
 80014aa:	4629      	mov	r1, r5
 80014ac:	f7fe fe90 	bl	80001d0 <__aeabi_dsub>
 80014b0:	4602      	mov	r2, r0
 80014b2:	460b      	mov	r3, r1
 80014b4:	4614      	mov	r4, r2
 80014b6:	461d      	mov	r5, r3
 80014b8:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80014bc:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80014c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014c4:	ee17 0a90 	vmov	r0, s15
 80014c8:	f7fe ffe2 	bl	8000490 <__aeabi_f2d>
 80014cc:	4602      	mov	r2, r0
 80014ce:	460b      	mov	r3, r1
 80014d0:	4620      	mov	r0, r4
 80014d2:	4629      	mov	r1, r5
 80014d4:	f7fe fe7e 	bl	80001d4 <__adddf3>
 80014d8:	4602      	mov	r2, r0
 80014da:	460b      	mov	r3, r1
 80014dc:	4614      	mov	r4, r2
 80014de:	461d      	mov	r5, r3
 80014e0:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80014e4:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80014e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014ec:	ee17 0a90 	vmov	r0, s15
 80014f0:	f7fe ffce 	bl	8000490 <__aeabi_f2d>
 80014f4:	4602      	mov	r2, r0
 80014f6:	460b      	mov	r3, r1
 80014f8:	4620      	mov	r0, r4
 80014fa:	4629      	mov	r1, r5
 80014fc:	f7fe fe6a 	bl	80001d4 <__adddf3>
 8001500:	4602      	mov	r2, r0
 8001502:	460b      	mov	r3, r1
 8001504:	4614      	mov	r4, r2
 8001506:	461d      	mov	r5, r3
 8001508:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800150a:	f7fe ffc1 	bl	8000490 <__aeabi_f2d>
 800150e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001512:	f7ff f815 	bl	8000540 <__aeabi_dmul>
 8001516:	4602      	mov	r2, r0
 8001518:	460b      	mov	r3, r1
 800151a:	4620      	mov	r0, r4
 800151c:	4629      	mov	r1, r5
 800151e:	f7fe fe59 	bl	80001d4 <__adddf3>
 8001522:	4602      	mov	r2, r0
 8001524:	460b      	mov	r3, r1
 8001526:	4610      	mov	r0, r2
 8001528:	4619      	mov	r1, r3
 800152a:	f7ff fab9 	bl	8000aa0 <__aeabi_d2f>
 800152e:	4603      	mov	r3, r0
 8001530:	637b      	str	r3, [r7, #52]	; 0x34
 8001532:	e007      	b.n	8001544 <MadgwickAHRSupdateIMU+0x700>
 8001534:	20000130 	.word	0x20000130
 8001538:	20000134 	.word	0x20000134
 800153c:	20000004 	.word	0x20000004
 8001540:	2000012c 	.word	0x2000012c
		s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 8001544:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001548:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800154c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001550:	4bdf      	ldr	r3, [pc, #892]	; (80018d0 <MadgwickAHRSupdateIMU+0xa8c>)
 8001552:	edd3 7a00 	vldr	s15, [r3]
 8001556:	ee67 7a27 	vmul.f32	s15, s14, s15
 800155a:	ee17 0a90 	vmov	r0, s15
 800155e:	f7fe ff97 	bl	8000490 <__aeabi_f2d>
 8001562:	4604      	mov	r4, r0
 8001564:	460d      	mov	r5, r1
 8001566:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8001568:	f7fe ff92 	bl	8000490 <__aeabi_f2d>
 800156c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001570:	f7fe ffe6 	bl	8000540 <__aeabi_dmul>
 8001574:	4602      	mov	r2, r0
 8001576:	460b      	mov	r3, r1
 8001578:	4620      	mov	r0, r4
 800157a:	4629      	mov	r1, r5
 800157c:	f7fe fe28 	bl	80001d0 <__aeabi_dsub>
 8001580:	4602      	mov	r2, r0
 8001582:	460b      	mov	r3, r1
 8001584:	4614      	mov	r4, r2
 8001586:	461d      	mov	r5, r3
 8001588:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800158c:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8001590:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001594:	4bce      	ldr	r3, [pc, #824]	; (80018d0 <MadgwickAHRSupdateIMU+0xa8c>)
 8001596:	edd3 7a00 	vldr	s15, [r3]
 800159a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800159e:	ee17 0a90 	vmov	r0, s15
 80015a2:	f7fe ff75 	bl	8000490 <__aeabi_f2d>
 80015a6:	4602      	mov	r2, r0
 80015a8:	460b      	mov	r3, r1
 80015aa:	4620      	mov	r0, r4
 80015ac:	4629      	mov	r1, r5
 80015ae:	f7fe fe11 	bl	80001d4 <__adddf3>
 80015b2:	4602      	mov	r2, r0
 80015b4:	460b      	mov	r3, r1
 80015b6:	4614      	mov	r4, r2
 80015b8:	461d      	mov	r5, r3
 80015ba:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80015bc:	f7fe ff68 	bl	8000490 <__aeabi_f2d>
 80015c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80015c4:	f7fe ffbc 	bl	8000540 <__aeabi_dmul>
 80015c8:	4602      	mov	r2, r0
 80015ca:	460b      	mov	r3, r1
 80015cc:	4620      	mov	r0, r4
 80015ce:	4629      	mov	r1, r5
 80015d0:	f7fe fdfe 	bl	80001d0 <__aeabi_dsub>
 80015d4:	4602      	mov	r2, r0
 80015d6:	460b      	mov	r3, r1
 80015d8:	4610      	mov	r0, r2
 80015da:	4619      	mov	r1, r3
 80015dc:	f7ff fa60 	bl	8000aa0 <__aeabi_d2f>
 80015e0:	4603      	mov	r3, r0
 80015e2:	633b      	str	r3, [r7, #48]	; 0x30
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 80015e4:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80015e8:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80015ec:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80015f0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80015f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80015f8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80015fc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001600:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001604:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001608:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800160c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001610:	eeb0 0a67 	vmov.f32	s0, s15
 8001614:	f000 fa0e 	bl	8001a34 <invSqrt>
 8001618:	ed87 0a1d 	vstr	s0, [r7, #116]	; 0x74
		s0 *= recipNorm;
 800161c:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001620:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001624:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001628:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		s1 *= recipNorm;
 800162c:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001630:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001634:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001638:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		s2 *= recipNorm;
 800163c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001640:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001644:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001648:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		s3 *= recipNorm;
 800164c:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001650:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001654:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001658:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

		// Apply feedback step
		qDot1 -= beta * s0;
 800165c:	4b9d      	ldr	r3, [pc, #628]	; (80018d4 <MadgwickAHRSupdateIMU+0xa90>)
 800165e:	ed93 7a00 	vldr	s14, [r3]
 8001662:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001666:	ee67 7a27 	vmul.f32	s15, s14, s15
 800166a:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 800166e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001672:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
		qDot2 -= beta * s1;
 8001676:	4b97      	ldr	r3, [pc, #604]	; (80018d4 <MadgwickAHRSupdateIMU+0xa90>)
 8001678:	ed93 7a00 	vldr	s14, [r3]
 800167c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001680:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001684:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8001688:	ee77 7a67 	vsub.f32	s15, s14, s15
 800168c:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
		qDot3 -= beta * s2;
 8001690:	4b90      	ldr	r3, [pc, #576]	; (80018d4 <MadgwickAHRSupdateIMU+0xa90>)
 8001692:	ed93 7a00 	vldr	s14, [r3]
 8001696:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800169a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800169e:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 80016a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016a6:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
		qDot4 -= beta * s3;
 80016aa:	4b8a      	ldr	r3, [pc, #552]	; (80018d4 <MadgwickAHRSupdateIMU+0xa90>)
 80016ac:	ed93 7a00 	vldr	s14, [r3]
 80016b0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80016b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016b8:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 80016bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016c0:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (1.0f / sampleFreq);
 80016c4:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80016c8:	ed9f 7a83 	vldr	s14, [pc, #524]	; 80018d8 <MadgwickAHRSupdateIMU+0xa94>
 80016cc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80016d0:	4b82      	ldr	r3, [pc, #520]	; (80018dc <MadgwickAHRSupdateIMU+0xa98>)
 80016d2:	edd3 7a00 	vldr	s15, [r3]
 80016d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016da:	4b80      	ldr	r3, [pc, #512]	; (80018dc <MadgwickAHRSupdateIMU+0xa98>)
 80016dc:	edc3 7a00 	vstr	s15, [r3]
	q1 += qDot2 * (1.0f / sampleFreq);
 80016e0:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80016e4:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 80018d8 <MadgwickAHRSupdateIMU+0xa94>
 80016e8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80016ec:	4b7c      	ldr	r3, [pc, #496]	; (80018e0 <MadgwickAHRSupdateIMU+0xa9c>)
 80016ee:	edd3 7a00 	vldr	s15, [r3]
 80016f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016f6:	4b7a      	ldr	r3, [pc, #488]	; (80018e0 <MadgwickAHRSupdateIMU+0xa9c>)
 80016f8:	edc3 7a00 	vstr	s15, [r3]
	q2 += qDot3 * (1.0f / sampleFreq);
 80016fc:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001700:	ed9f 7a75 	vldr	s14, [pc, #468]	; 80018d8 <MadgwickAHRSupdateIMU+0xa94>
 8001704:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001708:	4b76      	ldr	r3, [pc, #472]	; (80018e4 <MadgwickAHRSupdateIMU+0xaa0>)
 800170a:	edd3 7a00 	vldr	s15, [r3]
 800170e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001712:	4b74      	ldr	r3, [pc, #464]	; (80018e4 <MadgwickAHRSupdateIMU+0xaa0>)
 8001714:	edc3 7a00 	vstr	s15, [r3]
	q3 += qDot4 * (1.0f / sampleFreq);
 8001718:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800171c:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 80018d8 <MadgwickAHRSupdateIMU+0xa94>
 8001720:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001724:	4b6a      	ldr	r3, [pc, #424]	; (80018d0 <MadgwickAHRSupdateIMU+0xa8c>)
 8001726:	edd3 7a00 	vldr	s15, [r3]
 800172a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800172e:	4b68      	ldr	r3, [pc, #416]	; (80018d0 <MadgwickAHRSupdateIMU+0xa8c>)
 8001730:	edc3 7a00 	vstr	s15, [r3]

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8001734:	4b69      	ldr	r3, [pc, #420]	; (80018dc <MadgwickAHRSupdateIMU+0xa98>)
 8001736:	ed93 7a00 	vldr	s14, [r3]
 800173a:	4b68      	ldr	r3, [pc, #416]	; (80018dc <MadgwickAHRSupdateIMU+0xa98>)
 800173c:	edd3 7a00 	vldr	s15, [r3]
 8001740:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001744:	4b66      	ldr	r3, [pc, #408]	; (80018e0 <MadgwickAHRSupdateIMU+0xa9c>)
 8001746:	edd3 6a00 	vldr	s13, [r3]
 800174a:	4b65      	ldr	r3, [pc, #404]	; (80018e0 <MadgwickAHRSupdateIMU+0xa9c>)
 800174c:	edd3 7a00 	vldr	s15, [r3]
 8001750:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001754:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001758:	4b62      	ldr	r3, [pc, #392]	; (80018e4 <MadgwickAHRSupdateIMU+0xaa0>)
 800175a:	edd3 6a00 	vldr	s13, [r3]
 800175e:	4b61      	ldr	r3, [pc, #388]	; (80018e4 <MadgwickAHRSupdateIMU+0xaa0>)
 8001760:	edd3 7a00 	vldr	s15, [r3]
 8001764:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001768:	ee37 7a27 	vadd.f32	s14, s14, s15
 800176c:	4b58      	ldr	r3, [pc, #352]	; (80018d0 <MadgwickAHRSupdateIMU+0xa8c>)
 800176e:	edd3 6a00 	vldr	s13, [r3]
 8001772:	4b57      	ldr	r3, [pc, #348]	; (80018d0 <MadgwickAHRSupdateIMU+0xa8c>)
 8001774:	edd3 7a00 	vldr	s15, [r3]
 8001778:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800177c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001780:	eeb0 0a67 	vmov.f32	s0, s15
 8001784:	f000 f956 	bl	8001a34 <invSqrt>
 8001788:	ed87 0a1d 	vstr	s0, [r7, #116]	; 0x74
	q0 *= recipNorm;
 800178c:	4b53      	ldr	r3, [pc, #332]	; (80018dc <MadgwickAHRSupdateIMU+0xa98>)
 800178e:	ed93 7a00 	vldr	s14, [r3]
 8001792:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001796:	ee67 7a27 	vmul.f32	s15, s14, s15
 800179a:	4b50      	ldr	r3, [pc, #320]	; (80018dc <MadgwickAHRSupdateIMU+0xa98>)
 800179c:	edc3 7a00 	vstr	s15, [r3]
	q1 *= recipNorm;
 80017a0:	4b4f      	ldr	r3, [pc, #316]	; (80018e0 <MadgwickAHRSupdateIMU+0xa9c>)
 80017a2:	ed93 7a00 	vldr	s14, [r3]
 80017a6:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80017aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017ae:	4b4c      	ldr	r3, [pc, #304]	; (80018e0 <MadgwickAHRSupdateIMU+0xa9c>)
 80017b0:	edc3 7a00 	vstr	s15, [r3]
	q2 *= recipNorm;
 80017b4:	4b4b      	ldr	r3, [pc, #300]	; (80018e4 <MadgwickAHRSupdateIMU+0xaa0>)
 80017b6:	ed93 7a00 	vldr	s14, [r3]
 80017ba:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80017be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017c2:	4b48      	ldr	r3, [pc, #288]	; (80018e4 <MadgwickAHRSupdateIMU+0xaa0>)
 80017c4:	edc3 7a00 	vstr	s15, [r3]
	q3 *= recipNorm;
 80017c8:	4b41      	ldr	r3, [pc, #260]	; (80018d0 <MadgwickAHRSupdateIMU+0xa8c>)
 80017ca:	ed93 7a00 	vldr	s14, [r3]
 80017ce:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80017d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017d6:	4b3e      	ldr	r3, [pc, #248]	; (80018d0 <MadgwickAHRSupdateIMU+0xa8c>)
 80017d8:	edc3 7a00 	vstr	s15, [r3]

	mpu6050_Pitch = atan2f(2.0f * (q1*q2 + q0*q3), q0*q0 + q1*q1 - q2*q2 - q3*q3);
 80017dc:	4b40      	ldr	r3, [pc, #256]	; (80018e0 <MadgwickAHRSupdateIMU+0xa9c>)
 80017de:	ed93 7a00 	vldr	s14, [r3]
 80017e2:	4b40      	ldr	r3, [pc, #256]	; (80018e4 <MadgwickAHRSupdateIMU+0xaa0>)
 80017e4:	edd3 7a00 	vldr	s15, [r3]
 80017e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017ec:	4b3b      	ldr	r3, [pc, #236]	; (80018dc <MadgwickAHRSupdateIMU+0xa98>)
 80017ee:	edd3 6a00 	vldr	s13, [r3]
 80017f2:	4b37      	ldr	r3, [pc, #220]	; (80018d0 <MadgwickAHRSupdateIMU+0xa8c>)
 80017f4:	edd3 7a00 	vldr	s15, [r3]
 80017f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001800:	ee37 6aa7 	vadd.f32	s12, s15, s15
 8001804:	4b35      	ldr	r3, [pc, #212]	; (80018dc <MadgwickAHRSupdateIMU+0xa98>)
 8001806:	ed93 7a00 	vldr	s14, [r3]
 800180a:	4b34      	ldr	r3, [pc, #208]	; (80018dc <MadgwickAHRSupdateIMU+0xa98>)
 800180c:	edd3 7a00 	vldr	s15, [r3]
 8001810:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001814:	4b32      	ldr	r3, [pc, #200]	; (80018e0 <MadgwickAHRSupdateIMU+0xa9c>)
 8001816:	edd3 6a00 	vldr	s13, [r3]
 800181a:	4b31      	ldr	r3, [pc, #196]	; (80018e0 <MadgwickAHRSupdateIMU+0xa9c>)
 800181c:	edd3 7a00 	vldr	s15, [r3]
 8001820:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001824:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001828:	4b2e      	ldr	r3, [pc, #184]	; (80018e4 <MadgwickAHRSupdateIMU+0xaa0>)
 800182a:	edd3 6a00 	vldr	s13, [r3]
 800182e:	4b2d      	ldr	r3, [pc, #180]	; (80018e4 <MadgwickAHRSupdateIMU+0xaa0>)
 8001830:	edd3 7a00 	vldr	s15, [r3]
 8001834:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001838:	ee37 7a67 	vsub.f32	s14, s14, s15
 800183c:	4b24      	ldr	r3, [pc, #144]	; (80018d0 <MadgwickAHRSupdateIMU+0xa8c>)
 800183e:	edd3 6a00 	vldr	s13, [r3]
 8001842:	4b23      	ldr	r3, [pc, #140]	; (80018d0 <MadgwickAHRSupdateIMU+0xa8c>)
 8001844:	edd3 7a00 	vldr	s15, [r3]
 8001848:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800184c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001850:	eef0 0a67 	vmov.f32	s1, s15
 8001854:	eeb0 0a46 	vmov.f32	s0, s12
 8001858:	f003 f83a 	bl	80048d0 <atan2f>
 800185c:	eef0 7a40 	vmov.f32	s15, s0
 8001860:	4b21      	ldr	r3, [pc, #132]	; (80018e8 <MadgwickAHRSupdateIMU+0xaa4>)
 8001862:	edc3 7a00 	vstr	s15, [r3]
	mpu6050_Roll  = -asinf(2.0f * (q1*q3 - q0*q2));
 8001866:	4b1e      	ldr	r3, [pc, #120]	; (80018e0 <MadgwickAHRSupdateIMU+0xa9c>)
 8001868:	ed93 7a00 	vldr	s14, [r3]
 800186c:	4b18      	ldr	r3, [pc, #96]	; (80018d0 <MadgwickAHRSupdateIMU+0xa8c>)
 800186e:	edd3 7a00 	vldr	s15, [r3]
 8001872:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001876:	4b19      	ldr	r3, [pc, #100]	; (80018dc <MadgwickAHRSupdateIMU+0xa98>)
 8001878:	edd3 6a00 	vldr	s13, [r3]
 800187c:	4b19      	ldr	r3, [pc, #100]	; (80018e4 <MadgwickAHRSupdateIMU+0xaa0>)
 800187e:	edd3 7a00 	vldr	s15, [r3]
 8001882:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001886:	ee77 7a67 	vsub.f32	s15, s14, s15
 800188a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800188e:	eeb0 0a67 	vmov.f32	s0, s15
 8001892:	f002 fff1 	bl	8004878 <asinf>
 8001896:	eef0 7a40 	vmov.f32	s15, s0
 800189a:	eef1 7a67 	vneg.f32	s15, s15
 800189e:	4b13      	ldr	r3, [pc, #76]	; (80018ec <MadgwickAHRSupdateIMU+0xaa8>)
 80018a0:	edc3 7a00 	vstr	s15, [r3]
	mpu6050_Yaw   = atan2f(2.0f * (q0*q1 + q2*q3), q0*q0 - q1*q1 - q2*q2 + q3*q3);
 80018a4:	4b0d      	ldr	r3, [pc, #52]	; (80018dc <MadgwickAHRSupdateIMU+0xa98>)
 80018a6:	ed93 7a00 	vldr	s14, [r3]
 80018aa:	4b0d      	ldr	r3, [pc, #52]	; (80018e0 <MadgwickAHRSupdateIMU+0xa9c>)
 80018ac:	edd3 7a00 	vldr	s15, [r3]
 80018b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018b4:	4b0b      	ldr	r3, [pc, #44]	; (80018e4 <MadgwickAHRSupdateIMU+0xaa0>)
 80018b6:	edd3 6a00 	vldr	s13, [r3]
 80018ba:	4b05      	ldr	r3, [pc, #20]	; (80018d0 <MadgwickAHRSupdateIMU+0xa8c>)
 80018bc:	edd3 7a00 	vldr	s15, [r3]
 80018c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018c8:	ee37 6aa7 	vadd.f32	s12, s15, s15
 80018cc:	e010      	b.n	80018f0 <MadgwickAHRSupdateIMU+0xaac>
 80018ce:	bf00      	nop
 80018d0:	20000134 	.word	0x20000134
 80018d4:	20000000 	.word	0x20000000
 80018d8:	3b000000 	.word	0x3b000000
 80018dc:	20000004 	.word	0x20000004
 80018e0:	2000012c 	.word	0x2000012c
 80018e4:	20000130 	.word	0x20000130
 80018e8:	2000013c 	.word	0x2000013c
 80018ec:	20000138 	.word	0x20000138
 80018f0:	4b46      	ldr	r3, [pc, #280]	; (8001a0c <MadgwickAHRSupdateIMU+0xbc8>)
 80018f2:	ed93 7a00 	vldr	s14, [r3]
 80018f6:	4b45      	ldr	r3, [pc, #276]	; (8001a0c <MadgwickAHRSupdateIMU+0xbc8>)
 80018f8:	edd3 7a00 	vldr	s15, [r3]
 80018fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001900:	4b43      	ldr	r3, [pc, #268]	; (8001a10 <MadgwickAHRSupdateIMU+0xbcc>)
 8001902:	edd3 6a00 	vldr	s13, [r3]
 8001906:	4b42      	ldr	r3, [pc, #264]	; (8001a10 <MadgwickAHRSupdateIMU+0xbcc>)
 8001908:	edd3 7a00 	vldr	s15, [r3]
 800190c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001910:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001914:	4b3f      	ldr	r3, [pc, #252]	; (8001a14 <MadgwickAHRSupdateIMU+0xbd0>)
 8001916:	edd3 6a00 	vldr	s13, [r3]
 800191a:	4b3e      	ldr	r3, [pc, #248]	; (8001a14 <MadgwickAHRSupdateIMU+0xbd0>)
 800191c:	edd3 7a00 	vldr	s15, [r3]
 8001920:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001924:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001928:	4b3b      	ldr	r3, [pc, #236]	; (8001a18 <MadgwickAHRSupdateIMU+0xbd4>)
 800192a:	edd3 6a00 	vldr	s13, [r3]
 800192e:	4b3a      	ldr	r3, [pc, #232]	; (8001a18 <MadgwickAHRSupdateIMU+0xbd4>)
 8001930:	edd3 7a00 	vldr	s15, [r3]
 8001934:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001938:	ee77 7a27 	vadd.f32	s15, s14, s15
 800193c:	eef0 0a67 	vmov.f32	s1, s15
 8001940:	eeb0 0a46 	vmov.f32	s0, s12
 8001944:	f002 ffc4 	bl	80048d0 <atan2f>
 8001948:	eef0 7a40 	vmov.f32	s15, s0
 800194c:	4b33      	ldr	r3, [pc, #204]	; (8001a1c <MadgwickAHRSupdateIMU+0xbd8>)
 800194e:	edc3 7a00 	vstr	s15, [r3]

	mpu6050_Pitch *= _180_DIV_PI;
 8001952:	4b33      	ldr	r3, [pc, #204]	; (8001a20 <MadgwickAHRSupdateIMU+0xbdc>)
 8001954:	edd3 7a00 	vldr	s15, [r3]
 8001958:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8001a24 <MadgwickAHRSupdateIMU+0xbe0>
 800195c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001960:	4b2f      	ldr	r3, [pc, #188]	; (8001a20 <MadgwickAHRSupdateIMU+0xbdc>)
 8001962:	edc3 7a00 	vstr	s15, [r3]
	mpu6050_Roll  *= _180_DIV_PI;
 8001966:	4b30      	ldr	r3, [pc, #192]	; (8001a28 <MadgwickAHRSupdateIMU+0xbe4>)
 8001968:	edd3 7a00 	vldr	s15, [r3]
 800196c:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8001a24 <MadgwickAHRSupdateIMU+0xbe0>
 8001970:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001974:	4b2c      	ldr	r3, [pc, #176]	; (8001a28 <MadgwickAHRSupdateIMU+0xbe4>)
 8001976:	edc3 7a00 	vstr	s15, [r3]
	mpu6050_Yaw   *= _180_DIV_PI;
 800197a:	4b28      	ldr	r3, [pc, #160]	; (8001a1c <MadgwickAHRSupdateIMU+0xbd8>)
 800197c:	edd3 7a00 	vldr	s15, [r3]
 8001980:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8001a24 <MadgwickAHRSupdateIMU+0xbe0>
 8001984:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001988:	4b24      	ldr	r3, [pc, #144]	; (8001a1c <MadgwickAHRSupdateIMU+0xbd8>)
 800198a:	edc3 7a00 	vstr	s15, [r3]

	if(mpu6050_Yaw>=0)
 800198e:	4b23      	ldr	r3, [pc, #140]	; (8001a1c <MadgwickAHRSupdateIMU+0xbd8>)
 8001990:	edd3 7a00 	vldr	s15, [r3]
 8001994:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001998:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800199c:	db0a      	blt.n	80019b4 <MadgwickAHRSupdateIMU+0xb70>
		mpu6050_Yaw = 360.f - mpu6050_Yaw;
 800199e:	4b1f      	ldr	r3, [pc, #124]	; (8001a1c <MadgwickAHRSupdateIMU+0xbd8>)
 80019a0:	edd3 7a00 	vldr	s15, [r3]
 80019a4:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8001a2c <MadgwickAHRSupdateIMU+0xbe8>
 80019a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019ac:	4b1b      	ldr	r3, [pc, #108]	; (8001a1c <MadgwickAHRSupdateIMU+0xbd8>)
 80019ae:	edc3 7a00 	vstr	s15, [r3]
 80019b2:	e007      	b.n	80019c4 <MadgwickAHRSupdateIMU+0xb80>
	else
		mpu6050_Yaw = -mpu6050_Yaw;
 80019b4:	4b19      	ldr	r3, [pc, #100]	; (8001a1c <MadgwickAHRSupdateIMU+0xbd8>)
 80019b6:	edd3 7a00 	vldr	s15, [r3]
 80019ba:	eef1 7a67 	vneg.f32	s15, s15
 80019be:	4b17      	ldr	r3, [pc, #92]	; (8001a1c <MadgwickAHRSupdateIMU+0xbd8>)
 80019c0:	edc3 7a00 	vstr	s15, [r3]


	if(mpu6050_Pitch>=0)
 80019c4:	4b16      	ldr	r3, [pc, #88]	; (8001a20 <MadgwickAHRSupdateIMU+0xbdc>)
 80019c6:	edd3 7a00 	vldr	s15, [r3]
 80019ca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019d2:	db0a      	blt.n	80019ea <MadgwickAHRSupdateIMU+0xba6>
		mpu6050_Pitch = 180.f - mpu6050_Pitch;
 80019d4:	4b12      	ldr	r3, [pc, #72]	; (8001a20 <MadgwickAHRSupdateIMU+0xbdc>)
 80019d6:	edd3 7a00 	vldr	s15, [r3]
 80019da:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001a30 <MadgwickAHRSupdateIMU+0xbec>
 80019de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019e2:	4b0f      	ldr	r3, [pc, #60]	; (8001a20 <MadgwickAHRSupdateIMU+0xbdc>)
 80019e4:	edc3 7a00 	vstr	s15, [r3]
	else
			mpu6050_Pitch = -(mpu6050_Pitch + 180.f);

}
 80019e8:	e00b      	b.n	8001a02 <MadgwickAHRSupdateIMU+0xbbe>
			mpu6050_Pitch = -(mpu6050_Pitch + 180.f);
 80019ea:	4b0d      	ldr	r3, [pc, #52]	; (8001a20 <MadgwickAHRSupdateIMU+0xbdc>)
 80019ec:	edd3 7a00 	vldr	s15, [r3]
 80019f0:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001a30 <MadgwickAHRSupdateIMU+0xbec>
 80019f4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80019f8:	eef1 7a67 	vneg.f32	s15, s15
 80019fc:	4b08      	ldr	r3, [pc, #32]	; (8001a20 <MadgwickAHRSupdateIMU+0xbdc>)
 80019fe:	edc3 7a00 	vstr	s15, [r3]
}
 8001a02:	bf00      	nop
 8001a04:	3788      	adds	r7, #136	; 0x88
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bdb0      	pop	{r4, r5, r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	20000004 	.word	0x20000004
 8001a10:	2000012c 	.word	0x2000012c
 8001a14:	20000130 	.word	0x20000130
 8001a18:	20000134 	.word	0x20000134
 8001a1c:	20000140 	.word	0x20000140
 8001a20:	2000013c 	.word	0x2000013c
 8001a24:	42652ee1 	.word	0x42652ee1
 8001a28:	20000138 	.word	0x20000138
 8001a2c:	43b40000 	.word	0x43b40000
 8001a30:	43340000 	.word	0x43340000

08001a34 <invSqrt>:
//---------------------------------------------------------------------------------------------------
// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float invSqrt(float x) {
 8001a34:	b480      	push	{r7}
 8001a36:	b087      	sub	sp, #28
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 8001a3e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a42:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001a46:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a4a:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 8001a52:	f107 0310 	add.w	r3, r7, #16
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	105a      	asrs	r2, r3, #1
 8001a5e:	4b12      	ldr	r3, [pc, #72]	; (8001aa8 <invSqrt+0x74>)
 8001a60:	1a9b      	subs	r3, r3, r2
 8001a62:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 8001a64:	f107 030c 	add.w	r3, r7, #12
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8001a6c:	ed97 7a04 	vldr	s14, [r7, #16]
 8001a70:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a74:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a78:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a80:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8001a84:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a88:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a90:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	ee07 3a90 	vmov	s15, r3
}
 8001a9a:	eeb0 0a67 	vmov.f32	s0, s15
 8001a9e:	371c      	adds	r7, #28
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr
 8001aa8:	5f3759df 	.word	0x5f3759df

08001aac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b08c      	sub	sp, #48	; 0x30
 8001ab0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ab2:	f000 fd81 	bl	80025b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ab6:	f000 f84b 	bl	8001b50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001aba:	f000 f8e1 	bl	8001c80 <MX_GPIO_Init>
  MX_I2C2_Init();
 8001abe:	f000 f8b1 	bl	8001c24 <MX_I2C2_Init>
  double angle_y;
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  check = MPU6050_Init(&hi2c2);
 8001ac2:	481f      	ldr	r0, [pc, #124]	; (8001b40 <main+0x94>)
 8001ac4:	f000 f909 	bl	8001cda <MPU6050_Init>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	461a      	mov	r2, r3
 8001acc:	4b1d      	ldr	r3, [pc, #116]	; (8001b44 <main+0x98>)
 8001ace:	701a      	strb	r2, [r3, #0]

    itoa(check, str, 10);
 8001ad0:	4b1c      	ldr	r3, [pc, #112]	; (8001b44 <main+0x98>)
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	220a      	movs	r2, #10
 8001ad6:	491c      	ldr	r1, [pc, #112]	; (8001b48 <main+0x9c>)
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f002 fca7 	bl	800442c <itoa>
    //set_last_read_angle_data(1, 0, 0, 0);
  while (1)
  {//mppu6050
    /* USER CODE END WHILE */
	  MPU6050_Read_All(&hi2c2, &MPU6050);
 8001ade:	491b      	ldr	r1, [pc, #108]	; (8001b4c <main+0xa0>)
 8001ae0:	4817      	ldr	r0, [pc, #92]	; (8001b40 <main+0x94>)
 8001ae2:	f000 f951 	bl	8001d88 <MPU6050_Read_All>
	 //	  angle_x = MPU6050.KalmanAngleX;
	 //	  angle_y = MPU6050.KalmanAngleY;

	 	  //double angle_z = MPU6050.Az;
	 	  double accel_x_raw = MPU6050.Ax;
 8001ae6:	4b19      	ldr	r3, [pc, #100]	; (8001b4c <main+0xa0>)
 8001ae8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001aec:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	 	  double accel_y_raw = MPU6050.Ay;
 8001af0:	4b16      	ldr	r3, [pc, #88]	; (8001b4c <main+0xa0>)
 8001af2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001af6:	e9c7 2308 	strd	r2, r3, [r7, #32]
	 	  double accel_z_raw = MPU6050.Az;
 8001afa:	4b14      	ldr	r3, [pc, #80]	; (8001b4c <main+0xa0>)
 8001afc:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001b00:	e9c7 2306 	strd	r2, r3, [r7, #24]

	 	  double gyro_x_raw = MPU6050.Gx;
 8001b04:	4b11      	ldr	r3, [pc, #68]	; (8001b4c <main+0xa0>)
 8001b06:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001b0a:	e9c7 2304 	strd	r2, r3, [r7, #16]
	 	  double gyro_y_raw = MPU6050.Gy;
 8001b0e:	4b0f      	ldr	r3, [pc, #60]	; (8001b4c <main+0xa0>)
 8001b10:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001b14:	e9c7 2302 	strd	r2, r3, [r7, #8]
	 	  double gyro_z_raw = MPU6050.Gz;
 8001b18:	4b0c      	ldr	r3, [pc, #48]	; (8001b4c <main+0xa0>)
 8001b1a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001b1e:	e9c7 2300 	strd	r2, r3, [r7]
	 	 MadgwickAHRSupdateIMU(gyro_x_raw, gyro_y_raw, gyro_z_raw, accel_x_raw, accel_y_raw, accel_z_raw);
 8001b22:	ed97 5b06 	vldr	d5, [r7, #24]
 8001b26:	ed97 4b08 	vldr	d4, [r7, #32]
 8001b2a:	ed97 3b0a 	vldr	d3, [r7, #40]	; 0x28
 8001b2e:	ed97 2b00 	vldr	d2, [r7]
 8001b32:	ed97 1b02 	vldr	d1, [r7, #8]
 8001b36:	ed97 0b04 	vldr	d0, [r7, #16]
 8001b3a:	f7ff f983 	bl	8000e44 <MadgwickAHRSupdateIMU>
  {//mppu6050
 8001b3e:	e7ce      	b.n	8001ade <main+0x32>
 8001b40:	20000144 	.word	0x20000144
 8001b44:	20000008 	.word	0x20000008
 8001b48:	200001f0 	.word	0x200001f0
 8001b4c:	20000198 	.word	0x20000198

08001b50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b094      	sub	sp, #80	; 0x50
 8001b54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b56:	f107 0320 	add.w	r3, r7, #32
 8001b5a:	2230      	movs	r2, #48	; 0x30
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f002 fc66 	bl	8004430 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b64:	f107 030c 	add.w	r3, r7, #12
 8001b68:	2200      	movs	r2, #0
 8001b6a:	601a      	str	r2, [r3, #0]
 8001b6c:	605a      	str	r2, [r3, #4]
 8001b6e:	609a      	str	r2, [r3, #8]
 8001b70:	60da      	str	r2, [r3, #12]
 8001b72:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b74:	2300      	movs	r3, #0
 8001b76:	60bb      	str	r3, [r7, #8]
 8001b78:	4b28      	ldr	r3, [pc, #160]	; (8001c1c <SystemClock_Config+0xcc>)
 8001b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7c:	4a27      	ldr	r2, [pc, #156]	; (8001c1c <SystemClock_Config+0xcc>)
 8001b7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b82:	6413      	str	r3, [r2, #64]	; 0x40
 8001b84:	4b25      	ldr	r3, [pc, #148]	; (8001c1c <SystemClock_Config+0xcc>)
 8001b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b8c:	60bb      	str	r3, [r7, #8]
 8001b8e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b90:	2300      	movs	r3, #0
 8001b92:	607b      	str	r3, [r7, #4]
 8001b94:	4b22      	ldr	r3, [pc, #136]	; (8001c20 <SystemClock_Config+0xd0>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a21      	ldr	r2, [pc, #132]	; (8001c20 <SystemClock_Config+0xd0>)
 8001b9a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b9e:	6013      	str	r3, [r2, #0]
 8001ba0:	4b1f      	ldr	r3, [pc, #124]	; (8001c20 <SystemClock_Config+0xd0>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ba8:	607b      	str	r3, [r7, #4]
 8001baa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001bac:	2302      	movs	r3, #2
 8001bae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001bb4:	2310      	movs	r3, #16
 8001bb6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bb8:	2302      	movs	r3, #2
 8001bba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001bc0:	2308      	movs	r3, #8
 8001bc2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001bc4:	23a8      	movs	r3, #168	; 0xa8
 8001bc6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001bc8:	2302      	movs	r3, #2
 8001bca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001bcc:	2304      	movs	r3, #4
 8001bce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bd0:	f107 0320 	add.w	r3, r7, #32
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f001 ffa3 	bl	8003b20 <HAL_RCC_OscConfig>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001be0:	f000 f876 	bl	8001cd0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001be4:	230f      	movs	r3, #15
 8001be6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001be8:	2302      	movs	r3, #2
 8001bea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bec:	2300      	movs	r3, #0
 8001bee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001bf0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001bf4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001bf6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bfa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001bfc:	f107 030c 	add.w	r3, r7, #12
 8001c00:	2105      	movs	r1, #5
 8001c02:	4618      	mov	r0, r3
 8001c04:	f002 fa04 	bl	8004010 <HAL_RCC_ClockConfig>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001c0e:	f000 f85f 	bl	8001cd0 <Error_Handler>
  }
}
 8001c12:	bf00      	nop
 8001c14:	3750      	adds	r7, #80	; 0x50
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	40023800 	.word	0x40023800
 8001c20:	40007000 	.word	0x40007000

08001c24 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001c28:	4b12      	ldr	r3, [pc, #72]	; (8001c74 <MX_I2C2_Init+0x50>)
 8001c2a:	4a13      	ldr	r2, [pc, #76]	; (8001c78 <MX_I2C2_Init+0x54>)
 8001c2c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8001c2e:	4b11      	ldr	r3, [pc, #68]	; (8001c74 <MX_I2C2_Init+0x50>)
 8001c30:	4a12      	ldr	r2, [pc, #72]	; (8001c7c <MX_I2C2_Init+0x58>)
 8001c32:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001c34:	4b0f      	ldr	r3, [pc, #60]	; (8001c74 <MX_I2C2_Init+0x50>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001c3a:	4b0e      	ldr	r3, [pc, #56]	; (8001c74 <MX_I2C2_Init+0x50>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c40:	4b0c      	ldr	r3, [pc, #48]	; (8001c74 <MX_I2C2_Init+0x50>)
 8001c42:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c46:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c48:	4b0a      	ldr	r3, [pc, #40]	; (8001c74 <MX_I2C2_Init+0x50>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001c4e:	4b09      	ldr	r3, [pc, #36]	; (8001c74 <MX_I2C2_Init+0x50>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c54:	4b07      	ldr	r3, [pc, #28]	; (8001c74 <MX_I2C2_Init+0x50>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c5a:	4b06      	ldr	r3, [pc, #24]	; (8001c74 <MX_I2C2_Init+0x50>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001c60:	4804      	ldr	r0, [pc, #16]	; (8001c74 <MX_I2C2_Init+0x50>)
 8001c62:	f000 ff9d 	bl	8002ba0 <HAL_I2C_Init>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d001      	beq.n	8001c70 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001c6c:	f000 f830 	bl	8001cd0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001c70:	bf00      	nop
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	20000144 	.word	0x20000144
 8001c78:	40005800 	.word	0x40005800
 8001c7c:	00061a80 	.word	0x00061a80

08001c80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c86:	2300      	movs	r3, #0
 8001c88:	607b      	str	r3, [r7, #4]
 8001c8a:	4b10      	ldr	r3, [pc, #64]	; (8001ccc <MX_GPIO_Init+0x4c>)
 8001c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8e:	4a0f      	ldr	r2, [pc, #60]	; (8001ccc <MX_GPIO_Init+0x4c>)
 8001c90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c94:	6313      	str	r3, [r2, #48]	; 0x30
 8001c96:	4b0d      	ldr	r3, [pc, #52]	; (8001ccc <MX_GPIO_Init+0x4c>)
 8001c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c9e:	607b      	str	r3, [r7, #4]
 8001ca0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	603b      	str	r3, [r7, #0]
 8001ca6:	4b09      	ldr	r3, [pc, #36]	; (8001ccc <MX_GPIO_Init+0x4c>)
 8001ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001caa:	4a08      	ldr	r2, [pc, #32]	; (8001ccc <MX_GPIO_Init+0x4c>)
 8001cac:	f043 0302 	orr.w	r3, r3, #2
 8001cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cb2:	4b06      	ldr	r3, [pc, #24]	; (8001ccc <MX_GPIO_Init+0x4c>)
 8001cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb6:	f003 0302 	and.w	r3, r3, #2
 8001cba:	603b      	str	r3, [r7, #0]
 8001cbc:	683b      	ldr	r3, [r7, #0]

}
 8001cbe:	bf00      	nop
 8001cc0:	370c      	adds	r7, #12
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	40023800 	.word	0x40023800

08001cd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cd4:	b672      	cpsid	i
}
 8001cd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cd8:	e7fe      	b.n	8001cd8 <Error_Handler+0x8>

08001cda <MPU6050_Init>:
        .Q_angle = 0.001f,
        .Q_bias = 0.003f,
        .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx) {
 8001cda:	b580      	push	{r7, lr}
 8001cdc:	b088      	sub	sp, #32
 8001cde:	af04      	add	r7, sp, #16
 8001ce0:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8001ce2:	2364      	movs	r3, #100	; 0x64
 8001ce4:	9302      	str	r3, [sp, #8]
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	9301      	str	r3, [sp, #4]
 8001cea:	f107 030f 	add.w	r3, r7, #15
 8001cee:	9300      	str	r3, [sp, #0]
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	2275      	movs	r2, #117	; 0x75
 8001cf4:	21d0      	movs	r1, #208	; 0xd0
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f001 f990 	bl	800301c <HAL_I2C_Mem_Read>

    if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 8001cfc:	7bfb      	ldrb	r3, [r7, #15]
 8001cfe:	2b68      	cmp	r3, #104	; 0x68
 8001d00:	d13d      	bne.n	8001d7e <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8001d02:	2300      	movs	r3, #0
 8001d04:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8001d06:	2364      	movs	r3, #100	; 0x64
 8001d08:	9302      	str	r3, [sp, #8]
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	9301      	str	r3, [sp, #4]
 8001d0e:	f107 030e 	add.w	r3, r7, #14
 8001d12:	9300      	str	r3, [sp, #0]
 8001d14:	2301      	movs	r3, #1
 8001d16:	226b      	movs	r2, #107	; 0x6b
 8001d18:	21d0      	movs	r1, #208	; 0xd0
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f001 f884 	bl	8002e28 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8001d20:	2307      	movs	r3, #7
 8001d22:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8001d24:	2364      	movs	r3, #100	; 0x64
 8001d26:	9302      	str	r3, [sp, #8]
 8001d28:	2301      	movs	r3, #1
 8001d2a:	9301      	str	r3, [sp, #4]
 8001d2c:	f107 030e 	add.w	r3, r7, #14
 8001d30:	9300      	str	r3, [sp, #0]
 8001d32:	2301      	movs	r3, #1
 8001d34:	2219      	movs	r2, #25
 8001d36:	21d0      	movs	r1, #208	; 0xd0
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f001 f875 	bl	8002e28 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001d42:	2364      	movs	r3, #100	; 0x64
 8001d44:	9302      	str	r3, [sp, #8]
 8001d46:	2301      	movs	r3, #1
 8001d48:	9301      	str	r3, [sp, #4]
 8001d4a:	f107 030e 	add.w	r3, r7, #14
 8001d4e:	9300      	str	r3, [sp, #0]
 8001d50:	2301      	movs	r3, #1
 8001d52:	221c      	movs	r2, #28
 8001d54:	21d0      	movs	r1, #208	; 0xd0
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f001 f866 	bl	8002e28 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001d60:	2364      	movs	r3, #100	; 0x64
 8001d62:	9302      	str	r3, [sp, #8]
 8001d64:	2301      	movs	r3, #1
 8001d66:	9301      	str	r3, [sp, #4]
 8001d68:	f107 030e 	add.w	r3, r7, #14
 8001d6c:	9300      	str	r3, [sp, #0]
 8001d6e:	2301      	movs	r3, #1
 8001d70:	221b      	movs	r2, #27
 8001d72:	21d0      	movs	r1, #208	; 0xd0
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f001 f857 	bl	8002e28 <HAL_I2C_Mem_Write>
        return check;
 8001d7a:	7bfb      	ldrb	r3, [r7, #15]
 8001d7c:	e000      	b.n	8001d80 <MPU6050_Init+0xa6>
    }
    return check;
 8001d7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3710      	adds	r7, #16
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <MPU6050_Read_All>:

    temp = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 8001d88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d8c:	b094      	sub	sp, #80	; 0x50
 8001d8e:	af04      	add	r7, sp, #16
 8001d90:	6078      	str	r0, [r7, #4]
 8001d92:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8001d94:	2364      	movs	r3, #100	; 0x64
 8001d96:	9302      	str	r3, [sp, #8]
 8001d98:	230e      	movs	r3, #14
 8001d9a:	9301      	str	r3, [sp, #4]
 8001d9c:	f107 0308 	add.w	r3, r7, #8
 8001da0:	9300      	str	r3, [sp, #0]
 8001da2:	2301      	movs	r3, #1
 8001da4:	223b      	movs	r2, #59	; 0x3b
 8001da6:	21d0      	movs	r1, #208	; 0xd0
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	f001 f937 	bl	800301c <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 8001dae:	7a3b      	ldrb	r3, [r7, #8]
 8001db0:	021b      	lsls	r3, r3, #8
 8001db2:	b21a      	sxth	r2, r3
 8001db4:	7a7b      	ldrb	r3, [r7, #9]
 8001db6:	b21b      	sxth	r3, r3
 8001db8:	4313      	orrs	r3, r2
 8001dba:	b21a      	sxth	r2, r3
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 8001dc0:	7abb      	ldrb	r3, [r7, #10]
 8001dc2:	021b      	lsls	r3, r3, #8
 8001dc4:	b21a      	sxth	r2, r3
 8001dc6:	7afb      	ldrb	r3, [r7, #11]
 8001dc8:	b21b      	sxth	r3, r3
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	b21a      	sxth	r2, r3
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 8001dd2:	7b3b      	ldrb	r3, [r7, #12]
 8001dd4:	021b      	lsls	r3, r3, #8
 8001dd6:	b21a      	sxth	r2, r3
 8001dd8:	7b7b      	ldrb	r3, [r7, #13]
 8001dda:	b21b      	sxth	r3, r3
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	b21a      	sxth	r2, r3
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	809a      	strh	r2, [r3, #4]
    temp = (int16_t) (Rec_Data[6] << 8 | Rec_Data[7]);
 8001de4:	7bbb      	ldrb	r3, [r7, #14]
 8001de6:	021b      	lsls	r3, r3, #8
 8001de8:	b21a      	sxth	r2, r3
 8001dea:	7bfb      	ldrb	r3, [r7, #15]
 8001dec:	b21b      	sxth	r3, r3
 8001dee:	4313      	orrs	r3, r2
 8001df0:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t) (Rec_Data[8] << 8 | Rec_Data[9]);
 8001df2:	7c3b      	ldrb	r3, [r7, #16]
 8001df4:	021b      	lsls	r3, r3, #8
 8001df6:	b21a      	sxth	r2, r3
 8001df8:	7c7b      	ldrb	r3, [r7, #17]
 8001dfa:	b21b      	sxth	r3, r3
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	b21a      	sxth	r2, r3
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t) (Rec_Data[10] << 8 | Rec_Data[11]);
 8001e04:	7cbb      	ldrb	r3, [r7, #18]
 8001e06:	021b      	lsls	r3, r3, #8
 8001e08:	b21a      	sxth	r2, r3
 8001e0a:	7cfb      	ldrb	r3, [r7, #19]
 8001e0c:	b21b      	sxth	r3, r3
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	b21a      	sxth	r2, r3
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t) (Rec_Data[12] << 8 | Rec_Data[13]);
 8001e16:	7d3b      	ldrb	r3, [r7, #20]
 8001e18:	021b      	lsls	r3, r3, #8
 8001e1a:	b21a      	sxth	r2, r3
 8001e1c:	7d7b      	ldrb	r3, [r7, #21]
 8001e1e:	b21b      	sxth	r3, r3
 8001e20:	4313      	orrs	r3, r2
 8001e22:	b21a      	sxth	r2, r3
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7fe fb1c 	bl	800046c <__aeabi_i2d>
 8001e34:	f04f 0200 	mov.w	r2, #0
 8001e38:	4bbd      	ldr	r3, [pc, #756]	; (8002130 <MPU6050_Read_All+0x3a8>)
 8001e3a:	f7fe fcab 	bl	8000794 <__aeabi_ddiv>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	460b      	mov	r3, r1
 8001e42:	6839      	ldr	r1, [r7, #0]
 8001e44:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f7fe fb0c 	bl	800046c <__aeabi_i2d>
 8001e54:	f04f 0200 	mov.w	r2, #0
 8001e58:	4bb5      	ldr	r3, [pc, #724]	; (8002130 <MPU6050_Read_All+0x3a8>)
 8001e5a:	f7fe fc9b 	bl	8000794 <__aeabi_ddiv>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	460b      	mov	r3, r1
 8001e62:	6839      	ldr	r1, [r7, #0]
 8001e64:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f7fe fafc 	bl	800046c <__aeabi_i2d>
 8001e74:	a3a8      	add	r3, pc, #672	; (adr r3, 8002118 <MPU6050_Read_All+0x390>)
 8001e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e7a:	f7fe fc8b 	bl	8000794 <__aeabi_ddiv>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	460b      	mov	r3, r1
 8001e82:	6839      	ldr	r1, [r7, #0]
 8001e84:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
 8001e88:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8001e8c:	ee07 3a90 	vmov	s15, r3
 8001e90:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e94:	eddf 6aa7 	vldr	s13, [pc, #668]	; 8002134 <MPU6050_Read_All+0x3ac>
 8001e98:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e9c:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8002138 <MPU6050_Read_All+0x3b0>
 8001ea0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7fe fadb 	bl	800046c <__aeabi_i2d>
 8001eb6:	a39a      	add	r3, pc, #616	; (adr r3, 8002120 <MPU6050_Read_All+0x398>)
 8001eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ebc:	f7fe fc6a 	bl	8000794 <__aeabi_ddiv>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	460b      	mov	r3, r1
 8001ec4:	6839      	ldr	r1, [r7, #0]
 8001ec6:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7fe facb 	bl	800046c <__aeabi_i2d>
 8001ed6:	a392      	add	r3, pc, #584	; (adr r3, 8002120 <MPU6050_Read_All+0x398>)
 8001ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001edc:	f7fe fc5a 	bl	8000794 <__aeabi_ddiv>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	460b      	mov	r3, r1
 8001ee4:	6839      	ldr	r1, [r7, #0]
 8001ee6:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7fe fabb 	bl	800046c <__aeabi_i2d>
 8001ef6:	a38a      	add	r3, pc, #552	; (adr r3, 8002120 <MPU6050_Read_All+0x398>)
 8001ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001efc:	f7fe fc4a 	bl	8000794 <__aeabi_ddiv>
 8001f00:	4602      	mov	r2, r0
 8001f02:	460b      	mov	r3, r1
 8001f04:	6839      	ldr	r1, [r7, #0]
 8001f06:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double) (HAL_GetTick() - timer) / 1000;
 8001f0a:	f000 fbbb 	bl	8002684 <HAL_GetTick>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	4b8a      	ldr	r3, [pc, #552]	; (800213c <MPU6050_Read_All+0x3b4>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7fe fa98 	bl	800044c <__aeabi_ui2d>
 8001f1c:	f04f 0200 	mov.w	r2, #0
 8001f20:	4b87      	ldr	r3, [pc, #540]	; (8002140 <MPU6050_Read_All+0x3b8>)
 8001f22:	f7fe fc37 	bl	8000794 <__aeabi_ddiv>
 8001f26:	4602      	mov	r2, r0
 8001f28:	460b      	mov	r3, r1
 8001f2a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 8001f2e:	f000 fba9 	bl	8002684 <HAL_GetTick>
 8001f32:	4603      	mov	r3, r0
 8001f34:	4a81      	ldr	r2, [pc, #516]	; (800213c <MPU6050_Read_All+0x3b4>)
 8001f36:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
            DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f3e:	461a      	mov	r2, r3
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f46:	fb03 f202 	mul.w	r2, r3, r2
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001f50:	4619      	mov	r1, r3
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001f58:	fb01 f303 	mul.w	r3, r1, r3
 8001f5c:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7fe fa84 	bl	800046c <__aeabi_i2d>
 8001f64:	4602      	mov	r2, r0
 8001f66:	460b      	mov	r3, r1
 8001f68:	ec43 2b10 	vmov	d0, r2, r3
 8001f6c:	f002 fc57 	bl	800481e <sqrt>
 8001f70:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0) {
 8001f74:	f04f 0200 	mov.w	r2, #0
 8001f78:	f04f 0300 	mov.w	r3, #0
 8001f7c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001f80:	f7fe fd46 	bl	8000a10 <__aeabi_dcmpeq>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d11f      	bne.n	8001fca <MPU6050_Read_All+0x242>
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001f90:	4618      	mov	r0, r3
 8001f92:	f7fe fa6b 	bl	800046c <__aeabi_i2d>
 8001f96:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001f9a:	f7fe fbfb 	bl	8000794 <__aeabi_ddiv>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	460b      	mov	r3, r1
 8001fa2:	ec43 2b17 	vmov	d7, r2, r3
 8001fa6:	eeb0 0a47 	vmov.f32	s0, s14
 8001faa:	eef0 0a67 	vmov.f32	s1, s15
 8001fae:	f002 fa8b 	bl	80044c8 <atan>
 8001fb2:	ec51 0b10 	vmov	r0, r1, d0
 8001fb6:	a35c      	add	r3, pc, #368	; (adr r3, 8002128 <MPU6050_Read_All+0x3a0>)
 8001fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fbc:	f7fe fac0 	bl	8000540 <__aeabi_dmul>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	460b      	mov	r3, r1
 8001fc4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8001fc8:	e005      	b.n	8001fd6 <MPU6050_Read_All+0x24e>
    } else {
        roll = 0.0;
 8001fca:	f04f 0200 	mov.w	r2, #0
 8001fce:	f04f 0300 	mov.w	r3, #0
 8001fd2:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fdc:	425b      	negs	r3, r3
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f7fe fa44 	bl	800046c <__aeabi_i2d>
 8001fe4:	4682      	mov	sl, r0
 8001fe6:	468b      	mov	fp, r1
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7fe fa3c 	bl	800046c <__aeabi_i2d>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	460b      	mov	r3, r1
 8001ff8:	ec43 2b11 	vmov	d1, r2, r3
 8001ffc:	ec4b ab10 	vmov	d0, sl, fp
 8002000:	f002 fc0b 	bl	800481a <atan2>
 8002004:	ec51 0b10 	vmov	r0, r1, d0
 8002008:	a347      	add	r3, pc, #284	; (adr r3, 8002128 <MPU6050_Read_All+0x3a0>)
 800200a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800200e:	f7fe fa97 	bl	8000540 <__aeabi_dmul>
 8002012:	4602      	mov	r2, r0
 8002014:	460b      	mov	r3, r1
 8002016:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90)) {
 800201a:	f04f 0200 	mov.w	r2, #0
 800201e:	4b49      	ldr	r3, [pc, #292]	; (8002144 <MPU6050_Read_All+0x3bc>)
 8002020:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002024:	f7fe fcfe 	bl	8000a24 <__aeabi_dcmplt>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d00a      	beq.n	8002044 <MPU6050_Read_All+0x2bc>
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002034:	f04f 0200 	mov.w	r2, #0
 8002038:	4b43      	ldr	r3, [pc, #268]	; (8002148 <MPU6050_Read_All+0x3c0>)
 800203a:	f7fe fd11 	bl	8000a60 <__aeabi_dcmpgt>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d114      	bne.n	800206e <MPU6050_Read_All+0x2e6>
 8002044:	f04f 0200 	mov.w	r2, #0
 8002048:	4b3f      	ldr	r3, [pc, #252]	; (8002148 <MPU6050_Read_All+0x3c0>)
 800204a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800204e:	f7fe fd07 	bl	8000a60 <__aeabi_dcmpgt>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d015      	beq.n	8002084 <MPU6050_Read_All+0x2fc>
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800205e:	f04f 0200 	mov.w	r2, #0
 8002062:	4b38      	ldr	r3, [pc, #224]	; (8002144 <MPU6050_Read_All+0x3bc>)
 8002064:	f7fe fcde 	bl	8000a24 <__aeabi_dcmplt>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d00a      	beq.n	8002084 <MPU6050_Read_All+0x2fc>
        KalmanY.angle = pitch;
 800206e:	4937      	ldr	r1, [pc, #220]	; (800214c <MPU6050_Read_All+0x3c4>)
 8002070:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002074:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8002078:	6839      	ldr	r1, [r7, #0]
 800207a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800207e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8002082:	e014      	b.n	80020ae <MPU6050_Read_All+0x326>
    } else {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 800208a:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 800208e:	eeb0 1a47 	vmov.f32	s2, s14
 8002092:	eef0 1a67 	vmov.f32	s3, s15
 8002096:	ed97 0b06 	vldr	d0, [r7, #24]
 800209a:	482c      	ldr	r0, [pc, #176]	; (800214c <MPU6050_Read_All+0x3c4>)
 800209c:	f000 f85a 	bl	8002154 <Kalman_getAngle>
 80020a0:	eeb0 7a40 	vmov.f32	s14, s0
 80020a4:	eef0 7a60 	vmov.f32	s15, s1
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80020b4:	4690      	mov	r8, r2
 80020b6:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 80020ba:	f04f 0200 	mov.w	r2, #0
 80020be:	4b22      	ldr	r3, [pc, #136]	; (8002148 <MPU6050_Read_All+0x3c0>)
 80020c0:	4640      	mov	r0, r8
 80020c2:	4649      	mov	r1, r9
 80020c4:	f7fe fccc 	bl	8000a60 <__aeabi_dcmpgt>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d008      	beq.n	80020e0 <MPU6050_Read_All+0x358>
        DataStruct->Gx = -DataStruct->Gx;
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80020d4:	4614      	mov	r4, r2
 80020d6:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gy, dt);
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80020e6:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 80020ea:	eeb0 1a47 	vmov.f32	s2, s14
 80020ee:	eef0 1a67 	vmov.f32	s3, s15
 80020f2:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 80020f6:	4816      	ldr	r0, [pc, #88]	; (8002150 <MPU6050_Read_All+0x3c8>)
 80020f8:	f000 f82c 	bl	8002154 <Kalman_getAngle>
 80020fc:	eeb0 7a40 	vmov.f32	s14, s0
 8002100:	eef0 7a60 	vmov.f32	s15, s1
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48

}
 800210a:	bf00      	nop
 800210c:	3740      	adds	r7, #64	; 0x40
 800210e:	46bd      	mov	sp, r7
 8002110:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002114:	f3af 8000 	nop.w
 8002118:	00000000 	.word	0x00000000
 800211c:	40cc2900 	.word	0x40cc2900
 8002120:	00000000 	.word	0x00000000
 8002124:	40606000 	.word	0x40606000
 8002128:	1a63c1f8 	.word	0x1a63c1f8
 800212c:	404ca5dc 	.word	0x404ca5dc
 8002130:	40d00000 	.word	0x40d00000
 8002134:	43aa0000 	.word	0x43aa0000
 8002138:	42121eb8 	.word	0x42121eb8
 800213c:	20000200 	.word	0x20000200
 8002140:	408f4000 	.word	0x408f4000
 8002144:	c0568000 	.word	0xc0568000
 8002148:	40568000 	.word	0x40568000
 800214c:	20000058 	.word	0x20000058
 8002150:	20000010 	.word	0x20000010

08002154 <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt) {
 8002154:	b5b0      	push	{r4, r5, r7, lr}
 8002156:	b096      	sub	sp, #88	; 0x58
 8002158:	af00      	add	r7, sp, #0
 800215a:	61f8      	str	r0, [r7, #28]
 800215c:	ed87 0b04 	vstr	d0, [r7, #16]
 8002160:	ed87 1b02 	vstr	d1, [r7, #8]
 8002164:	ed87 2b00 	vstr	d2, [r7]
//step 1: State Prediction (Predict where we are)
	double rate = newRate - Kalman->bias; //newRate is the latest gyro measurement
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800216e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002172:	f7fe f82d 	bl	80001d0 <__aeabi_dsub>
 8002176:	4602      	mov	r2, r0
 8002178:	460b      	mov	r3, r1
 800217a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    Kalman->angle += dt * rate;
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002184:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002188:	e9d7 0100 	ldrd	r0, r1, [r7]
 800218c:	f7fe f9d8 	bl	8000540 <__aeabi_dmul>
 8002190:	4602      	mov	r2, r0
 8002192:	460b      	mov	r3, r1
 8002194:	4620      	mov	r0, r4
 8002196:	4629      	mov	r1, r5
 8002198:	f7fe f81c 	bl	80001d4 <__adddf3>
 800219c:	4602      	mov	r2, r0
 800219e:	460b      	mov	r3, r1
 80021a0:	69f9      	ldr	r1, [r7, #28]
 80021a2:	e9c1 2306 	strd	r2, r3, [r1, #24]

//Step 2: Covariance _Prediction (Predict how much error)
    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80021b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80021b6:	f7fe f9c3 	bl	8000540 <__aeabi_dmul>
 80021ba:	4602      	mov	r2, r0
 80021bc:	460b      	mov	r3, r1
 80021be:	4610      	mov	r0, r2
 80021c0:	4619      	mov	r1, r3
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80021c8:	f7fe f802 	bl	80001d0 <__aeabi_dsub>
 80021cc:	4602      	mov	r2, r0
 80021ce:	460b      	mov	r3, r1
 80021d0:	4610      	mov	r0, r2
 80021d2:	4619      	mov	r1, r3
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80021da:	f7fd fff9 	bl	80001d0 <__aeabi_dsub>
 80021de:	4602      	mov	r2, r0
 80021e0:	460b      	mov	r3, r1
 80021e2:	4610      	mov	r0, r2
 80021e4:	4619      	mov	r1, r3
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021ec:	f7fd fff2 	bl	80001d4 <__adddf3>
 80021f0:	4602      	mov	r2, r0
 80021f2:	460b      	mov	r3, r1
 80021f4:	4610      	mov	r0, r2
 80021f6:	4619      	mov	r1, r3
 80021f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80021fc:	f7fe f9a0 	bl	8000540 <__aeabi_dmul>
 8002200:	4602      	mov	r2, r0
 8002202:	460b      	mov	r3, r1
 8002204:	4620      	mov	r0, r4
 8002206:	4629      	mov	r1, r5
 8002208:	f7fd ffe4 	bl	80001d4 <__adddf3>
 800220c:	4602      	mov	r2, r0
 800220e:	460b      	mov	r3, r1
 8002210:	69f9      	ldr	r1, [r7, #28]
 8002212:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8002222:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002226:	f7fe f98b 	bl	8000540 <__aeabi_dmul>
 800222a:	4602      	mov	r2, r0
 800222c:	460b      	mov	r3, r1
 800222e:	4620      	mov	r0, r4
 8002230:	4629      	mov	r1, r5
 8002232:	f7fd ffcd 	bl	80001d0 <__aeabi_dsub>
 8002236:	4602      	mov	r2, r0
 8002238:	460b      	mov	r3, r1
 800223a:	69f9      	ldr	r1, [r7, #28]
 800223c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800224c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002250:	f7fe f976 	bl	8000540 <__aeabi_dmul>
 8002254:	4602      	mov	r2, r0
 8002256:	460b      	mov	r3, r1
 8002258:	4620      	mov	r0, r4
 800225a:	4629      	mov	r1, r5
 800225c:	f7fd ffb8 	bl	80001d0 <__aeabi_dsub>
 8002260:	4602      	mov	r2, r0
 8002262:	460b      	mov	r3, r1
 8002264:	69f9      	ldr	r1, [r7, #28]
 8002266:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002276:	e9d7 2300 	ldrd	r2, r3, [r7]
 800227a:	f7fe f961 	bl	8000540 <__aeabi_dmul>
 800227e:	4602      	mov	r2, r0
 8002280:	460b      	mov	r3, r1
 8002282:	4620      	mov	r0, r4
 8002284:	4629      	mov	r1, r5
 8002286:	f7fd ffa5 	bl	80001d4 <__adddf3>
 800228a:	4602      	mov	r2, r0
 800228c:	460b      	mov	r3, r1
 800228e:	69f9      	ldr	r1, [r7, #28]
 8002290:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

//Step 3: Innovation (Compare reality with prediction)
    double y = newAngle - Kalman->angle; // Angle difference
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800229a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800229e:	f7fd ff97 	bl	80001d0 <__aeabi_dsub>
 80022a2:	4602      	mov	r2, r0
 80022a4:	460b      	mov	r3, r1
 80022a6:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
//Step 4: Innovation covariance (Compare real error against prediction)
    double S = Kalman->P[0][0] + Kalman->R_measure; // Estimate error
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80022b6:	f7fd ff8d 	bl	80001d4 <__adddf3>
 80022ba:	4602      	mov	r2, r0
 80022bc:	460b      	mov	r3, r1
 80022be:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

//Step 5: Kalman gain (Moderate prediction)
    double K[2]; // Kalman gain - This is a 2x1 vector
    K[0] = Kalman->P[0][0] / S;
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80022c8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80022cc:	f7fe fa62 	bl	8000794 <__aeabi_ddiv>
 80022d0:	4602      	mov	r2, r0
 80022d2:	460b      	mov	r3, r1
 80022d4:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80022de:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80022e2:	f7fe fa57 	bl	8000794 <__aeabi_ddiv>
 80022e6:	4602      	mov	r2, r0
 80022e8:	460b      	mov	r3, r1
 80022ea:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

//Step 6: Update angle (Update state)
    Kalman->angle += K[0] * y;
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80022f4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80022f8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80022fc:	f7fe f920 	bl	8000540 <__aeabi_dmul>
 8002300:	4602      	mov	r2, r0
 8002302:	460b      	mov	r3, r1
 8002304:	4620      	mov	r0, r4
 8002306:	4629      	mov	r1, r5
 8002308:	f7fd ff64 	bl	80001d4 <__adddf3>
 800230c:	4602      	mov	r2, r0
 800230e:	460b      	mov	r3, r1
 8002310:	69f9      	ldr	r1, [r7, #28]
 8002312:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 800231c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002320:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002324:	f7fe f90c 	bl	8000540 <__aeabi_dmul>
 8002328:	4602      	mov	r2, r0
 800232a:	460b      	mov	r3, r1
 800232c:	4620      	mov	r0, r4
 800232e:	4629      	mov	r1, r5
 8002330:	f7fd ff50 	bl	80001d4 <__adddf3>
 8002334:	4602      	mov	r2, r0
 8002336:	460b      	mov	r3, r1
 8002338:	69f9      	ldr	r1, [r7, #28]
 800233a:	e9c1 2308 	strd	r2, r3, [r1, #32]

//Step 7: Calculate estimation error covariance (Update the error covariance)
    double P00_temp = Kalman->P[0][0];
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002344:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double P01_temp = Kalman->P[0][1];
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800234e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8002358:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800235c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002360:	f7fe f8ee 	bl	8000540 <__aeabi_dmul>
 8002364:	4602      	mov	r2, r0
 8002366:	460b      	mov	r3, r1
 8002368:	4620      	mov	r0, r4
 800236a:	4629      	mov	r1, r5
 800236c:	f7fd ff30 	bl	80001d0 <__aeabi_dsub>
 8002370:	4602      	mov	r2, r0
 8002372:	460b      	mov	r3, r1
 8002374:	69f9      	ldr	r1, [r7, #28]
 8002376:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8002380:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002384:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002388:	f7fe f8da 	bl	8000540 <__aeabi_dmul>
 800238c:	4602      	mov	r2, r0
 800238e:	460b      	mov	r3, r1
 8002390:	4620      	mov	r0, r4
 8002392:	4629      	mov	r1, r5
 8002394:	f7fd ff1c 	bl	80001d0 <__aeabi_dsub>
 8002398:	4602      	mov	r2, r0
 800239a:	460b      	mov	r3, r1
 800239c:	69f9      	ldr	r1, [r7, #28]
 800239e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 80023a8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80023ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80023b0:	f7fe f8c6 	bl	8000540 <__aeabi_dmul>
 80023b4:	4602      	mov	r2, r0
 80023b6:	460b      	mov	r3, r1
 80023b8:	4620      	mov	r0, r4
 80023ba:	4629      	mov	r1, r5
 80023bc:	f7fd ff08 	bl	80001d0 <__aeabi_dsub>
 80023c0:	4602      	mov	r2, r0
 80023c2:	460b      	mov	r3, r1
 80023c4:	69f9      	ldr	r1, [r7, #28]
 80023c6:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 80023d0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80023d4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80023d8:	f7fe f8b2 	bl	8000540 <__aeabi_dmul>
 80023dc:	4602      	mov	r2, r0
 80023de:	460b      	mov	r3, r1
 80023e0:	4620      	mov	r0, r4
 80023e2:	4629      	mov	r1, r5
 80023e4:	f7fd fef4 	bl	80001d0 <__aeabi_dsub>
 80023e8:	4602      	mov	r2, r0
 80023ea:	460b      	mov	r3, r1
 80023ec:	69f9      	ldr	r1, [r7, #28]
 80023ee:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80023f8:	ec43 2b17 	vmov	d7, r2, r3
};
 80023fc:	eeb0 0a47 	vmov.f32	s0, s14
 8002400:	eef0 0a67 	vmov.f32	s1, s15
 8002404:	3758      	adds	r7, #88	; 0x58
 8002406:	46bd      	mov	sp, r7
 8002408:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800240c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002412:	2300      	movs	r3, #0
 8002414:	607b      	str	r3, [r7, #4]
 8002416:	4b10      	ldr	r3, [pc, #64]	; (8002458 <HAL_MspInit+0x4c>)
 8002418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800241a:	4a0f      	ldr	r2, [pc, #60]	; (8002458 <HAL_MspInit+0x4c>)
 800241c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002420:	6453      	str	r3, [r2, #68]	; 0x44
 8002422:	4b0d      	ldr	r3, [pc, #52]	; (8002458 <HAL_MspInit+0x4c>)
 8002424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002426:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800242a:	607b      	str	r3, [r7, #4]
 800242c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800242e:	2300      	movs	r3, #0
 8002430:	603b      	str	r3, [r7, #0]
 8002432:	4b09      	ldr	r3, [pc, #36]	; (8002458 <HAL_MspInit+0x4c>)
 8002434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002436:	4a08      	ldr	r2, [pc, #32]	; (8002458 <HAL_MspInit+0x4c>)
 8002438:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800243c:	6413      	str	r3, [r2, #64]	; 0x40
 800243e:	4b06      	ldr	r3, [pc, #24]	; (8002458 <HAL_MspInit+0x4c>)
 8002440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002442:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002446:	603b      	str	r3, [r7, #0]
 8002448:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800244a:	bf00      	nop
 800244c:	370c      	adds	r7, #12
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop
 8002458:	40023800 	.word	0x40023800

0800245c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b08a      	sub	sp, #40	; 0x28
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002464:	f107 0314 	add.w	r3, r7, #20
 8002468:	2200      	movs	r2, #0
 800246a:	601a      	str	r2, [r3, #0]
 800246c:	605a      	str	r2, [r3, #4]
 800246e:	609a      	str	r2, [r3, #8]
 8002470:	60da      	str	r2, [r3, #12]
 8002472:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a19      	ldr	r2, [pc, #100]	; (80024e0 <HAL_I2C_MspInit+0x84>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d12c      	bne.n	80024d8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800247e:	2300      	movs	r3, #0
 8002480:	613b      	str	r3, [r7, #16]
 8002482:	4b18      	ldr	r3, [pc, #96]	; (80024e4 <HAL_I2C_MspInit+0x88>)
 8002484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002486:	4a17      	ldr	r2, [pc, #92]	; (80024e4 <HAL_I2C_MspInit+0x88>)
 8002488:	f043 0302 	orr.w	r3, r3, #2
 800248c:	6313      	str	r3, [r2, #48]	; 0x30
 800248e:	4b15      	ldr	r3, [pc, #84]	; (80024e4 <HAL_I2C_MspInit+0x88>)
 8002490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002492:	f003 0302 	and.w	r3, r3, #2
 8002496:	613b      	str	r3, [r7, #16]
 8002498:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800249a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800249e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024a0:	2312      	movs	r3, #18
 80024a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a4:	2300      	movs	r3, #0
 80024a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024a8:	2303      	movs	r3, #3
 80024aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80024ac:	2304      	movs	r3, #4
 80024ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024b0:	f107 0314 	add.w	r3, r7, #20
 80024b4:	4619      	mov	r1, r3
 80024b6:	480c      	ldr	r0, [pc, #48]	; (80024e8 <HAL_I2C_MspInit+0x8c>)
 80024b8:	f000 f9d6 	bl	8002868 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80024bc:	2300      	movs	r3, #0
 80024be:	60fb      	str	r3, [r7, #12]
 80024c0:	4b08      	ldr	r3, [pc, #32]	; (80024e4 <HAL_I2C_MspInit+0x88>)
 80024c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c4:	4a07      	ldr	r2, [pc, #28]	; (80024e4 <HAL_I2C_MspInit+0x88>)
 80024c6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80024ca:	6413      	str	r3, [r2, #64]	; 0x40
 80024cc:	4b05      	ldr	r3, [pc, #20]	; (80024e4 <HAL_I2C_MspInit+0x88>)
 80024ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024d4:	60fb      	str	r3, [r7, #12]
 80024d6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80024d8:	bf00      	nop
 80024da:	3728      	adds	r7, #40	; 0x28
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	40005800 	.word	0x40005800
 80024e4:	40023800 	.word	0x40023800
 80024e8:	40020400 	.word	0x40020400

080024ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80024f0:	e7fe      	b.n	80024f0 <NMI_Handler+0x4>

080024f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024f2:	b480      	push	{r7}
 80024f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024f6:	e7fe      	b.n	80024f6 <HardFault_Handler+0x4>

080024f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024fc:	e7fe      	b.n	80024fc <MemManage_Handler+0x4>

080024fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024fe:	b480      	push	{r7}
 8002500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002502:	e7fe      	b.n	8002502 <BusFault_Handler+0x4>

08002504 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002504:	b480      	push	{r7}
 8002506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002508:	e7fe      	b.n	8002508 <UsageFault_Handler+0x4>

0800250a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800250a:	b480      	push	{r7}
 800250c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800250e:	bf00      	nop
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr

08002518 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002518:	b480      	push	{r7}
 800251a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800251c:	bf00      	nop
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr

08002526 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002526:	b480      	push	{r7}
 8002528:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800252a:	bf00      	nop
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr

08002534 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002538:	f000 f890 	bl	800265c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800253c:	bf00      	nop
 800253e:	bd80      	pop	{r7, pc}

08002540 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002540:	b480      	push	{r7}
 8002542:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002544:	4b06      	ldr	r3, [pc, #24]	; (8002560 <SystemInit+0x20>)
 8002546:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800254a:	4a05      	ldr	r2, [pc, #20]	; (8002560 <SystemInit+0x20>)
 800254c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002550:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002554:	bf00      	nop
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr
 800255e:	bf00      	nop
 8002560:	e000ed00 	.word	0xe000ed00

08002564 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002564:	f8df d034 	ldr.w	sp, [pc, #52]	; 800259c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002568:	480d      	ldr	r0, [pc, #52]	; (80025a0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800256a:	490e      	ldr	r1, [pc, #56]	; (80025a4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800256c:	4a0e      	ldr	r2, [pc, #56]	; (80025a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800256e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002570:	e002      	b.n	8002578 <LoopCopyDataInit>

08002572 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002572:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002574:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002576:	3304      	adds	r3, #4

08002578 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002578:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800257a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800257c:	d3f9      	bcc.n	8002572 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800257e:	4a0b      	ldr	r2, [pc, #44]	; (80025ac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002580:	4c0b      	ldr	r4, [pc, #44]	; (80025b0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002582:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002584:	e001      	b.n	800258a <LoopFillZerobss>

08002586 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002586:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002588:	3204      	adds	r2, #4

0800258a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800258a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800258c:	d3fb      	bcc.n	8002586 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800258e:	f7ff ffd7 	bl	8002540 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002592:	f001 ff0f 	bl	80043b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002596:	f7ff fa89 	bl	8001aac <main>
  bx  lr    
 800259a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800259c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80025a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025a4:	20000110 	.word	0x20000110
  ldr r2, =_sidata
 80025a8:	080051b8 	.word	0x080051b8
  ldr r2, =_sbss
 80025ac:	20000110 	.word	0x20000110
  ldr r4, =_ebss
 80025b0:	20000208 	.word	0x20000208

080025b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025b4:	e7fe      	b.n	80025b4 <ADC_IRQHandler>
	...

080025b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80025bc:	4b0e      	ldr	r3, [pc, #56]	; (80025f8 <HAL_Init+0x40>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a0d      	ldr	r2, [pc, #52]	; (80025f8 <HAL_Init+0x40>)
 80025c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80025c8:	4b0b      	ldr	r3, [pc, #44]	; (80025f8 <HAL_Init+0x40>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a0a      	ldr	r2, [pc, #40]	; (80025f8 <HAL_Init+0x40>)
 80025ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025d4:	4b08      	ldr	r3, [pc, #32]	; (80025f8 <HAL_Init+0x40>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a07      	ldr	r2, [pc, #28]	; (80025f8 <HAL_Init+0x40>)
 80025da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025e0:	2003      	movs	r0, #3
 80025e2:	f000 f90d 	bl	8002800 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025e6:	200f      	movs	r0, #15
 80025e8:	f000 f808 	bl	80025fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025ec:	f7ff ff0e 	bl	800240c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025f0:	2300      	movs	r3, #0
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	40023c00 	.word	0x40023c00

080025fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002604:	4b12      	ldr	r3, [pc, #72]	; (8002650 <HAL_InitTick+0x54>)
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	4b12      	ldr	r3, [pc, #72]	; (8002654 <HAL_InitTick+0x58>)
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	4619      	mov	r1, r3
 800260e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002612:	fbb3 f3f1 	udiv	r3, r3, r1
 8002616:	fbb2 f3f3 	udiv	r3, r2, r3
 800261a:	4618      	mov	r0, r3
 800261c:	f000 f917 	bl	800284e <HAL_SYSTICK_Config>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d001      	beq.n	800262a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e00e      	b.n	8002648 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2b0f      	cmp	r3, #15
 800262e:	d80a      	bhi.n	8002646 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002630:	2200      	movs	r2, #0
 8002632:	6879      	ldr	r1, [r7, #4]
 8002634:	f04f 30ff 	mov.w	r0, #4294967295
 8002638:	f000 f8ed 	bl	8002816 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800263c:	4a06      	ldr	r2, [pc, #24]	; (8002658 <HAL_InitTick+0x5c>)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002642:	2300      	movs	r3, #0
 8002644:	e000      	b.n	8002648 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
}
 8002648:	4618      	mov	r0, r3
 800264a:	3708      	adds	r7, #8
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}
 8002650:	200000a0 	.word	0x200000a0
 8002654:	200000a8 	.word	0x200000a8
 8002658:	200000a4 	.word	0x200000a4

0800265c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800265c:	b480      	push	{r7}
 800265e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002660:	4b06      	ldr	r3, [pc, #24]	; (800267c <HAL_IncTick+0x20>)
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	461a      	mov	r2, r3
 8002666:	4b06      	ldr	r3, [pc, #24]	; (8002680 <HAL_IncTick+0x24>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4413      	add	r3, r2
 800266c:	4a04      	ldr	r2, [pc, #16]	; (8002680 <HAL_IncTick+0x24>)
 800266e:	6013      	str	r3, [r2, #0]
}
 8002670:	bf00      	nop
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop
 800267c:	200000a8 	.word	0x200000a8
 8002680:	20000204 	.word	0x20000204

08002684 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002684:	b480      	push	{r7}
 8002686:	af00      	add	r7, sp, #0
  return uwTick;
 8002688:	4b03      	ldr	r3, [pc, #12]	; (8002698 <HAL_GetTick+0x14>)
 800268a:	681b      	ldr	r3, [r3, #0]
}
 800268c:	4618      	mov	r0, r3
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr
 8002696:	bf00      	nop
 8002698:	20000204 	.word	0x20000204

0800269c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800269c:	b480      	push	{r7}
 800269e:	b085      	sub	sp, #20
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	f003 0307 	and.w	r3, r3, #7
 80026aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026ac:	4b0c      	ldr	r3, [pc, #48]	; (80026e0 <__NVIC_SetPriorityGrouping+0x44>)
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026b2:	68ba      	ldr	r2, [r7, #8]
 80026b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026b8:	4013      	ands	r3, r2
 80026ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026ce:	4a04      	ldr	r2, [pc, #16]	; (80026e0 <__NVIC_SetPriorityGrouping+0x44>)
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	60d3      	str	r3, [r2, #12]
}
 80026d4:	bf00      	nop
 80026d6:	3714      	adds	r7, #20
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr
 80026e0:	e000ed00 	.word	0xe000ed00

080026e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026e4:	b480      	push	{r7}
 80026e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026e8:	4b04      	ldr	r3, [pc, #16]	; (80026fc <__NVIC_GetPriorityGrouping+0x18>)
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	0a1b      	lsrs	r3, r3, #8
 80026ee:	f003 0307 	and.w	r3, r3, #7
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr
 80026fc:	e000ed00 	.word	0xe000ed00

08002700 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	4603      	mov	r3, r0
 8002708:	6039      	str	r1, [r7, #0]
 800270a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800270c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002710:	2b00      	cmp	r3, #0
 8002712:	db0a      	blt.n	800272a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	b2da      	uxtb	r2, r3
 8002718:	490c      	ldr	r1, [pc, #48]	; (800274c <__NVIC_SetPriority+0x4c>)
 800271a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800271e:	0112      	lsls	r2, r2, #4
 8002720:	b2d2      	uxtb	r2, r2
 8002722:	440b      	add	r3, r1
 8002724:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002728:	e00a      	b.n	8002740 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	b2da      	uxtb	r2, r3
 800272e:	4908      	ldr	r1, [pc, #32]	; (8002750 <__NVIC_SetPriority+0x50>)
 8002730:	79fb      	ldrb	r3, [r7, #7]
 8002732:	f003 030f 	and.w	r3, r3, #15
 8002736:	3b04      	subs	r3, #4
 8002738:	0112      	lsls	r2, r2, #4
 800273a:	b2d2      	uxtb	r2, r2
 800273c:	440b      	add	r3, r1
 800273e:	761a      	strb	r2, [r3, #24]
}
 8002740:	bf00      	nop
 8002742:	370c      	adds	r7, #12
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr
 800274c:	e000e100 	.word	0xe000e100
 8002750:	e000ed00 	.word	0xe000ed00

08002754 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002754:	b480      	push	{r7}
 8002756:	b089      	sub	sp, #36	; 0x24
 8002758:	af00      	add	r7, sp, #0
 800275a:	60f8      	str	r0, [r7, #12]
 800275c:	60b9      	str	r1, [r7, #8]
 800275e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	f003 0307 	and.w	r3, r3, #7
 8002766:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	f1c3 0307 	rsb	r3, r3, #7
 800276e:	2b04      	cmp	r3, #4
 8002770:	bf28      	it	cs
 8002772:	2304      	movcs	r3, #4
 8002774:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	3304      	adds	r3, #4
 800277a:	2b06      	cmp	r3, #6
 800277c:	d902      	bls.n	8002784 <NVIC_EncodePriority+0x30>
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	3b03      	subs	r3, #3
 8002782:	e000      	b.n	8002786 <NVIC_EncodePriority+0x32>
 8002784:	2300      	movs	r3, #0
 8002786:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002788:	f04f 32ff 	mov.w	r2, #4294967295
 800278c:	69bb      	ldr	r3, [r7, #24]
 800278e:	fa02 f303 	lsl.w	r3, r2, r3
 8002792:	43da      	mvns	r2, r3
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	401a      	ands	r2, r3
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800279c:	f04f 31ff 	mov.w	r1, #4294967295
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	fa01 f303 	lsl.w	r3, r1, r3
 80027a6:	43d9      	mvns	r1, r3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027ac:	4313      	orrs	r3, r2
         );
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3724      	adds	r7, #36	; 0x24
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr
	...

080027bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	3b01      	subs	r3, #1
 80027c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027cc:	d301      	bcc.n	80027d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027ce:	2301      	movs	r3, #1
 80027d0:	e00f      	b.n	80027f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027d2:	4a0a      	ldr	r2, [pc, #40]	; (80027fc <SysTick_Config+0x40>)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	3b01      	subs	r3, #1
 80027d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027da:	210f      	movs	r1, #15
 80027dc:	f04f 30ff 	mov.w	r0, #4294967295
 80027e0:	f7ff ff8e 	bl	8002700 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027e4:	4b05      	ldr	r3, [pc, #20]	; (80027fc <SysTick_Config+0x40>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027ea:	4b04      	ldr	r3, [pc, #16]	; (80027fc <SysTick_Config+0x40>)
 80027ec:	2207      	movs	r2, #7
 80027ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027f0:	2300      	movs	r3, #0
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3708      	adds	r7, #8
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	e000e010 	.word	0xe000e010

08002800 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b082      	sub	sp, #8
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f7ff ff47 	bl	800269c <__NVIC_SetPriorityGrouping>
}
 800280e:	bf00      	nop
 8002810:	3708      	adds	r7, #8
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}

08002816 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002816:	b580      	push	{r7, lr}
 8002818:	b086      	sub	sp, #24
 800281a:	af00      	add	r7, sp, #0
 800281c:	4603      	mov	r3, r0
 800281e:	60b9      	str	r1, [r7, #8]
 8002820:	607a      	str	r2, [r7, #4]
 8002822:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002824:	2300      	movs	r3, #0
 8002826:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002828:	f7ff ff5c 	bl	80026e4 <__NVIC_GetPriorityGrouping>
 800282c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	68b9      	ldr	r1, [r7, #8]
 8002832:	6978      	ldr	r0, [r7, #20]
 8002834:	f7ff ff8e 	bl	8002754 <NVIC_EncodePriority>
 8002838:	4602      	mov	r2, r0
 800283a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800283e:	4611      	mov	r1, r2
 8002840:	4618      	mov	r0, r3
 8002842:	f7ff ff5d 	bl	8002700 <__NVIC_SetPriority>
}
 8002846:	bf00      	nop
 8002848:	3718      	adds	r7, #24
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}

0800284e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800284e:	b580      	push	{r7, lr}
 8002850:	b082      	sub	sp, #8
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f7ff ffb0 	bl	80027bc <SysTick_Config>
 800285c:	4603      	mov	r3, r0
}
 800285e:	4618      	mov	r0, r3
 8002860:	3708      	adds	r7, #8
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
	...

08002868 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002868:	b480      	push	{r7}
 800286a:	b089      	sub	sp, #36	; 0x24
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002872:	2300      	movs	r3, #0
 8002874:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002876:	2300      	movs	r3, #0
 8002878:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800287a:	2300      	movs	r3, #0
 800287c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800287e:	2300      	movs	r3, #0
 8002880:	61fb      	str	r3, [r7, #28]
 8002882:	e16b      	b.n	8002b5c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002884:	2201      	movs	r2, #1
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	fa02 f303 	lsl.w	r3, r2, r3
 800288c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	697a      	ldr	r2, [r7, #20]
 8002894:	4013      	ands	r3, r2
 8002896:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002898:	693a      	ldr	r2, [r7, #16]
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	429a      	cmp	r2, r3
 800289e:	f040 815a 	bne.w	8002b56 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f003 0303 	and.w	r3, r3, #3
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d005      	beq.n	80028ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	d130      	bne.n	800291c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028c0:	69fb      	ldr	r3, [r7, #28]
 80028c2:	005b      	lsls	r3, r3, #1
 80028c4:	2203      	movs	r2, #3
 80028c6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ca:	43db      	mvns	r3, r3
 80028cc:	69ba      	ldr	r2, [r7, #24]
 80028ce:	4013      	ands	r3, r2
 80028d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	68da      	ldr	r2, [r3, #12]
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	005b      	lsls	r3, r3, #1
 80028da:	fa02 f303 	lsl.w	r3, r2, r3
 80028de:	69ba      	ldr	r2, [r7, #24]
 80028e0:	4313      	orrs	r3, r2
 80028e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	69ba      	ldr	r2, [r7, #24]
 80028e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028f0:	2201      	movs	r2, #1
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	fa02 f303 	lsl.w	r3, r2, r3
 80028f8:	43db      	mvns	r3, r3
 80028fa:	69ba      	ldr	r2, [r7, #24]
 80028fc:	4013      	ands	r3, r2
 80028fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	091b      	lsrs	r3, r3, #4
 8002906:	f003 0201 	and.w	r2, r3, #1
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	fa02 f303 	lsl.w	r3, r2, r3
 8002910:	69ba      	ldr	r2, [r7, #24]
 8002912:	4313      	orrs	r3, r2
 8002914:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	69ba      	ldr	r2, [r7, #24]
 800291a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f003 0303 	and.w	r3, r3, #3
 8002924:	2b03      	cmp	r3, #3
 8002926:	d017      	beq.n	8002958 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	005b      	lsls	r3, r3, #1
 8002932:	2203      	movs	r2, #3
 8002934:	fa02 f303 	lsl.w	r3, r2, r3
 8002938:	43db      	mvns	r3, r3
 800293a:	69ba      	ldr	r2, [r7, #24]
 800293c:	4013      	ands	r3, r2
 800293e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	689a      	ldr	r2, [r3, #8]
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	005b      	lsls	r3, r3, #1
 8002948:	fa02 f303 	lsl.w	r3, r2, r3
 800294c:	69ba      	ldr	r2, [r7, #24]
 800294e:	4313      	orrs	r3, r2
 8002950:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	69ba      	ldr	r2, [r7, #24]
 8002956:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f003 0303 	and.w	r3, r3, #3
 8002960:	2b02      	cmp	r3, #2
 8002962:	d123      	bne.n	80029ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	08da      	lsrs	r2, r3, #3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	3208      	adds	r2, #8
 800296c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002970:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	f003 0307 	and.w	r3, r3, #7
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	220f      	movs	r2, #15
 800297c:	fa02 f303 	lsl.w	r3, r2, r3
 8002980:	43db      	mvns	r3, r3
 8002982:	69ba      	ldr	r2, [r7, #24]
 8002984:	4013      	ands	r3, r2
 8002986:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	691a      	ldr	r2, [r3, #16]
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	f003 0307 	and.w	r3, r3, #7
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	fa02 f303 	lsl.w	r3, r2, r3
 8002998:	69ba      	ldr	r2, [r7, #24]
 800299a:	4313      	orrs	r3, r2
 800299c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	08da      	lsrs	r2, r3, #3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	3208      	adds	r2, #8
 80029a6:	69b9      	ldr	r1, [r7, #24]
 80029a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	005b      	lsls	r3, r3, #1
 80029b6:	2203      	movs	r2, #3
 80029b8:	fa02 f303 	lsl.w	r3, r2, r3
 80029bc:	43db      	mvns	r3, r3
 80029be:	69ba      	ldr	r2, [r7, #24]
 80029c0:	4013      	ands	r3, r2
 80029c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f003 0203 	and.w	r2, r3, #3
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	005b      	lsls	r3, r3, #1
 80029d0:	fa02 f303 	lsl.w	r3, r2, r3
 80029d4:	69ba      	ldr	r2, [r7, #24]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	69ba      	ldr	r2, [r7, #24]
 80029de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	f000 80b4 	beq.w	8002b56 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029ee:	2300      	movs	r3, #0
 80029f0:	60fb      	str	r3, [r7, #12]
 80029f2:	4b60      	ldr	r3, [pc, #384]	; (8002b74 <HAL_GPIO_Init+0x30c>)
 80029f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029f6:	4a5f      	ldr	r2, [pc, #380]	; (8002b74 <HAL_GPIO_Init+0x30c>)
 80029f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029fc:	6453      	str	r3, [r2, #68]	; 0x44
 80029fe:	4b5d      	ldr	r3, [pc, #372]	; (8002b74 <HAL_GPIO_Init+0x30c>)
 8002a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a06:	60fb      	str	r3, [r7, #12]
 8002a08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a0a:	4a5b      	ldr	r2, [pc, #364]	; (8002b78 <HAL_GPIO_Init+0x310>)
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	089b      	lsrs	r3, r3, #2
 8002a10:	3302      	adds	r3, #2
 8002a12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	f003 0303 	and.w	r3, r3, #3
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	220f      	movs	r2, #15
 8002a22:	fa02 f303 	lsl.w	r3, r2, r3
 8002a26:	43db      	mvns	r3, r3
 8002a28:	69ba      	ldr	r2, [r7, #24]
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4a52      	ldr	r2, [pc, #328]	; (8002b7c <HAL_GPIO_Init+0x314>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d02b      	beq.n	8002a8e <HAL_GPIO_Init+0x226>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4a51      	ldr	r2, [pc, #324]	; (8002b80 <HAL_GPIO_Init+0x318>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d025      	beq.n	8002a8a <HAL_GPIO_Init+0x222>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4a50      	ldr	r2, [pc, #320]	; (8002b84 <HAL_GPIO_Init+0x31c>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d01f      	beq.n	8002a86 <HAL_GPIO_Init+0x21e>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a4f      	ldr	r2, [pc, #316]	; (8002b88 <HAL_GPIO_Init+0x320>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d019      	beq.n	8002a82 <HAL_GPIO_Init+0x21a>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4a4e      	ldr	r2, [pc, #312]	; (8002b8c <HAL_GPIO_Init+0x324>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d013      	beq.n	8002a7e <HAL_GPIO_Init+0x216>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4a4d      	ldr	r2, [pc, #308]	; (8002b90 <HAL_GPIO_Init+0x328>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d00d      	beq.n	8002a7a <HAL_GPIO_Init+0x212>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a4c      	ldr	r2, [pc, #304]	; (8002b94 <HAL_GPIO_Init+0x32c>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d007      	beq.n	8002a76 <HAL_GPIO_Init+0x20e>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4a4b      	ldr	r2, [pc, #300]	; (8002b98 <HAL_GPIO_Init+0x330>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d101      	bne.n	8002a72 <HAL_GPIO_Init+0x20a>
 8002a6e:	2307      	movs	r3, #7
 8002a70:	e00e      	b.n	8002a90 <HAL_GPIO_Init+0x228>
 8002a72:	2308      	movs	r3, #8
 8002a74:	e00c      	b.n	8002a90 <HAL_GPIO_Init+0x228>
 8002a76:	2306      	movs	r3, #6
 8002a78:	e00a      	b.n	8002a90 <HAL_GPIO_Init+0x228>
 8002a7a:	2305      	movs	r3, #5
 8002a7c:	e008      	b.n	8002a90 <HAL_GPIO_Init+0x228>
 8002a7e:	2304      	movs	r3, #4
 8002a80:	e006      	b.n	8002a90 <HAL_GPIO_Init+0x228>
 8002a82:	2303      	movs	r3, #3
 8002a84:	e004      	b.n	8002a90 <HAL_GPIO_Init+0x228>
 8002a86:	2302      	movs	r3, #2
 8002a88:	e002      	b.n	8002a90 <HAL_GPIO_Init+0x228>
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e000      	b.n	8002a90 <HAL_GPIO_Init+0x228>
 8002a8e:	2300      	movs	r3, #0
 8002a90:	69fa      	ldr	r2, [r7, #28]
 8002a92:	f002 0203 	and.w	r2, r2, #3
 8002a96:	0092      	lsls	r2, r2, #2
 8002a98:	4093      	lsls	r3, r2
 8002a9a:	69ba      	ldr	r2, [r7, #24]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002aa0:	4935      	ldr	r1, [pc, #212]	; (8002b78 <HAL_GPIO_Init+0x310>)
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	089b      	lsrs	r3, r3, #2
 8002aa6:	3302      	adds	r3, #2
 8002aa8:	69ba      	ldr	r2, [r7, #24]
 8002aaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002aae:	4b3b      	ldr	r3, [pc, #236]	; (8002b9c <HAL_GPIO_Init+0x334>)
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	43db      	mvns	r3, r3
 8002ab8:	69ba      	ldr	r2, [r7, #24]
 8002aba:	4013      	ands	r3, r2
 8002abc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d003      	beq.n	8002ad2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002aca:	69ba      	ldr	r2, [r7, #24]
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ad2:	4a32      	ldr	r2, [pc, #200]	; (8002b9c <HAL_GPIO_Init+0x334>)
 8002ad4:	69bb      	ldr	r3, [r7, #24]
 8002ad6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ad8:	4b30      	ldr	r3, [pc, #192]	; (8002b9c <HAL_GPIO_Init+0x334>)
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	43db      	mvns	r3, r3
 8002ae2:	69ba      	ldr	r2, [r7, #24]
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d003      	beq.n	8002afc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002af4:	69ba      	ldr	r2, [r7, #24]
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002afc:	4a27      	ldr	r2, [pc, #156]	; (8002b9c <HAL_GPIO_Init+0x334>)
 8002afe:	69bb      	ldr	r3, [r7, #24]
 8002b00:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b02:	4b26      	ldr	r3, [pc, #152]	; (8002b9c <HAL_GPIO_Init+0x334>)
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	43db      	mvns	r3, r3
 8002b0c:	69ba      	ldr	r2, [r7, #24]
 8002b0e:	4013      	ands	r3, r2
 8002b10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d003      	beq.n	8002b26 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002b1e:	69ba      	ldr	r2, [r7, #24]
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b26:	4a1d      	ldr	r2, [pc, #116]	; (8002b9c <HAL_GPIO_Init+0x334>)
 8002b28:	69bb      	ldr	r3, [r7, #24]
 8002b2a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b2c:	4b1b      	ldr	r3, [pc, #108]	; (8002b9c <HAL_GPIO_Init+0x334>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	43db      	mvns	r3, r3
 8002b36:	69ba      	ldr	r2, [r7, #24]
 8002b38:	4013      	ands	r3, r2
 8002b3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d003      	beq.n	8002b50 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002b48:	69ba      	ldr	r2, [r7, #24]
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b50:	4a12      	ldr	r2, [pc, #72]	; (8002b9c <HAL_GPIO_Init+0x334>)
 8002b52:	69bb      	ldr	r3, [r7, #24]
 8002b54:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	3301      	adds	r3, #1
 8002b5a:	61fb      	str	r3, [r7, #28]
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	2b0f      	cmp	r3, #15
 8002b60:	f67f ae90 	bls.w	8002884 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b64:	bf00      	nop
 8002b66:	bf00      	nop
 8002b68:	3724      	adds	r7, #36	; 0x24
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	40023800 	.word	0x40023800
 8002b78:	40013800 	.word	0x40013800
 8002b7c:	40020000 	.word	0x40020000
 8002b80:	40020400 	.word	0x40020400
 8002b84:	40020800 	.word	0x40020800
 8002b88:	40020c00 	.word	0x40020c00
 8002b8c:	40021000 	.word	0x40021000
 8002b90:	40021400 	.word	0x40021400
 8002b94:	40021800 	.word	0x40021800
 8002b98:	40021c00 	.word	0x40021c00
 8002b9c:	40013c00 	.word	0x40013c00

08002ba0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b084      	sub	sp, #16
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d101      	bne.n	8002bb2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e12b      	b.n	8002e0a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d106      	bne.n	8002bcc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f7ff fc48 	bl	800245c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2224      	movs	r2, #36	; 0x24
 8002bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f022 0201 	bic.w	r2, r2, #1
 8002be2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002bf2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c02:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c04:	f001 fbbc 	bl	8004380 <HAL_RCC_GetPCLK1Freq>
 8002c08:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	4a81      	ldr	r2, [pc, #516]	; (8002e14 <HAL_I2C_Init+0x274>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d807      	bhi.n	8002c24 <HAL_I2C_Init+0x84>
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	4a80      	ldr	r2, [pc, #512]	; (8002e18 <HAL_I2C_Init+0x278>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	bf94      	ite	ls
 8002c1c:	2301      	movls	r3, #1
 8002c1e:	2300      	movhi	r3, #0
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	e006      	b.n	8002c32 <HAL_I2C_Init+0x92>
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	4a7d      	ldr	r2, [pc, #500]	; (8002e1c <HAL_I2C_Init+0x27c>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	bf94      	ite	ls
 8002c2c:	2301      	movls	r3, #1
 8002c2e:	2300      	movhi	r3, #0
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d001      	beq.n	8002c3a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e0e7      	b.n	8002e0a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	4a78      	ldr	r2, [pc, #480]	; (8002e20 <HAL_I2C_Init+0x280>)
 8002c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c42:	0c9b      	lsrs	r3, r3, #18
 8002c44:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	68ba      	ldr	r2, [r7, #8]
 8002c56:	430a      	orrs	r2, r1
 8002c58:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	6a1b      	ldr	r3, [r3, #32]
 8002c60:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	4a6a      	ldr	r2, [pc, #424]	; (8002e14 <HAL_I2C_Init+0x274>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d802      	bhi.n	8002c74 <HAL_I2C_Init+0xd4>
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	3301      	adds	r3, #1
 8002c72:	e009      	b.n	8002c88 <HAL_I2C_Init+0xe8>
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002c7a:	fb02 f303 	mul.w	r3, r2, r3
 8002c7e:	4a69      	ldr	r2, [pc, #420]	; (8002e24 <HAL_I2C_Init+0x284>)
 8002c80:	fba2 2303 	umull	r2, r3, r2, r3
 8002c84:	099b      	lsrs	r3, r3, #6
 8002c86:	3301      	adds	r3, #1
 8002c88:	687a      	ldr	r2, [r7, #4]
 8002c8a:	6812      	ldr	r2, [r2, #0]
 8002c8c:	430b      	orrs	r3, r1
 8002c8e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	69db      	ldr	r3, [r3, #28]
 8002c96:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002c9a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	495c      	ldr	r1, [pc, #368]	; (8002e14 <HAL_I2C_Init+0x274>)
 8002ca4:	428b      	cmp	r3, r1
 8002ca6:	d819      	bhi.n	8002cdc <HAL_I2C_Init+0x13c>
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	1e59      	subs	r1, r3, #1
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	005b      	lsls	r3, r3, #1
 8002cb2:	fbb1 f3f3 	udiv	r3, r1, r3
 8002cb6:	1c59      	adds	r1, r3, #1
 8002cb8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002cbc:	400b      	ands	r3, r1
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d00a      	beq.n	8002cd8 <HAL_I2C_Init+0x138>
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	1e59      	subs	r1, r3, #1
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	005b      	lsls	r3, r3, #1
 8002ccc:	fbb1 f3f3 	udiv	r3, r1, r3
 8002cd0:	3301      	adds	r3, #1
 8002cd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cd6:	e051      	b.n	8002d7c <HAL_I2C_Init+0x1dc>
 8002cd8:	2304      	movs	r3, #4
 8002cda:	e04f      	b.n	8002d7c <HAL_I2C_Init+0x1dc>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d111      	bne.n	8002d08 <HAL_I2C_Init+0x168>
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	1e58      	subs	r0, r3, #1
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6859      	ldr	r1, [r3, #4]
 8002cec:	460b      	mov	r3, r1
 8002cee:	005b      	lsls	r3, r3, #1
 8002cf0:	440b      	add	r3, r1
 8002cf2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cf6:	3301      	adds	r3, #1
 8002cf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	bf0c      	ite	eq
 8002d00:	2301      	moveq	r3, #1
 8002d02:	2300      	movne	r3, #0
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	e012      	b.n	8002d2e <HAL_I2C_Init+0x18e>
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	1e58      	subs	r0, r3, #1
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6859      	ldr	r1, [r3, #4]
 8002d10:	460b      	mov	r3, r1
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	440b      	add	r3, r1
 8002d16:	0099      	lsls	r1, r3, #2
 8002d18:	440b      	add	r3, r1
 8002d1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d1e:	3301      	adds	r3, #1
 8002d20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	bf0c      	ite	eq
 8002d28:	2301      	moveq	r3, #1
 8002d2a:	2300      	movne	r3, #0
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d001      	beq.n	8002d36 <HAL_I2C_Init+0x196>
 8002d32:	2301      	movs	r3, #1
 8002d34:	e022      	b.n	8002d7c <HAL_I2C_Init+0x1dc>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d10e      	bne.n	8002d5c <HAL_I2C_Init+0x1bc>
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	1e58      	subs	r0, r3, #1
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6859      	ldr	r1, [r3, #4]
 8002d46:	460b      	mov	r3, r1
 8002d48:	005b      	lsls	r3, r3, #1
 8002d4a:	440b      	add	r3, r1
 8002d4c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d50:	3301      	adds	r3, #1
 8002d52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d5a:	e00f      	b.n	8002d7c <HAL_I2C_Init+0x1dc>
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	1e58      	subs	r0, r3, #1
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6859      	ldr	r1, [r3, #4]
 8002d64:	460b      	mov	r3, r1
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	440b      	add	r3, r1
 8002d6a:	0099      	lsls	r1, r3, #2
 8002d6c:	440b      	add	r3, r1
 8002d6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d72:	3301      	adds	r3, #1
 8002d74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d7c:	6879      	ldr	r1, [r7, #4]
 8002d7e:	6809      	ldr	r1, [r1, #0]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	69da      	ldr	r2, [r3, #28]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6a1b      	ldr	r3, [r3, #32]
 8002d96:	431a      	orrs	r2, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	430a      	orrs	r2, r1
 8002d9e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002daa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	6911      	ldr	r1, [r2, #16]
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	68d2      	ldr	r2, [r2, #12]
 8002db6:	4311      	orrs	r1, r2
 8002db8:	687a      	ldr	r2, [r7, #4]
 8002dba:	6812      	ldr	r2, [r2, #0]
 8002dbc:	430b      	orrs	r3, r1
 8002dbe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	695a      	ldr	r2, [r3, #20]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	699b      	ldr	r3, [r3, #24]
 8002dd2:	431a      	orrs	r2, r3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	430a      	orrs	r2, r1
 8002dda:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f042 0201 	orr.w	r2, r2, #1
 8002dea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2220      	movs	r2, #32
 8002df6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2200      	movs	r2, #0
 8002e04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e08:	2300      	movs	r3, #0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3710      	adds	r7, #16
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	000186a0 	.word	0x000186a0
 8002e18:	001e847f 	.word	0x001e847f
 8002e1c:	003d08ff 	.word	0x003d08ff
 8002e20:	431bde83 	.word	0x431bde83
 8002e24:	10624dd3 	.word	0x10624dd3

08002e28 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b088      	sub	sp, #32
 8002e2c:	af02      	add	r7, sp, #8
 8002e2e:	60f8      	str	r0, [r7, #12]
 8002e30:	4608      	mov	r0, r1
 8002e32:	4611      	mov	r1, r2
 8002e34:	461a      	mov	r2, r3
 8002e36:	4603      	mov	r3, r0
 8002e38:	817b      	strh	r3, [r7, #10]
 8002e3a:	460b      	mov	r3, r1
 8002e3c:	813b      	strh	r3, [r7, #8]
 8002e3e:	4613      	mov	r3, r2
 8002e40:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e42:	f7ff fc1f 	bl	8002684 <HAL_GetTick>
 8002e46:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	2b20      	cmp	r3, #32
 8002e52:	f040 80d9 	bne.w	8003008 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	9300      	str	r3, [sp, #0]
 8002e5a:	2319      	movs	r3, #25
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	496d      	ldr	r1, [pc, #436]	; (8003014 <HAL_I2C_Mem_Write+0x1ec>)
 8002e60:	68f8      	ldr	r0, [r7, #12]
 8002e62:	f000 fc7f 	bl	8003764 <I2C_WaitOnFlagUntilTimeout>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d001      	beq.n	8002e70 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002e6c:	2302      	movs	r3, #2
 8002e6e:	e0cc      	b.n	800300a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d101      	bne.n	8002e7e <HAL_I2C_Mem_Write+0x56>
 8002e7a:	2302      	movs	r3, #2
 8002e7c:	e0c5      	b.n	800300a <HAL_I2C_Mem_Write+0x1e2>
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2201      	movs	r2, #1
 8002e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 0301 	and.w	r3, r3, #1
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d007      	beq.n	8002ea4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f042 0201 	orr.w	r2, r2, #1
 8002ea2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002eb2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2221      	movs	r2, #33	; 0x21
 8002eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2240      	movs	r2, #64	; 0x40
 8002ec0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	6a3a      	ldr	r2, [r7, #32]
 8002ece:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002ed4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eda:	b29a      	uxth	r2, r3
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	4a4d      	ldr	r2, [pc, #308]	; (8003018 <HAL_I2C_Mem_Write+0x1f0>)
 8002ee4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002ee6:	88f8      	ldrh	r0, [r7, #6]
 8002ee8:	893a      	ldrh	r2, [r7, #8]
 8002eea:	8979      	ldrh	r1, [r7, #10]
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	9301      	str	r3, [sp, #4]
 8002ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ef2:	9300      	str	r3, [sp, #0]
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	68f8      	ldr	r0, [r7, #12]
 8002ef8:	f000 fab6 	bl	8003468 <I2C_RequestMemoryWrite>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d052      	beq.n	8002fa8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e081      	b.n	800300a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f06:	697a      	ldr	r2, [r7, #20]
 8002f08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f0a:	68f8      	ldr	r0, [r7, #12]
 8002f0c:	f000 fd00 	bl	8003910 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d00d      	beq.n	8002f32 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1a:	2b04      	cmp	r3, #4
 8002f1c:	d107      	bne.n	8002f2e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f2c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e06b      	b.n	800300a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f36:	781a      	ldrb	r2, [r3, #0]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f42:	1c5a      	adds	r2, r3, #1
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f4c:	3b01      	subs	r3, #1
 8002f4e:	b29a      	uxth	r2, r3
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	3b01      	subs	r3, #1
 8002f5c:	b29a      	uxth	r2, r3
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	695b      	ldr	r3, [r3, #20]
 8002f68:	f003 0304 	and.w	r3, r3, #4
 8002f6c:	2b04      	cmp	r3, #4
 8002f6e:	d11b      	bne.n	8002fa8 <HAL_I2C_Mem_Write+0x180>
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d017      	beq.n	8002fa8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7c:	781a      	ldrb	r2, [r3, #0]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f88:	1c5a      	adds	r2, r3, #1
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f92:	3b01      	subs	r3, #1
 8002f94:	b29a      	uxth	r2, r3
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	3b01      	subs	r3, #1
 8002fa2:	b29a      	uxth	r2, r3
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d1aa      	bne.n	8002f06 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fb0:	697a      	ldr	r2, [r7, #20]
 8002fb2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002fb4:	68f8      	ldr	r0, [r7, #12]
 8002fb6:	f000 fcec 	bl	8003992 <I2C_WaitOnBTFFlagUntilTimeout>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d00d      	beq.n	8002fdc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc4:	2b04      	cmp	r3, #4
 8002fc6:	d107      	bne.n	8002fd8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fd6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e016      	b.n	800300a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2220      	movs	r2, #32
 8002ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2200      	movs	r2, #0
 8003000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003004:	2300      	movs	r3, #0
 8003006:	e000      	b.n	800300a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003008:	2302      	movs	r3, #2
  }
}
 800300a:	4618      	mov	r0, r3
 800300c:	3718      	adds	r7, #24
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	00100002 	.word	0x00100002
 8003018:	ffff0000 	.word	0xffff0000

0800301c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b08c      	sub	sp, #48	; 0x30
 8003020:	af02      	add	r7, sp, #8
 8003022:	60f8      	str	r0, [r7, #12]
 8003024:	4608      	mov	r0, r1
 8003026:	4611      	mov	r1, r2
 8003028:	461a      	mov	r2, r3
 800302a:	4603      	mov	r3, r0
 800302c:	817b      	strh	r3, [r7, #10]
 800302e:	460b      	mov	r3, r1
 8003030:	813b      	strh	r3, [r7, #8]
 8003032:	4613      	mov	r3, r2
 8003034:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003036:	f7ff fb25 	bl	8002684 <HAL_GetTick>
 800303a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003042:	b2db      	uxtb	r3, r3
 8003044:	2b20      	cmp	r3, #32
 8003046:	f040 8208 	bne.w	800345a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800304a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304c:	9300      	str	r3, [sp, #0]
 800304e:	2319      	movs	r3, #25
 8003050:	2201      	movs	r2, #1
 8003052:	497b      	ldr	r1, [pc, #492]	; (8003240 <HAL_I2C_Mem_Read+0x224>)
 8003054:	68f8      	ldr	r0, [r7, #12]
 8003056:	f000 fb85 	bl	8003764 <I2C_WaitOnFlagUntilTimeout>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d001      	beq.n	8003064 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003060:	2302      	movs	r3, #2
 8003062:	e1fb      	b.n	800345c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800306a:	2b01      	cmp	r3, #1
 800306c:	d101      	bne.n	8003072 <HAL_I2C_Mem_Read+0x56>
 800306e:	2302      	movs	r3, #2
 8003070:	e1f4      	b.n	800345c <HAL_I2C_Mem_Read+0x440>
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2201      	movs	r2, #1
 8003076:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0301 	and.w	r3, r3, #1
 8003084:	2b01      	cmp	r3, #1
 8003086:	d007      	beq.n	8003098 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f042 0201 	orr.w	r2, r2, #1
 8003096:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030a6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2222      	movs	r2, #34	; 0x22
 80030ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2240      	movs	r2, #64	; 0x40
 80030b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2200      	movs	r2, #0
 80030bc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030c2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80030c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ce:	b29a      	uxth	r2, r3
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	4a5b      	ldr	r2, [pc, #364]	; (8003244 <HAL_I2C_Mem_Read+0x228>)
 80030d8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80030da:	88f8      	ldrh	r0, [r7, #6]
 80030dc:	893a      	ldrh	r2, [r7, #8]
 80030de:	8979      	ldrh	r1, [r7, #10]
 80030e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e2:	9301      	str	r3, [sp, #4]
 80030e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030e6:	9300      	str	r3, [sp, #0]
 80030e8:	4603      	mov	r3, r0
 80030ea:	68f8      	ldr	r0, [r7, #12]
 80030ec:	f000 fa52 	bl	8003594 <I2C_RequestMemoryRead>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d001      	beq.n	80030fa <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e1b0      	b.n	800345c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d113      	bne.n	800312a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003102:	2300      	movs	r3, #0
 8003104:	623b      	str	r3, [r7, #32]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	695b      	ldr	r3, [r3, #20]
 800310c:	623b      	str	r3, [r7, #32]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	699b      	ldr	r3, [r3, #24]
 8003114:	623b      	str	r3, [r7, #32]
 8003116:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003126:	601a      	str	r2, [r3, #0]
 8003128:	e184      	b.n	8003434 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800312e:	2b01      	cmp	r3, #1
 8003130:	d11b      	bne.n	800316a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003140:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003142:	2300      	movs	r3, #0
 8003144:	61fb      	str	r3, [r7, #28]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	695b      	ldr	r3, [r3, #20]
 800314c:	61fb      	str	r3, [r7, #28]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	699b      	ldr	r3, [r3, #24]
 8003154:	61fb      	str	r3, [r7, #28]
 8003156:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003166:	601a      	str	r2, [r3, #0]
 8003168:	e164      	b.n	8003434 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800316e:	2b02      	cmp	r3, #2
 8003170:	d11b      	bne.n	80031aa <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003180:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003190:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003192:	2300      	movs	r3, #0
 8003194:	61bb      	str	r3, [r7, #24]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	695b      	ldr	r3, [r3, #20]
 800319c:	61bb      	str	r3, [r7, #24]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	699b      	ldr	r3, [r3, #24]
 80031a4:	61bb      	str	r3, [r7, #24]
 80031a6:	69bb      	ldr	r3, [r7, #24]
 80031a8:	e144      	b.n	8003434 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031aa:	2300      	movs	r3, #0
 80031ac:	617b      	str	r3, [r7, #20]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	695b      	ldr	r3, [r3, #20]
 80031b4:	617b      	str	r3, [r7, #20]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	699b      	ldr	r3, [r3, #24]
 80031bc:	617b      	str	r3, [r7, #20]
 80031be:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80031c0:	e138      	b.n	8003434 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031c6:	2b03      	cmp	r3, #3
 80031c8:	f200 80f1 	bhi.w	80033ae <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d123      	bne.n	800321c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031d6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80031d8:	68f8      	ldr	r0, [r7, #12]
 80031da:	f000 fc1b 	bl	8003a14 <I2C_WaitOnRXNEFlagUntilTimeout>
 80031de:	4603      	mov	r3, r0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d001      	beq.n	80031e8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e139      	b.n	800345c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	691a      	ldr	r2, [r3, #16]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f2:	b2d2      	uxtb	r2, r2
 80031f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fa:	1c5a      	adds	r2, r3, #1
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003204:	3b01      	subs	r3, #1
 8003206:	b29a      	uxth	r2, r3
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003210:	b29b      	uxth	r3, r3
 8003212:	3b01      	subs	r3, #1
 8003214:	b29a      	uxth	r2, r3
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	855a      	strh	r2, [r3, #42]	; 0x2a
 800321a:	e10b      	b.n	8003434 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003220:	2b02      	cmp	r3, #2
 8003222:	d14e      	bne.n	80032c2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003226:	9300      	str	r3, [sp, #0]
 8003228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800322a:	2200      	movs	r2, #0
 800322c:	4906      	ldr	r1, [pc, #24]	; (8003248 <HAL_I2C_Mem_Read+0x22c>)
 800322e:	68f8      	ldr	r0, [r7, #12]
 8003230:	f000 fa98 	bl	8003764 <I2C_WaitOnFlagUntilTimeout>
 8003234:	4603      	mov	r3, r0
 8003236:	2b00      	cmp	r3, #0
 8003238:	d008      	beq.n	800324c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e10e      	b.n	800345c <HAL_I2C_Mem_Read+0x440>
 800323e:	bf00      	nop
 8003240:	00100002 	.word	0x00100002
 8003244:	ffff0000 	.word	0xffff0000
 8003248:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800325a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	691a      	ldr	r2, [r3, #16]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003266:	b2d2      	uxtb	r2, r2
 8003268:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326e:	1c5a      	adds	r2, r3, #1
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003278:	3b01      	subs	r3, #1
 800327a:	b29a      	uxth	r2, r3
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003284:	b29b      	uxth	r3, r3
 8003286:	3b01      	subs	r3, #1
 8003288:	b29a      	uxth	r2, r3
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	691a      	ldr	r2, [r3, #16]
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003298:	b2d2      	uxtb	r2, r2
 800329a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a0:	1c5a      	adds	r2, r3, #1
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032aa:	3b01      	subs	r3, #1
 80032ac:	b29a      	uxth	r2, r3
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	3b01      	subs	r3, #1
 80032ba:	b29a      	uxth	r2, r3
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	855a      	strh	r2, [r3, #42]	; 0x2a
 80032c0:	e0b8      	b.n	8003434 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80032c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c4:	9300      	str	r3, [sp, #0]
 80032c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032c8:	2200      	movs	r2, #0
 80032ca:	4966      	ldr	r1, [pc, #408]	; (8003464 <HAL_I2C_Mem_Read+0x448>)
 80032cc:	68f8      	ldr	r0, [r7, #12]
 80032ce:	f000 fa49 	bl	8003764 <I2C_WaitOnFlagUntilTimeout>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d001      	beq.n	80032dc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e0bf      	b.n	800345c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	691a      	ldr	r2, [r3, #16]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f6:	b2d2      	uxtb	r2, r2
 80032f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fe:	1c5a      	adds	r2, r3, #1
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003308:	3b01      	subs	r3, #1
 800330a:	b29a      	uxth	r2, r3
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003314:	b29b      	uxth	r3, r3
 8003316:	3b01      	subs	r3, #1
 8003318:	b29a      	uxth	r2, r3
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800331e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003320:	9300      	str	r3, [sp, #0]
 8003322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003324:	2200      	movs	r2, #0
 8003326:	494f      	ldr	r1, [pc, #316]	; (8003464 <HAL_I2C_Mem_Read+0x448>)
 8003328:	68f8      	ldr	r0, [r7, #12]
 800332a:	f000 fa1b 	bl	8003764 <I2C_WaitOnFlagUntilTimeout>
 800332e:	4603      	mov	r3, r0
 8003330:	2b00      	cmp	r3, #0
 8003332:	d001      	beq.n	8003338 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e091      	b.n	800345c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003346:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	691a      	ldr	r2, [r3, #16]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003352:	b2d2      	uxtb	r2, r2
 8003354:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800335a:	1c5a      	adds	r2, r3, #1
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003364:	3b01      	subs	r3, #1
 8003366:	b29a      	uxth	r2, r3
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003370:	b29b      	uxth	r3, r3
 8003372:	3b01      	subs	r3, #1
 8003374:	b29a      	uxth	r2, r3
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	691a      	ldr	r2, [r3, #16]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003384:	b2d2      	uxtb	r2, r2
 8003386:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338c:	1c5a      	adds	r2, r3, #1
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003396:	3b01      	subs	r3, #1
 8003398:	b29a      	uxth	r2, r3
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033a2:	b29b      	uxth	r3, r3
 80033a4:	3b01      	subs	r3, #1
 80033a6:	b29a      	uxth	r2, r3
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80033ac:	e042      	b.n	8003434 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033b0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80033b2:	68f8      	ldr	r0, [r7, #12]
 80033b4:	f000 fb2e 	bl	8003a14 <I2C_WaitOnRXNEFlagUntilTimeout>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d001      	beq.n	80033c2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e04c      	b.n	800345c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	691a      	ldr	r2, [r3, #16]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033cc:	b2d2      	uxtb	r2, r2
 80033ce:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d4:	1c5a      	adds	r2, r3, #1
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033de:	3b01      	subs	r3, #1
 80033e0:	b29a      	uxth	r2, r3
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033ea:	b29b      	uxth	r3, r3
 80033ec:	3b01      	subs	r3, #1
 80033ee:	b29a      	uxth	r2, r3
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	695b      	ldr	r3, [r3, #20]
 80033fa:	f003 0304 	and.w	r3, r3, #4
 80033fe:	2b04      	cmp	r3, #4
 8003400:	d118      	bne.n	8003434 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	691a      	ldr	r2, [r3, #16]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340c:	b2d2      	uxtb	r2, r2
 800340e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003414:	1c5a      	adds	r2, r3, #1
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800341e:	3b01      	subs	r3, #1
 8003420:	b29a      	uxth	r2, r3
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800342a:	b29b      	uxth	r3, r3
 800342c:	3b01      	subs	r3, #1
 800342e:	b29a      	uxth	r2, r3
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003438:	2b00      	cmp	r3, #0
 800343a:	f47f aec2 	bne.w	80031c2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2220      	movs	r2, #32
 8003442:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2200      	movs	r2, #0
 800344a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2200      	movs	r2, #0
 8003452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003456:	2300      	movs	r3, #0
 8003458:	e000      	b.n	800345c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800345a:	2302      	movs	r3, #2
  }
}
 800345c:	4618      	mov	r0, r3
 800345e:	3728      	adds	r7, #40	; 0x28
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}
 8003464:	00010004 	.word	0x00010004

08003468 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b088      	sub	sp, #32
 800346c:	af02      	add	r7, sp, #8
 800346e:	60f8      	str	r0, [r7, #12]
 8003470:	4608      	mov	r0, r1
 8003472:	4611      	mov	r1, r2
 8003474:	461a      	mov	r2, r3
 8003476:	4603      	mov	r3, r0
 8003478:	817b      	strh	r3, [r7, #10]
 800347a:	460b      	mov	r3, r1
 800347c:	813b      	strh	r3, [r7, #8]
 800347e:	4613      	mov	r3, r2
 8003480:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003490:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003494:	9300      	str	r3, [sp, #0]
 8003496:	6a3b      	ldr	r3, [r7, #32]
 8003498:	2200      	movs	r2, #0
 800349a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800349e:	68f8      	ldr	r0, [r7, #12]
 80034a0:	f000 f960 	bl	8003764 <I2C_WaitOnFlagUntilTimeout>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d00d      	beq.n	80034c6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034b8:	d103      	bne.n	80034c2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034c0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e05f      	b.n	8003586 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80034c6:	897b      	ldrh	r3, [r7, #10]
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	461a      	mov	r2, r3
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80034d4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80034d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d8:	6a3a      	ldr	r2, [r7, #32]
 80034da:	492d      	ldr	r1, [pc, #180]	; (8003590 <I2C_RequestMemoryWrite+0x128>)
 80034dc:	68f8      	ldr	r0, [r7, #12]
 80034de:	f000 f998 	bl	8003812 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034e2:	4603      	mov	r3, r0
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d001      	beq.n	80034ec <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e04c      	b.n	8003586 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034ec:	2300      	movs	r3, #0
 80034ee:	617b      	str	r3, [r7, #20]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	695b      	ldr	r3, [r3, #20]
 80034f6:	617b      	str	r3, [r7, #20]
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	699b      	ldr	r3, [r3, #24]
 80034fe:	617b      	str	r3, [r7, #20]
 8003500:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003502:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003504:	6a39      	ldr	r1, [r7, #32]
 8003506:	68f8      	ldr	r0, [r7, #12]
 8003508:	f000 fa02 	bl	8003910 <I2C_WaitOnTXEFlagUntilTimeout>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	d00d      	beq.n	800352e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003516:	2b04      	cmp	r3, #4
 8003518:	d107      	bne.n	800352a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003528:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e02b      	b.n	8003586 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800352e:	88fb      	ldrh	r3, [r7, #6]
 8003530:	2b01      	cmp	r3, #1
 8003532:	d105      	bne.n	8003540 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003534:	893b      	ldrh	r3, [r7, #8]
 8003536:	b2da      	uxtb	r2, r3
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	611a      	str	r2, [r3, #16]
 800353e:	e021      	b.n	8003584 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003540:	893b      	ldrh	r3, [r7, #8]
 8003542:	0a1b      	lsrs	r3, r3, #8
 8003544:	b29b      	uxth	r3, r3
 8003546:	b2da      	uxtb	r2, r3
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800354e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003550:	6a39      	ldr	r1, [r7, #32]
 8003552:	68f8      	ldr	r0, [r7, #12]
 8003554:	f000 f9dc 	bl	8003910 <I2C_WaitOnTXEFlagUntilTimeout>
 8003558:	4603      	mov	r3, r0
 800355a:	2b00      	cmp	r3, #0
 800355c:	d00d      	beq.n	800357a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003562:	2b04      	cmp	r3, #4
 8003564:	d107      	bne.n	8003576 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003574:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e005      	b.n	8003586 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800357a:	893b      	ldrh	r3, [r7, #8]
 800357c:	b2da      	uxtb	r2, r3
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003584:	2300      	movs	r3, #0
}
 8003586:	4618      	mov	r0, r3
 8003588:	3718      	adds	r7, #24
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	00010002 	.word	0x00010002

08003594 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b088      	sub	sp, #32
 8003598:	af02      	add	r7, sp, #8
 800359a:	60f8      	str	r0, [r7, #12]
 800359c:	4608      	mov	r0, r1
 800359e:	4611      	mov	r1, r2
 80035a0:	461a      	mov	r2, r3
 80035a2:	4603      	mov	r3, r0
 80035a4:	817b      	strh	r3, [r7, #10]
 80035a6:	460b      	mov	r3, r1
 80035a8:	813b      	strh	r3, [r7, #8]
 80035aa:	4613      	mov	r3, r2
 80035ac:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80035bc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035cc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80035ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d0:	9300      	str	r3, [sp, #0]
 80035d2:	6a3b      	ldr	r3, [r7, #32]
 80035d4:	2200      	movs	r2, #0
 80035d6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80035da:	68f8      	ldr	r0, [r7, #12]
 80035dc:	f000 f8c2 	bl	8003764 <I2C_WaitOnFlagUntilTimeout>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d00d      	beq.n	8003602 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035f4:	d103      	bne.n	80035fe <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035fc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e0aa      	b.n	8003758 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003602:	897b      	ldrh	r3, [r7, #10]
 8003604:	b2db      	uxtb	r3, r3
 8003606:	461a      	mov	r2, r3
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003610:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003614:	6a3a      	ldr	r2, [r7, #32]
 8003616:	4952      	ldr	r1, [pc, #328]	; (8003760 <I2C_RequestMemoryRead+0x1cc>)
 8003618:	68f8      	ldr	r0, [r7, #12]
 800361a:	f000 f8fa 	bl	8003812 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800361e:	4603      	mov	r3, r0
 8003620:	2b00      	cmp	r3, #0
 8003622:	d001      	beq.n	8003628 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e097      	b.n	8003758 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003628:	2300      	movs	r3, #0
 800362a:	617b      	str	r3, [r7, #20]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	695b      	ldr	r3, [r3, #20]
 8003632:	617b      	str	r3, [r7, #20]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	699b      	ldr	r3, [r3, #24]
 800363a:	617b      	str	r3, [r7, #20]
 800363c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800363e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003640:	6a39      	ldr	r1, [r7, #32]
 8003642:	68f8      	ldr	r0, [r7, #12]
 8003644:	f000 f964 	bl	8003910 <I2C_WaitOnTXEFlagUntilTimeout>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d00d      	beq.n	800366a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003652:	2b04      	cmp	r3, #4
 8003654:	d107      	bne.n	8003666 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003664:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e076      	b.n	8003758 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800366a:	88fb      	ldrh	r3, [r7, #6]
 800366c:	2b01      	cmp	r3, #1
 800366e:	d105      	bne.n	800367c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003670:	893b      	ldrh	r3, [r7, #8]
 8003672:	b2da      	uxtb	r2, r3
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	611a      	str	r2, [r3, #16]
 800367a:	e021      	b.n	80036c0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800367c:	893b      	ldrh	r3, [r7, #8]
 800367e:	0a1b      	lsrs	r3, r3, #8
 8003680:	b29b      	uxth	r3, r3
 8003682:	b2da      	uxtb	r2, r3
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800368a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800368c:	6a39      	ldr	r1, [r7, #32]
 800368e:	68f8      	ldr	r0, [r7, #12]
 8003690:	f000 f93e 	bl	8003910 <I2C_WaitOnTXEFlagUntilTimeout>
 8003694:	4603      	mov	r3, r0
 8003696:	2b00      	cmp	r3, #0
 8003698:	d00d      	beq.n	80036b6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369e:	2b04      	cmp	r3, #4
 80036a0:	d107      	bne.n	80036b2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036b0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e050      	b.n	8003758 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80036b6:	893b      	ldrh	r3, [r7, #8]
 80036b8:	b2da      	uxtb	r2, r3
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036c2:	6a39      	ldr	r1, [r7, #32]
 80036c4:	68f8      	ldr	r0, [r7, #12]
 80036c6:	f000 f923 	bl	8003910 <I2C_WaitOnTXEFlagUntilTimeout>
 80036ca:	4603      	mov	r3, r0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d00d      	beq.n	80036ec <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d4:	2b04      	cmp	r3, #4
 80036d6:	d107      	bne.n	80036e8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036e6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e035      	b.n	8003758 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036fa:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80036fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fe:	9300      	str	r3, [sp, #0]
 8003700:	6a3b      	ldr	r3, [r7, #32]
 8003702:	2200      	movs	r2, #0
 8003704:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003708:	68f8      	ldr	r0, [r7, #12]
 800370a:	f000 f82b 	bl	8003764 <I2C_WaitOnFlagUntilTimeout>
 800370e:	4603      	mov	r3, r0
 8003710:	2b00      	cmp	r3, #0
 8003712:	d00d      	beq.n	8003730 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800371e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003722:	d103      	bne.n	800372c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f44f 7200 	mov.w	r2, #512	; 0x200
 800372a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800372c:	2303      	movs	r3, #3
 800372e:	e013      	b.n	8003758 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003730:	897b      	ldrh	r3, [r7, #10]
 8003732:	b2db      	uxtb	r3, r3
 8003734:	f043 0301 	orr.w	r3, r3, #1
 8003738:	b2da      	uxtb	r2, r3
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003742:	6a3a      	ldr	r2, [r7, #32]
 8003744:	4906      	ldr	r1, [pc, #24]	; (8003760 <I2C_RequestMemoryRead+0x1cc>)
 8003746:	68f8      	ldr	r0, [r7, #12]
 8003748:	f000 f863 	bl	8003812 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800374c:	4603      	mov	r3, r0
 800374e:	2b00      	cmp	r3, #0
 8003750:	d001      	beq.n	8003756 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e000      	b.n	8003758 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003756:	2300      	movs	r3, #0
}
 8003758:	4618      	mov	r0, r3
 800375a:	3718      	adds	r7, #24
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}
 8003760:	00010002 	.word	0x00010002

08003764 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b084      	sub	sp, #16
 8003768:	af00      	add	r7, sp, #0
 800376a:	60f8      	str	r0, [r7, #12]
 800376c:	60b9      	str	r1, [r7, #8]
 800376e:	603b      	str	r3, [r7, #0]
 8003770:	4613      	mov	r3, r2
 8003772:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003774:	e025      	b.n	80037c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800377c:	d021      	beq.n	80037c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800377e:	f7fe ff81 	bl	8002684 <HAL_GetTick>
 8003782:	4602      	mov	r2, r0
 8003784:	69bb      	ldr	r3, [r7, #24]
 8003786:	1ad3      	subs	r3, r2, r3
 8003788:	683a      	ldr	r2, [r7, #0]
 800378a:	429a      	cmp	r2, r3
 800378c:	d302      	bcc.n	8003794 <I2C_WaitOnFlagUntilTimeout+0x30>
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d116      	bne.n	80037c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2200      	movs	r2, #0
 8003798:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2220      	movs	r2, #32
 800379e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2200      	movs	r2, #0
 80037a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ae:	f043 0220 	orr.w	r2, r3, #32
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e023      	b.n	800380a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	0c1b      	lsrs	r3, r3, #16
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d10d      	bne.n	80037e8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	695b      	ldr	r3, [r3, #20]
 80037d2:	43da      	mvns	r2, r3
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	4013      	ands	r3, r2
 80037d8:	b29b      	uxth	r3, r3
 80037da:	2b00      	cmp	r3, #0
 80037dc:	bf0c      	ite	eq
 80037de:	2301      	moveq	r3, #1
 80037e0:	2300      	movne	r3, #0
 80037e2:	b2db      	uxtb	r3, r3
 80037e4:	461a      	mov	r2, r3
 80037e6:	e00c      	b.n	8003802 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	699b      	ldr	r3, [r3, #24]
 80037ee:	43da      	mvns	r2, r3
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	4013      	ands	r3, r2
 80037f4:	b29b      	uxth	r3, r3
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	bf0c      	ite	eq
 80037fa:	2301      	moveq	r3, #1
 80037fc:	2300      	movne	r3, #0
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	461a      	mov	r2, r3
 8003802:	79fb      	ldrb	r3, [r7, #7]
 8003804:	429a      	cmp	r2, r3
 8003806:	d0b6      	beq.n	8003776 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003808:	2300      	movs	r3, #0
}
 800380a:	4618      	mov	r0, r3
 800380c:	3710      	adds	r7, #16
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}

08003812 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003812:	b580      	push	{r7, lr}
 8003814:	b084      	sub	sp, #16
 8003816:	af00      	add	r7, sp, #0
 8003818:	60f8      	str	r0, [r7, #12]
 800381a:	60b9      	str	r1, [r7, #8]
 800381c:	607a      	str	r2, [r7, #4]
 800381e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003820:	e051      	b.n	80038c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	695b      	ldr	r3, [r3, #20]
 8003828:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800382c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003830:	d123      	bne.n	800387a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003840:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800384a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2200      	movs	r2, #0
 8003850:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2220      	movs	r2, #32
 8003856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2200      	movs	r2, #0
 800385e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003866:	f043 0204 	orr.w	r2, r3, #4
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2200      	movs	r2, #0
 8003872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e046      	b.n	8003908 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003880:	d021      	beq.n	80038c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003882:	f7fe feff 	bl	8002684 <HAL_GetTick>
 8003886:	4602      	mov	r2, r0
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	1ad3      	subs	r3, r2, r3
 800388c:	687a      	ldr	r2, [r7, #4]
 800388e:	429a      	cmp	r2, r3
 8003890:	d302      	bcc.n	8003898 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d116      	bne.n	80038c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2200      	movs	r2, #0
 800389c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2220      	movs	r2, #32
 80038a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2200      	movs	r2, #0
 80038aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b2:	f043 0220 	orr.w	r2, r3, #32
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2200      	movs	r2, #0
 80038be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e020      	b.n	8003908 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	0c1b      	lsrs	r3, r3, #16
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d10c      	bne.n	80038ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	695b      	ldr	r3, [r3, #20]
 80038d6:	43da      	mvns	r2, r3
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	4013      	ands	r3, r2
 80038dc:	b29b      	uxth	r3, r3
 80038de:	2b00      	cmp	r3, #0
 80038e0:	bf14      	ite	ne
 80038e2:	2301      	movne	r3, #1
 80038e4:	2300      	moveq	r3, #0
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	e00b      	b.n	8003902 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	699b      	ldr	r3, [r3, #24]
 80038f0:	43da      	mvns	r2, r3
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	4013      	ands	r3, r2
 80038f6:	b29b      	uxth	r3, r3
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	bf14      	ite	ne
 80038fc:	2301      	movne	r3, #1
 80038fe:	2300      	moveq	r3, #0
 8003900:	b2db      	uxtb	r3, r3
 8003902:	2b00      	cmp	r3, #0
 8003904:	d18d      	bne.n	8003822 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003906:	2300      	movs	r3, #0
}
 8003908:	4618      	mov	r0, r3
 800390a:	3710      	adds	r7, #16
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}

08003910 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b084      	sub	sp, #16
 8003914:	af00      	add	r7, sp, #0
 8003916:	60f8      	str	r0, [r7, #12]
 8003918:	60b9      	str	r1, [r7, #8]
 800391a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800391c:	e02d      	b.n	800397a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800391e:	68f8      	ldr	r0, [r7, #12]
 8003920:	f000 f8ce 	bl	8003ac0 <I2C_IsAcknowledgeFailed>
 8003924:	4603      	mov	r3, r0
 8003926:	2b00      	cmp	r3, #0
 8003928:	d001      	beq.n	800392e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e02d      	b.n	800398a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003934:	d021      	beq.n	800397a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003936:	f7fe fea5 	bl	8002684 <HAL_GetTick>
 800393a:	4602      	mov	r2, r0
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	1ad3      	subs	r3, r2, r3
 8003940:	68ba      	ldr	r2, [r7, #8]
 8003942:	429a      	cmp	r2, r3
 8003944:	d302      	bcc.n	800394c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d116      	bne.n	800397a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2200      	movs	r2, #0
 8003950:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2220      	movs	r2, #32
 8003956:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2200      	movs	r2, #0
 800395e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003966:	f043 0220 	orr.w	r2, r3, #32
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2200      	movs	r2, #0
 8003972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e007      	b.n	800398a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	695b      	ldr	r3, [r3, #20]
 8003980:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003984:	2b80      	cmp	r3, #128	; 0x80
 8003986:	d1ca      	bne.n	800391e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003988:	2300      	movs	r3, #0
}
 800398a:	4618      	mov	r0, r3
 800398c:	3710      	adds	r7, #16
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}

08003992 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003992:	b580      	push	{r7, lr}
 8003994:	b084      	sub	sp, #16
 8003996:	af00      	add	r7, sp, #0
 8003998:	60f8      	str	r0, [r7, #12]
 800399a:	60b9      	str	r1, [r7, #8]
 800399c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800399e:	e02d      	b.n	80039fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80039a0:	68f8      	ldr	r0, [r7, #12]
 80039a2:	f000 f88d 	bl	8003ac0 <I2C_IsAcknowledgeFailed>
 80039a6:	4603      	mov	r3, r0
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d001      	beq.n	80039b0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e02d      	b.n	8003a0c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039b6:	d021      	beq.n	80039fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039b8:	f7fe fe64 	bl	8002684 <HAL_GetTick>
 80039bc:	4602      	mov	r2, r0
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	68ba      	ldr	r2, [r7, #8]
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d302      	bcc.n	80039ce <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d116      	bne.n	80039fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2200      	movs	r2, #0
 80039d2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2220      	movs	r2, #32
 80039d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2200      	movs	r2, #0
 80039e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e8:	f043 0220 	orr.w	r2, r3, #32
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2200      	movs	r2, #0
 80039f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e007      	b.n	8003a0c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	695b      	ldr	r3, [r3, #20]
 8003a02:	f003 0304 	and.w	r3, r3, #4
 8003a06:	2b04      	cmp	r3, #4
 8003a08:	d1ca      	bne.n	80039a0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a0a:	2300      	movs	r3, #0
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3710      	adds	r7, #16
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}

08003a14 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b084      	sub	sp, #16
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	60f8      	str	r0, [r7, #12]
 8003a1c:	60b9      	str	r1, [r7, #8]
 8003a1e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003a20:	e042      	b.n	8003aa8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	695b      	ldr	r3, [r3, #20]
 8003a28:	f003 0310 	and.w	r3, r3, #16
 8003a2c:	2b10      	cmp	r3, #16
 8003a2e:	d119      	bne.n	8003a64 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f06f 0210 	mvn.w	r2, #16
 8003a38:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2220      	movs	r2, #32
 8003a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	e029      	b.n	8003ab8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a64:	f7fe fe0e 	bl	8002684 <HAL_GetTick>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	68ba      	ldr	r2, [r7, #8]
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d302      	bcc.n	8003a7a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d116      	bne.n	8003aa8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2220      	movs	r2, #32
 8003a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a94:	f043 0220 	orr.w	r2, r3, #32
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e007      	b.n	8003ab8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	695b      	ldr	r3, [r3, #20]
 8003aae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ab2:	2b40      	cmp	r3, #64	; 0x40
 8003ab4:	d1b5      	bne.n	8003a22 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003ab6:	2300      	movs	r3, #0
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3710      	adds	r7, #16
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}

08003ac0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b083      	sub	sp, #12
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	695b      	ldr	r3, [r3, #20]
 8003ace:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ad2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ad6:	d11b      	bne.n	8003b10 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003ae0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2220      	movs	r2, #32
 8003aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2200      	movs	r2, #0
 8003af4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afc:	f043 0204 	orr.w	r2, r3, #4
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2200      	movs	r2, #0
 8003b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e000      	b.n	8003b12 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003b10:	2300      	movs	r3, #0
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	370c      	adds	r7, #12
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr
	...

08003b20 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b086      	sub	sp, #24
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d101      	bne.n	8003b32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e267      	b.n	8004002 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 0301 	and.w	r3, r3, #1
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d075      	beq.n	8003c2a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b3e:	4b88      	ldr	r3, [pc, #544]	; (8003d60 <HAL_RCC_OscConfig+0x240>)
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	f003 030c 	and.w	r3, r3, #12
 8003b46:	2b04      	cmp	r3, #4
 8003b48:	d00c      	beq.n	8003b64 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b4a:	4b85      	ldr	r3, [pc, #532]	; (8003d60 <HAL_RCC_OscConfig+0x240>)
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b52:	2b08      	cmp	r3, #8
 8003b54:	d112      	bne.n	8003b7c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b56:	4b82      	ldr	r3, [pc, #520]	; (8003d60 <HAL_RCC_OscConfig+0x240>)
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b62:	d10b      	bne.n	8003b7c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b64:	4b7e      	ldr	r3, [pc, #504]	; (8003d60 <HAL_RCC_OscConfig+0x240>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d05b      	beq.n	8003c28 <HAL_RCC_OscConfig+0x108>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d157      	bne.n	8003c28 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e242      	b.n	8004002 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b84:	d106      	bne.n	8003b94 <HAL_RCC_OscConfig+0x74>
 8003b86:	4b76      	ldr	r3, [pc, #472]	; (8003d60 <HAL_RCC_OscConfig+0x240>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a75      	ldr	r2, [pc, #468]	; (8003d60 <HAL_RCC_OscConfig+0x240>)
 8003b8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b90:	6013      	str	r3, [r2, #0]
 8003b92:	e01d      	b.n	8003bd0 <HAL_RCC_OscConfig+0xb0>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b9c:	d10c      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x98>
 8003b9e:	4b70      	ldr	r3, [pc, #448]	; (8003d60 <HAL_RCC_OscConfig+0x240>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a6f      	ldr	r2, [pc, #444]	; (8003d60 <HAL_RCC_OscConfig+0x240>)
 8003ba4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ba8:	6013      	str	r3, [r2, #0]
 8003baa:	4b6d      	ldr	r3, [pc, #436]	; (8003d60 <HAL_RCC_OscConfig+0x240>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a6c      	ldr	r2, [pc, #432]	; (8003d60 <HAL_RCC_OscConfig+0x240>)
 8003bb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bb4:	6013      	str	r3, [r2, #0]
 8003bb6:	e00b      	b.n	8003bd0 <HAL_RCC_OscConfig+0xb0>
 8003bb8:	4b69      	ldr	r3, [pc, #420]	; (8003d60 <HAL_RCC_OscConfig+0x240>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a68      	ldr	r2, [pc, #416]	; (8003d60 <HAL_RCC_OscConfig+0x240>)
 8003bbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bc2:	6013      	str	r3, [r2, #0]
 8003bc4:	4b66      	ldr	r3, [pc, #408]	; (8003d60 <HAL_RCC_OscConfig+0x240>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a65      	ldr	r2, [pc, #404]	; (8003d60 <HAL_RCC_OscConfig+0x240>)
 8003bca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d013      	beq.n	8003c00 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bd8:	f7fe fd54 	bl	8002684 <HAL_GetTick>
 8003bdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bde:	e008      	b.n	8003bf2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003be0:	f7fe fd50 	bl	8002684 <HAL_GetTick>
 8003be4:	4602      	mov	r2, r0
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	1ad3      	subs	r3, r2, r3
 8003bea:	2b64      	cmp	r3, #100	; 0x64
 8003bec:	d901      	bls.n	8003bf2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003bee:	2303      	movs	r3, #3
 8003bf0:	e207      	b.n	8004002 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bf2:	4b5b      	ldr	r3, [pc, #364]	; (8003d60 <HAL_RCC_OscConfig+0x240>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d0f0      	beq.n	8003be0 <HAL_RCC_OscConfig+0xc0>
 8003bfe:	e014      	b.n	8003c2a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c00:	f7fe fd40 	bl	8002684 <HAL_GetTick>
 8003c04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c06:	e008      	b.n	8003c1a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c08:	f7fe fd3c 	bl	8002684 <HAL_GetTick>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	2b64      	cmp	r3, #100	; 0x64
 8003c14:	d901      	bls.n	8003c1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	e1f3      	b.n	8004002 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c1a:	4b51      	ldr	r3, [pc, #324]	; (8003d60 <HAL_RCC_OscConfig+0x240>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d1f0      	bne.n	8003c08 <HAL_RCC_OscConfig+0xe8>
 8003c26:	e000      	b.n	8003c2a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 0302 	and.w	r3, r3, #2
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d063      	beq.n	8003cfe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c36:	4b4a      	ldr	r3, [pc, #296]	; (8003d60 <HAL_RCC_OscConfig+0x240>)
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	f003 030c 	and.w	r3, r3, #12
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d00b      	beq.n	8003c5a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c42:	4b47      	ldr	r3, [pc, #284]	; (8003d60 <HAL_RCC_OscConfig+0x240>)
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c4a:	2b08      	cmp	r3, #8
 8003c4c:	d11c      	bne.n	8003c88 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c4e:	4b44      	ldr	r3, [pc, #272]	; (8003d60 <HAL_RCC_OscConfig+0x240>)
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d116      	bne.n	8003c88 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c5a:	4b41      	ldr	r3, [pc, #260]	; (8003d60 <HAL_RCC_OscConfig+0x240>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 0302 	and.w	r3, r3, #2
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d005      	beq.n	8003c72 <HAL_RCC_OscConfig+0x152>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	68db      	ldr	r3, [r3, #12]
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d001      	beq.n	8003c72 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e1c7      	b.n	8004002 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c72:	4b3b      	ldr	r3, [pc, #236]	; (8003d60 <HAL_RCC_OscConfig+0x240>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	691b      	ldr	r3, [r3, #16]
 8003c7e:	00db      	lsls	r3, r3, #3
 8003c80:	4937      	ldr	r1, [pc, #220]	; (8003d60 <HAL_RCC_OscConfig+0x240>)
 8003c82:	4313      	orrs	r3, r2
 8003c84:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c86:	e03a      	b.n	8003cfe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	68db      	ldr	r3, [r3, #12]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d020      	beq.n	8003cd2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c90:	4b34      	ldr	r3, [pc, #208]	; (8003d64 <HAL_RCC_OscConfig+0x244>)
 8003c92:	2201      	movs	r2, #1
 8003c94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c96:	f7fe fcf5 	bl	8002684 <HAL_GetTick>
 8003c9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c9c:	e008      	b.n	8003cb0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c9e:	f7fe fcf1 	bl	8002684 <HAL_GetTick>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	1ad3      	subs	r3, r2, r3
 8003ca8:	2b02      	cmp	r3, #2
 8003caa:	d901      	bls.n	8003cb0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003cac:	2303      	movs	r3, #3
 8003cae:	e1a8      	b.n	8004002 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cb0:	4b2b      	ldr	r3, [pc, #172]	; (8003d60 <HAL_RCC_OscConfig+0x240>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 0302 	and.w	r3, r3, #2
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d0f0      	beq.n	8003c9e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cbc:	4b28      	ldr	r3, [pc, #160]	; (8003d60 <HAL_RCC_OscConfig+0x240>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	691b      	ldr	r3, [r3, #16]
 8003cc8:	00db      	lsls	r3, r3, #3
 8003cca:	4925      	ldr	r1, [pc, #148]	; (8003d60 <HAL_RCC_OscConfig+0x240>)
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	600b      	str	r3, [r1, #0]
 8003cd0:	e015      	b.n	8003cfe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cd2:	4b24      	ldr	r3, [pc, #144]	; (8003d64 <HAL_RCC_OscConfig+0x244>)
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cd8:	f7fe fcd4 	bl	8002684 <HAL_GetTick>
 8003cdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cde:	e008      	b.n	8003cf2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ce0:	f7fe fcd0 	bl	8002684 <HAL_GetTick>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	2b02      	cmp	r3, #2
 8003cec:	d901      	bls.n	8003cf2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	e187      	b.n	8004002 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cf2:	4b1b      	ldr	r3, [pc, #108]	; (8003d60 <HAL_RCC_OscConfig+0x240>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 0302 	and.w	r3, r3, #2
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d1f0      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 0308 	and.w	r3, r3, #8
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d036      	beq.n	8003d78 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	695b      	ldr	r3, [r3, #20]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d016      	beq.n	8003d40 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d12:	4b15      	ldr	r3, [pc, #84]	; (8003d68 <HAL_RCC_OscConfig+0x248>)
 8003d14:	2201      	movs	r2, #1
 8003d16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d18:	f7fe fcb4 	bl	8002684 <HAL_GetTick>
 8003d1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d1e:	e008      	b.n	8003d32 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d20:	f7fe fcb0 	bl	8002684 <HAL_GetTick>
 8003d24:	4602      	mov	r2, r0
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	1ad3      	subs	r3, r2, r3
 8003d2a:	2b02      	cmp	r3, #2
 8003d2c:	d901      	bls.n	8003d32 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003d2e:	2303      	movs	r3, #3
 8003d30:	e167      	b.n	8004002 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d32:	4b0b      	ldr	r3, [pc, #44]	; (8003d60 <HAL_RCC_OscConfig+0x240>)
 8003d34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d36:	f003 0302 	and.w	r3, r3, #2
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d0f0      	beq.n	8003d20 <HAL_RCC_OscConfig+0x200>
 8003d3e:	e01b      	b.n	8003d78 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d40:	4b09      	ldr	r3, [pc, #36]	; (8003d68 <HAL_RCC_OscConfig+0x248>)
 8003d42:	2200      	movs	r2, #0
 8003d44:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d46:	f7fe fc9d 	bl	8002684 <HAL_GetTick>
 8003d4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d4c:	e00e      	b.n	8003d6c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d4e:	f7fe fc99 	bl	8002684 <HAL_GetTick>
 8003d52:	4602      	mov	r2, r0
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	1ad3      	subs	r3, r2, r3
 8003d58:	2b02      	cmp	r3, #2
 8003d5a:	d907      	bls.n	8003d6c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003d5c:	2303      	movs	r3, #3
 8003d5e:	e150      	b.n	8004002 <HAL_RCC_OscConfig+0x4e2>
 8003d60:	40023800 	.word	0x40023800
 8003d64:	42470000 	.word	0x42470000
 8003d68:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d6c:	4b88      	ldr	r3, [pc, #544]	; (8003f90 <HAL_RCC_OscConfig+0x470>)
 8003d6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d70:	f003 0302 	and.w	r3, r3, #2
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d1ea      	bne.n	8003d4e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 0304 	and.w	r3, r3, #4
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	f000 8097 	beq.w	8003eb4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d86:	2300      	movs	r3, #0
 8003d88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d8a:	4b81      	ldr	r3, [pc, #516]	; (8003f90 <HAL_RCC_OscConfig+0x470>)
 8003d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d10f      	bne.n	8003db6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d96:	2300      	movs	r3, #0
 8003d98:	60bb      	str	r3, [r7, #8]
 8003d9a:	4b7d      	ldr	r3, [pc, #500]	; (8003f90 <HAL_RCC_OscConfig+0x470>)
 8003d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9e:	4a7c      	ldr	r2, [pc, #496]	; (8003f90 <HAL_RCC_OscConfig+0x470>)
 8003da0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003da4:	6413      	str	r3, [r2, #64]	; 0x40
 8003da6:	4b7a      	ldr	r3, [pc, #488]	; (8003f90 <HAL_RCC_OscConfig+0x470>)
 8003da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003daa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dae:	60bb      	str	r3, [r7, #8]
 8003db0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003db2:	2301      	movs	r3, #1
 8003db4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003db6:	4b77      	ldr	r3, [pc, #476]	; (8003f94 <HAL_RCC_OscConfig+0x474>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d118      	bne.n	8003df4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003dc2:	4b74      	ldr	r3, [pc, #464]	; (8003f94 <HAL_RCC_OscConfig+0x474>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a73      	ldr	r2, [pc, #460]	; (8003f94 <HAL_RCC_OscConfig+0x474>)
 8003dc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dcc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dce:	f7fe fc59 	bl	8002684 <HAL_GetTick>
 8003dd2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dd4:	e008      	b.n	8003de8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dd6:	f7fe fc55 	bl	8002684 <HAL_GetTick>
 8003dda:	4602      	mov	r2, r0
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	1ad3      	subs	r3, r2, r3
 8003de0:	2b02      	cmp	r3, #2
 8003de2:	d901      	bls.n	8003de8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003de4:	2303      	movs	r3, #3
 8003de6:	e10c      	b.n	8004002 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003de8:	4b6a      	ldr	r3, [pc, #424]	; (8003f94 <HAL_RCC_OscConfig+0x474>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d0f0      	beq.n	8003dd6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d106      	bne.n	8003e0a <HAL_RCC_OscConfig+0x2ea>
 8003dfc:	4b64      	ldr	r3, [pc, #400]	; (8003f90 <HAL_RCC_OscConfig+0x470>)
 8003dfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e00:	4a63      	ldr	r2, [pc, #396]	; (8003f90 <HAL_RCC_OscConfig+0x470>)
 8003e02:	f043 0301 	orr.w	r3, r3, #1
 8003e06:	6713      	str	r3, [r2, #112]	; 0x70
 8003e08:	e01c      	b.n	8003e44 <HAL_RCC_OscConfig+0x324>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	2b05      	cmp	r3, #5
 8003e10:	d10c      	bne.n	8003e2c <HAL_RCC_OscConfig+0x30c>
 8003e12:	4b5f      	ldr	r3, [pc, #380]	; (8003f90 <HAL_RCC_OscConfig+0x470>)
 8003e14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e16:	4a5e      	ldr	r2, [pc, #376]	; (8003f90 <HAL_RCC_OscConfig+0x470>)
 8003e18:	f043 0304 	orr.w	r3, r3, #4
 8003e1c:	6713      	str	r3, [r2, #112]	; 0x70
 8003e1e:	4b5c      	ldr	r3, [pc, #368]	; (8003f90 <HAL_RCC_OscConfig+0x470>)
 8003e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e22:	4a5b      	ldr	r2, [pc, #364]	; (8003f90 <HAL_RCC_OscConfig+0x470>)
 8003e24:	f043 0301 	orr.w	r3, r3, #1
 8003e28:	6713      	str	r3, [r2, #112]	; 0x70
 8003e2a:	e00b      	b.n	8003e44 <HAL_RCC_OscConfig+0x324>
 8003e2c:	4b58      	ldr	r3, [pc, #352]	; (8003f90 <HAL_RCC_OscConfig+0x470>)
 8003e2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e30:	4a57      	ldr	r2, [pc, #348]	; (8003f90 <HAL_RCC_OscConfig+0x470>)
 8003e32:	f023 0301 	bic.w	r3, r3, #1
 8003e36:	6713      	str	r3, [r2, #112]	; 0x70
 8003e38:	4b55      	ldr	r3, [pc, #340]	; (8003f90 <HAL_RCC_OscConfig+0x470>)
 8003e3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e3c:	4a54      	ldr	r2, [pc, #336]	; (8003f90 <HAL_RCC_OscConfig+0x470>)
 8003e3e:	f023 0304 	bic.w	r3, r3, #4
 8003e42:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d015      	beq.n	8003e78 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e4c:	f7fe fc1a 	bl	8002684 <HAL_GetTick>
 8003e50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e52:	e00a      	b.n	8003e6a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e54:	f7fe fc16 	bl	8002684 <HAL_GetTick>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d901      	bls.n	8003e6a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003e66:	2303      	movs	r3, #3
 8003e68:	e0cb      	b.n	8004002 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e6a:	4b49      	ldr	r3, [pc, #292]	; (8003f90 <HAL_RCC_OscConfig+0x470>)
 8003e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e6e:	f003 0302 	and.w	r3, r3, #2
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d0ee      	beq.n	8003e54 <HAL_RCC_OscConfig+0x334>
 8003e76:	e014      	b.n	8003ea2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e78:	f7fe fc04 	bl	8002684 <HAL_GetTick>
 8003e7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e7e:	e00a      	b.n	8003e96 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e80:	f7fe fc00 	bl	8002684 <HAL_GetTick>
 8003e84:	4602      	mov	r2, r0
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	1ad3      	subs	r3, r2, r3
 8003e8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d901      	bls.n	8003e96 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003e92:	2303      	movs	r3, #3
 8003e94:	e0b5      	b.n	8004002 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e96:	4b3e      	ldr	r3, [pc, #248]	; (8003f90 <HAL_RCC_OscConfig+0x470>)
 8003e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e9a:	f003 0302 	and.w	r3, r3, #2
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d1ee      	bne.n	8003e80 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ea2:	7dfb      	ldrb	r3, [r7, #23]
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d105      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ea8:	4b39      	ldr	r3, [pc, #228]	; (8003f90 <HAL_RCC_OscConfig+0x470>)
 8003eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eac:	4a38      	ldr	r2, [pc, #224]	; (8003f90 <HAL_RCC_OscConfig+0x470>)
 8003eae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003eb2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	699b      	ldr	r3, [r3, #24]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	f000 80a1 	beq.w	8004000 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ebe:	4b34      	ldr	r3, [pc, #208]	; (8003f90 <HAL_RCC_OscConfig+0x470>)
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	f003 030c 	and.w	r3, r3, #12
 8003ec6:	2b08      	cmp	r3, #8
 8003ec8:	d05c      	beq.n	8003f84 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	699b      	ldr	r3, [r3, #24]
 8003ece:	2b02      	cmp	r3, #2
 8003ed0:	d141      	bne.n	8003f56 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ed2:	4b31      	ldr	r3, [pc, #196]	; (8003f98 <HAL_RCC_OscConfig+0x478>)
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ed8:	f7fe fbd4 	bl	8002684 <HAL_GetTick>
 8003edc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ede:	e008      	b.n	8003ef2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ee0:	f7fe fbd0 	bl	8002684 <HAL_GetTick>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	1ad3      	subs	r3, r2, r3
 8003eea:	2b02      	cmp	r3, #2
 8003eec:	d901      	bls.n	8003ef2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003eee:	2303      	movs	r3, #3
 8003ef0:	e087      	b.n	8004002 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ef2:	4b27      	ldr	r3, [pc, #156]	; (8003f90 <HAL_RCC_OscConfig+0x470>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d1f0      	bne.n	8003ee0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	69da      	ldr	r2, [r3, #28]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6a1b      	ldr	r3, [r3, #32]
 8003f06:	431a      	orrs	r2, r3
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f0c:	019b      	lsls	r3, r3, #6
 8003f0e:	431a      	orrs	r2, r3
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f14:	085b      	lsrs	r3, r3, #1
 8003f16:	3b01      	subs	r3, #1
 8003f18:	041b      	lsls	r3, r3, #16
 8003f1a:	431a      	orrs	r2, r3
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f20:	061b      	lsls	r3, r3, #24
 8003f22:	491b      	ldr	r1, [pc, #108]	; (8003f90 <HAL_RCC_OscConfig+0x470>)
 8003f24:	4313      	orrs	r3, r2
 8003f26:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f28:	4b1b      	ldr	r3, [pc, #108]	; (8003f98 <HAL_RCC_OscConfig+0x478>)
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f2e:	f7fe fba9 	bl	8002684 <HAL_GetTick>
 8003f32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f34:	e008      	b.n	8003f48 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f36:	f7fe fba5 	bl	8002684 <HAL_GetTick>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	1ad3      	subs	r3, r2, r3
 8003f40:	2b02      	cmp	r3, #2
 8003f42:	d901      	bls.n	8003f48 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003f44:	2303      	movs	r3, #3
 8003f46:	e05c      	b.n	8004002 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f48:	4b11      	ldr	r3, [pc, #68]	; (8003f90 <HAL_RCC_OscConfig+0x470>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d0f0      	beq.n	8003f36 <HAL_RCC_OscConfig+0x416>
 8003f54:	e054      	b.n	8004000 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f56:	4b10      	ldr	r3, [pc, #64]	; (8003f98 <HAL_RCC_OscConfig+0x478>)
 8003f58:	2200      	movs	r2, #0
 8003f5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f5c:	f7fe fb92 	bl	8002684 <HAL_GetTick>
 8003f60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f62:	e008      	b.n	8003f76 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f64:	f7fe fb8e 	bl	8002684 <HAL_GetTick>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	2b02      	cmp	r3, #2
 8003f70:	d901      	bls.n	8003f76 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	e045      	b.n	8004002 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f76:	4b06      	ldr	r3, [pc, #24]	; (8003f90 <HAL_RCC_OscConfig+0x470>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d1f0      	bne.n	8003f64 <HAL_RCC_OscConfig+0x444>
 8003f82:	e03d      	b.n	8004000 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	699b      	ldr	r3, [r3, #24]
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d107      	bne.n	8003f9c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e038      	b.n	8004002 <HAL_RCC_OscConfig+0x4e2>
 8003f90:	40023800 	.word	0x40023800
 8003f94:	40007000 	.word	0x40007000
 8003f98:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003f9c:	4b1b      	ldr	r3, [pc, #108]	; (800400c <HAL_RCC_OscConfig+0x4ec>)
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	699b      	ldr	r3, [r3, #24]
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d028      	beq.n	8003ffc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d121      	bne.n	8003ffc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d11a      	bne.n	8003ffc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003fc6:	68fa      	ldr	r2, [r7, #12]
 8003fc8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003fcc:	4013      	ands	r3, r2
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003fd2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d111      	bne.n	8003ffc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fe2:	085b      	lsrs	r3, r3, #1
 8003fe4:	3b01      	subs	r3, #1
 8003fe6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d107      	bne.n	8003ffc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d001      	beq.n	8004000 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	e000      	b.n	8004002 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004000:	2300      	movs	r3, #0
}
 8004002:	4618      	mov	r0, r3
 8004004:	3718      	adds	r7, #24
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}
 800400a:	bf00      	nop
 800400c:	40023800 	.word	0x40023800

08004010 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b084      	sub	sp, #16
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
 8004018:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d101      	bne.n	8004024 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	e0cc      	b.n	80041be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004024:	4b68      	ldr	r3, [pc, #416]	; (80041c8 <HAL_RCC_ClockConfig+0x1b8>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f003 0307 	and.w	r3, r3, #7
 800402c:	683a      	ldr	r2, [r7, #0]
 800402e:	429a      	cmp	r2, r3
 8004030:	d90c      	bls.n	800404c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004032:	4b65      	ldr	r3, [pc, #404]	; (80041c8 <HAL_RCC_ClockConfig+0x1b8>)
 8004034:	683a      	ldr	r2, [r7, #0]
 8004036:	b2d2      	uxtb	r2, r2
 8004038:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800403a:	4b63      	ldr	r3, [pc, #396]	; (80041c8 <HAL_RCC_ClockConfig+0x1b8>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 0307 	and.w	r3, r3, #7
 8004042:	683a      	ldr	r2, [r7, #0]
 8004044:	429a      	cmp	r2, r3
 8004046:	d001      	beq.n	800404c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	e0b8      	b.n	80041be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 0302 	and.w	r3, r3, #2
 8004054:	2b00      	cmp	r3, #0
 8004056:	d020      	beq.n	800409a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 0304 	and.w	r3, r3, #4
 8004060:	2b00      	cmp	r3, #0
 8004062:	d005      	beq.n	8004070 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004064:	4b59      	ldr	r3, [pc, #356]	; (80041cc <HAL_RCC_ClockConfig+0x1bc>)
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	4a58      	ldr	r2, [pc, #352]	; (80041cc <HAL_RCC_ClockConfig+0x1bc>)
 800406a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800406e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 0308 	and.w	r3, r3, #8
 8004078:	2b00      	cmp	r3, #0
 800407a:	d005      	beq.n	8004088 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800407c:	4b53      	ldr	r3, [pc, #332]	; (80041cc <HAL_RCC_ClockConfig+0x1bc>)
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	4a52      	ldr	r2, [pc, #328]	; (80041cc <HAL_RCC_ClockConfig+0x1bc>)
 8004082:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004086:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004088:	4b50      	ldr	r3, [pc, #320]	; (80041cc <HAL_RCC_ClockConfig+0x1bc>)
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	494d      	ldr	r1, [pc, #308]	; (80041cc <HAL_RCC_ClockConfig+0x1bc>)
 8004096:	4313      	orrs	r3, r2
 8004098:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 0301 	and.w	r3, r3, #1
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d044      	beq.n	8004130 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d107      	bne.n	80040be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040ae:	4b47      	ldr	r3, [pc, #284]	; (80041cc <HAL_RCC_ClockConfig+0x1bc>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d119      	bne.n	80040ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e07f      	b.n	80041be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	2b02      	cmp	r3, #2
 80040c4:	d003      	beq.n	80040ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040ca:	2b03      	cmp	r3, #3
 80040cc:	d107      	bne.n	80040de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040ce:	4b3f      	ldr	r3, [pc, #252]	; (80041cc <HAL_RCC_ClockConfig+0x1bc>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d109      	bne.n	80040ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e06f      	b.n	80041be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040de:	4b3b      	ldr	r3, [pc, #236]	; (80041cc <HAL_RCC_ClockConfig+0x1bc>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 0302 	and.w	r3, r3, #2
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d101      	bne.n	80040ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	e067      	b.n	80041be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040ee:	4b37      	ldr	r3, [pc, #220]	; (80041cc <HAL_RCC_ClockConfig+0x1bc>)
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	f023 0203 	bic.w	r2, r3, #3
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	4934      	ldr	r1, [pc, #208]	; (80041cc <HAL_RCC_ClockConfig+0x1bc>)
 80040fc:	4313      	orrs	r3, r2
 80040fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004100:	f7fe fac0 	bl	8002684 <HAL_GetTick>
 8004104:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004106:	e00a      	b.n	800411e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004108:	f7fe fabc 	bl	8002684 <HAL_GetTick>
 800410c:	4602      	mov	r2, r0
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	f241 3288 	movw	r2, #5000	; 0x1388
 8004116:	4293      	cmp	r3, r2
 8004118:	d901      	bls.n	800411e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800411a:	2303      	movs	r3, #3
 800411c:	e04f      	b.n	80041be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800411e:	4b2b      	ldr	r3, [pc, #172]	; (80041cc <HAL_RCC_ClockConfig+0x1bc>)
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	f003 020c 	and.w	r2, r3, #12
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	009b      	lsls	r3, r3, #2
 800412c:	429a      	cmp	r2, r3
 800412e:	d1eb      	bne.n	8004108 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004130:	4b25      	ldr	r3, [pc, #148]	; (80041c8 <HAL_RCC_ClockConfig+0x1b8>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 0307 	and.w	r3, r3, #7
 8004138:	683a      	ldr	r2, [r7, #0]
 800413a:	429a      	cmp	r2, r3
 800413c:	d20c      	bcs.n	8004158 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800413e:	4b22      	ldr	r3, [pc, #136]	; (80041c8 <HAL_RCC_ClockConfig+0x1b8>)
 8004140:	683a      	ldr	r2, [r7, #0]
 8004142:	b2d2      	uxtb	r2, r2
 8004144:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004146:	4b20      	ldr	r3, [pc, #128]	; (80041c8 <HAL_RCC_ClockConfig+0x1b8>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 0307 	and.w	r3, r3, #7
 800414e:	683a      	ldr	r2, [r7, #0]
 8004150:	429a      	cmp	r2, r3
 8004152:	d001      	beq.n	8004158 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	e032      	b.n	80041be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 0304 	and.w	r3, r3, #4
 8004160:	2b00      	cmp	r3, #0
 8004162:	d008      	beq.n	8004176 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004164:	4b19      	ldr	r3, [pc, #100]	; (80041cc <HAL_RCC_ClockConfig+0x1bc>)
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	4916      	ldr	r1, [pc, #88]	; (80041cc <HAL_RCC_ClockConfig+0x1bc>)
 8004172:	4313      	orrs	r3, r2
 8004174:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 0308 	and.w	r3, r3, #8
 800417e:	2b00      	cmp	r3, #0
 8004180:	d009      	beq.n	8004196 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004182:	4b12      	ldr	r3, [pc, #72]	; (80041cc <HAL_RCC_ClockConfig+0x1bc>)
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	691b      	ldr	r3, [r3, #16]
 800418e:	00db      	lsls	r3, r3, #3
 8004190:	490e      	ldr	r1, [pc, #56]	; (80041cc <HAL_RCC_ClockConfig+0x1bc>)
 8004192:	4313      	orrs	r3, r2
 8004194:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004196:	f000 f821 	bl	80041dc <HAL_RCC_GetSysClockFreq>
 800419a:	4602      	mov	r2, r0
 800419c:	4b0b      	ldr	r3, [pc, #44]	; (80041cc <HAL_RCC_ClockConfig+0x1bc>)
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	091b      	lsrs	r3, r3, #4
 80041a2:	f003 030f 	and.w	r3, r3, #15
 80041a6:	490a      	ldr	r1, [pc, #40]	; (80041d0 <HAL_RCC_ClockConfig+0x1c0>)
 80041a8:	5ccb      	ldrb	r3, [r1, r3]
 80041aa:	fa22 f303 	lsr.w	r3, r2, r3
 80041ae:	4a09      	ldr	r2, [pc, #36]	; (80041d4 <HAL_RCC_ClockConfig+0x1c4>)
 80041b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80041b2:	4b09      	ldr	r3, [pc, #36]	; (80041d8 <HAL_RCC_ClockConfig+0x1c8>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4618      	mov	r0, r3
 80041b8:	f7fe fa20 	bl	80025fc <HAL_InitTick>

  return HAL_OK;
 80041bc:	2300      	movs	r3, #0
}
 80041be:	4618      	mov	r0, r3
 80041c0:	3710      	adds	r7, #16
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	bf00      	nop
 80041c8:	40023c00 	.word	0x40023c00
 80041cc:	40023800 	.word	0x40023800
 80041d0:	080050c0 	.word	0x080050c0
 80041d4:	200000a0 	.word	0x200000a0
 80041d8:	200000a4 	.word	0x200000a4

080041dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041e0:	b090      	sub	sp, #64	; 0x40
 80041e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80041e4:	2300      	movs	r3, #0
 80041e6:	637b      	str	r3, [r7, #52]	; 0x34
 80041e8:	2300      	movs	r3, #0
 80041ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041ec:	2300      	movs	r3, #0
 80041ee:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80041f0:	2300      	movs	r3, #0
 80041f2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80041f4:	4b59      	ldr	r3, [pc, #356]	; (800435c <HAL_RCC_GetSysClockFreq+0x180>)
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	f003 030c 	and.w	r3, r3, #12
 80041fc:	2b08      	cmp	r3, #8
 80041fe:	d00d      	beq.n	800421c <HAL_RCC_GetSysClockFreq+0x40>
 8004200:	2b08      	cmp	r3, #8
 8004202:	f200 80a1 	bhi.w	8004348 <HAL_RCC_GetSysClockFreq+0x16c>
 8004206:	2b00      	cmp	r3, #0
 8004208:	d002      	beq.n	8004210 <HAL_RCC_GetSysClockFreq+0x34>
 800420a:	2b04      	cmp	r3, #4
 800420c:	d003      	beq.n	8004216 <HAL_RCC_GetSysClockFreq+0x3a>
 800420e:	e09b      	b.n	8004348 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004210:	4b53      	ldr	r3, [pc, #332]	; (8004360 <HAL_RCC_GetSysClockFreq+0x184>)
 8004212:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004214:	e09b      	b.n	800434e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004216:	4b53      	ldr	r3, [pc, #332]	; (8004364 <HAL_RCC_GetSysClockFreq+0x188>)
 8004218:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800421a:	e098      	b.n	800434e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800421c:	4b4f      	ldr	r3, [pc, #316]	; (800435c <HAL_RCC_GetSysClockFreq+0x180>)
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004224:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004226:	4b4d      	ldr	r3, [pc, #308]	; (800435c <HAL_RCC_GetSysClockFreq+0x180>)
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800422e:	2b00      	cmp	r3, #0
 8004230:	d028      	beq.n	8004284 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004232:	4b4a      	ldr	r3, [pc, #296]	; (800435c <HAL_RCC_GetSysClockFreq+0x180>)
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	099b      	lsrs	r3, r3, #6
 8004238:	2200      	movs	r2, #0
 800423a:	623b      	str	r3, [r7, #32]
 800423c:	627a      	str	r2, [r7, #36]	; 0x24
 800423e:	6a3b      	ldr	r3, [r7, #32]
 8004240:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004244:	2100      	movs	r1, #0
 8004246:	4b47      	ldr	r3, [pc, #284]	; (8004364 <HAL_RCC_GetSysClockFreq+0x188>)
 8004248:	fb03 f201 	mul.w	r2, r3, r1
 800424c:	2300      	movs	r3, #0
 800424e:	fb00 f303 	mul.w	r3, r0, r3
 8004252:	4413      	add	r3, r2
 8004254:	4a43      	ldr	r2, [pc, #268]	; (8004364 <HAL_RCC_GetSysClockFreq+0x188>)
 8004256:	fba0 1202 	umull	r1, r2, r0, r2
 800425a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800425c:	460a      	mov	r2, r1
 800425e:	62ba      	str	r2, [r7, #40]	; 0x28
 8004260:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004262:	4413      	add	r3, r2
 8004264:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004266:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004268:	2200      	movs	r2, #0
 800426a:	61bb      	str	r3, [r7, #24]
 800426c:	61fa      	str	r2, [r7, #28]
 800426e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004272:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004276:	f7fc fc63 	bl	8000b40 <__aeabi_uldivmod>
 800427a:	4602      	mov	r2, r0
 800427c:	460b      	mov	r3, r1
 800427e:	4613      	mov	r3, r2
 8004280:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004282:	e053      	b.n	800432c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004284:	4b35      	ldr	r3, [pc, #212]	; (800435c <HAL_RCC_GetSysClockFreq+0x180>)
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	099b      	lsrs	r3, r3, #6
 800428a:	2200      	movs	r2, #0
 800428c:	613b      	str	r3, [r7, #16]
 800428e:	617a      	str	r2, [r7, #20]
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004296:	f04f 0b00 	mov.w	fp, #0
 800429a:	4652      	mov	r2, sl
 800429c:	465b      	mov	r3, fp
 800429e:	f04f 0000 	mov.w	r0, #0
 80042a2:	f04f 0100 	mov.w	r1, #0
 80042a6:	0159      	lsls	r1, r3, #5
 80042a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80042ac:	0150      	lsls	r0, r2, #5
 80042ae:	4602      	mov	r2, r0
 80042b0:	460b      	mov	r3, r1
 80042b2:	ebb2 080a 	subs.w	r8, r2, sl
 80042b6:	eb63 090b 	sbc.w	r9, r3, fp
 80042ba:	f04f 0200 	mov.w	r2, #0
 80042be:	f04f 0300 	mov.w	r3, #0
 80042c2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80042c6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80042ca:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80042ce:	ebb2 0408 	subs.w	r4, r2, r8
 80042d2:	eb63 0509 	sbc.w	r5, r3, r9
 80042d6:	f04f 0200 	mov.w	r2, #0
 80042da:	f04f 0300 	mov.w	r3, #0
 80042de:	00eb      	lsls	r3, r5, #3
 80042e0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80042e4:	00e2      	lsls	r2, r4, #3
 80042e6:	4614      	mov	r4, r2
 80042e8:	461d      	mov	r5, r3
 80042ea:	eb14 030a 	adds.w	r3, r4, sl
 80042ee:	603b      	str	r3, [r7, #0]
 80042f0:	eb45 030b 	adc.w	r3, r5, fp
 80042f4:	607b      	str	r3, [r7, #4]
 80042f6:	f04f 0200 	mov.w	r2, #0
 80042fa:	f04f 0300 	mov.w	r3, #0
 80042fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004302:	4629      	mov	r1, r5
 8004304:	028b      	lsls	r3, r1, #10
 8004306:	4621      	mov	r1, r4
 8004308:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800430c:	4621      	mov	r1, r4
 800430e:	028a      	lsls	r2, r1, #10
 8004310:	4610      	mov	r0, r2
 8004312:	4619      	mov	r1, r3
 8004314:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004316:	2200      	movs	r2, #0
 8004318:	60bb      	str	r3, [r7, #8]
 800431a:	60fa      	str	r2, [r7, #12]
 800431c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004320:	f7fc fc0e 	bl	8000b40 <__aeabi_uldivmod>
 8004324:	4602      	mov	r2, r0
 8004326:	460b      	mov	r3, r1
 8004328:	4613      	mov	r3, r2
 800432a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800432c:	4b0b      	ldr	r3, [pc, #44]	; (800435c <HAL_RCC_GetSysClockFreq+0x180>)
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	0c1b      	lsrs	r3, r3, #16
 8004332:	f003 0303 	and.w	r3, r3, #3
 8004336:	3301      	adds	r3, #1
 8004338:	005b      	lsls	r3, r3, #1
 800433a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800433c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800433e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004340:	fbb2 f3f3 	udiv	r3, r2, r3
 8004344:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004346:	e002      	b.n	800434e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004348:	4b05      	ldr	r3, [pc, #20]	; (8004360 <HAL_RCC_GetSysClockFreq+0x184>)
 800434a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800434c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800434e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004350:	4618      	mov	r0, r3
 8004352:	3740      	adds	r7, #64	; 0x40
 8004354:	46bd      	mov	sp, r7
 8004356:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800435a:	bf00      	nop
 800435c:	40023800 	.word	0x40023800
 8004360:	00f42400 	.word	0x00f42400
 8004364:	017d7840 	.word	0x017d7840

08004368 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004368:	b480      	push	{r7}
 800436a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800436c:	4b03      	ldr	r3, [pc, #12]	; (800437c <HAL_RCC_GetHCLKFreq+0x14>)
 800436e:	681b      	ldr	r3, [r3, #0]
}
 8004370:	4618      	mov	r0, r3
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr
 800437a:	bf00      	nop
 800437c:	200000a0 	.word	0x200000a0

08004380 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004384:	f7ff fff0 	bl	8004368 <HAL_RCC_GetHCLKFreq>
 8004388:	4602      	mov	r2, r0
 800438a:	4b05      	ldr	r3, [pc, #20]	; (80043a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	0a9b      	lsrs	r3, r3, #10
 8004390:	f003 0307 	and.w	r3, r3, #7
 8004394:	4903      	ldr	r1, [pc, #12]	; (80043a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004396:	5ccb      	ldrb	r3, [r1, r3]
 8004398:	fa22 f303 	lsr.w	r3, r2, r3
}
 800439c:	4618      	mov	r0, r3
 800439e:	bd80      	pop	{r7, pc}
 80043a0:	40023800 	.word	0x40023800
 80043a4:	080050d0 	.word	0x080050d0

080043a8 <__errno>:
 80043a8:	4b01      	ldr	r3, [pc, #4]	; (80043b0 <__errno+0x8>)
 80043aa:	6818      	ldr	r0, [r3, #0]
 80043ac:	4770      	bx	lr
 80043ae:	bf00      	nop
 80043b0:	200000ac 	.word	0x200000ac

080043b4 <__libc_init_array>:
 80043b4:	b570      	push	{r4, r5, r6, lr}
 80043b6:	4d0d      	ldr	r5, [pc, #52]	; (80043ec <__libc_init_array+0x38>)
 80043b8:	4c0d      	ldr	r4, [pc, #52]	; (80043f0 <__libc_init_array+0x3c>)
 80043ba:	1b64      	subs	r4, r4, r5
 80043bc:	10a4      	asrs	r4, r4, #2
 80043be:	2600      	movs	r6, #0
 80043c0:	42a6      	cmp	r6, r4
 80043c2:	d109      	bne.n	80043d8 <__libc_init_array+0x24>
 80043c4:	4d0b      	ldr	r5, [pc, #44]	; (80043f4 <__libc_init_array+0x40>)
 80043c6:	4c0c      	ldr	r4, [pc, #48]	; (80043f8 <__libc_init_array+0x44>)
 80043c8:	f000 fe6e 	bl	80050a8 <_init>
 80043cc:	1b64      	subs	r4, r4, r5
 80043ce:	10a4      	asrs	r4, r4, #2
 80043d0:	2600      	movs	r6, #0
 80043d2:	42a6      	cmp	r6, r4
 80043d4:	d105      	bne.n	80043e2 <__libc_init_array+0x2e>
 80043d6:	bd70      	pop	{r4, r5, r6, pc}
 80043d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80043dc:	4798      	blx	r3
 80043de:	3601      	adds	r6, #1
 80043e0:	e7ee      	b.n	80043c0 <__libc_init_array+0xc>
 80043e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80043e6:	4798      	blx	r3
 80043e8:	3601      	adds	r6, #1
 80043ea:	e7f2      	b.n	80043d2 <__libc_init_array+0x1e>
 80043ec:	080051b0 	.word	0x080051b0
 80043f0:	080051b0 	.word	0x080051b0
 80043f4:	080051b0 	.word	0x080051b0
 80043f8:	080051b4 	.word	0x080051b4

080043fc <__itoa>:
 80043fc:	1e93      	subs	r3, r2, #2
 80043fe:	2b22      	cmp	r3, #34	; 0x22
 8004400:	b510      	push	{r4, lr}
 8004402:	460c      	mov	r4, r1
 8004404:	d904      	bls.n	8004410 <__itoa+0x14>
 8004406:	2300      	movs	r3, #0
 8004408:	700b      	strb	r3, [r1, #0]
 800440a:	461c      	mov	r4, r3
 800440c:	4620      	mov	r0, r4
 800440e:	bd10      	pop	{r4, pc}
 8004410:	2a0a      	cmp	r2, #10
 8004412:	d109      	bne.n	8004428 <__itoa+0x2c>
 8004414:	2800      	cmp	r0, #0
 8004416:	da07      	bge.n	8004428 <__itoa+0x2c>
 8004418:	232d      	movs	r3, #45	; 0x2d
 800441a:	700b      	strb	r3, [r1, #0]
 800441c:	4240      	negs	r0, r0
 800441e:	2101      	movs	r1, #1
 8004420:	4421      	add	r1, r4
 8004422:	f000 f80d 	bl	8004440 <__utoa>
 8004426:	e7f1      	b.n	800440c <__itoa+0x10>
 8004428:	2100      	movs	r1, #0
 800442a:	e7f9      	b.n	8004420 <__itoa+0x24>

0800442c <itoa>:
 800442c:	f7ff bfe6 	b.w	80043fc <__itoa>

08004430 <memset>:
 8004430:	4402      	add	r2, r0
 8004432:	4603      	mov	r3, r0
 8004434:	4293      	cmp	r3, r2
 8004436:	d100      	bne.n	800443a <memset+0xa>
 8004438:	4770      	bx	lr
 800443a:	f803 1b01 	strb.w	r1, [r3], #1
 800443e:	e7f9      	b.n	8004434 <memset+0x4>

08004440 <__utoa>:
 8004440:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004442:	4c1f      	ldr	r4, [pc, #124]	; (80044c0 <__utoa+0x80>)
 8004444:	b08b      	sub	sp, #44	; 0x2c
 8004446:	4605      	mov	r5, r0
 8004448:	460b      	mov	r3, r1
 800444a:	466e      	mov	r6, sp
 800444c:	f104 0c20 	add.w	ip, r4, #32
 8004450:	6820      	ldr	r0, [r4, #0]
 8004452:	6861      	ldr	r1, [r4, #4]
 8004454:	4637      	mov	r7, r6
 8004456:	c703      	stmia	r7!, {r0, r1}
 8004458:	3408      	adds	r4, #8
 800445a:	4564      	cmp	r4, ip
 800445c:	463e      	mov	r6, r7
 800445e:	d1f7      	bne.n	8004450 <__utoa+0x10>
 8004460:	7921      	ldrb	r1, [r4, #4]
 8004462:	7139      	strb	r1, [r7, #4]
 8004464:	1e91      	subs	r1, r2, #2
 8004466:	6820      	ldr	r0, [r4, #0]
 8004468:	6038      	str	r0, [r7, #0]
 800446a:	2922      	cmp	r1, #34	; 0x22
 800446c:	f04f 0100 	mov.w	r1, #0
 8004470:	d904      	bls.n	800447c <__utoa+0x3c>
 8004472:	7019      	strb	r1, [r3, #0]
 8004474:	460b      	mov	r3, r1
 8004476:	4618      	mov	r0, r3
 8004478:	b00b      	add	sp, #44	; 0x2c
 800447a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800447c:	1e58      	subs	r0, r3, #1
 800447e:	4684      	mov	ip, r0
 8004480:	fbb5 f7f2 	udiv	r7, r5, r2
 8004484:	fb02 5617 	mls	r6, r2, r7, r5
 8004488:	3628      	adds	r6, #40	; 0x28
 800448a:	446e      	add	r6, sp
 800448c:	460c      	mov	r4, r1
 800448e:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8004492:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8004496:	462e      	mov	r6, r5
 8004498:	42b2      	cmp	r2, r6
 800449a:	f101 0101 	add.w	r1, r1, #1
 800449e:	463d      	mov	r5, r7
 80044a0:	d9ee      	bls.n	8004480 <__utoa+0x40>
 80044a2:	2200      	movs	r2, #0
 80044a4:	545a      	strb	r2, [r3, r1]
 80044a6:	1919      	adds	r1, r3, r4
 80044a8:	1aa5      	subs	r5, r4, r2
 80044aa:	42aa      	cmp	r2, r5
 80044ac:	dae3      	bge.n	8004476 <__utoa+0x36>
 80044ae:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80044b2:	780e      	ldrb	r6, [r1, #0]
 80044b4:	7006      	strb	r6, [r0, #0]
 80044b6:	3201      	adds	r2, #1
 80044b8:	f801 5901 	strb.w	r5, [r1], #-1
 80044bc:	e7f4      	b.n	80044a8 <__utoa+0x68>
 80044be:	bf00      	nop
 80044c0:	080050d8 	.word	0x080050d8
 80044c4:	00000000 	.word	0x00000000

080044c8 <atan>:
 80044c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044cc:	ec55 4b10 	vmov	r4, r5, d0
 80044d0:	4bc3      	ldr	r3, [pc, #780]	; (80047e0 <atan+0x318>)
 80044d2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80044d6:	429e      	cmp	r6, r3
 80044d8:	46ab      	mov	fp, r5
 80044da:	dd18      	ble.n	800450e <atan+0x46>
 80044dc:	4bc1      	ldr	r3, [pc, #772]	; (80047e4 <atan+0x31c>)
 80044de:	429e      	cmp	r6, r3
 80044e0:	dc01      	bgt.n	80044e6 <atan+0x1e>
 80044e2:	d109      	bne.n	80044f8 <atan+0x30>
 80044e4:	b144      	cbz	r4, 80044f8 <atan+0x30>
 80044e6:	4622      	mov	r2, r4
 80044e8:	462b      	mov	r3, r5
 80044ea:	4620      	mov	r0, r4
 80044ec:	4629      	mov	r1, r5
 80044ee:	f7fb fe71 	bl	80001d4 <__adddf3>
 80044f2:	4604      	mov	r4, r0
 80044f4:	460d      	mov	r5, r1
 80044f6:	e006      	b.n	8004506 <atan+0x3e>
 80044f8:	f1bb 0f00 	cmp.w	fp, #0
 80044fc:	f300 8131 	bgt.w	8004762 <atan+0x29a>
 8004500:	a59b      	add	r5, pc, #620	; (adr r5, 8004770 <atan+0x2a8>)
 8004502:	e9d5 4500 	ldrd	r4, r5, [r5]
 8004506:	ec45 4b10 	vmov	d0, r4, r5
 800450a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800450e:	4bb6      	ldr	r3, [pc, #728]	; (80047e8 <atan+0x320>)
 8004510:	429e      	cmp	r6, r3
 8004512:	dc14      	bgt.n	800453e <atan+0x76>
 8004514:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8004518:	429e      	cmp	r6, r3
 800451a:	dc0d      	bgt.n	8004538 <atan+0x70>
 800451c:	a396      	add	r3, pc, #600	; (adr r3, 8004778 <atan+0x2b0>)
 800451e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004522:	ee10 0a10 	vmov	r0, s0
 8004526:	4629      	mov	r1, r5
 8004528:	f7fb fe54 	bl	80001d4 <__adddf3>
 800452c:	4baf      	ldr	r3, [pc, #700]	; (80047ec <atan+0x324>)
 800452e:	2200      	movs	r2, #0
 8004530:	f7fc fa96 	bl	8000a60 <__aeabi_dcmpgt>
 8004534:	2800      	cmp	r0, #0
 8004536:	d1e6      	bne.n	8004506 <atan+0x3e>
 8004538:	f04f 3aff 	mov.w	sl, #4294967295
 800453c:	e02b      	b.n	8004596 <atan+0xce>
 800453e:	f000 f963 	bl	8004808 <fabs>
 8004542:	4bab      	ldr	r3, [pc, #684]	; (80047f0 <atan+0x328>)
 8004544:	429e      	cmp	r6, r3
 8004546:	ec55 4b10 	vmov	r4, r5, d0
 800454a:	f300 80bf 	bgt.w	80046cc <atan+0x204>
 800454e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8004552:	429e      	cmp	r6, r3
 8004554:	f300 80a0 	bgt.w	8004698 <atan+0x1d0>
 8004558:	ee10 2a10 	vmov	r2, s0
 800455c:	ee10 0a10 	vmov	r0, s0
 8004560:	462b      	mov	r3, r5
 8004562:	4629      	mov	r1, r5
 8004564:	f7fb fe36 	bl	80001d4 <__adddf3>
 8004568:	4ba0      	ldr	r3, [pc, #640]	; (80047ec <atan+0x324>)
 800456a:	2200      	movs	r2, #0
 800456c:	f7fb fe30 	bl	80001d0 <__aeabi_dsub>
 8004570:	2200      	movs	r2, #0
 8004572:	4606      	mov	r6, r0
 8004574:	460f      	mov	r7, r1
 8004576:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800457a:	4620      	mov	r0, r4
 800457c:	4629      	mov	r1, r5
 800457e:	f7fb fe29 	bl	80001d4 <__adddf3>
 8004582:	4602      	mov	r2, r0
 8004584:	460b      	mov	r3, r1
 8004586:	4630      	mov	r0, r6
 8004588:	4639      	mov	r1, r7
 800458a:	f7fc f903 	bl	8000794 <__aeabi_ddiv>
 800458e:	f04f 0a00 	mov.w	sl, #0
 8004592:	4604      	mov	r4, r0
 8004594:	460d      	mov	r5, r1
 8004596:	4622      	mov	r2, r4
 8004598:	462b      	mov	r3, r5
 800459a:	4620      	mov	r0, r4
 800459c:	4629      	mov	r1, r5
 800459e:	f7fb ffcf 	bl	8000540 <__aeabi_dmul>
 80045a2:	4602      	mov	r2, r0
 80045a4:	460b      	mov	r3, r1
 80045a6:	4680      	mov	r8, r0
 80045a8:	4689      	mov	r9, r1
 80045aa:	f7fb ffc9 	bl	8000540 <__aeabi_dmul>
 80045ae:	a374      	add	r3, pc, #464	; (adr r3, 8004780 <atan+0x2b8>)
 80045b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045b4:	4606      	mov	r6, r0
 80045b6:	460f      	mov	r7, r1
 80045b8:	f7fb ffc2 	bl	8000540 <__aeabi_dmul>
 80045bc:	a372      	add	r3, pc, #456	; (adr r3, 8004788 <atan+0x2c0>)
 80045be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045c2:	f7fb fe07 	bl	80001d4 <__adddf3>
 80045c6:	4632      	mov	r2, r6
 80045c8:	463b      	mov	r3, r7
 80045ca:	f7fb ffb9 	bl	8000540 <__aeabi_dmul>
 80045ce:	a370      	add	r3, pc, #448	; (adr r3, 8004790 <atan+0x2c8>)
 80045d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045d4:	f7fb fdfe 	bl	80001d4 <__adddf3>
 80045d8:	4632      	mov	r2, r6
 80045da:	463b      	mov	r3, r7
 80045dc:	f7fb ffb0 	bl	8000540 <__aeabi_dmul>
 80045e0:	a36d      	add	r3, pc, #436	; (adr r3, 8004798 <atan+0x2d0>)
 80045e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045e6:	f7fb fdf5 	bl	80001d4 <__adddf3>
 80045ea:	4632      	mov	r2, r6
 80045ec:	463b      	mov	r3, r7
 80045ee:	f7fb ffa7 	bl	8000540 <__aeabi_dmul>
 80045f2:	a36b      	add	r3, pc, #428	; (adr r3, 80047a0 <atan+0x2d8>)
 80045f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045f8:	f7fb fdec 	bl	80001d4 <__adddf3>
 80045fc:	4632      	mov	r2, r6
 80045fe:	463b      	mov	r3, r7
 8004600:	f7fb ff9e 	bl	8000540 <__aeabi_dmul>
 8004604:	a368      	add	r3, pc, #416	; (adr r3, 80047a8 <atan+0x2e0>)
 8004606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800460a:	f7fb fde3 	bl	80001d4 <__adddf3>
 800460e:	4642      	mov	r2, r8
 8004610:	464b      	mov	r3, r9
 8004612:	f7fb ff95 	bl	8000540 <__aeabi_dmul>
 8004616:	a366      	add	r3, pc, #408	; (adr r3, 80047b0 <atan+0x2e8>)
 8004618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800461c:	4680      	mov	r8, r0
 800461e:	4689      	mov	r9, r1
 8004620:	4630      	mov	r0, r6
 8004622:	4639      	mov	r1, r7
 8004624:	f7fb ff8c 	bl	8000540 <__aeabi_dmul>
 8004628:	a363      	add	r3, pc, #396	; (adr r3, 80047b8 <atan+0x2f0>)
 800462a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800462e:	f7fb fdcf 	bl	80001d0 <__aeabi_dsub>
 8004632:	4632      	mov	r2, r6
 8004634:	463b      	mov	r3, r7
 8004636:	f7fb ff83 	bl	8000540 <__aeabi_dmul>
 800463a:	a361      	add	r3, pc, #388	; (adr r3, 80047c0 <atan+0x2f8>)
 800463c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004640:	f7fb fdc6 	bl	80001d0 <__aeabi_dsub>
 8004644:	4632      	mov	r2, r6
 8004646:	463b      	mov	r3, r7
 8004648:	f7fb ff7a 	bl	8000540 <__aeabi_dmul>
 800464c:	a35e      	add	r3, pc, #376	; (adr r3, 80047c8 <atan+0x300>)
 800464e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004652:	f7fb fdbd 	bl	80001d0 <__aeabi_dsub>
 8004656:	4632      	mov	r2, r6
 8004658:	463b      	mov	r3, r7
 800465a:	f7fb ff71 	bl	8000540 <__aeabi_dmul>
 800465e:	a35c      	add	r3, pc, #368	; (adr r3, 80047d0 <atan+0x308>)
 8004660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004664:	f7fb fdb4 	bl	80001d0 <__aeabi_dsub>
 8004668:	4632      	mov	r2, r6
 800466a:	463b      	mov	r3, r7
 800466c:	f7fb ff68 	bl	8000540 <__aeabi_dmul>
 8004670:	4602      	mov	r2, r0
 8004672:	460b      	mov	r3, r1
 8004674:	4640      	mov	r0, r8
 8004676:	4649      	mov	r1, r9
 8004678:	f7fb fdac 	bl	80001d4 <__adddf3>
 800467c:	4622      	mov	r2, r4
 800467e:	462b      	mov	r3, r5
 8004680:	f7fb ff5e 	bl	8000540 <__aeabi_dmul>
 8004684:	f1ba 3fff 	cmp.w	sl, #4294967295
 8004688:	4602      	mov	r2, r0
 800468a:	460b      	mov	r3, r1
 800468c:	d14b      	bne.n	8004726 <atan+0x25e>
 800468e:	4620      	mov	r0, r4
 8004690:	4629      	mov	r1, r5
 8004692:	f7fb fd9d 	bl	80001d0 <__aeabi_dsub>
 8004696:	e72c      	b.n	80044f2 <atan+0x2a>
 8004698:	ee10 0a10 	vmov	r0, s0
 800469c:	4b53      	ldr	r3, [pc, #332]	; (80047ec <atan+0x324>)
 800469e:	2200      	movs	r2, #0
 80046a0:	4629      	mov	r1, r5
 80046a2:	f7fb fd95 	bl	80001d0 <__aeabi_dsub>
 80046a6:	4b51      	ldr	r3, [pc, #324]	; (80047ec <atan+0x324>)
 80046a8:	4606      	mov	r6, r0
 80046aa:	460f      	mov	r7, r1
 80046ac:	2200      	movs	r2, #0
 80046ae:	4620      	mov	r0, r4
 80046b0:	4629      	mov	r1, r5
 80046b2:	f7fb fd8f 	bl	80001d4 <__adddf3>
 80046b6:	4602      	mov	r2, r0
 80046b8:	460b      	mov	r3, r1
 80046ba:	4630      	mov	r0, r6
 80046bc:	4639      	mov	r1, r7
 80046be:	f7fc f869 	bl	8000794 <__aeabi_ddiv>
 80046c2:	f04f 0a01 	mov.w	sl, #1
 80046c6:	4604      	mov	r4, r0
 80046c8:	460d      	mov	r5, r1
 80046ca:	e764      	b.n	8004596 <atan+0xce>
 80046cc:	4b49      	ldr	r3, [pc, #292]	; (80047f4 <atan+0x32c>)
 80046ce:	429e      	cmp	r6, r3
 80046d0:	da1d      	bge.n	800470e <atan+0x246>
 80046d2:	ee10 0a10 	vmov	r0, s0
 80046d6:	4b48      	ldr	r3, [pc, #288]	; (80047f8 <atan+0x330>)
 80046d8:	2200      	movs	r2, #0
 80046da:	4629      	mov	r1, r5
 80046dc:	f7fb fd78 	bl	80001d0 <__aeabi_dsub>
 80046e0:	4b45      	ldr	r3, [pc, #276]	; (80047f8 <atan+0x330>)
 80046e2:	4606      	mov	r6, r0
 80046e4:	460f      	mov	r7, r1
 80046e6:	2200      	movs	r2, #0
 80046e8:	4620      	mov	r0, r4
 80046ea:	4629      	mov	r1, r5
 80046ec:	f7fb ff28 	bl	8000540 <__aeabi_dmul>
 80046f0:	4b3e      	ldr	r3, [pc, #248]	; (80047ec <atan+0x324>)
 80046f2:	2200      	movs	r2, #0
 80046f4:	f7fb fd6e 	bl	80001d4 <__adddf3>
 80046f8:	4602      	mov	r2, r0
 80046fa:	460b      	mov	r3, r1
 80046fc:	4630      	mov	r0, r6
 80046fe:	4639      	mov	r1, r7
 8004700:	f7fc f848 	bl	8000794 <__aeabi_ddiv>
 8004704:	f04f 0a02 	mov.w	sl, #2
 8004708:	4604      	mov	r4, r0
 800470a:	460d      	mov	r5, r1
 800470c:	e743      	b.n	8004596 <atan+0xce>
 800470e:	462b      	mov	r3, r5
 8004710:	ee10 2a10 	vmov	r2, s0
 8004714:	4939      	ldr	r1, [pc, #228]	; (80047fc <atan+0x334>)
 8004716:	2000      	movs	r0, #0
 8004718:	f7fc f83c 	bl	8000794 <__aeabi_ddiv>
 800471c:	f04f 0a03 	mov.w	sl, #3
 8004720:	4604      	mov	r4, r0
 8004722:	460d      	mov	r5, r1
 8004724:	e737      	b.n	8004596 <atan+0xce>
 8004726:	4b36      	ldr	r3, [pc, #216]	; (8004800 <atan+0x338>)
 8004728:	4e36      	ldr	r6, [pc, #216]	; (8004804 <atan+0x33c>)
 800472a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800472e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8004732:	e9da 2300 	ldrd	r2, r3, [sl]
 8004736:	f7fb fd4b 	bl	80001d0 <__aeabi_dsub>
 800473a:	4622      	mov	r2, r4
 800473c:	462b      	mov	r3, r5
 800473e:	f7fb fd47 	bl	80001d0 <__aeabi_dsub>
 8004742:	4602      	mov	r2, r0
 8004744:	460b      	mov	r3, r1
 8004746:	e9d6 0100 	ldrd	r0, r1, [r6]
 800474a:	f7fb fd41 	bl	80001d0 <__aeabi_dsub>
 800474e:	f1bb 0f00 	cmp.w	fp, #0
 8004752:	4604      	mov	r4, r0
 8004754:	460d      	mov	r5, r1
 8004756:	f6bf aed6 	bge.w	8004506 <atan+0x3e>
 800475a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800475e:	461d      	mov	r5, r3
 8004760:	e6d1      	b.n	8004506 <atan+0x3e>
 8004762:	a51d      	add	r5, pc, #116	; (adr r5, 80047d8 <atan+0x310>)
 8004764:	e9d5 4500 	ldrd	r4, r5, [r5]
 8004768:	e6cd      	b.n	8004506 <atan+0x3e>
 800476a:	bf00      	nop
 800476c:	f3af 8000 	nop.w
 8004770:	54442d18 	.word	0x54442d18
 8004774:	bff921fb 	.word	0xbff921fb
 8004778:	8800759c 	.word	0x8800759c
 800477c:	7e37e43c 	.word	0x7e37e43c
 8004780:	e322da11 	.word	0xe322da11
 8004784:	3f90ad3a 	.word	0x3f90ad3a
 8004788:	24760deb 	.word	0x24760deb
 800478c:	3fa97b4b 	.word	0x3fa97b4b
 8004790:	a0d03d51 	.word	0xa0d03d51
 8004794:	3fb10d66 	.word	0x3fb10d66
 8004798:	c54c206e 	.word	0xc54c206e
 800479c:	3fb745cd 	.word	0x3fb745cd
 80047a0:	920083ff 	.word	0x920083ff
 80047a4:	3fc24924 	.word	0x3fc24924
 80047a8:	5555550d 	.word	0x5555550d
 80047ac:	3fd55555 	.word	0x3fd55555
 80047b0:	2c6a6c2f 	.word	0x2c6a6c2f
 80047b4:	bfa2b444 	.word	0xbfa2b444
 80047b8:	52defd9a 	.word	0x52defd9a
 80047bc:	3fadde2d 	.word	0x3fadde2d
 80047c0:	af749a6d 	.word	0xaf749a6d
 80047c4:	3fb3b0f2 	.word	0x3fb3b0f2
 80047c8:	fe231671 	.word	0xfe231671
 80047cc:	3fbc71c6 	.word	0x3fbc71c6
 80047d0:	9998ebc4 	.word	0x9998ebc4
 80047d4:	3fc99999 	.word	0x3fc99999
 80047d8:	54442d18 	.word	0x54442d18
 80047dc:	3ff921fb 	.word	0x3ff921fb
 80047e0:	440fffff 	.word	0x440fffff
 80047e4:	7ff00000 	.word	0x7ff00000
 80047e8:	3fdbffff 	.word	0x3fdbffff
 80047ec:	3ff00000 	.word	0x3ff00000
 80047f0:	3ff2ffff 	.word	0x3ff2ffff
 80047f4:	40038000 	.word	0x40038000
 80047f8:	3ff80000 	.word	0x3ff80000
 80047fc:	bff00000 	.word	0xbff00000
 8004800:	08005120 	.word	0x08005120
 8004804:	08005100 	.word	0x08005100

08004808 <fabs>:
 8004808:	ec51 0b10 	vmov	r0, r1, d0
 800480c:	ee10 2a10 	vmov	r2, s0
 8004810:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004814:	ec43 2b10 	vmov	d0, r2, r3
 8004818:	4770      	bx	lr

0800481a <atan2>:
 800481a:	f000 b85d 	b.w	80048d8 <__ieee754_atan2>

0800481e <sqrt>:
 800481e:	b538      	push	{r3, r4, r5, lr}
 8004820:	ed2d 8b02 	vpush	{d8}
 8004824:	ec55 4b10 	vmov	r4, r5, d0
 8004828:	f000 f920 	bl	8004a6c <__ieee754_sqrt>
 800482c:	4622      	mov	r2, r4
 800482e:	462b      	mov	r3, r5
 8004830:	4620      	mov	r0, r4
 8004832:	4629      	mov	r1, r5
 8004834:	eeb0 8a40 	vmov.f32	s16, s0
 8004838:	eef0 8a60 	vmov.f32	s17, s1
 800483c:	f7fc f91a 	bl	8000a74 <__aeabi_dcmpun>
 8004840:	b990      	cbnz	r0, 8004868 <sqrt+0x4a>
 8004842:	2200      	movs	r2, #0
 8004844:	2300      	movs	r3, #0
 8004846:	4620      	mov	r0, r4
 8004848:	4629      	mov	r1, r5
 800484a:	f7fc f8eb 	bl	8000a24 <__aeabi_dcmplt>
 800484e:	b158      	cbz	r0, 8004868 <sqrt+0x4a>
 8004850:	f7ff fdaa 	bl	80043a8 <__errno>
 8004854:	2321      	movs	r3, #33	; 0x21
 8004856:	6003      	str	r3, [r0, #0]
 8004858:	2200      	movs	r2, #0
 800485a:	2300      	movs	r3, #0
 800485c:	4610      	mov	r0, r2
 800485e:	4619      	mov	r1, r3
 8004860:	f7fb ff98 	bl	8000794 <__aeabi_ddiv>
 8004864:	ec41 0b18 	vmov	d8, r0, r1
 8004868:	eeb0 0a48 	vmov.f32	s0, s16
 800486c:	eef0 0a68 	vmov.f32	s1, s17
 8004870:	ecbd 8b02 	vpop	{d8}
 8004874:	bd38      	pop	{r3, r4, r5, pc}
	...

08004878 <asinf>:
 8004878:	b508      	push	{r3, lr}
 800487a:	ed2d 8b02 	vpush	{d8}
 800487e:	eeb0 8a40 	vmov.f32	s16, s0
 8004882:	f000 f9a5 	bl	8004bd0 <__ieee754_asinf>
 8004886:	eeb4 8a48 	vcmp.f32	s16, s16
 800488a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800488e:	eef0 8a40 	vmov.f32	s17, s0
 8004892:	d615      	bvs.n	80048c0 <asinf+0x48>
 8004894:	eeb0 0a48 	vmov.f32	s0, s16
 8004898:	f000 fbf8 	bl	800508c <fabsf>
 800489c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80048a0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80048a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048a8:	dd0a      	ble.n	80048c0 <asinf+0x48>
 80048aa:	f7ff fd7d 	bl	80043a8 <__errno>
 80048ae:	ecbd 8b02 	vpop	{d8}
 80048b2:	2321      	movs	r3, #33	; 0x21
 80048b4:	6003      	str	r3, [r0, #0]
 80048b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80048ba:	4804      	ldr	r0, [pc, #16]	; (80048cc <asinf+0x54>)
 80048bc:	f000 bbee 	b.w	800509c <nanf>
 80048c0:	eeb0 0a68 	vmov.f32	s0, s17
 80048c4:	ecbd 8b02 	vpop	{d8}
 80048c8:	bd08      	pop	{r3, pc}
 80048ca:	bf00      	nop
 80048cc:	080050fc 	.word	0x080050fc

080048d0 <atan2f>:
 80048d0:	f000 ba64 	b.w	8004d9c <__ieee754_atan2f>
 80048d4:	0000      	movs	r0, r0
	...

080048d8 <__ieee754_atan2>:
 80048d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80048dc:	ec57 6b11 	vmov	r6, r7, d1
 80048e0:	4273      	negs	r3, r6
 80048e2:	f8df e184 	ldr.w	lr, [pc, #388]	; 8004a68 <__ieee754_atan2+0x190>
 80048e6:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 80048ea:	4333      	orrs	r3, r6
 80048ec:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80048f0:	4573      	cmp	r3, lr
 80048f2:	ec51 0b10 	vmov	r0, r1, d0
 80048f6:	ee11 8a10 	vmov	r8, s2
 80048fa:	d80a      	bhi.n	8004912 <__ieee754_atan2+0x3a>
 80048fc:	4244      	negs	r4, r0
 80048fe:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004902:	4304      	orrs	r4, r0
 8004904:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8004908:	4574      	cmp	r4, lr
 800490a:	ee10 9a10 	vmov	r9, s0
 800490e:	468c      	mov	ip, r1
 8004910:	d907      	bls.n	8004922 <__ieee754_atan2+0x4a>
 8004912:	4632      	mov	r2, r6
 8004914:	463b      	mov	r3, r7
 8004916:	f7fb fc5d 	bl	80001d4 <__adddf3>
 800491a:	ec41 0b10 	vmov	d0, r0, r1
 800491e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004922:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8004926:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800492a:	4334      	orrs	r4, r6
 800492c:	d103      	bne.n	8004936 <__ieee754_atan2+0x5e>
 800492e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004932:	f7ff bdc9 	b.w	80044c8 <atan>
 8004936:	17bc      	asrs	r4, r7, #30
 8004938:	f004 0402 	and.w	r4, r4, #2
 800493c:	ea53 0909 	orrs.w	r9, r3, r9
 8004940:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8004944:	d107      	bne.n	8004956 <__ieee754_atan2+0x7e>
 8004946:	2c02      	cmp	r4, #2
 8004948:	d060      	beq.n	8004a0c <__ieee754_atan2+0x134>
 800494a:	2c03      	cmp	r4, #3
 800494c:	d1e5      	bne.n	800491a <__ieee754_atan2+0x42>
 800494e:	a142      	add	r1, pc, #264	; (adr r1, 8004a58 <__ieee754_atan2+0x180>)
 8004950:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004954:	e7e1      	b.n	800491a <__ieee754_atan2+0x42>
 8004956:	ea52 0808 	orrs.w	r8, r2, r8
 800495a:	d106      	bne.n	800496a <__ieee754_atan2+0x92>
 800495c:	f1bc 0f00 	cmp.w	ip, #0
 8004960:	da5f      	bge.n	8004a22 <__ieee754_atan2+0x14a>
 8004962:	a13f      	add	r1, pc, #252	; (adr r1, 8004a60 <__ieee754_atan2+0x188>)
 8004964:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004968:	e7d7      	b.n	800491a <__ieee754_atan2+0x42>
 800496a:	4572      	cmp	r2, lr
 800496c:	d10f      	bne.n	800498e <__ieee754_atan2+0xb6>
 800496e:	4293      	cmp	r3, r2
 8004970:	f104 34ff 	add.w	r4, r4, #4294967295
 8004974:	d107      	bne.n	8004986 <__ieee754_atan2+0xae>
 8004976:	2c02      	cmp	r4, #2
 8004978:	d84c      	bhi.n	8004a14 <__ieee754_atan2+0x13c>
 800497a:	4b35      	ldr	r3, [pc, #212]	; (8004a50 <__ieee754_atan2+0x178>)
 800497c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8004980:	e9d4 0100 	ldrd	r0, r1, [r4]
 8004984:	e7c9      	b.n	800491a <__ieee754_atan2+0x42>
 8004986:	2c02      	cmp	r4, #2
 8004988:	d848      	bhi.n	8004a1c <__ieee754_atan2+0x144>
 800498a:	4b32      	ldr	r3, [pc, #200]	; (8004a54 <__ieee754_atan2+0x17c>)
 800498c:	e7f6      	b.n	800497c <__ieee754_atan2+0xa4>
 800498e:	4573      	cmp	r3, lr
 8004990:	d0e4      	beq.n	800495c <__ieee754_atan2+0x84>
 8004992:	1a9b      	subs	r3, r3, r2
 8004994:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8004998:	ea4f 5223 	mov.w	r2, r3, asr #20
 800499c:	da1e      	bge.n	80049dc <__ieee754_atan2+0x104>
 800499e:	2f00      	cmp	r7, #0
 80049a0:	da01      	bge.n	80049a6 <__ieee754_atan2+0xce>
 80049a2:	323c      	adds	r2, #60	; 0x3c
 80049a4:	db1e      	blt.n	80049e4 <__ieee754_atan2+0x10c>
 80049a6:	4632      	mov	r2, r6
 80049a8:	463b      	mov	r3, r7
 80049aa:	f7fb fef3 	bl	8000794 <__aeabi_ddiv>
 80049ae:	ec41 0b10 	vmov	d0, r0, r1
 80049b2:	f7ff ff29 	bl	8004808 <fabs>
 80049b6:	f7ff fd87 	bl	80044c8 <atan>
 80049ba:	ec51 0b10 	vmov	r0, r1, d0
 80049be:	2c01      	cmp	r4, #1
 80049c0:	d013      	beq.n	80049ea <__ieee754_atan2+0x112>
 80049c2:	2c02      	cmp	r4, #2
 80049c4:	d015      	beq.n	80049f2 <__ieee754_atan2+0x11a>
 80049c6:	2c00      	cmp	r4, #0
 80049c8:	d0a7      	beq.n	800491a <__ieee754_atan2+0x42>
 80049ca:	a319      	add	r3, pc, #100	; (adr r3, 8004a30 <__ieee754_atan2+0x158>)
 80049cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049d0:	f7fb fbfe 	bl	80001d0 <__aeabi_dsub>
 80049d4:	a318      	add	r3, pc, #96	; (adr r3, 8004a38 <__ieee754_atan2+0x160>)
 80049d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049da:	e014      	b.n	8004a06 <__ieee754_atan2+0x12e>
 80049dc:	a118      	add	r1, pc, #96	; (adr r1, 8004a40 <__ieee754_atan2+0x168>)
 80049de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80049e2:	e7ec      	b.n	80049be <__ieee754_atan2+0xe6>
 80049e4:	2000      	movs	r0, #0
 80049e6:	2100      	movs	r1, #0
 80049e8:	e7e9      	b.n	80049be <__ieee754_atan2+0xe6>
 80049ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80049ee:	4619      	mov	r1, r3
 80049f0:	e793      	b.n	800491a <__ieee754_atan2+0x42>
 80049f2:	a30f      	add	r3, pc, #60	; (adr r3, 8004a30 <__ieee754_atan2+0x158>)
 80049f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049f8:	f7fb fbea 	bl	80001d0 <__aeabi_dsub>
 80049fc:	4602      	mov	r2, r0
 80049fe:	460b      	mov	r3, r1
 8004a00:	a10d      	add	r1, pc, #52	; (adr r1, 8004a38 <__ieee754_atan2+0x160>)
 8004a02:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004a06:	f7fb fbe3 	bl	80001d0 <__aeabi_dsub>
 8004a0a:	e786      	b.n	800491a <__ieee754_atan2+0x42>
 8004a0c:	a10a      	add	r1, pc, #40	; (adr r1, 8004a38 <__ieee754_atan2+0x160>)
 8004a0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004a12:	e782      	b.n	800491a <__ieee754_atan2+0x42>
 8004a14:	a10c      	add	r1, pc, #48	; (adr r1, 8004a48 <__ieee754_atan2+0x170>)
 8004a16:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004a1a:	e77e      	b.n	800491a <__ieee754_atan2+0x42>
 8004a1c:	2000      	movs	r0, #0
 8004a1e:	2100      	movs	r1, #0
 8004a20:	e77b      	b.n	800491a <__ieee754_atan2+0x42>
 8004a22:	a107      	add	r1, pc, #28	; (adr r1, 8004a40 <__ieee754_atan2+0x168>)
 8004a24:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004a28:	e777      	b.n	800491a <__ieee754_atan2+0x42>
 8004a2a:	bf00      	nop
 8004a2c:	f3af 8000 	nop.w
 8004a30:	33145c07 	.word	0x33145c07
 8004a34:	3ca1a626 	.word	0x3ca1a626
 8004a38:	54442d18 	.word	0x54442d18
 8004a3c:	400921fb 	.word	0x400921fb
 8004a40:	54442d18 	.word	0x54442d18
 8004a44:	3ff921fb 	.word	0x3ff921fb
 8004a48:	54442d18 	.word	0x54442d18
 8004a4c:	3fe921fb 	.word	0x3fe921fb
 8004a50:	08005140 	.word	0x08005140
 8004a54:	08005158 	.word	0x08005158
 8004a58:	54442d18 	.word	0x54442d18
 8004a5c:	c00921fb 	.word	0xc00921fb
 8004a60:	54442d18 	.word	0x54442d18
 8004a64:	bff921fb 	.word	0xbff921fb
 8004a68:	7ff00000 	.word	0x7ff00000

08004a6c <__ieee754_sqrt>:
 8004a6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a70:	ec55 4b10 	vmov	r4, r5, d0
 8004a74:	4e55      	ldr	r6, [pc, #340]	; (8004bcc <__ieee754_sqrt+0x160>)
 8004a76:	43ae      	bics	r6, r5
 8004a78:	ee10 0a10 	vmov	r0, s0
 8004a7c:	ee10 3a10 	vmov	r3, s0
 8004a80:	462a      	mov	r2, r5
 8004a82:	4629      	mov	r1, r5
 8004a84:	d110      	bne.n	8004aa8 <__ieee754_sqrt+0x3c>
 8004a86:	ee10 2a10 	vmov	r2, s0
 8004a8a:	462b      	mov	r3, r5
 8004a8c:	f7fb fd58 	bl	8000540 <__aeabi_dmul>
 8004a90:	4602      	mov	r2, r0
 8004a92:	460b      	mov	r3, r1
 8004a94:	4620      	mov	r0, r4
 8004a96:	4629      	mov	r1, r5
 8004a98:	f7fb fb9c 	bl	80001d4 <__adddf3>
 8004a9c:	4604      	mov	r4, r0
 8004a9e:	460d      	mov	r5, r1
 8004aa0:	ec45 4b10 	vmov	d0, r4, r5
 8004aa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004aa8:	2d00      	cmp	r5, #0
 8004aaa:	dc10      	bgt.n	8004ace <__ieee754_sqrt+0x62>
 8004aac:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8004ab0:	4330      	orrs	r0, r6
 8004ab2:	d0f5      	beq.n	8004aa0 <__ieee754_sqrt+0x34>
 8004ab4:	b15d      	cbz	r5, 8004ace <__ieee754_sqrt+0x62>
 8004ab6:	ee10 2a10 	vmov	r2, s0
 8004aba:	462b      	mov	r3, r5
 8004abc:	ee10 0a10 	vmov	r0, s0
 8004ac0:	f7fb fb86 	bl	80001d0 <__aeabi_dsub>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	460b      	mov	r3, r1
 8004ac8:	f7fb fe64 	bl	8000794 <__aeabi_ddiv>
 8004acc:	e7e6      	b.n	8004a9c <__ieee754_sqrt+0x30>
 8004ace:	1512      	asrs	r2, r2, #20
 8004ad0:	d074      	beq.n	8004bbc <__ieee754_sqrt+0x150>
 8004ad2:	07d4      	lsls	r4, r2, #31
 8004ad4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8004ad8:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8004adc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8004ae0:	bf5e      	ittt	pl
 8004ae2:	0fda      	lsrpl	r2, r3, #31
 8004ae4:	005b      	lslpl	r3, r3, #1
 8004ae6:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8004aea:	2400      	movs	r4, #0
 8004aec:	0fda      	lsrs	r2, r3, #31
 8004aee:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8004af2:	107f      	asrs	r7, r7, #1
 8004af4:	005b      	lsls	r3, r3, #1
 8004af6:	2516      	movs	r5, #22
 8004af8:	4620      	mov	r0, r4
 8004afa:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004afe:	1886      	adds	r6, r0, r2
 8004b00:	428e      	cmp	r6, r1
 8004b02:	bfde      	ittt	le
 8004b04:	1b89      	suble	r1, r1, r6
 8004b06:	18b0      	addle	r0, r6, r2
 8004b08:	18a4      	addle	r4, r4, r2
 8004b0a:	0049      	lsls	r1, r1, #1
 8004b0c:	3d01      	subs	r5, #1
 8004b0e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8004b12:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8004b16:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004b1a:	d1f0      	bne.n	8004afe <__ieee754_sqrt+0x92>
 8004b1c:	462a      	mov	r2, r5
 8004b1e:	f04f 0e20 	mov.w	lr, #32
 8004b22:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8004b26:	4281      	cmp	r1, r0
 8004b28:	eb06 0c05 	add.w	ip, r6, r5
 8004b2c:	dc02      	bgt.n	8004b34 <__ieee754_sqrt+0xc8>
 8004b2e:	d113      	bne.n	8004b58 <__ieee754_sqrt+0xec>
 8004b30:	459c      	cmp	ip, r3
 8004b32:	d811      	bhi.n	8004b58 <__ieee754_sqrt+0xec>
 8004b34:	f1bc 0f00 	cmp.w	ip, #0
 8004b38:	eb0c 0506 	add.w	r5, ip, r6
 8004b3c:	da43      	bge.n	8004bc6 <__ieee754_sqrt+0x15a>
 8004b3e:	2d00      	cmp	r5, #0
 8004b40:	db41      	blt.n	8004bc6 <__ieee754_sqrt+0x15a>
 8004b42:	f100 0801 	add.w	r8, r0, #1
 8004b46:	1a09      	subs	r1, r1, r0
 8004b48:	459c      	cmp	ip, r3
 8004b4a:	bf88      	it	hi
 8004b4c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8004b50:	eba3 030c 	sub.w	r3, r3, ip
 8004b54:	4432      	add	r2, r6
 8004b56:	4640      	mov	r0, r8
 8004b58:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8004b5c:	f1be 0e01 	subs.w	lr, lr, #1
 8004b60:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8004b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004b68:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8004b6c:	d1db      	bne.n	8004b26 <__ieee754_sqrt+0xba>
 8004b6e:	430b      	orrs	r3, r1
 8004b70:	d006      	beq.n	8004b80 <__ieee754_sqrt+0x114>
 8004b72:	1c50      	adds	r0, r2, #1
 8004b74:	bf13      	iteet	ne
 8004b76:	3201      	addne	r2, #1
 8004b78:	3401      	addeq	r4, #1
 8004b7a:	4672      	moveq	r2, lr
 8004b7c:	f022 0201 	bicne.w	r2, r2, #1
 8004b80:	1063      	asrs	r3, r4, #1
 8004b82:	0852      	lsrs	r2, r2, #1
 8004b84:	07e1      	lsls	r1, r4, #31
 8004b86:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8004b8a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8004b8e:	bf48      	it	mi
 8004b90:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8004b94:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8004b98:	4614      	mov	r4, r2
 8004b9a:	e781      	b.n	8004aa0 <__ieee754_sqrt+0x34>
 8004b9c:	0ad9      	lsrs	r1, r3, #11
 8004b9e:	3815      	subs	r0, #21
 8004ba0:	055b      	lsls	r3, r3, #21
 8004ba2:	2900      	cmp	r1, #0
 8004ba4:	d0fa      	beq.n	8004b9c <__ieee754_sqrt+0x130>
 8004ba6:	02cd      	lsls	r5, r1, #11
 8004ba8:	d50a      	bpl.n	8004bc0 <__ieee754_sqrt+0x154>
 8004baa:	f1c2 0420 	rsb	r4, r2, #32
 8004bae:	fa23 f404 	lsr.w	r4, r3, r4
 8004bb2:	1e55      	subs	r5, r2, #1
 8004bb4:	4093      	lsls	r3, r2
 8004bb6:	4321      	orrs	r1, r4
 8004bb8:	1b42      	subs	r2, r0, r5
 8004bba:	e78a      	b.n	8004ad2 <__ieee754_sqrt+0x66>
 8004bbc:	4610      	mov	r0, r2
 8004bbe:	e7f0      	b.n	8004ba2 <__ieee754_sqrt+0x136>
 8004bc0:	0049      	lsls	r1, r1, #1
 8004bc2:	3201      	adds	r2, #1
 8004bc4:	e7ef      	b.n	8004ba6 <__ieee754_sqrt+0x13a>
 8004bc6:	4680      	mov	r8, r0
 8004bc8:	e7bd      	b.n	8004b46 <__ieee754_sqrt+0xda>
 8004bca:	bf00      	nop
 8004bcc:	7ff00000 	.word	0x7ff00000

08004bd0 <__ieee754_asinf>:
 8004bd0:	b538      	push	{r3, r4, r5, lr}
 8004bd2:	ee10 5a10 	vmov	r5, s0
 8004bd6:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8004bda:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8004bde:	ed2d 8b04 	vpush	{d8-d9}
 8004be2:	d10c      	bne.n	8004bfe <__ieee754_asinf+0x2e>
 8004be4:	eddf 7a5d 	vldr	s15, [pc, #372]	; 8004d5c <__ieee754_asinf+0x18c>
 8004be8:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8004d60 <__ieee754_asinf+0x190>
 8004bec:	ee60 7a27 	vmul.f32	s15, s0, s15
 8004bf0:	eee0 7a07 	vfma.f32	s15, s0, s14
 8004bf4:	eeb0 0a67 	vmov.f32	s0, s15
 8004bf8:	ecbd 8b04 	vpop	{d8-d9}
 8004bfc:	bd38      	pop	{r3, r4, r5, pc}
 8004bfe:	dd04      	ble.n	8004c0a <__ieee754_asinf+0x3a>
 8004c00:	ee70 7a40 	vsub.f32	s15, s0, s0
 8004c04:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8004c08:	e7f6      	b.n	8004bf8 <__ieee754_asinf+0x28>
 8004c0a:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8004c0e:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8004c12:	da0b      	bge.n	8004c2c <__ieee754_asinf+0x5c>
 8004c14:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8004c18:	da52      	bge.n	8004cc0 <__ieee754_asinf+0xf0>
 8004c1a:	eddf 7a52 	vldr	s15, [pc, #328]	; 8004d64 <__ieee754_asinf+0x194>
 8004c1e:	ee70 7a27 	vadd.f32	s15, s0, s15
 8004c22:	eef4 7ae8 	vcmpe.f32	s15, s17
 8004c26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c2a:	dce5      	bgt.n	8004bf8 <__ieee754_asinf+0x28>
 8004c2c:	f000 fa2e 	bl	800508c <fabsf>
 8004c30:	ee38 0ac0 	vsub.f32	s0, s17, s0
 8004c34:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8004c38:	ee20 8a08 	vmul.f32	s16, s0, s16
 8004c3c:	eddf 7a4a 	vldr	s15, [pc, #296]	; 8004d68 <__ieee754_asinf+0x198>
 8004c40:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8004d6c <__ieee754_asinf+0x19c>
 8004c44:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 8004d70 <__ieee754_asinf+0x1a0>
 8004c48:	eea8 7a27 	vfma.f32	s14, s16, s15
 8004c4c:	eddf 7a49 	vldr	s15, [pc, #292]	; 8004d74 <__ieee754_asinf+0x1a4>
 8004c50:	eee7 7a08 	vfma.f32	s15, s14, s16
 8004c54:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8004d78 <__ieee754_asinf+0x1a8>
 8004c58:	eea7 7a88 	vfma.f32	s14, s15, s16
 8004c5c:	eddf 7a47 	vldr	s15, [pc, #284]	; 8004d7c <__ieee754_asinf+0x1ac>
 8004c60:	eee7 7a08 	vfma.f32	s15, s14, s16
 8004c64:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8004d80 <__ieee754_asinf+0x1b0>
 8004c68:	eea7 9a88 	vfma.f32	s18, s15, s16
 8004c6c:	eddf 7a45 	vldr	s15, [pc, #276]	; 8004d84 <__ieee754_asinf+0x1b4>
 8004c70:	eee8 7a07 	vfma.f32	s15, s16, s14
 8004c74:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8004d88 <__ieee754_asinf+0x1b8>
 8004c78:	eea7 7a88 	vfma.f32	s14, s15, s16
 8004c7c:	eddf 7a43 	vldr	s15, [pc, #268]	; 8004d8c <__ieee754_asinf+0x1bc>
 8004c80:	eee7 7a08 	vfma.f32	s15, s14, s16
 8004c84:	eeb0 0a48 	vmov.f32	s0, s16
 8004c88:	eee7 8a88 	vfma.f32	s17, s15, s16
 8004c8c:	f000 f926 	bl	8004edc <__ieee754_sqrtf>
 8004c90:	4b3f      	ldr	r3, [pc, #252]	; (8004d90 <__ieee754_asinf+0x1c0>)
 8004c92:	ee29 9a08 	vmul.f32	s18, s18, s16
 8004c96:	429c      	cmp	r4, r3
 8004c98:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8004c9c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8004ca0:	dd3d      	ble.n	8004d1e <__ieee754_asinf+0x14e>
 8004ca2:	eea0 0a06 	vfma.f32	s0, s0, s12
 8004ca6:	eddf 7a3b 	vldr	s15, [pc, #236]	; 8004d94 <__ieee754_asinf+0x1c4>
 8004caa:	eee0 7a26 	vfma.f32	s15, s0, s13
 8004cae:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8004d60 <__ieee754_asinf+0x190>
 8004cb2:	ee30 0a67 	vsub.f32	s0, s0, s15
 8004cb6:	2d00      	cmp	r5, #0
 8004cb8:	bfd8      	it	le
 8004cba:	eeb1 0a40 	vnegle.f32	s0, s0
 8004cbe:	e79b      	b.n	8004bf8 <__ieee754_asinf+0x28>
 8004cc0:	ee60 7a00 	vmul.f32	s15, s0, s0
 8004cc4:	eddf 6a28 	vldr	s13, [pc, #160]	; 8004d68 <__ieee754_asinf+0x198>
 8004cc8:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8004d6c <__ieee754_asinf+0x19c>
 8004ccc:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 8004d80 <__ieee754_asinf+0x1b0>
 8004cd0:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8004cd4:	eddf 6a27 	vldr	s13, [pc, #156]	; 8004d74 <__ieee754_asinf+0x1a4>
 8004cd8:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004cdc:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8004d78 <__ieee754_asinf+0x1a8>
 8004ce0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004ce4:	eddf 6a25 	vldr	s13, [pc, #148]	; 8004d7c <__ieee754_asinf+0x1ac>
 8004ce8:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004cec:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8004d70 <__ieee754_asinf+0x1a0>
 8004cf0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004cf4:	eddf 6a23 	vldr	s13, [pc, #140]	; 8004d84 <__ieee754_asinf+0x1b4>
 8004cf8:	eee7 6a86 	vfma.f32	s13, s15, s12
 8004cfc:	ed9f 6a22 	vldr	s12, [pc, #136]	; 8004d88 <__ieee754_asinf+0x1b8>
 8004d00:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8004d04:	eddf 6a21 	vldr	s13, [pc, #132]	; 8004d8c <__ieee754_asinf+0x1bc>
 8004d08:	eee6 6a27 	vfma.f32	s13, s12, s15
 8004d0c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004d10:	eee6 8aa7 	vfma.f32	s17, s13, s15
 8004d14:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8004d18:	eea0 0a27 	vfma.f32	s0, s0, s15
 8004d1c:	e76c      	b.n	8004bf8 <__ieee754_asinf+0x28>
 8004d1e:	ee10 3a10 	vmov	r3, s0
 8004d22:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004d26:	f023 030f 	bic.w	r3, r3, #15
 8004d2a:	ee07 3a10 	vmov	s14, r3
 8004d2e:	eea7 8a47 	vfms.f32	s16, s14, s14
 8004d32:	ee70 7a07 	vadd.f32	s15, s0, s14
 8004d36:	ee30 0a00 	vadd.f32	s0, s0, s0
 8004d3a:	eec8 5a27 	vdiv.f32	s11, s16, s15
 8004d3e:	eddf 7a07 	vldr	s15, [pc, #28]	; 8004d5c <__ieee754_asinf+0x18c>
 8004d42:	eee5 7ae6 	vfms.f32	s15, s11, s13
 8004d46:	eed0 7a06 	vfnms.f32	s15, s0, s12
 8004d4a:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8004d98 <__ieee754_asinf+0x1c8>
 8004d4e:	eeb0 6a40 	vmov.f32	s12, s0
 8004d52:	eea7 6a66 	vfms.f32	s12, s14, s13
 8004d56:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8004d5a:	e7aa      	b.n	8004cb2 <__ieee754_asinf+0xe2>
 8004d5c:	b33bbd2e 	.word	0xb33bbd2e
 8004d60:	3fc90fdb 	.word	0x3fc90fdb
 8004d64:	7149f2ca 	.word	0x7149f2ca
 8004d68:	3811ef08 	.word	0x3811ef08
 8004d6c:	3a4f7f04 	.word	0x3a4f7f04
 8004d70:	3e2aaaab 	.word	0x3e2aaaab
 8004d74:	bd241146 	.word	0xbd241146
 8004d78:	3e4e0aa8 	.word	0x3e4e0aa8
 8004d7c:	bea6b090 	.word	0xbea6b090
 8004d80:	3d9dc62e 	.word	0x3d9dc62e
 8004d84:	bf303361 	.word	0xbf303361
 8004d88:	4001572d 	.word	0x4001572d
 8004d8c:	c019d139 	.word	0xc019d139
 8004d90:	3f799999 	.word	0x3f799999
 8004d94:	333bbd2e 	.word	0x333bbd2e
 8004d98:	3f490fdb 	.word	0x3f490fdb

08004d9c <__ieee754_atan2f>:
 8004d9c:	ee10 2a90 	vmov	r2, s1
 8004da0:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8004da4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8004da8:	b510      	push	{r4, lr}
 8004daa:	eef0 7a40 	vmov.f32	s15, s0
 8004dae:	dc06      	bgt.n	8004dbe <__ieee754_atan2f+0x22>
 8004db0:	ee10 0a10 	vmov	r0, s0
 8004db4:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8004db8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8004dbc:	dd04      	ble.n	8004dc8 <__ieee754_atan2f+0x2c>
 8004dbe:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8004dc2:	eeb0 0a67 	vmov.f32	s0, s15
 8004dc6:	bd10      	pop	{r4, pc}
 8004dc8:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8004dcc:	d103      	bne.n	8004dd6 <__ieee754_atan2f+0x3a>
 8004dce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004dd2:	f000 b887 	b.w	8004ee4 <atanf>
 8004dd6:	1794      	asrs	r4, r2, #30
 8004dd8:	f004 0402 	and.w	r4, r4, #2
 8004ddc:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8004de0:	b943      	cbnz	r3, 8004df4 <__ieee754_atan2f+0x58>
 8004de2:	2c02      	cmp	r4, #2
 8004de4:	d05e      	beq.n	8004ea4 <__ieee754_atan2f+0x108>
 8004de6:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8004eb8 <__ieee754_atan2f+0x11c>
 8004dea:	2c03      	cmp	r4, #3
 8004dec:	bf08      	it	eq
 8004dee:	eef0 7a47 	vmoveq.f32	s15, s14
 8004df2:	e7e6      	b.n	8004dc2 <__ieee754_atan2f+0x26>
 8004df4:	b941      	cbnz	r1, 8004e08 <__ieee754_atan2f+0x6c>
 8004df6:	eddf 7a31 	vldr	s15, [pc, #196]	; 8004ebc <__ieee754_atan2f+0x120>
 8004dfa:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8004ec0 <__ieee754_atan2f+0x124>
 8004dfe:	2800      	cmp	r0, #0
 8004e00:	bfb8      	it	lt
 8004e02:	eef0 7a40 	vmovlt.f32	s15, s0
 8004e06:	e7dc      	b.n	8004dc2 <__ieee754_atan2f+0x26>
 8004e08:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8004e0c:	d110      	bne.n	8004e30 <__ieee754_atan2f+0x94>
 8004e0e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8004e12:	f104 34ff 	add.w	r4, r4, #4294967295
 8004e16:	d107      	bne.n	8004e28 <__ieee754_atan2f+0x8c>
 8004e18:	2c02      	cmp	r4, #2
 8004e1a:	d846      	bhi.n	8004eaa <__ieee754_atan2f+0x10e>
 8004e1c:	4b29      	ldr	r3, [pc, #164]	; (8004ec4 <__ieee754_atan2f+0x128>)
 8004e1e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8004e22:	edd4 7a00 	vldr	s15, [r4]
 8004e26:	e7cc      	b.n	8004dc2 <__ieee754_atan2f+0x26>
 8004e28:	2c02      	cmp	r4, #2
 8004e2a:	d841      	bhi.n	8004eb0 <__ieee754_atan2f+0x114>
 8004e2c:	4b26      	ldr	r3, [pc, #152]	; (8004ec8 <__ieee754_atan2f+0x12c>)
 8004e2e:	e7f6      	b.n	8004e1e <__ieee754_atan2f+0x82>
 8004e30:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8004e34:	d0df      	beq.n	8004df6 <__ieee754_atan2f+0x5a>
 8004e36:	1a5b      	subs	r3, r3, r1
 8004e38:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8004e3c:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8004e40:	da1a      	bge.n	8004e78 <__ieee754_atan2f+0xdc>
 8004e42:	2a00      	cmp	r2, #0
 8004e44:	da01      	bge.n	8004e4a <__ieee754_atan2f+0xae>
 8004e46:	313c      	adds	r1, #60	; 0x3c
 8004e48:	db19      	blt.n	8004e7e <__ieee754_atan2f+0xe2>
 8004e4a:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8004e4e:	f000 f91d 	bl	800508c <fabsf>
 8004e52:	f000 f847 	bl	8004ee4 <atanf>
 8004e56:	eef0 7a40 	vmov.f32	s15, s0
 8004e5a:	2c01      	cmp	r4, #1
 8004e5c:	d012      	beq.n	8004e84 <__ieee754_atan2f+0xe8>
 8004e5e:	2c02      	cmp	r4, #2
 8004e60:	d017      	beq.n	8004e92 <__ieee754_atan2f+0xf6>
 8004e62:	2c00      	cmp	r4, #0
 8004e64:	d0ad      	beq.n	8004dc2 <__ieee754_atan2f+0x26>
 8004e66:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8004ecc <__ieee754_atan2f+0x130>
 8004e6a:	ee77 7a80 	vadd.f32	s15, s15, s0
 8004e6e:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8004ed0 <__ieee754_atan2f+0x134>
 8004e72:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8004e76:	e7a4      	b.n	8004dc2 <__ieee754_atan2f+0x26>
 8004e78:	eddf 7a10 	vldr	s15, [pc, #64]	; 8004ebc <__ieee754_atan2f+0x120>
 8004e7c:	e7ed      	b.n	8004e5a <__ieee754_atan2f+0xbe>
 8004e7e:	eddf 7a15 	vldr	s15, [pc, #84]	; 8004ed4 <__ieee754_atan2f+0x138>
 8004e82:	e7ea      	b.n	8004e5a <__ieee754_atan2f+0xbe>
 8004e84:	ee17 3a90 	vmov	r3, s15
 8004e88:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004e8c:	ee07 3a90 	vmov	s15, r3
 8004e90:	e797      	b.n	8004dc2 <__ieee754_atan2f+0x26>
 8004e92:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8004ecc <__ieee754_atan2f+0x130>
 8004e96:	ee77 7a80 	vadd.f32	s15, s15, s0
 8004e9a:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8004ed0 <__ieee754_atan2f+0x134>
 8004e9e:	ee70 7a67 	vsub.f32	s15, s0, s15
 8004ea2:	e78e      	b.n	8004dc2 <__ieee754_atan2f+0x26>
 8004ea4:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8004ed0 <__ieee754_atan2f+0x134>
 8004ea8:	e78b      	b.n	8004dc2 <__ieee754_atan2f+0x26>
 8004eaa:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8004ed8 <__ieee754_atan2f+0x13c>
 8004eae:	e788      	b.n	8004dc2 <__ieee754_atan2f+0x26>
 8004eb0:	eddf 7a08 	vldr	s15, [pc, #32]	; 8004ed4 <__ieee754_atan2f+0x138>
 8004eb4:	e785      	b.n	8004dc2 <__ieee754_atan2f+0x26>
 8004eb6:	bf00      	nop
 8004eb8:	c0490fdb 	.word	0xc0490fdb
 8004ebc:	3fc90fdb 	.word	0x3fc90fdb
 8004ec0:	bfc90fdb 	.word	0xbfc90fdb
 8004ec4:	08005170 	.word	0x08005170
 8004ec8:	0800517c 	.word	0x0800517c
 8004ecc:	33bbbd2e 	.word	0x33bbbd2e
 8004ed0:	40490fdb 	.word	0x40490fdb
 8004ed4:	00000000 	.word	0x00000000
 8004ed8:	3f490fdb 	.word	0x3f490fdb

08004edc <__ieee754_sqrtf>:
 8004edc:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8004ee0:	4770      	bx	lr
	...

08004ee4 <atanf>:
 8004ee4:	b538      	push	{r3, r4, r5, lr}
 8004ee6:	ee10 5a10 	vmov	r5, s0
 8004eea:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8004eee:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8004ef2:	eef0 7a40 	vmov.f32	s15, s0
 8004ef6:	db10      	blt.n	8004f1a <atanf+0x36>
 8004ef8:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8004efc:	dd04      	ble.n	8004f08 <atanf+0x24>
 8004efe:	ee70 7a00 	vadd.f32	s15, s0, s0
 8004f02:	eeb0 0a67 	vmov.f32	s0, s15
 8004f06:	bd38      	pop	{r3, r4, r5, pc}
 8004f08:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8005040 <atanf+0x15c>
 8004f0c:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8005044 <atanf+0x160>
 8004f10:	2d00      	cmp	r5, #0
 8004f12:	bfd8      	it	le
 8004f14:	eef0 7a40 	vmovle.f32	s15, s0
 8004f18:	e7f3      	b.n	8004f02 <atanf+0x1e>
 8004f1a:	4b4b      	ldr	r3, [pc, #300]	; (8005048 <atanf+0x164>)
 8004f1c:	429c      	cmp	r4, r3
 8004f1e:	dc10      	bgt.n	8004f42 <atanf+0x5e>
 8004f20:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8004f24:	da0a      	bge.n	8004f3c <atanf+0x58>
 8004f26:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800504c <atanf+0x168>
 8004f2a:	ee30 7a07 	vadd.f32	s14, s0, s14
 8004f2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f32:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8004f36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f3a:	dce2      	bgt.n	8004f02 <atanf+0x1e>
 8004f3c:	f04f 33ff 	mov.w	r3, #4294967295
 8004f40:	e013      	b.n	8004f6a <atanf+0x86>
 8004f42:	f000 f8a3 	bl	800508c <fabsf>
 8004f46:	4b42      	ldr	r3, [pc, #264]	; (8005050 <atanf+0x16c>)
 8004f48:	429c      	cmp	r4, r3
 8004f4a:	dc4f      	bgt.n	8004fec <atanf+0x108>
 8004f4c:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8004f50:	429c      	cmp	r4, r3
 8004f52:	dc41      	bgt.n	8004fd8 <atanf+0xf4>
 8004f54:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8004f58:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004f5c:	eea0 7a27 	vfma.f32	s14, s0, s15
 8004f60:	2300      	movs	r3, #0
 8004f62:	ee30 0a27 	vadd.f32	s0, s0, s15
 8004f66:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8004f6a:	1c5a      	adds	r2, r3, #1
 8004f6c:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8004f70:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8005054 <atanf+0x170>
 8004f74:	eddf 5a38 	vldr	s11, [pc, #224]	; 8005058 <atanf+0x174>
 8004f78:	ed9f 5a38 	vldr	s10, [pc, #224]	; 800505c <atanf+0x178>
 8004f7c:	ee66 6a06 	vmul.f32	s13, s12, s12
 8004f80:	eee6 5a87 	vfma.f32	s11, s13, s14
 8004f84:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8005060 <atanf+0x17c>
 8004f88:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8004f8c:	eddf 5a35 	vldr	s11, [pc, #212]	; 8005064 <atanf+0x180>
 8004f90:	eee7 5a26 	vfma.f32	s11, s14, s13
 8004f94:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8005068 <atanf+0x184>
 8004f98:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8004f9c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800506c <atanf+0x188>
 8004fa0:	eee7 5a26 	vfma.f32	s11, s14, s13
 8004fa4:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8005070 <atanf+0x18c>
 8004fa8:	eea6 5a87 	vfma.f32	s10, s13, s14
 8004fac:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8005074 <atanf+0x190>
 8004fb0:	eea5 7a26 	vfma.f32	s14, s10, s13
 8004fb4:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8005078 <atanf+0x194>
 8004fb8:	eea7 5a26 	vfma.f32	s10, s14, s13
 8004fbc:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800507c <atanf+0x198>
 8004fc0:	eea5 7a26 	vfma.f32	s14, s10, s13
 8004fc4:	ee27 7a26 	vmul.f32	s14, s14, s13
 8004fc8:	eea5 7a86 	vfma.f32	s14, s11, s12
 8004fcc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004fd0:	d121      	bne.n	8005016 <atanf+0x132>
 8004fd2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004fd6:	e794      	b.n	8004f02 <atanf+0x1e>
 8004fd8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8004fdc:	ee30 7a67 	vsub.f32	s14, s0, s15
 8004fe0:	ee30 0a27 	vadd.f32	s0, s0, s15
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8004fea:	e7be      	b.n	8004f6a <atanf+0x86>
 8004fec:	4b24      	ldr	r3, [pc, #144]	; (8005080 <atanf+0x19c>)
 8004fee:	429c      	cmp	r4, r3
 8004ff0:	dc0b      	bgt.n	800500a <atanf+0x126>
 8004ff2:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8004ff6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004ffa:	eea0 7a27 	vfma.f32	s14, s0, s15
 8004ffe:	2302      	movs	r3, #2
 8005000:	ee70 6a67 	vsub.f32	s13, s0, s15
 8005004:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005008:	e7af      	b.n	8004f6a <atanf+0x86>
 800500a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800500e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8005012:	2303      	movs	r3, #3
 8005014:	e7a9      	b.n	8004f6a <atanf+0x86>
 8005016:	4a1b      	ldr	r2, [pc, #108]	; (8005084 <atanf+0x1a0>)
 8005018:	491b      	ldr	r1, [pc, #108]	; (8005088 <atanf+0x1a4>)
 800501a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800501e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8005022:	ed93 0a00 	vldr	s0, [r3]
 8005026:	ee37 7a40 	vsub.f32	s14, s14, s0
 800502a:	ed92 0a00 	vldr	s0, [r2]
 800502e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005032:	2d00      	cmp	r5, #0
 8005034:	ee70 7a67 	vsub.f32	s15, s0, s15
 8005038:	bfb8      	it	lt
 800503a:	eef1 7a67 	vneglt.f32	s15, s15
 800503e:	e760      	b.n	8004f02 <atanf+0x1e>
 8005040:	3fc90fdb 	.word	0x3fc90fdb
 8005044:	bfc90fdb 	.word	0xbfc90fdb
 8005048:	3edfffff 	.word	0x3edfffff
 800504c:	7149f2ca 	.word	0x7149f2ca
 8005050:	3f97ffff 	.word	0x3f97ffff
 8005054:	3c8569d7 	.word	0x3c8569d7
 8005058:	3d4bda59 	.word	0x3d4bda59
 800505c:	bd6ef16b 	.word	0xbd6ef16b
 8005060:	3d886b35 	.word	0x3d886b35
 8005064:	3dba2e6e 	.word	0x3dba2e6e
 8005068:	3e124925 	.word	0x3e124925
 800506c:	3eaaaaab 	.word	0x3eaaaaab
 8005070:	bd15a221 	.word	0xbd15a221
 8005074:	bd9d8795 	.word	0xbd9d8795
 8005078:	bde38e38 	.word	0xbde38e38
 800507c:	be4ccccd 	.word	0xbe4ccccd
 8005080:	401bffff 	.word	0x401bffff
 8005084:	08005188 	.word	0x08005188
 8005088:	08005198 	.word	0x08005198

0800508c <fabsf>:
 800508c:	ee10 3a10 	vmov	r3, s0
 8005090:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005094:	ee00 3a10 	vmov	s0, r3
 8005098:	4770      	bx	lr
	...

0800509c <nanf>:
 800509c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80050a4 <nanf+0x8>
 80050a0:	4770      	bx	lr
 80050a2:	bf00      	nop
 80050a4:	7fc00000 	.word	0x7fc00000

080050a8 <_init>:
 80050a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050aa:	bf00      	nop
 80050ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050ae:	bc08      	pop	{r3}
 80050b0:	469e      	mov	lr, r3
 80050b2:	4770      	bx	lr

080050b4 <_fini>:
 80050b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050b6:	bf00      	nop
 80050b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050ba:	bc08      	pop	{r3}
 80050bc:	469e      	mov	lr, r3
 80050be:	4770      	bx	lr
